; ModuleID = '/local/mnt2/workspace2/mnadeem/llvm/llvm-test-suite/SingleSource/UnitTests/matrix-types-spec.cpp'
source_filename = "/local/mnt2/workspace2/mnadeem/llvm/llvm-test-suite/SingleSource/UnitTests/matrix-types-spec.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::basic_ostream" = type { ptr, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", ptr, i32 }>
%"class.std::__1::ios_base" = type { ptr, i32, i64, i64, i32, i32, ptr, ptr, ptr, ptr, i64, i64, ptr, i64, i64, ptr, i64, i64 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.std::__1::linear_congruential_engine" = type { i64 }
%"class.std::__1::uniform_int_distribution" = type { %"class.std::__1::uniform_int_distribution<unsigned int>::param_type" }
%"class.std::__1::uniform_int_distribution<unsigned int>::param_type" = type { i32, i32 }
%"class.std::__1::locale" = type { ptr }
%"class.std::__1::basic_ostream<char>::sentry" = type { i8, ptr }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", ptr, i32, [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char>::__rep" }
%"struct.std::__1::basic_string<char>::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char>::__long" }
%"struct.std::__1::basic_string<char>::__long" = type { %struct.anon, i64, ptr }
%struct.anon = type { i64 }
%"struct.std::__1::basic_string<char>::__short" = type { %struct.anon.1, [0 x i8], [23 x i8] }
%struct.anon.1 = type { i8 }

$_Z13testTransposeIdLj3ELj10EEvv = comdat any

$_Z13testTransposeIfLj31ELj17EEvv = comdat any

$_Z13testTransposeIjLj8ELj7EEvv = comdat any

$_Z12testMultiplyIdLj10ELj21ELj23EEvv = comdat any

$_Z12testMultiplyIdLj25ELj19ELj11EEvv = comdat any

$_Z14expectMatrixEQIdLi0EEvPT_S1_jj = comdat any

$_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc = comdat any

$_ZNSt3__124__put_character_sequenceB7v170000IcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputB7v170000IcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$__clang_call_terminate = comdat any

$_Z13transposeSpecIfLj31ELj17EEvPT_S1_ = comdat any

$_Z14expectMatrixEQIfLi0EEvPT_S1_jj = comdat any

$_ZNSt3__124uniform_int_distributionIjEclINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEEjRT_RKNS1_10param_typeE = comdat any

$_Z12multiplySpecIdLj10ELj21ELj23EEvPT_S1_S1_ = comdat any

$_Z12multiplySpecIdLj25ELj19ELj11EEvPT_S1_S1_ = comdat any

@_ZNSt3__14cerrE = external global %"class.std::__1::basic_ostream", align 8
@.str = private unnamed_addr constant [13 x i8] c"mismatch at \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none) uwtable
define dso_local noundef zeroext i1 @_Z5fpcmpdddd(double noundef %V1, double noundef %V2, double noundef %AbsTolerance, double noundef %RelTolerance) local_unnamed_addr #0 {
entry:
  %sub = fsub double %V1, %V2
  %0 = tail call double @llvm.fabs.f64(double %sub)
  %cmp = fcmp ogt double %0, %AbsTolerance
  br i1 %cmp, label %if.then, label %if.end12

if.then:                                          ; preds = %entry
  %tobool = fcmp une double %V2, 0.000000e+00
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %div = fdiv double %V1, %V2
  %sub2 = fadd double %div, -1.000000e+00
  %1 = tail call double @llvm.fabs.f64(double %sub2)
  br label %if.end8

if.else:                                          ; preds = %if.then
  %tobool3 = fcmp une double %V1, 0.000000e+00
  br i1 %tobool3, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.else
  %div5 = fdiv double %V2, %V1
  %sub6 = fadd double %div5, -1.000000e+00
  %2 = tail call double @llvm.fabs.f64(double %sub6)
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then4, %if.then1
  %Diff.0 = phi double [ %1, %if.then1 ], [ %2, %if.then4 ], [ 0.000000e+00, %if.else ]
  %cmp9 = fcmp ule double %Diff.0, %RelTolerance
  br i1 %cmp9, label %if.end12, label %return

if.end12:                                         ; preds = %if.end8, %entry
  br label %return

return:                                           ; preds = %if.end8, %if.end12
  %retval.1 = phi i1 [ true, %if.end8 ], [ false, %if.end12 ]
  ret i1 %retval.1
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: norecurse uwtable
define dso_local noundef i32 @main() local_unnamed_addr #3 {
entry:
  %X.i20.sroa.0 = alloca [6 x double], align 16
  %Y.i.sroa.0 = alloca [6 x double], align 16
  %ResBase.i21 = alloca [9 x double], align 16
  %ResSpec.i22 = alloca [9 x double], align 16
  %ResBuiltin.i23 = alloca [9 x double], align 16
  %ResBase.i2 = alloca [12 x double], align 16
  %ResSpec.i3 = alloca [12 x double], align 16
  %ResBuiltin.i4 = alloca [12 x double], align 16
  %X.i.sroa.0 = alloca [6 x double], align 16
  %ResBase.i = alloca [9 x double], align 16
  %ResSpec.i = alloca [9 x double], align 16
  %ResBuiltin.i = alloca [9 x double], align 16
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %X.i.sroa.0)
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %ResBase.i) #16
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %ResSpec.i) #16
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %ResBuiltin.i) #16
  store <2 x double> <double 0xC020994489A2649C, double 0x401F5432EEFD8832>, ptr %X.i.sroa.0, align 16, !tbaa !5
  %X.i.sroa.0.16.arrayidx.i.2.i.sroa_idx133 = getelementptr inbounds i8, ptr %X.i.sroa.0, i64 16
  store <2 x double> <double 0xC018D32749E86D26, double 0xC0005193905C7B7C>, ptr %X.i.sroa.0.16.arrayidx.i.2.i.sroa_idx133, align 16, !tbaa !5
  %X.i.sroa.0.32.arrayidx.i.4.i.sroa_idx135 = getelementptr inbounds i8, ptr %X.i.sroa.0, i64 32
  store <2 x double> <double 0x40137B228FD7FD2E, double 0x3FF3532496069C14>, ptr %X.i.sroa.0.32.arrayidx.i.4.i.sroa_idx135, align 16, !tbaa !5
  %arrayidx.us.i.2.i = getelementptr inbounds double, ptr %ResBase.i, i64 6
  %arrayidx.us.i.1.1.i = getelementptr inbounds double, ptr %ResBase.i, i64 4
  %arrayidx.us.i.257.i = getelementptr inbounds double, ptr %ResBase.i, i64 2
  %arrayidx.us.i.2.2.i = getelementptr inbounds double, ptr %ResBase.i, i64 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(72) %ResSpec.i, i8 0, i64 72, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(72) %ResBuiltin.i, i8 0, i64 72, i1 false)
  store <2 x double> <double 0xC020994489A2649C, double 0xC0005193905C7B7C>, ptr %ResBase.i, align 16, !tbaa !5
  store <2 x double> <double 0x4018C3ECD0E037D5, double 0x401F5432EEFD8832>, ptr %arrayidx.us.i.257.i, align 16, !tbaa !5
  store <2 x double> <double 0x40137B228FD7FD2E, double 0x3FCDFBF0484E8F70>, ptr %arrayidx.us.i.1.1.i, align 16, !tbaa !5
  store <2 x double> <double 0xC018D32749E86D26, double 0x3FF3532496069C14>, ptr %arrayidx.us.i.2.i, align 16, !tbaa !5
  store double 0x4023CDAA70355820, ptr %arrayidx.us.i.2.2.i, align 16, !tbaa !5
  %X.i.sroa.0.0.X.i.sroa.0.0.col.load = load <3 x double>, ptr %X.i.sroa.0, align 16
  %X.i.sroa.0.24.arrayidx.i.3.i.sroa_idx134 = getelementptr inbounds i8, ptr %X.i.sroa.0, i64 24
  %X.i.sroa.0.24.X.i.sroa.0.24.col.load40 = load <3 x double>, ptr %X.i.sroa.0.24.arrayidx.i.3.i.sroa_idx134, align 8
  %0 = shufflevector <3 x double> %X.i.sroa.0.0.X.i.sroa.0.0.col.load, <3 x double> %X.i.sroa.0.24.X.i.sroa.0.24.col.load40, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %matins.2.2.i.i = shufflevector <6 x double> %0, <6 x double> <double 0x4018C3ECD0E037D5, double 0x3FCDFBF0484E8F70, double 0x4023CDAA70355820, double poison, double poison, double poison>, <9 x i32> <i32 0, i32 3, i32 6, i32 1, i32 4, i32 7, i32 2, i32 5, i32 8>
  %split = shufflevector <9 x double> %matins.2.2.i.i, <9 x double> poison, <3 x i32> <i32 0, i32 1, i32 2>
  %split43 = shufflevector <9 x double> %matins.2.2.i.i, <9 x double> poison, <3 x i32> <i32 3, i32 4, i32 5>
  %split44 = shufflevector <9 x double> %matins.2.2.i.i, <9 x double> poison, <3 x i32> <i32 6, i32 7, i32 8>
  store <3 x double> %split, ptr %ResSpec.i, align 16
  %vec.gep45 = getelementptr inbounds double, ptr %ResSpec.i, i64 3
  store <3 x double> %split43, ptr %vec.gep45, align 8
  %vec.gep46 = getelementptr inbounds double, ptr %ResSpec.i, i64 6
  store <3 x double> %split44, ptr %vec.gep46, align 16
  %1 = shufflevector <3 x double> %X.i.sroa.0.0.X.i.sroa.0.0.col.load, <3 x double> %X.i.sroa.0.24.X.i.sroa.0.24.col.load40, <3 x i32> <i32 0, i32 3, i32 undef>
  %2 = insertelement <3 x double> %1, double 0x4018C3ECD0E037D5, i64 2
  %3 = shufflevector <3 x double> %X.i.sroa.0.0.X.i.sroa.0.0.col.load, <3 x double> %X.i.sroa.0.24.X.i.sroa.0.24.col.load40, <3 x i32> <i32 1, i32 4, i32 undef>
  %4 = insertelement <3 x double> %3, double 0x3FCDFBF0484E8F70, i64 2
  %5 = shufflevector <3 x double> %X.i.sroa.0.0.X.i.sroa.0.0.col.load, <3 x double> %X.i.sroa.0.24.X.i.sroa.0.24.col.load40, <3 x i32> <i32 2, i32 5, i32 undef>
  %6 = insertelement <3 x double> %5, double 0x4023CDAA70355820, i64 2
  store <3 x double> %2, ptr %ResBuiltin.i, align 16
  %vec.gep47 = getelementptr inbounds double, ptr %ResBuiltin.i, i64 3
  store <3 x double> %4, ptr %vec.gep47, align 8
  %vec.gep48 = getelementptr inbounds double, ptr %ResBuiltin.i, i64 6
  store <3 x double> %6, ptr %vec.gep48, align 16
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase.i, ptr noundef nonnull %ResBuiltin.i, i32 noundef 3, i32 noundef 3)
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase.i, ptr noundef nonnull %ResSpec.i, i32 noundef 3, i32 noundef 3)
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %ResBuiltin.i) #16
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %ResSpec.i) #16
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %ResBase.i) #16
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %X.i.sroa.0)
  call void @_Z13testTransposeIdLj3ELj10EEvv()
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %ResBase.i2) #16
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %ResSpec.i3) #16
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %ResBuiltin.i4) #16
  %arrayidx.us.i.2.i14 = getelementptr inbounds double, ptr %ResBase.i2, i64 6
  %arrayidx.us.i.1.1.i15 = getelementptr inbounds double, ptr %ResBase.i2, i64 4
  %arrayidx.us.i.3.1.i = getelementptr inbounds double, ptr %ResBase.i2, i64 10
  %arrayidx.us.i.258.i = getelementptr inbounds double, ptr %ResBase.i2, i64 2
  %arrayidx.us.i.2.2.i18 = getelementptr inbounds double, ptr %ResBase.i2, i64 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(96) %ResSpec.i3, i8 0, i64 96, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(96) %ResBuiltin.i4, i8 0, i64 96, i1 false)
  store <2 x double> <double 0xC020994489A2649C, double 0x40137B228FD7FD2E>, ptr %ResBase.i2, align 16, !tbaa !5
  store <2 x double> <double 0x4023CDAA70355820, double 0x401F5432EEFD8832>, ptr %arrayidx.us.i.258.i, align 16, !tbaa !5
  store <2 x double> <double 0x3FF3532496069C14, double 0x4022AA19B134C138>, ptr %arrayidx.us.i.1.1.i15, align 16, !tbaa !5
  store <2 x double> <double 0xC018D32749E86D26, double 0x4018C3ECD0E037D5>, ptr %arrayidx.us.i.2.i14, align 16, !tbaa !5
  store <2 x double> <double 0xBFF7A9EA8D20826A, double 0xC0005193905C7B7C>, ptr %arrayidx.us.i.2.2.i18, align 16, !tbaa !5
  store <2 x double> <double 0x3FCDFBF0484E8F70, double 0x40087AD3EE41C229>, ptr %arrayidx.us.i.3.1.i, align 16, !tbaa !5
  store <3 x double> <double 0xC020994489A2649C, double 0x40137B228FD7FD2E, double 0x4023CDAA70355820>, ptr %ResSpec.i3, align 16
  %vec.gep58 = getelementptr inbounds double, ptr %ResSpec.i3, i64 3
  store <3 x double> <double 0x401F5432EEFD8832, double 0x3FF3532496069C14, double 0x4022AA19B134C138>, ptr %vec.gep58, align 8
  %vec.gep59 = getelementptr inbounds double, ptr %ResSpec.i3, i64 6
  store <3 x double> <double 0xC018D32749E86D26, double 0x4018C3ECD0E037D5, double 0xBFF7A9EA8D20826A>, ptr %vec.gep59, align 16
  %vec.gep60 = getelementptr inbounds double, ptr %ResSpec.i3, i64 9
  store <3 x double> <double 0xC0005193905C7B7C, double 0x3FCDFBF0484E8F70, double 0x40087AD3EE41C229>, ptr %vec.gep60, align 8
  store <3 x double> <double 0xC020994489A2649C, double 0x40137B228FD7FD2E, double 0x4023CDAA70355820>, ptr %ResBuiltin.i4, align 16
  %vec.gep61 = getelementptr inbounds double, ptr %ResBuiltin.i4, i64 3
  store <3 x double> <double 0x401F5432EEFD8832, double 0x3FF3532496069C14, double 0x4022AA19B134C138>, ptr %vec.gep61, align 8
  %vec.gep62 = getelementptr inbounds double, ptr %ResBuiltin.i4, i64 6
  store <3 x double> <double 0xC018D32749E86D26, double 0x4018C3ECD0E037D5, double 0xBFF7A9EA8D20826A>, ptr %vec.gep62, align 16
  %vec.gep63 = getelementptr inbounds double, ptr %ResBuiltin.i4, i64 9
  store <3 x double> <double 0xC0005193905C7B7C, double 0x3FCDFBF0484E8F70, double 0x40087AD3EE41C229>, ptr %vec.gep63, align 8
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase.i2, ptr noundef nonnull %ResBuiltin.i4, i32 noundef 4, i32 noundef 3)
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase.i2, ptr noundef nonnull %ResSpec.i3, i32 noundef 3, i32 noundef 4)
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %ResBuiltin.i4) #16
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %ResSpec.i3) #16
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %ResBase.i2) #16
  call void @_Z13testTransposeIfLj31ELj17EEvv()
  call void @_Z13testTransposeIjLj8ELj7EEvv()
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %X.i20.sroa.0)
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %Y.i.sroa.0)
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %ResBase.i21) #16
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %ResSpec.i22) #16
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %ResBuiltin.i23) #16
  store <2 x double> <double 0xC020994489A2649C, double 0x401F5432EEFD8832>, ptr %X.i20.sroa.0, align 16, !tbaa !5
  %X.i20.sroa.0.16.arrayidx.i.2.i25.sroa_idx144 = getelementptr inbounds i8, ptr %X.i20.sroa.0, i64 16
  store <2 x double> <double 0xC018D32749E86D26, double 0xC0005193905C7B7C>, ptr %X.i20.sroa.0.16.arrayidx.i.2.i25.sroa_idx144, align 16, !tbaa !5
  %X.i20.sroa.0.32.arrayidx.i.4.i27.sroa_idx146 = getelementptr inbounds i8, ptr %X.i20.sroa.0, i64 32
  store <2 x double> <double 0x40137B228FD7FD2E, double 0x3FF3532496069C14>, ptr %X.i20.sroa.0.32.arrayidx.i.4.i27.sroa_idx146, align 16, !tbaa !5
  store <2 x double> <double 0xC020994489A2649C, double 0x401F5432EEFD8832>, ptr %Y.i.sroa.0, align 16, !tbaa !5
  %Y.i.sroa.0.16.arrayidx.i31.2.i.sroa_idx140 = getelementptr inbounds i8, ptr %Y.i.sroa.0, i64 16
  store <2 x double> <double 0xC018D32749E86D26, double 0xC0005193905C7B7C>, ptr %Y.i.sroa.0.16.arrayidx.i31.2.i.sroa_idx140, align 16, !tbaa !5
  %Y.i.sroa.0.32.arrayidx.i31.4.i.sroa_idx142 = getelementptr inbounds i8, ptr %Y.i.sroa.0, i64 32
  store <2 x double> <double 0x40137B228FD7FD2E, double 0x3FF3532496069C14>, ptr %Y.i.sroa.0.32.arrayidx.i31.4.i.sroa_idx142, align 16, !tbaa !5
  %arrayidx.us.i.2.i33 = getelementptr inbounds double, ptr %ResBase.i21, i64 6
  %arrayidx.us.i.1.1.i34 = getelementptr inbounds double, ptr %ResBase.i21, i64 4
  %arrayidx.us.i.273.i = getelementptr inbounds double, ptr %ResBase.i21, i64 2
  %arrayidx.us.i.2.2.i37 = getelementptr inbounds double, ptr %ResBase.i21, i64 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(72) %ResSpec.i22, i8 0, i64 72, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(72) %ResBuiltin.i23, i8 0, i64 72, i1 false)
  store <2 x double> <double 0x402CF4CC5FEB3C0F, double 0xC03C4FB206C4DFCC>, ptr %ResBase.i21, align 16, !tbaa !5
  store <2 x double> <double 0x4022E2B507DF02F1, double 0x4049F9E3A439B3BC>, ptr %arrayidx.us.i.2.i33, align 16, !tbaa !5
  store <2 x double> <double 0xBFDF054DA5F40D4E, double 0x402CF20295EEB2A1>, ptr %arrayidx.us.i.273.i, align 16, !tbaa !5
  store <2 x double> <double 0x40200D3944D99298, double 0x403E804AF9C10954>, ptr %arrayidx.us.i.1.1.i34, align 16, !tbaa !5
  store double 0x404DF36BF8D2AAC6, ptr %arrayidx.us.i.2.2.i37, align 16, !tbaa !5
  %X.i20.sroa.0.0.X.i20.sroa.0.0.col.load64 = load <3 x double>, ptr %X.i20.sroa.0, align 16
  %X.i20.sroa.0.24.arrayidx.i.3.i26.sroa_idx145 = getelementptr inbounds i8, ptr %X.i20.sroa.0, i64 24
  %X.i20.sroa.0.24.X.i20.sroa.0.24.col.load66 = load <3 x double>, ptr %X.i20.sroa.0.24.arrayidx.i.3.i26.sroa_idx145, align 8
  %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69 = load <3 x double>, ptr %Y.i.sroa.0, align 16
  %Y.i.sroa.0.24.arrayidx.i31.3.i.sroa_idx141 = getelementptr inbounds i8, ptr %Y.i.sroa.0, i64 24
  %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71 = load <3 x double>, ptr %Y.i.sroa.0.24.arrayidx.i31.3.i.sroa_idx141, align 8
  %matrixext.243.i.i = extractelement <3 x double> %X.i20.sroa.0.0.X.i20.sroa.0.0.col.load64, i64 2
  %matrixext13.i.i = extractelement <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, i64 0
  %matrixext13.1.i.i = extractelement <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, i64 1
  %matrixext13.2.i.i = extractelement <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, i64 2
  %7 = shufflevector <3 x double> %X.i20.sroa.0.0.X.i20.sroa.0.0.col.load64, <3 x double> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, <3 x double> undef, <2 x i32> zeroinitializer
  %9 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %7, <2 x double> %8, <2 x double> zeroinitializer)
  %10 = shufflevector <3 x double> %X.i20.sroa.0.24.X.i20.sroa.0.24.col.load66, <3 x double> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, <3 x double> undef, <2 x i32> <i32 1, i32 1>
  %12 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %10, <2 x double> %11, <2 x double> %9)
  %13 = shufflevector <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, <3 x double> undef, <2 x i32> <i32 2, i32 2>
  %14 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %13, <2 x double> <double 0x4018C3ECD0E037D5, double 0x3FCDFBF0484E8F70>, <2 x double> %12)
  %15 = shufflevector <2 x double> %14, <2 x double> poison, <3 x i32> <i32 0, i32 1, i32 undef>
  %16 = call double @llvm.fmuladd.f64(double %matrixext.243.i.i, double %matrixext13.i.i, double 0.000000e+00)
  %matrixext.1.2.i.i = extractelement <3 x double> %X.i20.sroa.0.24.X.i20.sroa.0.24.col.load66, i64 2
  %17 = call double @llvm.fmuladd.f64(double %matrixext.1.2.i.i, double %matrixext13.1.i.i, double %16)
  %18 = call double @llvm.fmuladd.f64(double %matrixext13.2.i.i, double 0x4023CDAA70355820, double %17)
  %split74 = insertelement <3 x double> %15, double %18, i64 2
  %matrixext13.147.i.i = extractelement <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, i64 0
  %matrixext13.1.149.i.i = extractelement <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, i64 1
  %matrixext13.2.151.i.i = extractelement <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, i64 2
  %19 = shufflevector <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, <3 x double> undef, <2 x i32> zeroinitializer
  %20 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %7, <2 x double> %19, <2 x double> zeroinitializer)
  %21 = shufflevector <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, <3 x double> undef, <2 x i32> <i32 1, i32 1>
  %22 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %10, <2 x double> %21, <2 x double> %20)
  %23 = shufflevector <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, <3 x double> undef, <2 x i32> <i32 2, i32 2>
  %24 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %23, <2 x double> <double 0x4018C3ECD0E037D5, double 0x3FCDFBF0484E8F70>, <2 x double> %22)
  %25 = shufflevector <2 x double> %24, <2 x double> poison, <3 x i32> <i32 0, i32 1, i32 undef>
  %26 = call double @llvm.fmuladd.f64(double %matrixext.243.i.i, double %matrixext13.147.i.i, double 0.000000e+00)
  %27 = call double @llvm.fmuladd.f64(double %matrixext.1.2.i.i, double %matrixext13.1.149.i.i, double %26)
  %28 = call double @llvm.fmuladd.f64(double %matrixext13.2.151.i.i, double 0x4023CDAA70355820, double %27)
  %split75 = insertelement <3 x double> %25, double %28, i64 2
  %29 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %7, <2 x double> <double 0x4018C3ECD0E037D5, double 0x4018C3ECD0E037D5>, <2 x double> zeroinitializer)
  %30 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %10, <2 x double> <double 0x3FCDFBF0484E8F70, double 0x3FCDFBF0484E8F70>, <2 x double> %29)
  %31 = fadd <2 x double> %30, <double 0x404EA6FF51A0B184, double 0x40028E4C59CE2169>
  %32 = shufflevector <2 x double> %31, <2 x double> poison, <3 x i32> <i32 0, i32 1, i32 undef>
  %33 = call double @llvm.fmuladd.f64(double %matrixext.243.i.i, double 0x4018C3ECD0E037D5, double 0.000000e+00)
  %34 = call double @llvm.fmuladd.f64(double %matrixext.1.2.i.i, double 0x3FCDFBF0484E8F70, double %33)
  %35 = fadd double %34, 0x405882C871119BBF
  %split76 = insertelement <3 x double> %32, double %35, i64 2
  store <3 x double> %split74, ptr %ResSpec.i22, align 16
  %vec.gep77 = getelementptr inbounds double, ptr %ResSpec.i22, i64 3
  store <3 x double> %split75, ptr %vec.gep77, align 8
  %vec.gep78 = getelementptr inbounds double, ptr %ResSpec.i22, i64 6
  store <3 x double> %split76, ptr %vec.gep78, align 16
  %block = shufflevector <3 x double> %X.i20.sroa.0.0.X.i20.sroa.0.0.col.load64, <3 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat = shufflevector <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, <3 x double> undef, <2 x i32> zeroinitializer
  %36 = fmul <2 x double> %block, %splat.splat
  %block79 = shufflevector <3 x double> %X.i20.sroa.0.24.X.i20.sroa.0.24.col.load66, <3 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat81 = shufflevector <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, <3 x double> undef, <2 x i32> <i32 1, i32 1>
  %37 = fmul <2 x double> %block79, %splat.splat81
  %38 = fadd <2 x double> %36, %37
  %splat.splat84 = shufflevector <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, <3 x double> undef, <2 x i32> <i32 2, i32 2>
  %39 = fmul <2 x double> %splat.splat84, <double 0x4018C3ECD0E037D5, double 0x3FCDFBF0484E8F70>
  %40 = fadd <2 x double> %38, %39
  %41 = shufflevector <2 x double> %40, <2 x double> poison, <3 x i32> <i32 0, i32 1, i32 undef>
  %block85 = shufflevector <3 x double> %X.i20.sroa.0.0.X.i20.sroa.0.0.col.load64, <3 x double> poison, <1 x i32> <i32 2>
  %splat.splatinsert86 = shufflevector <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, <3 x double> undef, <1 x i32> zeroinitializer
  %42 = fmul <1 x double> %block85, %splat.splatinsert86
  %block88 = shufflevector <3 x double> %X.i20.sroa.0.24.X.i20.sroa.0.24.col.load66, <3 x double> poison, <1 x i32> <i32 2>
  %splat.splatinsert89 = shufflevector <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, <3 x double> undef, <1 x i32> <i32 1>
  %43 = fmul <1 x double> %block88, %splat.splatinsert89
  %44 = fadd <1 x double> %42, %43
  %45 = fmul <3 x double> %Y.i.sroa.0.0.Y.i.sroa.0.0.col.load69, <double poison, double poison, double 0x4023CDAA70355820>
  %46 = shufflevector <3 x double> %45, <3 x double> poison, <1 x i32> <i32 2>
  %47 = fadd <1 x double> %44, %46
  %48 = shufflevector <1 x double> %47, <1 x double> poison, <3 x i32> <i32 0, i32 undef, i32 undef>
  %49 = shufflevector <3 x double> %41, <3 x double> %48, <3 x i32> <i32 0, i32 1, i32 3>
  %splat.splat96 = shufflevector <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, <3 x double> undef, <2 x i32> zeroinitializer
  %50 = fmul <2 x double> %block, %splat.splat96
  %splat.splat99 = shufflevector <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, <3 x double> undef, <2 x i32> <i32 1, i32 1>
  %51 = fmul <2 x double> %block79, %splat.splat99
  %52 = fadd <2 x double> %50, %51
  %splat.splat102 = shufflevector <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, <3 x double> undef, <2 x i32> <i32 2, i32 2>
  %53 = fmul <2 x double> %splat.splat102, <double 0x4018C3ECD0E037D5, double 0x3FCDFBF0484E8F70>
  %54 = fadd <2 x double> %52, %53
  %55 = shufflevector <2 x double> %54, <2 x double> poison, <3 x i32> <i32 0, i32 1, i32 undef>
  %splat.splatinsert104 = shufflevector <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, <3 x double> undef, <1 x i32> zeroinitializer
  %56 = fmul <1 x double> %block85, %splat.splatinsert104
  %splat.splatinsert107 = shufflevector <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, <3 x double> undef, <1 x i32> <i32 1>
  %57 = fmul <1 x double> %block88, %splat.splatinsert107
  %58 = fadd <1 x double> %56, %57
  %59 = fmul <3 x double> %Y.i.sroa.0.24.Y.i.sroa.0.24.col.load71, <double poison, double poison, double 0x4023CDAA70355820>
  %60 = shufflevector <3 x double> %59, <3 x double> poison, <1 x i32> <i32 2>
  %61 = fadd <1 x double> %58, %60
  %62 = shufflevector <1 x double> %61, <1 x double> poison, <3 x i32> <i32 0, i32 undef, i32 undef>
  %63 = shufflevector <3 x double> %55, <3 x double> %62, <3 x i32> <i32 0, i32 1, i32 3>
  %64 = fmul <2 x double> %block, <double 0x4018C3ECD0E037D5, double 0x4018C3ECD0E037D5>
  %65 = fmul <2 x double> %block79, <double 0x3FCDFBF0484E8F70, double 0x3FCDFBF0484E8F70>
  %66 = fadd <2 x double> %64, %65
  %67 = fadd <2 x double> %66, <double 0x404EA6FF51A0B184, double 0x40028E4C59CE2169>
  %68 = shufflevector <2 x double> %67, <2 x double> poison, <3 x i32> <i32 0, i32 1, i32 undef>
  %69 = fmul <1 x double> %block85, <double 0x4018C3ECD0E037D5>
  %70 = fmul <1 x double> %block88, <double 0x3FCDFBF0484E8F70>
  %71 = fadd <1 x double> %69, %70
  %72 = fadd <1 x double> %71, <double 0x405882C871119BBF>
  %73 = shufflevector <1 x double> %72, <1 x double> poison, <3 x i32> <i32 0, i32 undef, i32 undef>
  %74 = shufflevector <3 x double> %68, <3 x double> %73, <3 x i32> <i32 0, i32 1, i32 3>
  store <3 x double> %49, ptr %ResBuiltin.i23, align 16
  %vec.gep130 = getelementptr inbounds double, ptr %ResBuiltin.i23, i64 3
  store <3 x double> %63, ptr %vec.gep130, align 8
  %vec.gep131 = getelementptr inbounds double, ptr %ResBuiltin.i23, i64 6
  store <3 x double> %74, ptr %vec.gep131, align 16
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResSpec.i22, ptr noundef nonnull %ResBuiltin.i23, i32 noundef 3, i32 noundef 3)
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase.i21, ptr noundef nonnull %ResBuiltin.i23, i32 noundef 3, i32 noundef 3)
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase.i21, ptr noundef nonnull %ResSpec.i22, i32 noundef 3, i32 noundef 3)
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %ResBuiltin.i23) #16
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %ResSpec.i22) #16
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %ResBase.i21) #16
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %Y.i.sroa.0)
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %X.i20.sroa.0)
  call void @_Z12testMultiplyIdLj10ELj21ELj23EEvv()
  call void @_Z12testMultiplyIdLj25ELj19ELj11EEvv()
  ret i32 0
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_Z13testTransposeIdLj3ELj10EEvv() local_unnamed_addr #4 comdat {
entry:
  %X = alloca [30 x double], align 16
  %ResBase = alloca [30 x double], align 16
  %ResSpec = alloca [30 x double], align 16
  %ResBuiltin = alloca [30 x double], align 16
  call void @llvm.lifetime.start.p0(i64 240, ptr nonnull %X) #16
  call void @llvm.lifetime.start.p0(i64 240, ptr nonnull %ResBase) #16
  call void @llvm.lifetime.start.p0(i64 240, ptr nonnull %ResSpec) #16
  call void @llvm.lifetime.start.p0(i64 240, ptr nonnull %ResBuiltin) #16
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %generator.sroa.0.04.i = phi i64 [ 1, %entry ], [ %rem.i.i16.i.i.i.i, %for.body.i ]
  %mul.i.i.i.i.i.i = mul nuw nsw i64 %generator.sroa.0.04.i, 48271
  %rem.i.i.i.i.i.i = urem i64 %mul.i.i.i.i.i.i, 2147483647
  %sub4.i.i.i.i = add nsw i64 %rem.i.i.i.i.i.i, -1
  %conv5.i.i.i.i = uitofp i64 %sub4.i.i.i.i to double
  %mul.i.i15.i.i.i.i = mul nuw nsw i64 %rem.i.i.i.i.i.i, 48271
  %rem.i.i16.i.i.i.i = urem i64 %mul.i.i15.i.i.i.i, 2147483647
  %sub8.i.i.i.i = add nsw i64 %rem.i.i16.i.i.i.i, -1
  %conv9.i.i.i.i = uitofp i64 %sub8.i.i.i.i to double
  %0 = tail call double @llvm.fmuladd.f64(double %conv9.i.i.i.i, double 0x41DFFFFFFF800000, double %conv5.i.i.i.i)
  %div.i.i.i.i = fdiv double %0, 0x43CFFFFFFF000000
  %1 = tail call double @llvm.fmuladd.f64(double %div.i.i.i.i, double 2.000000e+01, double -1.000000e+01)
  %arrayidx.i = getelementptr inbounds double, ptr %X, i64 %indvars.iv.i
  store double %1, ptr %arrayidx.i, align 8, !tbaa !5
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 30
  br i1 %exitcond.not.i, label %for.cond1.preheader.us.i.preheader, label %for.body.i, !llvm.loop !9

for.cond1.preheader.us.i.preheader:               ; preds = %for.body.i
  %arrayidx.us.i.1 = getelementptr inbounds double, ptr %ResBase, i64 10
  %arrayidx.us.i.2 = getelementptr inbounds double, ptr %ResBase, i64 20
  %arrayidx.us.i.156 = getelementptr inbounds double, ptr %ResBase, i64 1
  %arrayidx.us.i.1.1 = getelementptr inbounds double, ptr %ResBase, i64 11
  %arrayidx.us.i.2.1 = getelementptr inbounds double, ptr %ResBase, i64 21
  %arrayidx.us.i.257 = getelementptr inbounds double, ptr %ResBase, i64 2
  %arrayidx.us.i.1.2 = getelementptr inbounds double, ptr %ResBase, i64 12
  %arrayidx.us.i.2.2 = getelementptr inbounds double, ptr %ResBase, i64 22
  %arrayidx.us.i.3 = getelementptr inbounds double, ptr %ResBase, i64 3
  %arrayidx.us.i.1.3 = getelementptr inbounds double, ptr %ResBase, i64 13
  %arrayidx.us.i.2.3 = getelementptr inbounds double, ptr %ResBase, i64 23
  %arrayidx.us.i.4 = getelementptr inbounds double, ptr %ResBase, i64 4
  %arrayidx.us.i.1.4 = getelementptr inbounds double, ptr %ResBase, i64 14
  %arrayidx.us.i.2.4 = getelementptr inbounds double, ptr %ResBase, i64 24
  %arrayidx.us.i.5 = getelementptr inbounds double, ptr %ResBase, i64 5
  %arrayidx.us.i.1.5 = getelementptr inbounds double, ptr %ResBase, i64 15
  %arrayidx.us.i.2.5 = getelementptr inbounds double, ptr %ResBase, i64 25
  %arrayidx.us.i.6 = getelementptr inbounds double, ptr %ResBase, i64 6
  %arrayidx.us.i.1.6 = getelementptr inbounds double, ptr %ResBase, i64 16
  %arrayidx.us.i.2.6 = getelementptr inbounds double, ptr %ResBase, i64 26
  %arrayidx.us.i.7 = getelementptr inbounds double, ptr %ResBase, i64 7
  %arrayidx.us.i.1.7 = getelementptr inbounds double, ptr %ResBase, i64 17
  %arrayidx.us.i.2.7 = getelementptr inbounds double, ptr %ResBase, i64 27
  %arrayidx.us.i.8 = getelementptr inbounds double, ptr %ResBase, i64 8
  %arrayidx.us.i.1.8 = getelementptr inbounds double, ptr %ResBase, i64 18
  %arrayidx.us.i.2.8 = getelementptr inbounds double, ptr %ResBase, i64 28
  %arrayidx.us.i.9 = getelementptr inbounds double, ptr %ResBase, i64 9
  %arrayidx.us.i.1.9 = getelementptr inbounds double, ptr %ResBase, i64 19
  %arrayidx.us.i.2.9 = getelementptr inbounds double, ptr %ResBase, i64 29
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(240) %ResSpec, i8 0, i64 240, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(240) %ResBuiltin, i8 0, i64 240, i1 false)
  %2 = load double, ptr %X, align 16, !tbaa !5
  store double %2, ptr %ResBase, align 16, !tbaa !5
  %arrayidx.us.i47.1 = getelementptr inbounds double, ptr %X, i64 3
  %3 = load double, ptr %arrayidx.us.i47.1, align 8, !tbaa !5
  store double %3, ptr %arrayidx.us.i.156, align 8, !tbaa !5
  %arrayidx.us.i47.2 = getelementptr inbounds double, ptr %X, i64 6
  %4 = load double, ptr %arrayidx.us.i47.2, align 16, !tbaa !5
  store double %4, ptr %arrayidx.us.i.257, align 16, !tbaa !5
  %arrayidx.us.i47.3 = getelementptr inbounds double, ptr %X, i64 9
  %5 = load double, ptr %arrayidx.us.i47.3, align 8, !tbaa !5
  store double %5, ptr %arrayidx.us.i.3, align 8, !tbaa !5
  %arrayidx.us.i47.4 = getelementptr inbounds double, ptr %X, i64 12
  %6 = load double, ptr %arrayidx.us.i47.4, align 16, !tbaa !5
  store double %6, ptr %arrayidx.us.i.4, align 16, !tbaa !5
  %arrayidx.us.i47.5 = getelementptr inbounds double, ptr %X, i64 15
  %7 = load double, ptr %arrayidx.us.i47.5, align 8, !tbaa !5
  store double %7, ptr %arrayidx.us.i.5, align 8, !tbaa !5
  %arrayidx.us.i47.6 = getelementptr inbounds double, ptr %X, i64 18
  %8 = load double, ptr %arrayidx.us.i47.6, align 16, !tbaa !5
  store double %8, ptr %arrayidx.us.i.6, align 16, !tbaa !5
  %arrayidx.us.i47.7 = getelementptr inbounds double, ptr %X, i64 21
  %9 = load double, ptr %arrayidx.us.i47.7, align 8, !tbaa !5
  store double %9, ptr %arrayidx.us.i.7, align 8, !tbaa !5
  %arrayidx.us.i47.8 = getelementptr inbounds double, ptr %X, i64 24
  %10 = load double, ptr %arrayidx.us.i47.8, align 16, !tbaa !5
  store double %10, ptr %arrayidx.us.i.8, align 16, !tbaa !5
  %arrayidx.us.i47.9 = getelementptr inbounds double, ptr %X, i64 27
  %11 = load double, ptr %arrayidx.us.i47.9, align 8, !tbaa !5
  store double %11, ptr %arrayidx.us.i.9, align 8, !tbaa !5
  %arrayidx.us.i47.168 = getelementptr inbounds double, ptr %X, i64 1
  %12 = load double, ptr %arrayidx.us.i47.168, align 8, !tbaa !5
  store double %12, ptr %arrayidx.us.i.1, align 16, !tbaa !5
  %arrayidx.us.i47.1.1 = getelementptr inbounds double, ptr %X, i64 4
  %13 = load double, ptr %arrayidx.us.i47.1.1, align 16, !tbaa !5
  store double %13, ptr %arrayidx.us.i.1.1, align 8, !tbaa !5
  %arrayidx.us.i47.2.1 = getelementptr inbounds double, ptr %X, i64 7
  %14 = load double, ptr %arrayidx.us.i47.2.1, align 8, !tbaa !5
  store double %14, ptr %arrayidx.us.i.1.2, align 16, !tbaa !5
  %arrayidx.us.i47.3.1 = getelementptr inbounds double, ptr %X, i64 10
  %15 = load double, ptr %arrayidx.us.i47.3.1, align 16, !tbaa !5
  store double %15, ptr %arrayidx.us.i.1.3, align 8, !tbaa !5
  %arrayidx.us.i47.4.1 = getelementptr inbounds double, ptr %X, i64 13
  %16 = load double, ptr %arrayidx.us.i47.4.1, align 8, !tbaa !5
  store double %16, ptr %arrayidx.us.i.1.4, align 16, !tbaa !5
  %arrayidx.us.i47.5.1 = getelementptr inbounds double, ptr %X, i64 16
  %17 = load double, ptr %arrayidx.us.i47.5.1, align 16, !tbaa !5
  store double %17, ptr %arrayidx.us.i.1.5, align 8, !tbaa !5
  %arrayidx.us.i47.6.1 = getelementptr inbounds double, ptr %X, i64 19
  %18 = load double, ptr %arrayidx.us.i47.6.1, align 8, !tbaa !5
  store double %18, ptr %arrayidx.us.i.1.6, align 16, !tbaa !5
  %arrayidx.us.i47.7.1 = getelementptr inbounds double, ptr %X, i64 22
  %19 = load double, ptr %arrayidx.us.i47.7.1, align 16, !tbaa !5
  store double %19, ptr %arrayidx.us.i.1.7, align 8, !tbaa !5
  %arrayidx.us.i47.8.1 = getelementptr inbounds double, ptr %X, i64 25
  %20 = load double, ptr %arrayidx.us.i47.8.1, align 8, !tbaa !5
  store double %20, ptr %arrayidx.us.i.1.8, align 16, !tbaa !5
  %arrayidx.us.i47.9.1 = getelementptr inbounds double, ptr %X, i64 28
  %21 = load double, ptr %arrayidx.us.i47.9.1, align 16, !tbaa !5
  store double %21, ptr %arrayidx.us.i.1.9, align 8, !tbaa !5
  %arrayidx.us.i47.270 = getelementptr inbounds double, ptr %X, i64 2
  %22 = load double, ptr %arrayidx.us.i47.270, align 16, !tbaa !5
  store double %22, ptr %arrayidx.us.i.2, align 16, !tbaa !5
  %arrayidx.us.i47.1.2 = getelementptr inbounds double, ptr %X, i64 5
  %23 = load double, ptr %arrayidx.us.i47.1.2, align 8, !tbaa !5
  store double %23, ptr %arrayidx.us.i.2.1, align 8, !tbaa !5
  %arrayidx.us.i47.2.2 = getelementptr inbounds double, ptr %X, i64 8
  %24 = load double, ptr %arrayidx.us.i47.2.2, align 16, !tbaa !5
  store double %24, ptr %arrayidx.us.i.2.2, align 16, !tbaa !5
  %arrayidx.us.i47.3.2 = getelementptr inbounds double, ptr %X, i64 11
  %25 = load double, ptr %arrayidx.us.i47.3.2, align 8, !tbaa !5
  store double %25, ptr %arrayidx.us.i.2.3, align 8, !tbaa !5
  %arrayidx.us.i47.4.2 = getelementptr inbounds double, ptr %X, i64 14
  %26 = load double, ptr %arrayidx.us.i47.4.2, align 16, !tbaa !5
  store double %26, ptr %arrayidx.us.i.2.4, align 16, !tbaa !5
  %arrayidx.us.i47.5.2 = getelementptr inbounds double, ptr %X, i64 17
  %27 = load double, ptr %arrayidx.us.i47.5.2, align 8, !tbaa !5
  store double %27, ptr %arrayidx.us.i.2.5, align 8, !tbaa !5
  %arrayidx.us.i47.6.2 = getelementptr inbounds double, ptr %X, i64 20
  %28 = load double, ptr %arrayidx.us.i47.6.2, align 16, !tbaa !5
  store double %28, ptr %arrayidx.us.i.2.6, align 16, !tbaa !5
  %arrayidx.us.i47.7.2 = getelementptr inbounds double, ptr %X, i64 23
  %29 = load double, ptr %arrayidx.us.i47.7.2, align 8, !tbaa !5
  store double %29, ptr %arrayidx.us.i.2.7, align 8, !tbaa !5
  %arrayidx.us.i47.8.2 = getelementptr inbounds double, ptr %X, i64 26
  %30 = load double, ptr %arrayidx.us.i47.8.2, align 16, !tbaa !5
  store double %30, ptr %arrayidx.us.i.2.8, align 16, !tbaa !5
  %arrayidx.us.i47.9.2 = getelementptr inbounds double, ptr %X, i64 29
  %31 = load double, ptr %arrayidx.us.i47.9.2, align 8, !tbaa !5
  store double %31, ptr %arrayidx.us.i.2.9, align 8, !tbaa !5
  %col.load = load <3 x double>, ptr %X, align 16
  %col.load72 = load <3 x double>, ptr %arrayidx.us.i47.1, align 8
  %col.load74 = load <3 x double>, ptr %arrayidx.us.i47.2, align 16
  %32 = shufflevector <3 x double> %col.load74, <3 x double> poison, <10 x i32> <i32 0, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %col.load76 = load <3 x double>, ptr %arrayidx.us.i47.3, align 8
  %33 = shufflevector <3 x double> %col.load76, <3 x double> poison, <10 x i32> <i32 0, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %col.load78 = load <3 x double>, ptr %arrayidx.us.i47.4, align 16
  %34 = shufflevector <3 x double> %col.load78, <3 x double> poison, <10 x i32> <i32 0, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %col.load80 = load <3 x double>, ptr %arrayidx.us.i47.5, align 8
  %35 = shufflevector <3 x double> %col.load80, <3 x double> poison, <10 x i32> <i32 0, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %col.load82 = load <3 x double>, ptr %arrayidx.us.i47.6, align 16
  %36 = shufflevector <3 x double> %col.load82, <3 x double> poison, <10 x i32> <i32 0, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %col.load84 = load <3 x double>, ptr %arrayidx.us.i47.7, align 8
  %37 = shufflevector <3 x double> %col.load84, <3 x double> poison, <10 x i32> <i32 0, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %col.load86 = load <3 x double>, ptr %arrayidx.us.i47.8, align 16
  %38 = shufflevector <3 x double> %col.load86, <3 x double> poison, <10 x i32> <i32 0, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %col.load88 = load <3 x double>, ptr %arrayidx.us.i47.9, align 8
  %39 = shufflevector <3 x double> %col.load88, <3 x double> poison, <10 x i32> <i32 0, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = shufflevector <3 x double> %col.load, <3 x double> %col.load72, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %41 = shufflevector <3 x double> %col.load74, <3 x double> %col.load76, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %42 = shufflevector <3 x double> %col.load78, <3 x double> %col.load80, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %43 = shufflevector <3 x double> %col.load82, <3 x double> %col.load84, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %44 = shufflevector <6 x double> %40, <6 x double> %41, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %45 = shufflevector <6 x double> %42, <6 x double> %43, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %46 = shufflevector <12 x double> %44, <12 x double> %45, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %47 = shufflevector <3 x double> %col.load86, <3 x double> %col.load88, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %matins.2.9.i = shufflevector <24 x double> %46, <24 x double> %47, <30 x i32> <i32 0, i32 3, i32 6, i32 9, i32 12, i32 15, i32 18, i32 21, i32 24, i32 27, i32 1, i32 4, i32 7, i32 10, i32 13, i32 16, i32 19, i32 22, i32 25, i32 28, i32 2, i32 5, i32 8, i32 11, i32 14, i32 17, i32 20, i32 23, i32 26, i32 29>
  %split = shufflevector <30 x double> %matins.2.9.i, <30 x double> poison, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9>
  %split89 = shufflevector <30 x double> %matins.2.9.i, <30 x double> poison, <10 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %split90 = shufflevector <30 x double> %matins.2.9.i, <30 x double> poison, <10 x i32> <i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  store <10 x double> %split, ptr %ResSpec, align 16
  %vec.gep91 = getelementptr inbounds double, ptr %ResSpec, i64 10
  store <10 x double> %split89, ptr %vec.gep91, align 16
  %vec.gep92 = getelementptr inbounds double, ptr %ResSpec, i64 20
  store <10 x double> %split90, ptr %vec.gep92, align 16
  %48 = shufflevector <3 x double> %col.load, <3 x double> %col.load72, <10 x i32> <i32 0, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = shufflevector <10 x double> %48, <10 x double> %32, <10 x i32> <i32 0, i32 1, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = shufflevector <10 x double> %49, <10 x double> %33, <10 x i32> <i32 0, i32 1, i32 2, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = shufflevector <10 x double> %50, <10 x double> %34, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %52 = shufflevector <10 x double> %51, <10 x double> %35, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 10, i32 undef, i32 undef, i32 undef, i32 undef>
  %53 = shufflevector <10 x double> %52, <10 x double> %36, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 undef, i32 undef, i32 undef>
  %54 = shufflevector <10 x double> %53, <10 x double> %37, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 10, i32 undef, i32 undef>
  %55 = shufflevector <10 x double> %54, <10 x double> %38, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 undef>
  %56 = shufflevector <10 x double> %55, <10 x double> %39, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 10>
  %57 = shufflevector <3 x double> %col.load, <3 x double> %col.load72, <10 x i32> <i32 1, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <10 x double> %57, <10 x double> %32, <10 x i32> <i32 0, i32 1, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = shufflevector <10 x double> %58, <10 x double> %33, <10 x i32> <i32 0, i32 1, i32 2, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %60 = shufflevector <10 x double> %59, <10 x double> %34, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = shufflevector <10 x double> %60, <10 x double> %35, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = shufflevector <10 x double> %61, <10 x double> %36, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 11, i32 undef, i32 undef, i32 undef>
  %63 = shufflevector <10 x double> %62, <10 x double> %37, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 11, i32 undef, i32 undef>
  %64 = shufflevector <10 x double> %63, <10 x double> %38, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 11, i32 undef>
  %65 = shufflevector <10 x double> %64, <10 x double> %39, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 11>
  %66 = shufflevector <3 x double> %col.load, <3 x double> %col.load72, <10 x i32> <i32 2, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = shufflevector <10 x double> %66, <10 x double> %32, <10 x i32> <i32 0, i32 1, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <10 x double> %67, <10 x double> %33, <10 x i32> <i32 0, i32 1, i32 2, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = shufflevector <10 x double> %68, <10 x double> %34, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = shufflevector <10 x double> %69, <10 x double> %35, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 12, i32 undef, i32 undef, i32 undef, i32 undef>
  %71 = shufflevector <10 x double> %70, <10 x double> %36, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 12, i32 undef, i32 undef, i32 undef>
  %72 = shufflevector <10 x double> %71, <10 x double> %37, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 12, i32 undef, i32 undef>
  %73 = shufflevector <10 x double> %72, <10 x double> %38, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 12, i32 undef>
  %74 = shufflevector <10 x double> %73, <10 x double> %39, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 12>
  store <10 x double> %56, ptr %ResBuiltin, align 16
  %vec.gep93 = getelementptr inbounds double, ptr %ResBuiltin, i64 10
  store <10 x double> %65, ptr %vec.gep93, align 16
  %vec.gep94 = getelementptr inbounds double, ptr %ResBuiltin, i64 20
  store <10 x double> %74, ptr %vec.gep94, align 16
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase, ptr noundef nonnull %ResBuiltin, i32 noundef 3, i32 noundef 10)
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase, ptr noundef nonnull %ResSpec, i32 noundef 10, i32 noundef 3)
  call void @llvm.lifetime.end.p0(i64 240, ptr nonnull %ResBuiltin) #16
  call void @llvm.lifetime.end.p0(i64 240, ptr nonnull %ResSpec) #16
  call void @llvm.lifetime.end.p0(i64 240, ptr nonnull %ResBase) #16
  call void @llvm.lifetime.end.p0(i64 240, ptr nonnull %X) #16
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_Z13testTransposeIfLj31ELj17EEvv() local_unnamed_addr #4 comdat {
entry:
  %X = alloca [527 x float], align 16
  %ResBase = alloca [527 x float], align 16
  %ResSpec = alloca [527 x float], align 16
  %ResBuiltin = alloca [527 x float], align 16
  call void @llvm.lifetime.start.p0(i64 2108, ptr nonnull %X) #16
  call void @llvm.lifetime.start.p0(i64 2108, ptr nonnull %ResBase) #16
  call void @llvm.lifetime.start.p0(i64 2108, ptr nonnull %ResSpec) #16
  call void @llvm.lifetime.start.p0(i64 2108, ptr nonnull %ResBuiltin) #16
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.1, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.1, %for.body.i.1 ]
  %generator.sroa.0.04.i = phi i64 [ 1, %entry ], [ %rem.i.i.i.i.i.i.1, %for.body.i.1 ]
  %mul.i.i.i.i.i.i = mul nuw nsw i64 %generator.sroa.0.04.i, 48271
  %rem.i.i.i.i.i.i = urem i64 %mul.i.i.i.i.i.i, 2147483647
  %sub4.i.i.i.i = add nsw i64 %rem.i.i.i.i.i.i, -1
  %conv5.i.i.i.i = uitofp i64 %sub4.i.i.i.i to float
  %div.i.i.i.i = fmul float %conv5.i.i.i.i, 0x3E00000000000000
  %0 = tail call float @llvm.fmuladd.f32(float %div.i.i.i.i, float 2.000000e+01, float -1.000000e+01)
  %arrayidx.i = getelementptr inbounds float, ptr %X, i64 %indvars.iv.i
  store float %0, ptr %arrayidx.i, align 8, !tbaa !11
  %indvars.iv.next.i = or i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 527
  br i1 %exitcond.not.i, label %vector.body, label %for.body.i.1, !llvm.loop !13

for.body.i.1:                                     ; preds = %for.body.i
  %mul.i.i.i.i.i.i.1 = mul nuw nsw i64 %rem.i.i.i.i.i.i, 48271
  %rem.i.i.i.i.i.i.1 = urem i64 %mul.i.i.i.i.i.i.1, 2147483647
  %sub4.i.i.i.i.1 = add nsw i64 %rem.i.i.i.i.i.i.1, -1
  %conv5.i.i.i.i.1 = uitofp i64 %sub4.i.i.i.i.1 to float
  %div.i.i.i.i.1 = fmul float %conv5.i.i.i.i.1, 0x3E00000000000000
  %1 = tail call float @llvm.fmuladd.f32(float %div.i.i.i.i.1, float 2.000000e+01, float -1.000000e+01)
  %arrayidx.i.1 = getelementptr inbounds float, ptr %X, i64 %indvars.iv.next.i
  store float %1, ptr %arrayidx.i.1, align 4, !tbaa !11
  %indvars.iv.next.i.1 = add nuw nsw i64 %indvars.iv.i, 2
  br label %for.body.i

vector.body:                                      ; preds = %for.body.i
  store <4 x float> zeroinitializer, ptr %ResBase, align 16, !tbaa !11
  %2 = getelementptr inbounds float, ptr %ResBase, i64 17
  store <4 x float> zeroinitializer, ptr %2, align 4, !tbaa !11
  %3 = getelementptr inbounds float, ptr %ResBase, i64 34
  store <4 x float> zeroinitializer, ptr %3, align 8, !tbaa !11
  %4 = getelementptr inbounds float, ptr %ResBase, i64 51
  store <4 x float> zeroinitializer, ptr %4, align 4, !tbaa !11
  %5 = getelementptr inbounds float, ptr %ResBase, i64 68
  store <4 x float> zeroinitializer, ptr %5, align 16, !tbaa !11
  %6 = getelementptr inbounds float, ptr %ResBase, i64 85
  store <4 x float> zeroinitializer, ptr %6, align 4, !tbaa !11
  %7 = getelementptr inbounds float, ptr %ResBase, i64 102
  store <4 x float> zeroinitializer, ptr %7, align 8, !tbaa !11
  %8 = getelementptr inbounds float, ptr %ResBase, i64 119
  store <4 x float> zeroinitializer, ptr %8, align 4, !tbaa !11
  %9 = getelementptr inbounds float, ptr %ResBase, i64 136
  store <4 x float> zeroinitializer, ptr %9, align 16, !tbaa !11
  %10 = getelementptr inbounds float, ptr %ResBase, i64 153
  store <4 x float> zeroinitializer, ptr %10, align 4, !tbaa !11
  %11 = getelementptr inbounds float, ptr %ResBase, i64 170
  store <4 x float> zeroinitializer, ptr %11, align 8, !tbaa !11
  %12 = getelementptr inbounds float, ptr %ResBase, i64 187
  store <4 x float> zeroinitializer, ptr %12, align 4, !tbaa !11
  %13 = getelementptr inbounds float, ptr %ResBase, i64 204
  store <4 x float> zeroinitializer, ptr %13, align 16, !tbaa !11
  %14 = getelementptr inbounds float, ptr %ResBase, i64 221
  store <4 x float> zeroinitializer, ptr %14, align 4, !tbaa !11
  %15 = getelementptr inbounds float, ptr %ResBase, i64 238
  store <4 x float> zeroinitializer, ptr %15, align 8, !tbaa !11
  %16 = getelementptr inbounds float, ptr %ResBase, i64 255
  store <4 x float> zeroinitializer, ptr %16, align 4, !tbaa !11
  %17 = getelementptr inbounds float, ptr %ResBase, i64 272
  store <4 x float> zeroinitializer, ptr %17, align 16, !tbaa !11
  %18 = getelementptr inbounds float, ptr %ResBase, i64 289
  store <4 x float> zeroinitializer, ptr %18, align 4, !tbaa !11
  %19 = getelementptr inbounds float, ptr %ResBase, i64 306
  store <4 x float> zeroinitializer, ptr %19, align 8, !tbaa !11
  %20 = getelementptr inbounds float, ptr %ResBase, i64 323
  store <4 x float> zeroinitializer, ptr %20, align 4, !tbaa !11
  %21 = getelementptr inbounds float, ptr %ResBase, i64 340
  store <4 x float> zeroinitializer, ptr %21, align 16, !tbaa !11
  %22 = getelementptr inbounds float, ptr %ResBase, i64 357
  store <4 x float> zeroinitializer, ptr %22, align 4, !tbaa !11
  %23 = getelementptr inbounds float, ptr %ResBase, i64 374
  store <4 x float> zeroinitializer, ptr %23, align 8, !tbaa !11
  %24 = getelementptr inbounds float, ptr %ResBase, i64 391
  store <4 x float> zeroinitializer, ptr %24, align 4, !tbaa !11
  %25 = getelementptr inbounds float, ptr %ResBase, i64 408
  store <4 x float> zeroinitializer, ptr %25, align 16, !tbaa !11
  %26 = getelementptr inbounds float, ptr %ResBase, i64 425
  store <4 x float> zeroinitializer, ptr %26, align 4, !tbaa !11
  %27 = getelementptr inbounds float, ptr %ResBase, i64 442
  store <4 x float> zeroinitializer, ptr %27, align 8, !tbaa !11
  %28 = getelementptr inbounds float, ptr %ResBase, i64 459
  store <4 x float> zeroinitializer, ptr %28, align 4, !tbaa !11
  %29 = getelementptr inbounds float, ptr %ResBase, i64 476
  store <4 x float> zeroinitializer, ptr %29, align 16, !tbaa !11
  %30 = getelementptr inbounds float, ptr %ResBase, i64 493
  store <4 x float> zeroinitializer, ptr %30, align 4, !tbaa !11
  %31 = getelementptr inbounds float, ptr %ResBase, i64 510
  store <4 x float> zeroinitializer, ptr %31, align 8, !tbaa !11
  %32 = getelementptr inbounds float, ptr %ResBase, i64 4
  store <4 x float> zeroinitializer, ptr %32, align 16, !tbaa !11
  %33 = getelementptr inbounds float, ptr %ResBase, i64 21
  store <4 x float> zeroinitializer, ptr %33, align 4, !tbaa !11
  %34 = getelementptr inbounds float, ptr %ResBase, i64 38
  store <4 x float> zeroinitializer, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds float, ptr %ResBase, i64 55
  store <4 x float> zeroinitializer, ptr %35, align 4, !tbaa !11
  %36 = getelementptr inbounds float, ptr %ResBase, i64 72
  store <4 x float> zeroinitializer, ptr %36, align 16, !tbaa !11
  %37 = getelementptr inbounds float, ptr %ResBase, i64 89
  store <4 x float> zeroinitializer, ptr %37, align 4, !tbaa !11
  %38 = getelementptr inbounds float, ptr %ResBase, i64 106
  store <4 x float> zeroinitializer, ptr %38, align 8, !tbaa !11
  %39 = getelementptr inbounds float, ptr %ResBase, i64 123
  store <4 x float> zeroinitializer, ptr %39, align 4, !tbaa !11
  %40 = getelementptr inbounds float, ptr %ResBase, i64 140
  store <4 x float> zeroinitializer, ptr %40, align 16, !tbaa !11
  %41 = getelementptr inbounds float, ptr %ResBase, i64 157
  store <4 x float> zeroinitializer, ptr %41, align 4, !tbaa !11
  %42 = getelementptr inbounds float, ptr %ResBase, i64 174
  store <4 x float> zeroinitializer, ptr %42, align 8, !tbaa !11
  %43 = getelementptr inbounds float, ptr %ResBase, i64 191
  store <4 x float> zeroinitializer, ptr %43, align 4, !tbaa !11
  %44 = getelementptr inbounds float, ptr %ResBase, i64 208
  store <4 x float> zeroinitializer, ptr %44, align 16, !tbaa !11
  %45 = getelementptr inbounds float, ptr %ResBase, i64 225
  store <4 x float> zeroinitializer, ptr %45, align 4, !tbaa !11
  %46 = getelementptr inbounds float, ptr %ResBase, i64 242
  store <4 x float> zeroinitializer, ptr %46, align 8, !tbaa !11
  %47 = getelementptr inbounds float, ptr %ResBase, i64 259
  store <4 x float> zeroinitializer, ptr %47, align 4, !tbaa !11
  %48 = getelementptr inbounds float, ptr %ResBase, i64 276
  store <4 x float> zeroinitializer, ptr %48, align 16, !tbaa !11
  %49 = getelementptr inbounds float, ptr %ResBase, i64 293
  store <4 x float> zeroinitializer, ptr %49, align 4, !tbaa !11
  %50 = getelementptr inbounds float, ptr %ResBase, i64 310
  store <4 x float> zeroinitializer, ptr %50, align 8, !tbaa !11
  %51 = getelementptr inbounds float, ptr %ResBase, i64 327
  store <4 x float> zeroinitializer, ptr %51, align 4, !tbaa !11
  %52 = getelementptr inbounds float, ptr %ResBase, i64 344
  store <4 x float> zeroinitializer, ptr %52, align 16, !tbaa !11
  %53 = getelementptr inbounds float, ptr %ResBase, i64 361
  store <4 x float> zeroinitializer, ptr %53, align 4, !tbaa !11
  %54 = getelementptr inbounds float, ptr %ResBase, i64 378
  store <4 x float> zeroinitializer, ptr %54, align 8, !tbaa !11
  %55 = getelementptr inbounds float, ptr %ResBase, i64 395
  store <4 x float> zeroinitializer, ptr %55, align 4, !tbaa !11
  %56 = getelementptr inbounds float, ptr %ResBase, i64 412
  store <4 x float> zeroinitializer, ptr %56, align 16, !tbaa !11
  %57 = getelementptr inbounds float, ptr %ResBase, i64 429
  store <4 x float> zeroinitializer, ptr %57, align 4, !tbaa !11
  %58 = getelementptr inbounds float, ptr %ResBase, i64 446
  store <4 x float> zeroinitializer, ptr %58, align 8, !tbaa !11
  %59 = getelementptr inbounds float, ptr %ResBase, i64 463
  store <4 x float> zeroinitializer, ptr %59, align 4, !tbaa !11
  %60 = getelementptr inbounds float, ptr %ResBase, i64 480
  store <4 x float> zeroinitializer, ptr %60, align 16, !tbaa !11
  %61 = getelementptr inbounds float, ptr %ResBase, i64 497
  store <4 x float> zeroinitializer, ptr %61, align 4, !tbaa !11
  %62 = getelementptr inbounds float, ptr %ResBase, i64 514
  store <4 x float> zeroinitializer, ptr %62, align 8, !tbaa !11
  %63 = getelementptr inbounds float, ptr %ResBase, i64 8
  store <4 x float> zeroinitializer, ptr %63, align 16, !tbaa !11
  %64 = getelementptr inbounds float, ptr %ResBase, i64 25
  store <4 x float> zeroinitializer, ptr %64, align 4, !tbaa !11
  %65 = getelementptr inbounds float, ptr %ResBase, i64 42
  store <4 x float> zeroinitializer, ptr %65, align 8, !tbaa !11
  %66 = getelementptr inbounds float, ptr %ResBase, i64 59
  store <4 x float> zeroinitializer, ptr %66, align 4, !tbaa !11
  %67 = getelementptr inbounds float, ptr %ResBase, i64 76
  store <4 x float> zeroinitializer, ptr %67, align 16, !tbaa !11
  %68 = getelementptr inbounds float, ptr %ResBase, i64 93
  store <4 x float> zeroinitializer, ptr %68, align 4, !tbaa !11
  %69 = getelementptr inbounds float, ptr %ResBase, i64 110
  store <4 x float> zeroinitializer, ptr %69, align 8, !tbaa !11
  %70 = getelementptr inbounds float, ptr %ResBase, i64 127
  store <4 x float> zeroinitializer, ptr %70, align 4, !tbaa !11
  %71 = getelementptr inbounds float, ptr %ResBase, i64 144
  store <4 x float> zeroinitializer, ptr %71, align 16, !tbaa !11
  %72 = getelementptr inbounds float, ptr %ResBase, i64 161
  store <4 x float> zeroinitializer, ptr %72, align 4, !tbaa !11
  %73 = getelementptr inbounds float, ptr %ResBase, i64 178
  store <4 x float> zeroinitializer, ptr %73, align 8, !tbaa !11
  %74 = getelementptr inbounds float, ptr %ResBase, i64 195
  store <4 x float> zeroinitializer, ptr %74, align 4, !tbaa !11
  %75 = getelementptr inbounds float, ptr %ResBase, i64 212
  store <4 x float> zeroinitializer, ptr %75, align 16, !tbaa !11
  %76 = getelementptr inbounds float, ptr %ResBase, i64 229
  store <4 x float> zeroinitializer, ptr %76, align 4, !tbaa !11
  %77 = getelementptr inbounds float, ptr %ResBase, i64 246
  store <4 x float> zeroinitializer, ptr %77, align 8, !tbaa !11
  %78 = getelementptr inbounds float, ptr %ResBase, i64 263
  store <4 x float> zeroinitializer, ptr %78, align 4, !tbaa !11
  %79 = getelementptr inbounds float, ptr %ResBase, i64 280
  store <4 x float> zeroinitializer, ptr %79, align 16, !tbaa !11
  %80 = getelementptr inbounds float, ptr %ResBase, i64 297
  store <4 x float> zeroinitializer, ptr %80, align 4, !tbaa !11
  %81 = getelementptr inbounds float, ptr %ResBase, i64 314
  store <4 x float> zeroinitializer, ptr %81, align 8, !tbaa !11
  %82 = getelementptr inbounds float, ptr %ResBase, i64 331
  store <4 x float> zeroinitializer, ptr %82, align 4, !tbaa !11
  %83 = getelementptr inbounds float, ptr %ResBase, i64 348
  store <4 x float> zeroinitializer, ptr %83, align 16, !tbaa !11
  %84 = getelementptr inbounds float, ptr %ResBase, i64 365
  store <4 x float> zeroinitializer, ptr %84, align 4, !tbaa !11
  %85 = getelementptr inbounds float, ptr %ResBase, i64 382
  store <4 x float> zeroinitializer, ptr %85, align 8, !tbaa !11
  %86 = getelementptr inbounds float, ptr %ResBase, i64 399
  store <4 x float> zeroinitializer, ptr %86, align 4, !tbaa !11
  %87 = getelementptr inbounds float, ptr %ResBase, i64 416
  store <4 x float> zeroinitializer, ptr %87, align 16, !tbaa !11
  %88 = getelementptr inbounds float, ptr %ResBase, i64 433
  store <4 x float> zeroinitializer, ptr %88, align 4, !tbaa !11
  %89 = getelementptr inbounds float, ptr %ResBase, i64 450
  store <4 x float> zeroinitializer, ptr %89, align 8, !tbaa !11
  %90 = getelementptr inbounds float, ptr %ResBase, i64 467
  store <4 x float> zeroinitializer, ptr %90, align 4, !tbaa !11
  %91 = getelementptr inbounds float, ptr %ResBase, i64 484
  store <4 x float> zeroinitializer, ptr %91, align 16, !tbaa !11
  %92 = getelementptr inbounds float, ptr %ResBase, i64 501
  store <4 x float> zeroinitializer, ptr %92, align 4, !tbaa !11
  %93 = getelementptr inbounds float, ptr %ResBase, i64 518
  store <4 x float> zeroinitializer, ptr %93, align 8, !tbaa !11
  %94 = getelementptr inbounds float, ptr %ResBase, i64 12
  store <4 x float> zeroinitializer, ptr %94, align 16, !tbaa !11
  %95 = getelementptr inbounds float, ptr %ResBase, i64 29
  store <4 x float> zeroinitializer, ptr %95, align 4, !tbaa !11
  %96 = getelementptr inbounds float, ptr %ResBase, i64 46
  store <4 x float> zeroinitializer, ptr %96, align 8, !tbaa !11
  %97 = getelementptr inbounds float, ptr %ResBase, i64 63
  store <4 x float> zeroinitializer, ptr %97, align 4, !tbaa !11
  %98 = getelementptr inbounds float, ptr %ResBase, i64 80
  store <4 x float> zeroinitializer, ptr %98, align 16, !tbaa !11
  %99 = getelementptr inbounds float, ptr %ResBase, i64 97
  store <4 x float> zeroinitializer, ptr %99, align 4, !tbaa !11
  %100 = getelementptr inbounds float, ptr %ResBase, i64 114
  store <4 x float> zeroinitializer, ptr %100, align 8, !tbaa !11
  %101 = getelementptr inbounds float, ptr %ResBase, i64 131
  store <4 x float> zeroinitializer, ptr %101, align 4, !tbaa !11
  %102 = getelementptr inbounds float, ptr %ResBase, i64 148
  store <4 x float> zeroinitializer, ptr %102, align 16, !tbaa !11
  %103 = getelementptr inbounds float, ptr %ResBase, i64 165
  store <4 x float> zeroinitializer, ptr %103, align 4, !tbaa !11
  %104 = getelementptr inbounds float, ptr %ResBase, i64 182
  store <4 x float> zeroinitializer, ptr %104, align 8, !tbaa !11
  %105 = getelementptr inbounds float, ptr %ResBase, i64 199
  store <4 x float> zeroinitializer, ptr %105, align 4, !tbaa !11
  %106 = getelementptr inbounds float, ptr %ResBase, i64 216
  store <4 x float> zeroinitializer, ptr %106, align 16, !tbaa !11
  %107 = getelementptr inbounds float, ptr %ResBase, i64 233
  store <4 x float> zeroinitializer, ptr %107, align 4, !tbaa !11
  %108 = getelementptr inbounds float, ptr %ResBase, i64 250
  store <4 x float> zeroinitializer, ptr %108, align 8, !tbaa !11
  %109 = getelementptr inbounds float, ptr %ResBase, i64 267
  store <4 x float> zeroinitializer, ptr %109, align 4, !tbaa !11
  %110 = getelementptr inbounds float, ptr %ResBase, i64 284
  store <4 x float> zeroinitializer, ptr %110, align 16, !tbaa !11
  %111 = getelementptr inbounds float, ptr %ResBase, i64 301
  store <4 x float> zeroinitializer, ptr %111, align 4, !tbaa !11
  %112 = getelementptr inbounds float, ptr %ResBase, i64 318
  store <4 x float> zeroinitializer, ptr %112, align 8, !tbaa !11
  %113 = getelementptr inbounds float, ptr %ResBase, i64 335
  store <4 x float> zeroinitializer, ptr %113, align 4, !tbaa !11
  %114 = getelementptr inbounds float, ptr %ResBase, i64 352
  store <4 x float> zeroinitializer, ptr %114, align 16, !tbaa !11
  %115 = getelementptr inbounds float, ptr %ResBase, i64 369
  store <4 x float> zeroinitializer, ptr %115, align 4, !tbaa !11
  %116 = getelementptr inbounds float, ptr %ResBase, i64 386
  store <4 x float> zeroinitializer, ptr %116, align 8, !tbaa !11
  %117 = getelementptr inbounds float, ptr %ResBase, i64 403
  store <4 x float> zeroinitializer, ptr %117, align 4, !tbaa !11
  %118 = getelementptr inbounds float, ptr %ResBase, i64 420
  store <4 x float> zeroinitializer, ptr %118, align 16, !tbaa !11
  %119 = getelementptr inbounds float, ptr %ResBase, i64 437
  store <4 x float> zeroinitializer, ptr %119, align 4, !tbaa !11
  %120 = getelementptr inbounds float, ptr %ResBase, i64 454
  store <4 x float> zeroinitializer, ptr %120, align 8, !tbaa !11
  %121 = getelementptr inbounds float, ptr %ResBase, i64 471
  store <4 x float> zeroinitializer, ptr %121, align 4, !tbaa !11
  %122 = getelementptr inbounds float, ptr %ResBase, i64 488
  store <4 x float> zeroinitializer, ptr %122, align 16, !tbaa !11
  %123 = getelementptr inbounds float, ptr %ResBase, i64 505
  store <4 x float> zeroinitializer, ptr %123, align 4, !tbaa !11
  %124 = getelementptr inbounds float, ptr %ResBase, i64 522
  store <4 x float> zeroinitializer, ptr %124, align 8, !tbaa !11
  %arrayidx.us.i = getelementptr inbounds float, ptr %ResBase, i64 16
  store float 0.000000e+00, ptr %arrayidx.us.i, align 16, !tbaa !11
  %arrayidx.us.i.1 = getelementptr inbounds float, ptr %ResBase, i64 33
  store float 0.000000e+00, ptr %arrayidx.us.i.1, align 4, !tbaa !11
  %arrayidx.us.i.2 = getelementptr inbounds float, ptr %ResBase, i64 50
  store float 0.000000e+00, ptr %arrayidx.us.i.2, align 8, !tbaa !11
  %arrayidx.us.i.3 = getelementptr inbounds float, ptr %ResBase, i64 67
  store float 0.000000e+00, ptr %arrayidx.us.i.3, align 4, !tbaa !11
  %arrayidx.us.i.4 = getelementptr inbounds float, ptr %ResBase, i64 84
  store float 0.000000e+00, ptr %arrayidx.us.i.4, align 16, !tbaa !11
  %arrayidx.us.i.5 = getelementptr inbounds float, ptr %ResBase, i64 101
  store float 0.000000e+00, ptr %arrayidx.us.i.5, align 4, !tbaa !11
  %arrayidx.us.i.6 = getelementptr inbounds float, ptr %ResBase, i64 118
  store float 0.000000e+00, ptr %arrayidx.us.i.6, align 8, !tbaa !11
  %arrayidx.us.i.7 = getelementptr inbounds float, ptr %ResBase, i64 135
  store float 0.000000e+00, ptr %arrayidx.us.i.7, align 4, !tbaa !11
  %arrayidx.us.i.8 = getelementptr inbounds float, ptr %ResBase, i64 152
  store float 0.000000e+00, ptr %arrayidx.us.i.8, align 16, !tbaa !11
  %arrayidx.us.i.9 = getelementptr inbounds float, ptr %ResBase, i64 169
  store float 0.000000e+00, ptr %arrayidx.us.i.9, align 4, !tbaa !11
  %arrayidx.us.i.10 = getelementptr inbounds float, ptr %ResBase, i64 186
  store float 0.000000e+00, ptr %arrayidx.us.i.10, align 8, !tbaa !11
  %arrayidx.us.i.11 = getelementptr inbounds float, ptr %ResBase, i64 203
  store float 0.000000e+00, ptr %arrayidx.us.i.11, align 4, !tbaa !11
  %arrayidx.us.i.12 = getelementptr inbounds float, ptr %ResBase, i64 220
  store float 0.000000e+00, ptr %arrayidx.us.i.12, align 16, !tbaa !11
  %arrayidx.us.i.13 = getelementptr inbounds float, ptr %ResBase, i64 237
  store float 0.000000e+00, ptr %arrayidx.us.i.13, align 4, !tbaa !11
  %arrayidx.us.i.14 = getelementptr inbounds float, ptr %ResBase, i64 254
  store float 0.000000e+00, ptr %arrayidx.us.i.14, align 8, !tbaa !11
  %arrayidx.us.i.15 = getelementptr inbounds float, ptr %ResBase, i64 271
  store float 0.000000e+00, ptr %arrayidx.us.i.15, align 4, !tbaa !11
  %arrayidx.us.i.16 = getelementptr inbounds float, ptr %ResBase, i64 288
  store float 0.000000e+00, ptr %arrayidx.us.i.16, align 16, !tbaa !11
  %arrayidx.us.i.17 = getelementptr inbounds float, ptr %ResBase, i64 305
  store float 0.000000e+00, ptr %arrayidx.us.i.17, align 4, !tbaa !11
  %arrayidx.us.i.18 = getelementptr inbounds float, ptr %ResBase, i64 322
  store float 0.000000e+00, ptr %arrayidx.us.i.18, align 8, !tbaa !11
  %arrayidx.us.i.19 = getelementptr inbounds float, ptr %ResBase, i64 339
  store float 0.000000e+00, ptr %arrayidx.us.i.19, align 4, !tbaa !11
  %arrayidx.us.i.20 = getelementptr inbounds float, ptr %ResBase, i64 356
  store float 0.000000e+00, ptr %arrayidx.us.i.20, align 16, !tbaa !11
  %arrayidx.us.i.21 = getelementptr inbounds float, ptr %ResBase, i64 373
  store float 0.000000e+00, ptr %arrayidx.us.i.21, align 4, !tbaa !11
  %arrayidx.us.i.22 = getelementptr inbounds float, ptr %ResBase, i64 390
  store float 0.000000e+00, ptr %arrayidx.us.i.22, align 8, !tbaa !11
  %arrayidx.us.i.23 = getelementptr inbounds float, ptr %ResBase, i64 407
  store float 0.000000e+00, ptr %arrayidx.us.i.23, align 4, !tbaa !11
  %arrayidx.us.i.24 = getelementptr inbounds float, ptr %ResBase, i64 424
  store float 0.000000e+00, ptr %arrayidx.us.i.24, align 16, !tbaa !11
  %arrayidx.us.i.25 = getelementptr inbounds float, ptr %ResBase, i64 441
  store float 0.000000e+00, ptr %arrayidx.us.i.25, align 4, !tbaa !11
  %arrayidx.us.i.26 = getelementptr inbounds float, ptr %ResBase, i64 458
  store float 0.000000e+00, ptr %arrayidx.us.i.26, align 8, !tbaa !11
  %arrayidx.us.i.27 = getelementptr inbounds float, ptr %ResBase, i64 475
  store float 0.000000e+00, ptr %arrayidx.us.i.27, align 4, !tbaa !11
  %arrayidx.us.i.28 = getelementptr inbounds float, ptr %ResBase, i64 492
  store float 0.000000e+00, ptr %arrayidx.us.i.28, align 16, !tbaa !11
  %arrayidx.us.i.29 = getelementptr inbounds float, ptr %ResBase, i64 509
  store float 0.000000e+00, ptr %arrayidx.us.i.29, align 4, !tbaa !11
  %arrayidx.us.i.30 = getelementptr inbounds float, ptr %ResBase, i64 526
  store float 0.000000e+00, ptr %arrayidx.us.i.30, align 8, !tbaa !11
  store <4 x float> zeroinitializer, ptr %ResSpec, align 16, !tbaa !11
  %125 = getelementptr inbounds float, ptr %ResSpec, i64 17
  store <4 x float> zeroinitializer, ptr %125, align 4, !tbaa !11
  %126 = getelementptr inbounds float, ptr %ResSpec, i64 34
  store <4 x float> zeroinitializer, ptr %126, align 8, !tbaa !11
  %127 = getelementptr inbounds float, ptr %ResSpec, i64 51
  store <4 x float> zeroinitializer, ptr %127, align 4, !tbaa !11
  %128 = getelementptr inbounds float, ptr %ResSpec, i64 68
  store <4 x float> zeroinitializer, ptr %128, align 16, !tbaa !11
  %129 = getelementptr inbounds float, ptr %ResSpec, i64 85
  store <4 x float> zeroinitializer, ptr %129, align 4, !tbaa !11
  %130 = getelementptr inbounds float, ptr %ResSpec, i64 102
  store <4 x float> zeroinitializer, ptr %130, align 8, !tbaa !11
  %131 = getelementptr inbounds float, ptr %ResSpec, i64 119
  store <4 x float> zeroinitializer, ptr %131, align 4, !tbaa !11
  %132 = getelementptr inbounds float, ptr %ResSpec, i64 136
  store <4 x float> zeroinitializer, ptr %132, align 16, !tbaa !11
  %133 = getelementptr inbounds float, ptr %ResSpec, i64 153
  store <4 x float> zeroinitializer, ptr %133, align 4, !tbaa !11
  %134 = getelementptr inbounds float, ptr %ResSpec, i64 170
  store <4 x float> zeroinitializer, ptr %134, align 8, !tbaa !11
  %135 = getelementptr inbounds float, ptr %ResSpec, i64 187
  store <4 x float> zeroinitializer, ptr %135, align 4, !tbaa !11
  %136 = getelementptr inbounds float, ptr %ResSpec, i64 204
  store <4 x float> zeroinitializer, ptr %136, align 16, !tbaa !11
  %137 = getelementptr inbounds float, ptr %ResSpec, i64 221
  store <4 x float> zeroinitializer, ptr %137, align 4, !tbaa !11
  %138 = getelementptr inbounds float, ptr %ResSpec, i64 238
  store <4 x float> zeroinitializer, ptr %138, align 8, !tbaa !11
  %139 = getelementptr inbounds float, ptr %ResSpec, i64 255
  store <4 x float> zeroinitializer, ptr %139, align 4, !tbaa !11
  %140 = getelementptr inbounds float, ptr %ResSpec, i64 272
  store <4 x float> zeroinitializer, ptr %140, align 16, !tbaa !11
  %141 = getelementptr inbounds float, ptr %ResSpec, i64 289
  store <4 x float> zeroinitializer, ptr %141, align 4, !tbaa !11
  %142 = getelementptr inbounds float, ptr %ResSpec, i64 306
  store <4 x float> zeroinitializer, ptr %142, align 8, !tbaa !11
  %143 = getelementptr inbounds float, ptr %ResSpec, i64 323
  store <4 x float> zeroinitializer, ptr %143, align 4, !tbaa !11
  %144 = getelementptr inbounds float, ptr %ResSpec, i64 340
  store <4 x float> zeroinitializer, ptr %144, align 16, !tbaa !11
  %145 = getelementptr inbounds float, ptr %ResSpec, i64 357
  store <4 x float> zeroinitializer, ptr %145, align 4, !tbaa !11
  %146 = getelementptr inbounds float, ptr %ResSpec, i64 374
  store <4 x float> zeroinitializer, ptr %146, align 8, !tbaa !11
  %147 = getelementptr inbounds float, ptr %ResSpec, i64 391
  store <4 x float> zeroinitializer, ptr %147, align 4, !tbaa !11
  %148 = getelementptr inbounds float, ptr %ResSpec, i64 408
  store <4 x float> zeroinitializer, ptr %148, align 16, !tbaa !11
  %149 = getelementptr inbounds float, ptr %ResSpec, i64 425
  store <4 x float> zeroinitializer, ptr %149, align 4, !tbaa !11
  %150 = getelementptr inbounds float, ptr %ResSpec, i64 442
  store <4 x float> zeroinitializer, ptr %150, align 8, !tbaa !11
  %151 = getelementptr inbounds float, ptr %ResSpec, i64 459
  store <4 x float> zeroinitializer, ptr %151, align 4, !tbaa !11
  %152 = getelementptr inbounds float, ptr %ResSpec, i64 476
  store <4 x float> zeroinitializer, ptr %152, align 16, !tbaa !11
  %153 = getelementptr inbounds float, ptr %ResSpec, i64 493
  store <4 x float> zeroinitializer, ptr %153, align 4, !tbaa !11
  %154 = getelementptr inbounds float, ptr %ResSpec, i64 510
  store <4 x float> zeroinitializer, ptr %154, align 8, !tbaa !11
  %155 = getelementptr inbounds float, ptr %ResSpec, i64 4
  store <4 x float> zeroinitializer, ptr %155, align 16, !tbaa !11
  %156 = getelementptr inbounds float, ptr %ResSpec, i64 21
  store <4 x float> zeroinitializer, ptr %156, align 4, !tbaa !11
  %157 = getelementptr inbounds float, ptr %ResSpec, i64 38
  store <4 x float> zeroinitializer, ptr %157, align 8, !tbaa !11
  %158 = getelementptr inbounds float, ptr %ResSpec, i64 55
  store <4 x float> zeroinitializer, ptr %158, align 4, !tbaa !11
  %159 = getelementptr inbounds float, ptr %ResSpec, i64 72
  store <4 x float> zeroinitializer, ptr %159, align 16, !tbaa !11
  %160 = getelementptr inbounds float, ptr %ResSpec, i64 89
  store <4 x float> zeroinitializer, ptr %160, align 4, !tbaa !11
  %161 = getelementptr inbounds float, ptr %ResSpec, i64 106
  store <4 x float> zeroinitializer, ptr %161, align 8, !tbaa !11
  %162 = getelementptr inbounds float, ptr %ResSpec, i64 123
  store <4 x float> zeroinitializer, ptr %162, align 4, !tbaa !11
  %163 = getelementptr inbounds float, ptr %ResSpec, i64 140
  store <4 x float> zeroinitializer, ptr %163, align 16, !tbaa !11
  %164 = getelementptr inbounds float, ptr %ResSpec, i64 157
  store <4 x float> zeroinitializer, ptr %164, align 4, !tbaa !11
  %165 = getelementptr inbounds float, ptr %ResSpec, i64 174
  store <4 x float> zeroinitializer, ptr %165, align 8, !tbaa !11
  %166 = getelementptr inbounds float, ptr %ResSpec, i64 191
  store <4 x float> zeroinitializer, ptr %166, align 4, !tbaa !11
  %167 = getelementptr inbounds float, ptr %ResSpec, i64 208
  store <4 x float> zeroinitializer, ptr %167, align 16, !tbaa !11
  %168 = getelementptr inbounds float, ptr %ResSpec, i64 225
  store <4 x float> zeroinitializer, ptr %168, align 4, !tbaa !11
  %169 = getelementptr inbounds float, ptr %ResSpec, i64 242
  store <4 x float> zeroinitializer, ptr %169, align 8, !tbaa !11
  %170 = getelementptr inbounds float, ptr %ResSpec, i64 259
  store <4 x float> zeroinitializer, ptr %170, align 4, !tbaa !11
  %171 = getelementptr inbounds float, ptr %ResSpec, i64 276
  store <4 x float> zeroinitializer, ptr %171, align 16, !tbaa !11
  %172 = getelementptr inbounds float, ptr %ResSpec, i64 293
  store <4 x float> zeroinitializer, ptr %172, align 4, !tbaa !11
  %173 = getelementptr inbounds float, ptr %ResSpec, i64 310
  store <4 x float> zeroinitializer, ptr %173, align 8, !tbaa !11
  %174 = getelementptr inbounds float, ptr %ResSpec, i64 327
  store <4 x float> zeroinitializer, ptr %174, align 4, !tbaa !11
  %175 = getelementptr inbounds float, ptr %ResSpec, i64 344
  store <4 x float> zeroinitializer, ptr %175, align 16, !tbaa !11
  %176 = getelementptr inbounds float, ptr %ResSpec, i64 361
  store <4 x float> zeroinitializer, ptr %176, align 4, !tbaa !11
  %177 = getelementptr inbounds float, ptr %ResSpec, i64 378
  store <4 x float> zeroinitializer, ptr %177, align 8, !tbaa !11
  %178 = getelementptr inbounds float, ptr %ResSpec, i64 395
  store <4 x float> zeroinitializer, ptr %178, align 4, !tbaa !11
  %179 = getelementptr inbounds float, ptr %ResSpec, i64 412
  store <4 x float> zeroinitializer, ptr %179, align 16, !tbaa !11
  %180 = getelementptr inbounds float, ptr %ResSpec, i64 429
  store <4 x float> zeroinitializer, ptr %180, align 4, !tbaa !11
  %181 = getelementptr inbounds float, ptr %ResSpec, i64 446
  store <4 x float> zeroinitializer, ptr %181, align 8, !tbaa !11
  %182 = getelementptr inbounds float, ptr %ResSpec, i64 463
  store <4 x float> zeroinitializer, ptr %182, align 4, !tbaa !11
  %183 = getelementptr inbounds float, ptr %ResSpec, i64 480
  store <4 x float> zeroinitializer, ptr %183, align 16, !tbaa !11
  %184 = getelementptr inbounds float, ptr %ResSpec, i64 497
  store <4 x float> zeroinitializer, ptr %184, align 4, !tbaa !11
  %185 = getelementptr inbounds float, ptr %ResSpec, i64 514
  store <4 x float> zeroinitializer, ptr %185, align 8, !tbaa !11
  %186 = getelementptr inbounds float, ptr %ResSpec, i64 8
  store <4 x float> zeroinitializer, ptr %186, align 16, !tbaa !11
  %187 = getelementptr inbounds float, ptr %ResSpec, i64 25
  store <4 x float> zeroinitializer, ptr %187, align 4, !tbaa !11
  %188 = getelementptr inbounds float, ptr %ResSpec, i64 42
  store <4 x float> zeroinitializer, ptr %188, align 8, !tbaa !11
  %189 = getelementptr inbounds float, ptr %ResSpec, i64 59
  store <4 x float> zeroinitializer, ptr %189, align 4, !tbaa !11
  %190 = getelementptr inbounds float, ptr %ResSpec, i64 76
  store <4 x float> zeroinitializer, ptr %190, align 16, !tbaa !11
  %191 = getelementptr inbounds float, ptr %ResSpec, i64 93
  store <4 x float> zeroinitializer, ptr %191, align 4, !tbaa !11
  %192 = getelementptr inbounds float, ptr %ResSpec, i64 110
  store <4 x float> zeroinitializer, ptr %192, align 8, !tbaa !11
  %193 = getelementptr inbounds float, ptr %ResSpec, i64 127
  store <4 x float> zeroinitializer, ptr %193, align 4, !tbaa !11
  %194 = getelementptr inbounds float, ptr %ResSpec, i64 144
  store <4 x float> zeroinitializer, ptr %194, align 16, !tbaa !11
  %195 = getelementptr inbounds float, ptr %ResSpec, i64 161
  store <4 x float> zeroinitializer, ptr %195, align 4, !tbaa !11
  %196 = getelementptr inbounds float, ptr %ResSpec, i64 178
  store <4 x float> zeroinitializer, ptr %196, align 8, !tbaa !11
  %197 = getelementptr inbounds float, ptr %ResSpec, i64 195
  store <4 x float> zeroinitializer, ptr %197, align 4, !tbaa !11
  %198 = getelementptr inbounds float, ptr %ResSpec, i64 212
  store <4 x float> zeroinitializer, ptr %198, align 16, !tbaa !11
  %199 = getelementptr inbounds float, ptr %ResSpec, i64 229
  store <4 x float> zeroinitializer, ptr %199, align 4, !tbaa !11
  %200 = getelementptr inbounds float, ptr %ResSpec, i64 246
  store <4 x float> zeroinitializer, ptr %200, align 8, !tbaa !11
  %201 = getelementptr inbounds float, ptr %ResSpec, i64 263
  store <4 x float> zeroinitializer, ptr %201, align 4, !tbaa !11
  %202 = getelementptr inbounds float, ptr %ResSpec, i64 280
  store <4 x float> zeroinitializer, ptr %202, align 16, !tbaa !11
  %203 = getelementptr inbounds float, ptr %ResSpec, i64 297
  store <4 x float> zeroinitializer, ptr %203, align 4, !tbaa !11
  %204 = getelementptr inbounds float, ptr %ResSpec, i64 314
  store <4 x float> zeroinitializer, ptr %204, align 8, !tbaa !11
  %205 = getelementptr inbounds float, ptr %ResSpec, i64 331
  store <4 x float> zeroinitializer, ptr %205, align 4, !tbaa !11
  %206 = getelementptr inbounds float, ptr %ResSpec, i64 348
  store <4 x float> zeroinitializer, ptr %206, align 16, !tbaa !11
  %207 = getelementptr inbounds float, ptr %ResSpec, i64 365
  store <4 x float> zeroinitializer, ptr %207, align 4, !tbaa !11
  %208 = getelementptr inbounds float, ptr %ResSpec, i64 382
  store <4 x float> zeroinitializer, ptr %208, align 8, !tbaa !11
  %209 = getelementptr inbounds float, ptr %ResSpec, i64 399
  store <4 x float> zeroinitializer, ptr %209, align 4, !tbaa !11
  %210 = getelementptr inbounds float, ptr %ResSpec, i64 416
  store <4 x float> zeroinitializer, ptr %210, align 16, !tbaa !11
  %211 = getelementptr inbounds float, ptr %ResSpec, i64 433
  store <4 x float> zeroinitializer, ptr %211, align 4, !tbaa !11
  %212 = getelementptr inbounds float, ptr %ResSpec, i64 450
  store <4 x float> zeroinitializer, ptr %212, align 8, !tbaa !11
  %213 = getelementptr inbounds float, ptr %ResSpec, i64 467
  store <4 x float> zeroinitializer, ptr %213, align 4, !tbaa !11
  %214 = getelementptr inbounds float, ptr %ResSpec, i64 484
  store <4 x float> zeroinitializer, ptr %214, align 16, !tbaa !11
  %215 = getelementptr inbounds float, ptr %ResSpec, i64 501
  store <4 x float> zeroinitializer, ptr %215, align 4, !tbaa !11
  %216 = getelementptr inbounds float, ptr %ResSpec, i64 518
  store <4 x float> zeroinitializer, ptr %216, align 8, !tbaa !11
  %217 = getelementptr inbounds float, ptr %ResSpec, i64 12
  store <4 x float> zeroinitializer, ptr %217, align 16, !tbaa !11
  %218 = getelementptr inbounds float, ptr %ResSpec, i64 29
  store <4 x float> zeroinitializer, ptr %218, align 4, !tbaa !11
  %219 = getelementptr inbounds float, ptr %ResSpec, i64 46
  store <4 x float> zeroinitializer, ptr %219, align 8, !tbaa !11
  %220 = getelementptr inbounds float, ptr %ResSpec, i64 63
  store <4 x float> zeroinitializer, ptr %220, align 4, !tbaa !11
  %221 = getelementptr inbounds float, ptr %ResSpec, i64 80
  store <4 x float> zeroinitializer, ptr %221, align 16, !tbaa !11
  %222 = getelementptr inbounds float, ptr %ResSpec, i64 97
  store <4 x float> zeroinitializer, ptr %222, align 4, !tbaa !11
  %223 = getelementptr inbounds float, ptr %ResSpec, i64 114
  store <4 x float> zeroinitializer, ptr %223, align 8, !tbaa !11
  %224 = getelementptr inbounds float, ptr %ResSpec, i64 131
  store <4 x float> zeroinitializer, ptr %224, align 4, !tbaa !11
  %225 = getelementptr inbounds float, ptr %ResSpec, i64 148
  store <4 x float> zeroinitializer, ptr %225, align 16, !tbaa !11
  %226 = getelementptr inbounds float, ptr %ResSpec, i64 165
  store <4 x float> zeroinitializer, ptr %226, align 4, !tbaa !11
  %227 = getelementptr inbounds float, ptr %ResSpec, i64 182
  store <4 x float> zeroinitializer, ptr %227, align 8, !tbaa !11
  %228 = getelementptr inbounds float, ptr %ResSpec, i64 199
  store <4 x float> zeroinitializer, ptr %228, align 4, !tbaa !11
  %229 = getelementptr inbounds float, ptr %ResSpec, i64 216
  store <4 x float> zeroinitializer, ptr %229, align 16, !tbaa !11
  %230 = getelementptr inbounds float, ptr %ResSpec, i64 233
  store <4 x float> zeroinitializer, ptr %230, align 4, !tbaa !11
  %231 = getelementptr inbounds float, ptr %ResSpec, i64 250
  store <4 x float> zeroinitializer, ptr %231, align 8, !tbaa !11
  %232 = getelementptr inbounds float, ptr %ResSpec, i64 267
  store <4 x float> zeroinitializer, ptr %232, align 4, !tbaa !11
  %233 = getelementptr inbounds float, ptr %ResSpec, i64 284
  store <4 x float> zeroinitializer, ptr %233, align 16, !tbaa !11
  %234 = getelementptr inbounds float, ptr %ResSpec, i64 301
  store <4 x float> zeroinitializer, ptr %234, align 4, !tbaa !11
  %235 = getelementptr inbounds float, ptr %ResSpec, i64 318
  store <4 x float> zeroinitializer, ptr %235, align 8, !tbaa !11
  %236 = getelementptr inbounds float, ptr %ResSpec, i64 335
  store <4 x float> zeroinitializer, ptr %236, align 4, !tbaa !11
  %237 = getelementptr inbounds float, ptr %ResSpec, i64 352
  store <4 x float> zeroinitializer, ptr %237, align 16, !tbaa !11
  %238 = getelementptr inbounds float, ptr %ResSpec, i64 369
  store <4 x float> zeroinitializer, ptr %238, align 4, !tbaa !11
  %239 = getelementptr inbounds float, ptr %ResSpec, i64 386
  store <4 x float> zeroinitializer, ptr %239, align 8, !tbaa !11
  %240 = getelementptr inbounds float, ptr %ResSpec, i64 403
  store <4 x float> zeroinitializer, ptr %240, align 4, !tbaa !11
  %241 = getelementptr inbounds float, ptr %ResSpec, i64 420
  store <4 x float> zeroinitializer, ptr %241, align 16, !tbaa !11
  %242 = getelementptr inbounds float, ptr %ResSpec, i64 437
  store <4 x float> zeroinitializer, ptr %242, align 4, !tbaa !11
  %243 = getelementptr inbounds float, ptr %ResSpec, i64 454
  store <4 x float> zeroinitializer, ptr %243, align 8, !tbaa !11
  %244 = getelementptr inbounds float, ptr %ResSpec, i64 471
  store <4 x float> zeroinitializer, ptr %244, align 4, !tbaa !11
  %245 = getelementptr inbounds float, ptr %ResSpec, i64 488
  store <4 x float> zeroinitializer, ptr %245, align 16, !tbaa !11
  %246 = getelementptr inbounds float, ptr %ResSpec, i64 505
  store <4 x float> zeroinitializer, ptr %246, align 4, !tbaa !11
  %247 = getelementptr inbounds float, ptr %ResSpec, i64 522
  store <4 x float> zeroinitializer, ptr %247, align 8, !tbaa !11
  %arrayidx.us.i23 = getelementptr inbounds float, ptr %ResSpec, i64 16
  store float 0.000000e+00, ptr %arrayidx.us.i23, align 16, !tbaa !11
  %arrayidx.us.i23.1 = getelementptr inbounds float, ptr %ResSpec, i64 33
  store float 0.000000e+00, ptr %arrayidx.us.i23.1, align 4, !tbaa !11
  %arrayidx.us.i23.2 = getelementptr inbounds float, ptr %ResSpec, i64 50
  store float 0.000000e+00, ptr %arrayidx.us.i23.2, align 8, !tbaa !11
  %arrayidx.us.i23.3 = getelementptr inbounds float, ptr %ResSpec, i64 67
  store float 0.000000e+00, ptr %arrayidx.us.i23.3, align 4, !tbaa !11
  %arrayidx.us.i23.4 = getelementptr inbounds float, ptr %ResSpec, i64 84
  store float 0.000000e+00, ptr %arrayidx.us.i23.4, align 16, !tbaa !11
  %arrayidx.us.i23.5 = getelementptr inbounds float, ptr %ResSpec, i64 101
  store float 0.000000e+00, ptr %arrayidx.us.i23.5, align 4, !tbaa !11
  %arrayidx.us.i23.6 = getelementptr inbounds float, ptr %ResSpec, i64 118
  store float 0.000000e+00, ptr %arrayidx.us.i23.6, align 8, !tbaa !11
  %arrayidx.us.i23.7 = getelementptr inbounds float, ptr %ResSpec, i64 135
  store float 0.000000e+00, ptr %arrayidx.us.i23.7, align 4, !tbaa !11
  %arrayidx.us.i23.8 = getelementptr inbounds float, ptr %ResSpec, i64 152
  store float 0.000000e+00, ptr %arrayidx.us.i23.8, align 16, !tbaa !11
  %arrayidx.us.i23.9 = getelementptr inbounds float, ptr %ResSpec, i64 169
  store float 0.000000e+00, ptr %arrayidx.us.i23.9, align 4, !tbaa !11
  %arrayidx.us.i23.10 = getelementptr inbounds float, ptr %ResSpec, i64 186
  store float 0.000000e+00, ptr %arrayidx.us.i23.10, align 8, !tbaa !11
  %arrayidx.us.i23.11 = getelementptr inbounds float, ptr %ResSpec, i64 203
  store float 0.000000e+00, ptr %arrayidx.us.i23.11, align 4, !tbaa !11
  %arrayidx.us.i23.12 = getelementptr inbounds float, ptr %ResSpec, i64 220
  store float 0.000000e+00, ptr %arrayidx.us.i23.12, align 16, !tbaa !11
  %arrayidx.us.i23.13 = getelementptr inbounds float, ptr %ResSpec, i64 237
  store float 0.000000e+00, ptr %arrayidx.us.i23.13, align 4, !tbaa !11
  %arrayidx.us.i23.14 = getelementptr inbounds float, ptr %ResSpec, i64 254
  store float 0.000000e+00, ptr %arrayidx.us.i23.14, align 8, !tbaa !11
  %arrayidx.us.i23.15 = getelementptr inbounds float, ptr %ResSpec, i64 271
  store float 0.000000e+00, ptr %arrayidx.us.i23.15, align 4, !tbaa !11
  %arrayidx.us.i23.16 = getelementptr inbounds float, ptr %ResSpec, i64 288
  store float 0.000000e+00, ptr %arrayidx.us.i23.16, align 16, !tbaa !11
  %arrayidx.us.i23.17 = getelementptr inbounds float, ptr %ResSpec, i64 305
  store float 0.000000e+00, ptr %arrayidx.us.i23.17, align 4, !tbaa !11
  %arrayidx.us.i23.18 = getelementptr inbounds float, ptr %ResSpec, i64 322
  store float 0.000000e+00, ptr %arrayidx.us.i23.18, align 8, !tbaa !11
  %arrayidx.us.i23.19 = getelementptr inbounds float, ptr %ResSpec, i64 339
  store float 0.000000e+00, ptr %arrayidx.us.i23.19, align 4, !tbaa !11
  %arrayidx.us.i23.20 = getelementptr inbounds float, ptr %ResSpec, i64 356
  store float 0.000000e+00, ptr %arrayidx.us.i23.20, align 16, !tbaa !11
  %arrayidx.us.i23.21 = getelementptr inbounds float, ptr %ResSpec, i64 373
  store float 0.000000e+00, ptr %arrayidx.us.i23.21, align 4, !tbaa !11
  %arrayidx.us.i23.22 = getelementptr inbounds float, ptr %ResSpec, i64 390
  store float 0.000000e+00, ptr %arrayidx.us.i23.22, align 8, !tbaa !11
  %arrayidx.us.i23.23 = getelementptr inbounds float, ptr %ResSpec, i64 407
  store float 0.000000e+00, ptr %arrayidx.us.i23.23, align 4, !tbaa !11
  %arrayidx.us.i23.24 = getelementptr inbounds float, ptr %ResSpec, i64 424
  store float 0.000000e+00, ptr %arrayidx.us.i23.24, align 16, !tbaa !11
  %arrayidx.us.i23.25 = getelementptr inbounds float, ptr %ResSpec, i64 441
  store float 0.000000e+00, ptr %arrayidx.us.i23.25, align 4, !tbaa !11
  %arrayidx.us.i23.26 = getelementptr inbounds float, ptr %ResSpec, i64 458
  store float 0.000000e+00, ptr %arrayidx.us.i23.26, align 8, !tbaa !11
  %arrayidx.us.i23.27 = getelementptr inbounds float, ptr %ResSpec, i64 475
  store float 0.000000e+00, ptr %arrayidx.us.i23.27, align 4, !tbaa !11
  %arrayidx.us.i23.28 = getelementptr inbounds float, ptr %ResSpec, i64 492
  store float 0.000000e+00, ptr %arrayidx.us.i23.28, align 16, !tbaa !11
  %arrayidx.us.i23.29 = getelementptr inbounds float, ptr %ResSpec, i64 509
  store float 0.000000e+00, ptr %arrayidx.us.i23.29, align 4, !tbaa !11
  %arrayidx.us.i23.30 = getelementptr inbounds float, ptr %ResSpec, i64 526
  store float 0.000000e+00, ptr %arrayidx.us.i23.30, align 8, !tbaa !11
  store <4 x float> zeroinitializer, ptr %ResBuiltin, align 16, !tbaa !11
  %248 = getelementptr inbounds float, ptr %ResBuiltin, i64 17
  store <4 x float> zeroinitializer, ptr %248, align 4, !tbaa !11
  %249 = getelementptr inbounds float, ptr %ResBuiltin, i64 34
  store <4 x float> zeroinitializer, ptr %249, align 8, !tbaa !11
  %250 = getelementptr inbounds float, ptr %ResBuiltin, i64 51
  store <4 x float> zeroinitializer, ptr %250, align 4, !tbaa !11
  %251 = getelementptr inbounds float, ptr %ResBuiltin, i64 68
  store <4 x float> zeroinitializer, ptr %251, align 16, !tbaa !11
  %252 = getelementptr inbounds float, ptr %ResBuiltin, i64 85
  store <4 x float> zeroinitializer, ptr %252, align 4, !tbaa !11
  %253 = getelementptr inbounds float, ptr %ResBuiltin, i64 102
  store <4 x float> zeroinitializer, ptr %253, align 8, !tbaa !11
  %254 = getelementptr inbounds float, ptr %ResBuiltin, i64 119
  store <4 x float> zeroinitializer, ptr %254, align 4, !tbaa !11
  %255 = getelementptr inbounds float, ptr %ResBuiltin, i64 136
  store <4 x float> zeroinitializer, ptr %255, align 16, !tbaa !11
  %256 = getelementptr inbounds float, ptr %ResBuiltin, i64 153
  store <4 x float> zeroinitializer, ptr %256, align 4, !tbaa !11
  %257 = getelementptr inbounds float, ptr %ResBuiltin, i64 170
  store <4 x float> zeroinitializer, ptr %257, align 8, !tbaa !11
  %258 = getelementptr inbounds float, ptr %ResBuiltin, i64 187
  store <4 x float> zeroinitializer, ptr %258, align 4, !tbaa !11
  %259 = getelementptr inbounds float, ptr %ResBuiltin, i64 204
  store <4 x float> zeroinitializer, ptr %259, align 16, !tbaa !11
  %260 = getelementptr inbounds float, ptr %ResBuiltin, i64 221
  store <4 x float> zeroinitializer, ptr %260, align 4, !tbaa !11
  %261 = getelementptr inbounds float, ptr %ResBuiltin, i64 238
  store <4 x float> zeroinitializer, ptr %261, align 8, !tbaa !11
  %262 = getelementptr inbounds float, ptr %ResBuiltin, i64 255
  store <4 x float> zeroinitializer, ptr %262, align 4, !tbaa !11
  %263 = getelementptr inbounds float, ptr %ResBuiltin, i64 272
  store <4 x float> zeroinitializer, ptr %263, align 16, !tbaa !11
  %264 = getelementptr inbounds float, ptr %ResBuiltin, i64 289
  store <4 x float> zeroinitializer, ptr %264, align 4, !tbaa !11
  %265 = getelementptr inbounds float, ptr %ResBuiltin, i64 306
  store <4 x float> zeroinitializer, ptr %265, align 8, !tbaa !11
  %266 = getelementptr inbounds float, ptr %ResBuiltin, i64 323
  store <4 x float> zeroinitializer, ptr %266, align 4, !tbaa !11
  %267 = getelementptr inbounds float, ptr %ResBuiltin, i64 340
  store <4 x float> zeroinitializer, ptr %267, align 16, !tbaa !11
  %268 = getelementptr inbounds float, ptr %ResBuiltin, i64 357
  store <4 x float> zeroinitializer, ptr %268, align 4, !tbaa !11
  %269 = getelementptr inbounds float, ptr %ResBuiltin, i64 374
  store <4 x float> zeroinitializer, ptr %269, align 8, !tbaa !11
  %270 = getelementptr inbounds float, ptr %ResBuiltin, i64 391
  store <4 x float> zeroinitializer, ptr %270, align 4, !tbaa !11
  %271 = getelementptr inbounds float, ptr %ResBuiltin, i64 408
  store <4 x float> zeroinitializer, ptr %271, align 16, !tbaa !11
  %272 = getelementptr inbounds float, ptr %ResBuiltin, i64 425
  store <4 x float> zeroinitializer, ptr %272, align 4, !tbaa !11
  %273 = getelementptr inbounds float, ptr %ResBuiltin, i64 442
  store <4 x float> zeroinitializer, ptr %273, align 8, !tbaa !11
  %274 = getelementptr inbounds float, ptr %ResBuiltin, i64 459
  store <4 x float> zeroinitializer, ptr %274, align 4, !tbaa !11
  %275 = getelementptr inbounds float, ptr %ResBuiltin, i64 476
  store <4 x float> zeroinitializer, ptr %275, align 16, !tbaa !11
  %276 = getelementptr inbounds float, ptr %ResBuiltin, i64 493
  store <4 x float> zeroinitializer, ptr %276, align 4, !tbaa !11
  %277 = getelementptr inbounds float, ptr %ResBuiltin, i64 510
  store <4 x float> zeroinitializer, ptr %277, align 8, !tbaa !11
  %278 = getelementptr inbounds float, ptr %ResBuiltin, i64 4
  store <4 x float> zeroinitializer, ptr %278, align 16, !tbaa !11
  %279 = getelementptr inbounds float, ptr %ResBuiltin, i64 21
  store <4 x float> zeroinitializer, ptr %279, align 4, !tbaa !11
  %280 = getelementptr inbounds float, ptr %ResBuiltin, i64 38
  store <4 x float> zeroinitializer, ptr %280, align 8, !tbaa !11
  %281 = getelementptr inbounds float, ptr %ResBuiltin, i64 55
  store <4 x float> zeroinitializer, ptr %281, align 4, !tbaa !11
  %282 = getelementptr inbounds float, ptr %ResBuiltin, i64 72
  store <4 x float> zeroinitializer, ptr %282, align 16, !tbaa !11
  %283 = getelementptr inbounds float, ptr %ResBuiltin, i64 89
  store <4 x float> zeroinitializer, ptr %283, align 4, !tbaa !11
  %284 = getelementptr inbounds float, ptr %ResBuiltin, i64 106
  store <4 x float> zeroinitializer, ptr %284, align 8, !tbaa !11
  %285 = getelementptr inbounds float, ptr %ResBuiltin, i64 123
  store <4 x float> zeroinitializer, ptr %285, align 4, !tbaa !11
  %286 = getelementptr inbounds float, ptr %ResBuiltin, i64 140
  store <4 x float> zeroinitializer, ptr %286, align 16, !tbaa !11
  %287 = getelementptr inbounds float, ptr %ResBuiltin, i64 157
  store <4 x float> zeroinitializer, ptr %287, align 4, !tbaa !11
  %288 = getelementptr inbounds float, ptr %ResBuiltin, i64 174
  store <4 x float> zeroinitializer, ptr %288, align 8, !tbaa !11
  %289 = getelementptr inbounds float, ptr %ResBuiltin, i64 191
  store <4 x float> zeroinitializer, ptr %289, align 4, !tbaa !11
  %290 = getelementptr inbounds float, ptr %ResBuiltin, i64 208
  store <4 x float> zeroinitializer, ptr %290, align 16, !tbaa !11
  %291 = getelementptr inbounds float, ptr %ResBuiltin, i64 225
  store <4 x float> zeroinitializer, ptr %291, align 4, !tbaa !11
  %292 = getelementptr inbounds float, ptr %ResBuiltin, i64 242
  store <4 x float> zeroinitializer, ptr %292, align 8, !tbaa !11
  %293 = getelementptr inbounds float, ptr %ResBuiltin, i64 259
  store <4 x float> zeroinitializer, ptr %293, align 4, !tbaa !11
  %294 = getelementptr inbounds float, ptr %ResBuiltin, i64 276
  store <4 x float> zeroinitializer, ptr %294, align 16, !tbaa !11
  %295 = getelementptr inbounds float, ptr %ResBuiltin, i64 293
  store <4 x float> zeroinitializer, ptr %295, align 4, !tbaa !11
  %296 = getelementptr inbounds float, ptr %ResBuiltin, i64 310
  store <4 x float> zeroinitializer, ptr %296, align 8, !tbaa !11
  %297 = getelementptr inbounds float, ptr %ResBuiltin, i64 327
  store <4 x float> zeroinitializer, ptr %297, align 4, !tbaa !11
  %298 = getelementptr inbounds float, ptr %ResBuiltin, i64 344
  store <4 x float> zeroinitializer, ptr %298, align 16, !tbaa !11
  %299 = getelementptr inbounds float, ptr %ResBuiltin, i64 361
  store <4 x float> zeroinitializer, ptr %299, align 4, !tbaa !11
  %300 = getelementptr inbounds float, ptr %ResBuiltin, i64 378
  store <4 x float> zeroinitializer, ptr %300, align 8, !tbaa !11
  %301 = getelementptr inbounds float, ptr %ResBuiltin, i64 395
  store <4 x float> zeroinitializer, ptr %301, align 4, !tbaa !11
  %302 = getelementptr inbounds float, ptr %ResBuiltin, i64 412
  store <4 x float> zeroinitializer, ptr %302, align 16, !tbaa !11
  %303 = getelementptr inbounds float, ptr %ResBuiltin, i64 429
  store <4 x float> zeroinitializer, ptr %303, align 4, !tbaa !11
  %304 = getelementptr inbounds float, ptr %ResBuiltin, i64 446
  store <4 x float> zeroinitializer, ptr %304, align 8, !tbaa !11
  %305 = getelementptr inbounds float, ptr %ResBuiltin, i64 463
  store <4 x float> zeroinitializer, ptr %305, align 4, !tbaa !11
  %306 = getelementptr inbounds float, ptr %ResBuiltin, i64 480
  store <4 x float> zeroinitializer, ptr %306, align 16, !tbaa !11
  %307 = getelementptr inbounds float, ptr %ResBuiltin, i64 497
  store <4 x float> zeroinitializer, ptr %307, align 4, !tbaa !11
  %308 = getelementptr inbounds float, ptr %ResBuiltin, i64 514
  store <4 x float> zeroinitializer, ptr %308, align 8, !tbaa !11
  %309 = getelementptr inbounds float, ptr %ResBuiltin, i64 8
  store <4 x float> zeroinitializer, ptr %309, align 16, !tbaa !11
  %310 = getelementptr inbounds float, ptr %ResBuiltin, i64 25
  store <4 x float> zeroinitializer, ptr %310, align 4, !tbaa !11
  %311 = getelementptr inbounds float, ptr %ResBuiltin, i64 42
  store <4 x float> zeroinitializer, ptr %311, align 8, !tbaa !11
  %312 = getelementptr inbounds float, ptr %ResBuiltin, i64 59
  store <4 x float> zeroinitializer, ptr %312, align 4, !tbaa !11
  %313 = getelementptr inbounds float, ptr %ResBuiltin, i64 76
  store <4 x float> zeroinitializer, ptr %313, align 16, !tbaa !11
  %314 = getelementptr inbounds float, ptr %ResBuiltin, i64 93
  store <4 x float> zeroinitializer, ptr %314, align 4, !tbaa !11
  %315 = getelementptr inbounds float, ptr %ResBuiltin, i64 110
  store <4 x float> zeroinitializer, ptr %315, align 8, !tbaa !11
  %316 = getelementptr inbounds float, ptr %ResBuiltin, i64 127
  store <4 x float> zeroinitializer, ptr %316, align 4, !tbaa !11
  %317 = getelementptr inbounds float, ptr %ResBuiltin, i64 144
  store <4 x float> zeroinitializer, ptr %317, align 16, !tbaa !11
  %318 = getelementptr inbounds float, ptr %ResBuiltin, i64 161
  store <4 x float> zeroinitializer, ptr %318, align 4, !tbaa !11
  %319 = getelementptr inbounds float, ptr %ResBuiltin, i64 178
  store <4 x float> zeroinitializer, ptr %319, align 8, !tbaa !11
  %320 = getelementptr inbounds float, ptr %ResBuiltin, i64 195
  store <4 x float> zeroinitializer, ptr %320, align 4, !tbaa !11
  %321 = getelementptr inbounds float, ptr %ResBuiltin, i64 212
  store <4 x float> zeroinitializer, ptr %321, align 16, !tbaa !11
  %322 = getelementptr inbounds float, ptr %ResBuiltin, i64 229
  store <4 x float> zeroinitializer, ptr %322, align 4, !tbaa !11
  %323 = getelementptr inbounds float, ptr %ResBuiltin, i64 246
  store <4 x float> zeroinitializer, ptr %323, align 8, !tbaa !11
  %324 = getelementptr inbounds float, ptr %ResBuiltin, i64 263
  store <4 x float> zeroinitializer, ptr %324, align 4, !tbaa !11
  %325 = getelementptr inbounds float, ptr %ResBuiltin, i64 280
  store <4 x float> zeroinitializer, ptr %325, align 16, !tbaa !11
  %326 = getelementptr inbounds float, ptr %ResBuiltin, i64 297
  store <4 x float> zeroinitializer, ptr %326, align 4, !tbaa !11
  %327 = getelementptr inbounds float, ptr %ResBuiltin, i64 314
  store <4 x float> zeroinitializer, ptr %327, align 8, !tbaa !11
  %328 = getelementptr inbounds float, ptr %ResBuiltin, i64 331
  store <4 x float> zeroinitializer, ptr %328, align 4, !tbaa !11
  %329 = getelementptr inbounds float, ptr %ResBuiltin, i64 348
  store <4 x float> zeroinitializer, ptr %329, align 16, !tbaa !11
  %330 = getelementptr inbounds float, ptr %ResBuiltin, i64 365
  store <4 x float> zeroinitializer, ptr %330, align 4, !tbaa !11
  %331 = getelementptr inbounds float, ptr %ResBuiltin, i64 382
  store <4 x float> zeroinitializer, ptr %331, align 8, !tbaa !11
  %332 = getelementptr inbounds float, ptr %ResBuiltin, i64 399
  store <4 x float> zeroinitializer, ptr %332, align 4, !tbaa !11
  %333 = getelementptr inbounds float, ptr %ResBuiltin, i64 416
  store <4 x float> zeroinitializer, ptr %333, align 16, !tbaa !11
  %334 = getelementptr inbounds float, ptr %ResBuiltin, i64 433
  store <4 x float> zeroinitializer, ptr %334, align 4, !tbaa !11
  %335 = getelementptr inbounds float, ptr %ResBuiltin, i64 450
  store <4 x float> zeroinitializer, ptr %335, align 8, !tbaa !11
  %336 = getelementptr inbounds float, ptr %ResBuiltin, i64 467
  store <4 x float> zeroinitializer, ptr %336, align 4, !tbaa !11
  %337 = getelementptr inbounds float, ptr %ResBuiltin, i64 484
  store <4 x float> zeroinitializer, ptr %337, align 16, !tbaa !11
  %338 = getelementptr inbounds float, ptr %ResBuiltin, i64 501
  store <4 x float> zeroinitializer, ptr %338, align 4, !tbaa !11
  %339 = getelementptr inbounds float, ptr %ResBuiltin, i64 518
  store <4 x float> zeroinitializer, ptr %339, align 8, !tbaa !11
  %340 = getelementptr inbounds float, ptr %ResBuiltin, i64 12
  store <4 x float> zeroinitializer, ptr %340, align 16, !tbaa !11
  %341 = getelementptr inbounds float, ptr %ResBuiltin, i64 29
  store <4 x float> zeroinitializer, ptr %341, align 4, !tbaa !11
  %342 = getelementptr inbounds float, ptr %ResBuiltin, i64 46
  store <4 x float> zeroinitializer, ptr %342, align 8, !tbaa !11
  %343 = getelementptr inbounds float, ptr %ResBuiltin, i64 63
  store <4 x float> zeroinitializer, ptr %343, align 4, !tbaa !11
  %344 = getelementptr inbounds float, ptr %ResBuiltin, i64 80
  store <4 x float> zeroinitializer, ptr %344, align 16, !tbaa !11
  %345 = getelementptr inbounds float, ptr %ResBuiltin, i64 97
  store <4 x float> zeroinitializer, ptr %345, align 4, !tbaa !11
  %346 = getelementptr inbounds float, ptr %ResBuiltin, i64 114
  store <4 x float> zeroinitializer, ptr %346, align 8, !tbaa !11
  %347 = getelementptr inbounds float, ptr %ResBuiltin, i64 131
  store <4 x float> zeroinitializer, ptr %347, align 4, !tbaa !11
  %348 = getelementptr inbounds float, ptr %ResBuiltin, i64 148
  store <4 x float> zeroinitializer, ptr %348, align 16, !tbaa !11
  %349 = getelementptr inbounds float, ptr %ResBuiltin, i64 165
  store <4 x float> zeroinitializer, ptr %349, align 4, !tbaa !11
  %350 = getelementptr inbounds float, ptr %ResBuiltin, i64 182
  store <4 x float> zeroinitializer, ptr %350, align 8, !tbaa !11
  %351 = getelementptr inbounds float, ptr %ResBuiltin, i64 199
  store <4 x float> zeroinitializer, ptr %351, align 4, !tbaa !11
  %352 = getelementptr inbounds float, ptr %ResBuiltin, i64 216
  store <4 x float> zeroinitializer, ptr %352, align 16, !tbaa !11
  %353 = getelementptr inbounds float, ptr %ResBuiltin, i64 233
  store <4 x float> zeroinitializer, ptr %353, align 4, !tbaa !11
  %354 = getelementptr inbounds float, ptr %ResBuiltin, i64 250
  store <4 x float> zeroinitializer, ptr %354, align 8, !tbaa !11
  %355 = getelementptr inbounds float, ptr %ResBuiltin, i64 267
  store <4 x float> zeroinitializer, ptr %355, align 4, !tbaa !11
  %356 = getelementptr inbounds float, ptr %ResBuiltin, i64 284
  store <4 x float> zeroinitializer, ptr %356, align 16, !tbaa !11
  %357 = getelementptr inbounds float, ptr %ResBuiltin, i64 301
  store <4 x float> zeroinitializer, ptr %357, align 4, !tbaa !11
  %358 = getelementptr inbounds float, ptr %ResBuiltin, i64 318
  store <4 x float> zeroinitializer, ptr %358, align 8, !tbaa !11
  %359 = getelementptr inbounds float, ptr %ResBuiltin, i64 335
  store <4 x float> zeroinitializer, ptr %359, align 4, !tbaa !11
  %360 = getelementptr inbounds float, ptr %ResBuiltin, i64 352
  store <4 x float> zeroinitializer, ptr %360, align 16, !tbaa !11
  %361 = getelementptr inbounds float, ptr %ResBuiltin, i64 369
  store <4 x float> zeroinitializer, ptr %361, align 4, !tbaa !11
  %362 = getelementptr inbounds float, ptr %ResBuiltin, i64 386
  store <4 x float> zeroinitializer, ptr %362, align 8, !tbaa !11
  %363 = getelementptr inbounds float, ptr %ResBuiltin, i64 403
  store <4 x float> zeroinitializer, ptr %363, align 4, !tbaa !11
  %364 = getelementptr inbounds float, ptr %ResBuiltin, i64 420
  store <4 x float> zeroinitializer, ptr %364, align 16, !tbaa !11
  %365 = getelementptr inbounds float, ptr %ResBuiltin, i64 437
  store <4 x float> zeroinitializer, ptr %365, align 4, !tbaa !11
  %366 = getelementptr inbounds float, ptr %ResBuiltin, i64 454
  store <4 x float> zeroinitializer, ptr %366, align 8, !tbaa !11
  %367 = getelementptr inbounds float, ptr %ResBuiltin, i64 471
  store <4 x float> zeroinitializer, ptr %367, align 4, !tbaa !11
  %368 = getelementptr inbounds float, ptr %ResBuiltin, i64 488
  store <4 x float> zeroinitializer, ptr %368, align 16, !tbaa !11
  %369 = getelementptr inbounds float, ptr %ResBuiltin, i64 505
  store <4 x float> zeroinitializer, ptr %369, align 4, !tbaa !11
  %370 = getelementptr inbounds float, ptr %ResBuiltin, i64 522
  store <4 x float> zeroinitializer, ptr %370, align 8, !tbaa !11
  %arrayidx.us.i37 = getelementptr inbounds float, ptr %ResBuiltin, i64 16
  store float 0.000000e+00, ptr %arrayidx.us.i37, align 16, !tbaa !11
  %arrayidx.us.i37.1 = getelementptr inbounds float, ptr %ResBuiltin, i64 33
  store float 0.000000e+00, ptr %arrayidx.us.i37.1, align 4, !tbaa !11
  %arrayidx.us.i37.2 = getelementptr inbounds float, ptr %ResBuiltin, i64 50
  store float 0.000000e+00, ptr %arrayidx.us.i37.2, align 8, !tbaa !11
  %arrayidx.us.i37.3 = getelementptr inbounds float, ptr %ResBuiltin, i64 67
  store float 0.000000e+00, ptr %arrayidx.us.i37.3, align 4, !tbaa !11
  %arrayidx.us.i37.4 = getelementptr inbounds float, ptr %ResBuiltin, i64 84
  store float 0.000000e+00, ptr %arrayidx.us.i37.4, align 16, !tbaa !11
  %arrayidx.us.i37.5 = getelementptr inbounds float, ptr %ResBuiltin, i64 101
  store float 0.000000e+00, ptr %arrayidx.us.i37.5, align 4, !tbaa !11
  %arrayidx.us.i37.6 = getelementptr inbounds float, ptr %ResBuiltin, i64 118
  store float 0.000000e+00, ptr %arrayidx.us.i37.6, align 8, !tbaa !11
  %arrayidx.us.i37.7 = getelementptr inbounds float, ptr %ResBuiltin, i64 135
  store float 0.000000e+00, ptr %arrayidx.us.i37.7, align 4, !tbaa !11
  %arrayidx.us.i37.8 = getelementptr inbounds float, ptr %ResBuiltin, i64 152
  store float 0.000000e+00, ptr %arrayidx.us.i37.8, align 16, !tbaa !11
  %arrayidx.us.i37.9 = getelementptr inbounds float, ptr %ResBuiltin, i64 169
  store float 0.000000e+00, ptr %arrayidx.us.i37.9, align 4, !tbaa !11
  %arrayidx.us.i37.10 = getelementptr inbounds float, ptr %ResBuiltin, i64 186
  store float 0.000000e+00, ptr %arrayidx.us.i37.10, align 8, !tbaa !11
  %arrayidx.us.i37.11 = getelementptr inbounds float, ptr %ResBuiltin, i64 203
  store float 0.000000e+00, ptr %arrayidx.us.i37.11, align 4, !tbaa !11
  %arrayidx.us.i37.12 = getelementptr inbounds float, ptr %ResBuiltin, i64 220
  store float 0.000000e+00, ptr %arrayidx.us.i37.12, align 16, !tbaa !11
  %arrayidx.us.i37.13 = getelementptr inbounds float, ptr %ResBuiltin, i64 237
  store float 0.000000e+00, ptr %arrayidx.us.i37.13, align 4, !tbaa !11
  %arrayidx.us.i37.14 = getelementptr inbounds float, ptr %ResBuiltin, i64 254
  store float 0.000000e+00, ptr %arrayidx.us.i37.14, align 8, !tbaa !11
  %arrayidx.us.i37.15 = getelementptr inbounds float, ptr %ResBuiltin, i64 271
  store float 0.000000e+00, ptr %arrayidx.us.i37.15, align 4, !tbaa !11
  %arrayidx.us.i37.16 = getelementptr inbounds float, ptr %ResBuiltin, i64 288
  store float 0.000000e+00, ptr %arrayidx.us.i37.16, align 16, !tbaa !11
  %arrayidx.us.i37.17 = getelementptr inbounds float, ptr %ResBuiltin, i64 305
  store float 0.000000e+00, ptr %arrayidx.us.i37.17, align 4, !tbaa !11
  %arrayidx.us.i37.18 = getelementptr inbounds float, ptr %ResBuiltin, i64 322
  store float 0.000000e+00, ptr %arrayidx.us.i37.18, align 8, !tbaa !11
  %arrayidx.us.i37.19 = getelementptr inbounds float, ptr %ResBuiltin, i64 339
  store float 0.000000e+00, ptr %arrayidx.us.i37.19, align 4, !tbaa !11
  %arrayidx.us.i37.20 = getelementptr inbounds float, ptr %ResBuiltin, i64 356
  store float 0.000000e+00, ptr %arrayidx.us.i37.20, align 16, !tbaa !11
  %arrayidx.us.i37.21 = getelementptr inbounds float, ptr %ResBuiltin, i64 373
  store float 0.000000e+00, ptr %arrayidx.us.i37.21, align 4, !tbaa !11
  %arrayidx.us.i37.22 = getelementptr inbounds float, ptr %ResBuiltin, i64 390
  store float 0.000000e+00, ptr %arrayidx.us.i37.22, align 8, !tbaa !11
  %arrayidx.us.i37.23 = getelementptr inbounds float, ptr %ResBuiltin, i64 407
  store float 0.000000e+00, ptr %arrayidx.us.i37.23, align 4, !tbaa !11
  %arrayidx.us.i37.24 = getelementptr inbounds float, ptr %ResBuiltin, i64 424
  store float 0.000000e+00, ptr %arrayidx.us.i37.24, align 16, !tbaa !11
  %arrayidx.us.i37.25 = getelementptr inbounds float, ptr %ResBuiltin, i64 441
  store float 0.000000e+00, ptr %arrayidx.us.i37.25, align 4, !tbaa !11
  %arrayidx.us.i37.26 = getelementptr inbounds float, ptr %ResBuiltin, i64 458
  store float 0.000000e+00, ptr %arrayidx.us.i37.26, align 8, !tbaa !11
  %arrayidx.us.i37.27 = getelementptr inbounds float, ptr %ResBuiltin, i64 475
  store float 0.000000e+00, ptr %arrayidx.us.i37.27, align 4, !tbaa !11
  %arrayidx.us.i37.28 = getelementptr inbounds float, ptr %ResBuiltin, i64 492
  store float 0.000000e+00, ptr %arrayidx.us.i37.28, align 16, !tbaa !11
  %arrayidx.us.i37.29 = getelementptr inbounds float, ptr %ResBuiltin, i64 509
  store float 0.000000e+00, ptr %arrayidx.us.i37.29, align 4, !tbaa !11
  %arrayidx.us.i37.30 = getelementptr inbounds float, ptr %ResBuiltin, i64 526
  store float 0.000000e+00, ptr %arrayidx.us.i37.30, align 8, !tbaa !11
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %vector.body, %for.cond1.preheader.i
  %indvars.iv.i45 = phi i64 [ %indvars.iv.next.i47, %for.cond1.preheader.i ], [ 0, %vector.body ]
  %371 = mul nuw nsw i64 %indvars.iv.i45, 17
  %arrayidx.i46 = getelementptr inbounds float, ptr %X, i64 %indvars.iv.i45
  %arrayidx8.i = getelementptr inbounds float, ptr %ResBase, i64 %371
  %372 = add nuw nsw i64 %indvars.iv.i45, 31
  %arrayidx.1.i = getelementptr inbounds float, ptr %X, i64 %372
  %373 = add nuw nsw i64 %indvars.iv.i45, 62
  %arrayidx.2.i = getelementptr inbounds float, ptr %X, i64 %373
  %374 = add nuw nsw i64 %indvars.iv.i45, 93
  %arrayidx.3.i = getelementptr inbounds float, ptr %X, i64 %374
  %375 = load float, ptr %arrayidx.i46, align 4, !tbaa !11
  %376 = load float, ptr %arrayidx.1.i, align 4, !tbaa !11
  %377 = load float, ptr %arrayidx.2.i, align 4, !tbaa !11
  %378 = load float, ptr %arrayidx.3.i, align 4, !tbaa !11
  %379 = insertelement <4 x float> poison, float %375, i64 0
  %380 = insertelement <4 x float> %379, float %376, i64 1
  %381 = insertelement <4 x float> %380, float %377, i64 2
  %382 = insertelement <4 x float> %381, float %378, i64 3
  store <4 x float> %382, ptr %arrayidx8.i, align 4, !tbaa !11
  %383 = add nuw nsw i64 %indvars.iv.i45, 124
  %arrayidx.4.i = getelementptr inbounds float, ptr %X, i64 %383
  %384 = add nuw nsw i64 %371, 4
  %arrayidx8.4.i = getelementptr inbounds float, ptr %ResBase, i64 %384
  %385 = add nuw nsw i64 %indvars.iv.i45, 155
  %arrayidx.5.i = getelementptr inbounds float, ptr %X, i64 %385
  %386 = add nuw nsw i64 %indvars.iv.i45, 186
  %arrayidx.6.i = getelementptr inbounds float, ptr %X, i64 %386
  %387 = add nuw nsw i64 %indvars.iv.i45, 217
  %arrayidx.7.i = getelementptr inbounds float, ptr %X, i64 %387
  %388 = load float, ptr %arrayidx.4.i, align 4, !tbaa !11
  %389 = load float, ptr %arrayidx.5.i, align 4, !tbaa !11
  %390 = load float, ptr %arrayidx.6.i, align 4, !tbaa !11
  %391 = load float, ptr %arrayidx.7.i, align 4, !tbaa !11
  %392 = insertelement <4 x float> poison, float %388, i64 0
  %393 = insertelement <4 x float> %392, float %389, i64 1
  %394 = insertelement <4 x float> %393, float %390, i64 2
  %395 = insertelement <4 x float> %394, float %391, i64 3
  store <4 x float> %395, ptr %arrayidx8.4.i, align 4, !tbaa !11
  %396 = add nuw nsw i64 %indvars.iv.i45, 248
  %arrayidx.8.i = getelementptr inbounds float, ptr %X, i64 %396
  %397 = add nuw nsw i64 %371, 8
  %arrayidx8.8.i = getelementptr inbounds float, ptr %ResBase, i64 %397
  %398 = add nuw nsw i64 %indvars.iv.i45, 279
  %arrayidx.9.i = getelementptr inbounds float, ptr %X, i64 %398
  %399 = add nuw nsw i64 %indvars.iv.i45, 310
  %arrayidx.10.i = getelementptr inbounds float, ptr %X, i64 %399
  %400 = add nuw nsw i64 %indvars.iv.i45, 341
  %arrayidx.11.i = getelementptr inbounds float, ptr %X, i64 %400
  %401 = load float, ptr %arrayidx.8.i, align 4, !tbaa !11
  %402 = load float, ptr %arrayidx.9.i, align 4, !tbaa !11
  %403 = load float, ptr %arrayidx.10.i, align 4, !tbaa !11
  %404 = load float, ptr %arrayidx.11.i, align 4, !tbaa !11
  %405 = insertelement <4 x float> poison, float %401, i64 0
  %406 = insertelement <4 x float> %405, float %402, i64 1
  %407 = insertelement <4 x float> %406, float %403, i64 2
  %408 = insertelement <4 x float> %407, float %404, i64 3
  store <4 x float> %408, ptr %arrayidx8.8.i, align 4, !tbaa !11
  %409 = add nuw nsw i64 %indvars.iv.i45, 372
  %arrayidx.12.i = getelementptr inbounds float, ptr %X, i64 %409
  %410 = add nuw nsw i64 %371, 12
  %arrayidx8.12.i = getelementptr inbounds float, ptr %ResBase, i64 %410
  %411 = add nuw nsw i64 %indvars.iv.i45, 403
  %arrayidx.13.i = getelementptr inbounds float, ptr %X, i64 %411
  %412 = add nuw nsw i64 %indvars.iv.i45, 434
  %arrayidx.14.i = getelementptr inbounds float, ptr %X, i64 %412
  %413 = add nuw nsw i64 %indvars.iv.i45, 465
  %arrayidx.15.i = getelementptr inbounds float, ptr %X, i64 %413
  %414 = load float, ptr %arrayidx.12.i, align 4, !tbaa !11
  %415 = load float, ptr %arrayidx.13.i, align 4, !tbaa !11
  %416 = load float, ptr %arrayidx.14.i, align 4, !tbaa !11
  %417 = load float, ptr %arrayidx.15.i, align 4, !tbaa !11
  %418 = insertelement <4 x float> poison, float %414, i64 0
  %419 = insertelement <4 x float> %418, float %415, i64 1
  %420 = insertelement <4 x float> %419, float %416, i64 2
  %421 = insertelement <4 x float> %420, float %417, i64 3
  store <4 x float> %421, ptr %arrayidx8.12.i, align 4, !tbaa !11
  %422 = add nuw nsw i64 %indvars.iv.i45, 496
  %arrayidx.16.i = getelementptr inbounds float, ptr %X, i64 %422
  %423 = load float, ptr %arrayidx.16.i, align 4, !tbaa !11
  %424 = add nuw nsw i64 %371, 16
  %arrayidx8.16.i = getelementptr inbounds float, ptr %ResBase, i64 %424
  store float %423, ptr %arrayidx8.16.i, align 4, !tbaa !11
  %indvars.iv.next.i47 = add nuw nsw i64 %indvars.iv.i45, 1
  %exitcond.not.i48 = icmp eq i64 %indvars.iv.next.i47, 31
  br i1 %exitcond.not.i48, label %_ZL13transposeBaseIfEvPT_S1_jj.exit, label %for.cond1.preheader.i, !llvm.loop !14

_ZL13transposeBaseIfEvPT_S1_jj.exit:              ; preds = %for.cond1.preheader.i
  call void @_Z13transposeSpecIfLj31ELj17EEvPT_S1_(ptr noundef nonnull %ResSpec, ptr noundef nonnull %X)
  %col.load = load <31 x float>, ptr %X, align 16
  %vec.gep = getelementptr inbounds float, ptr %X, i64 31
  %col.load146 = load <31 x float>, ptr %vec.gep, align 4
  %vec.gep147 = getelementptr inbounds float, ptr %X, i64 62
  %col.load148 = load <31 x float>, ptr %vec.gep147, align 8
  %vec.gep149 = getelementptr inbounds float, ptr %X, i64 93
  %col.load150 = load <31 x float>, ptr %vec.gep149, align 4
  %vec.gep151 = getelementptr inbounds float, ptr %X, i64 124
  %col.load152 = load <31 x float>, ptr %vec.gep151, align 16
  %vec.gep153 = getelementptr inbounds float, ptr %X, i64 155
  %col.load154 = load <31 x float>, ptr %vec.gep153, align 4
  %vec.gep155 = getelementptr inbounds float, ptr %X, i64 186
  %col.load156 = load <31 x float>, ptr %vec.gep155, align 8
  %vec.gep157 = getelementptr inbounds float, ptr %X, i64 217
  %col.load158 = load <31 x float>, ptr %vec.gep157, align 4
  %vec.gep159 = getelementptr inbounds float, ptr %X, i64 248
  %col.load160 = load <31 x float>, ptr %vec.gep159, align 16
  %vec.gep161 = getelementptr inbounds float, ptr %X, i64 279
  %col.load162 = load <31 x float>, ptr %vec.gep161, align 4
  %vec.gep163 = getelementptr inbounds float, ptr %X, i64 310
  %col.load164 = load <31 x float>, ptr %vec.gep163, align 8
  %vec.gep165 = getelementptr inbounds float, ptr %X, i64 341
  %col.load166 = load <31 x float>, ptr %vec.gep165, align 4
  %vec.gep167 = getelementptr inbounds float, ptr %X, i64 372
  %col.load168 = load <31 x float>, ptr %vec.gep167, align 16
  %vec.gep169 = getelementptr inbounds float, ptr %X, i64 403
  %col.load170 = load <31 x float>, ptr %vec.gep169, align 4
  %vec.gep171 = getelementptr inbounds float, ptr %X, i64 434
  %col.load172 = load <31 x float>, ptr %vec.gep171, align 8
  %vec.gep173 = getelementptr inbounds float, ptr %X, i64 465
  %col.load174 = load <31 x float>, ptr %vec.gep173, align 4
  %vec.gep175 = getelementptr inbounds float, ptr %X, i64 496
  %col.load176 = load <31 x float>, ptr %vec.gep175, align 16
  %425 = extractelement <31 x float> %col.load, i64 0
  %426 = insertelement <17 x float> poison, float %425, i64 0
  %427 = extractelement <31 x float> %col.load146, i64 0
  %428 = insertelement <17 x float> %426, float %427, i64 1
  %429 = extractelement <31 x float> %col.load148, i64 0
  %430 = insertelement <17 x float> %428, float %429, i64 2
  %431 = extractelement <31 x float> %col.load150, i64 0
  %432 = insertelement <17 x float> %430, float %431, i64 3
  %433 = extractelement <31 x float> %col.load152, i64 0
  %434 = insertelement <17 x float> %432, float %433, i64 4
  %435 = extractelement <31 x float> %col.load154, i64 0
  %436 = insertelement <17 x float> %434, float %435, i64 5
  %437 = extractelement <31 x float> %col.load156, i64 0
  %438 = insertelement <17 x float> %436, float %437, i64 6
  %439 = extractelement <31 x float> %col.load158, i64 0
  %440 = insertelement <17 x float> %438, float %439, i64 7
  %441 = extractelement <31 x float> %col.load160, i64 0
  %442 = insertelement <17 x float> %440, float %441, i64 8
  %443 = extractelement <31 x float> %col.load162, i64 0
  %444 = insertelement <17 x float> %442, float %443, i64 9
  %445 = extractelement <31 x float> %col.load164, i64 0
  %446 = insertelement <17 x float> %444, float %445, i64 10
  %447 = extractelement <31 x float> %col.load166, i64 0
  %448 = insertelement <17 x float> %446, float %447, i64 11
  %449 = extractelement <31 x float> %col.load168, i64 0
  %450 = insertelement <17 x float> %448, float %449, i64 12
  %451 = extractelement <31 x float> %col.load170, i64 0
  %452 = insertelement <17 x float> %450, float %451, i64 13
  %453 = extractelement <31 x float> %col.load172, i64 0
  %454 = insertelement <17 x float> %452, float %453, i64 14
  %455 = extractelement <31 x float> %col.load174, i64 0
  %456 = insertelement <17 x float> %454, float %455, i64 15
  %457 = extractelement <31 x float> %col.load176, i64 0
  %458 = insertelement <17 x float> %456, float %457, i64 16
  %459 = extractelement <31 x float> %col.load, i64 1
  %460 = insertelement <17 x float> poison, float %459, i64 0
  %461 = extractelement <31 x float> %col.load146, i64 1
  %462 = insertelement <17 x float> %460, float %461, i64 1
  %463 = extractelement <31 x float> %col.load148, i64 1
  %464 = insertelement <17 x float> %462, float %463, i64 2
  %465 = extractelement <31 x float> %col.load150, i64 1
  %466 = insertelement <17 x float> %464, float %465, i64 3
  %467 = extractelement <31 x float> %col.load152, i64 1
  %468 = insertelement <17 x float> %466, float %467, i64 4
  %469 = extractelement <31 x float> %col.load154, i64 1
  %470 = insertelement <17 x float> %468, float %469, i64 5
  %471 = extractelement <31 x float> %col.load156, i64 1
  %472 = insertelement <17 x float> %470, float %471, i64 6
  %473 = extractelement <31 x float> %col.load158, i64 1
  %474 = insertelement <17 x float> %472, float %473, i64 7
  %475 = extractelement <31 x float> %col.load160, i64 1
  %476 = insertelement <17 x float> %474, float %475, i64 8
  %477 = extractelement <31 x float> %col.load162, i64 1
  %478 = insertelement <17 x float> %476, float %477, i64 9
  %479 = extractelement <31 x float> %col.load164, i64 1
  %480 = insertelement <17 x float> %478, float %479, i64 10
  %481 = extractelement <31 x float> %col.load166, i64 1
  %482 = insertelement <17 x float> %480, float %481, i64 11
  %483 = extractelement <31 x float> %col.load168, i64 1
  %484 = insertelement <17 x float> %482, float %483, i64 12
  %485 = extractelement <31 x float> %col.load170, i64 1
  %486 = insertelement <17 x float> %484, float %485, i64 13
  %487 = extractelement <31 x float> %col.load172, i64 1
  %488 = insertelement <17 x float> %486, float %487, i64 14
  %489 = extractelement <31 x float> %col.load174, i64 1
  %490 = insertelement <17 x float> %488, float %489, i64 15
  %491 = extractelement <31 x float> %col.load176, i64 1
  %492 = insertelement <17 x float> %490, float %491, i64 16
  %493 = extractelement <31 x float> %col.load, i64 2
  %494 = insertelement <17 x float> poison, float %493, i64 0
  %495 = extractelement <31 x float> %col.load146, i64 2
  %496 = insertelement <17 x float> %494, float %495, i64 1
  %497 = extractelement <31 x float> %col.load148, i64 2
  %498 = insertelement <17 x float> %496, float %497, i64 2
  %499 = extractelement <31 x float> %col.load150, i64 2
  %500 = insertelement <17 x float> %498, float %499, i64 3
  %501 = extractelement <31 x float> %col.load152, i64 2
  %502 = insertelement <17 x float> %500, float %501, i64 4
  %503 = extractelement <31 x float> %col.load154, i64 2
  %504 = insertelement <17 x float> %502, float %503, i64 5
  %505 = extractelement <31 x float> %col.load156, i64 2
  %506 = insertelement <17 x float> %504, float %505, i64 6
  %507 = extractelement <31 x float> %col.load158, i64 2
  %508 = insertelement <17 x float> %506, float %507, i64 7
  %509 = extractelement <31 x float> %col.load160, i64 2
  %510 = insertelement <17 x float> %508, float %509, i64 8
  %511 = extractelement <31 x float> %col.load162, i64 2
  %512 = insertelement <17 x float> %510, float %511, i64 9
  %513 = extractelement <31 x float> %col.load164, i64 2
  %514 = insertelement <17 x float> %512, float %513, i64 10
  %515 = extractelement <31 x float> %col.load166, i64 2
  %516 = insertelement <17 x float> %514, float %515, i64 11
  %517 = extractelement <31 x float> %col.load168, i64 2
  %518 = insertelement <17 x float> %516, float %517, i64 12
  %519 = extractelement <31 x float> %col.load170, i64 2
  %520 = insertelement <17 x float> %518, float %519, i64 13
  %521 = extractelement <31 x float> %col.load172, i64 2
  %522 = insertelement <17 x float> %520, float %521, i64 14
  %523 = extractelement <31 x float> %col.load174, i64 2
  %524 = insertelement <17 x float> %522, float %523, i64 15
  %525 = extractelement <31 x float> %col.load176, i64 2
  %526 = insertelement <17 x float> %524, float %525, i64 16
  %527 = extractelement <31 x float> %col.load, i64 3
  %528 = insertelement <17 x float> poison, float %527, i64 0
  %529 = extractelement <31 x float> %col.load146, i64 3
  %530 = insertelement <17 x float> %528, float %529, i64 1
  %531 = extractelement <31 x float> %col.load148, i64 3
  %532 = insertelement <17 x float> %530, float %531, i64 2
  %533 = extractelement <31 x float> %col.load150, i64 3
  %534 = insertelement <17 x float> %532, float %533, i64 3
  %535 = extractelement <31 x float> %col.load152, i64 3
  %536 = insertelement <17 x float> %534, float %535, i64 4
  %537 = extractelement <31 x float> %col.load154, i64 3
  %538 = insertelement <17 x float> %536, float %537, i64 5
  %539 = extractelement <31 x float> %col.load156, i64 3
  %540 = insertelement <17 x float> %538, float %539, i64 6
  %541 = extractelement <31 x float> %col.load158, i64 3
  %542 = insertelement <17 x float> %540, float %541, i64 7
  %543 = extractelement <31 x float> %col.load160, i64 3
  %544 = insertelement <17 x float> %542, float %543, i64 8
  %545 = extractelement <31 x float> %col.load162, i64 3
  %546 = insertelement <17 x float> %544, float %545, i64 9
  %547 = extractelement <31 x float> %col.load164, i64 3
  %548 = insertelement <17 x float> %546, float %547, i64 10
  %549 = extractelement <31 x float> %col.load166, i64 3
  %550 = insertelement <17 x float> %548, float %549, i64 11
  %551 = extractelement <31 x float> %col.load168, i64 3
  %552 = insertelement <17 x float> %550, float %551, i64 12
  %553 = extractelement <31 x float> %col.load170, i64 3
  %554 = insertelement <17 x float> %552, float %553, i64 13
  %555 = extractelement <31 x float> %col.load172, i64 3
  %556 = insertelement <17 x float> %554, float %555, i64 14
  %557 = extractelement <31 x float> %col.load174, i64 3
  %558 = insertelement <17 x float> %556, float %557, i64 15
  %559 = extractelement <31 x float> %col.load176, i64 3
  %560 = insertelement <17 x float> %558, float %559, i64 16
  %561 = extractelement <31 x float> %col.load, i64 4
  %562 = insertelement <17 x float> poison, float %561, i64 0
  %563 = extractelement <31 x float> %col.load146, i64 4
  %564 = insertelement <17 x float> %562, float %563, i64 1
  %565 = extractelement <31 x float> %col.load148, i64 4
  %566 = insertelement <17 x float> %564, float %565, i64 2
  %567 = extractelement <31 x float> %col.load150, i64 4
  %568 = insertelement <17 x float> %566, float %567, i64 3
  %569 = extractelement <31 x float> %col.load152, i64 4
  %570 = insertelement <17 x float> %568, float %569, i64 4
  %571 = extractelement <31 x float> %col.load154, i64 4
  %572 = insertelement <17 x float> %570, float %571, i64 5
  %573 = extractelement <31 x float> %col.load156, i64 4
  %574 = insertelement <17 x float> %572, float %573, i64 6
  %575 = extractelement <31 x float> %col.load158, i64 4
  %576 = insertelement <17 x float> %574, float %575, i64 7
  %577 = extractelement <31 x float> %col.load160, i64 4
  %578 = insertelement <17 x float> %576, float %577, i64 8
  %579 = extractelement <31 x float> %col.load162, i64 4
  %580 = insertelement <17 x float> %578, float %579, i64 9
  %581 = extractelement <31 x float> %col.load164, i64 4
  %582 = insertelement <17 x float> %580, float %581, i64 10
  %583 = extractelement <31 x float> %col.load166, i64 4
  %584 = insertelement <17 x float> %582, float %583, i64 11
  %585 = extractelement <31 x float> %col.load168, i64 4
  %586 = insertelement <17 x float> %584, float %585, i64 12
  %587 = extractelement <31 x float> %col.load170, i64 4
  %588 = insertelement <17 x float> %586, float %587, i64 13
  %589 = extractelement <31 x float> %col.load172, i64 4
  %590 = insertelement <17 x float> %588, float %589, i64 14
  %591 = extractelement <31 x float> %col.load174, i64 4
  %592 = insertelement <17 x float> %590, float %591, i64 15
  %593 = extractelement <31 x float> %col.load176, i64 4
  %594 = insertelement <17 x float> %592, float %593, i64 16
  %595 = extractelement <31 x float> %col.load, i64 5
  %596 = insertelement <17 x float> poison, float %595, i64 0
  %597 = extractelement <31 x float> %col.load146, i64 5
  %598 = insertelement <17 x float> %596, float %597, i64 1
  %599 = extractelement <31 x float> %col.load148, i64 5
  %600 = insertelement <17 x float> %598, float %599, i64 2
  %601 = extractelement <31 x float> %col.load150, i64 5
  %602 = insertelement <17 x float> %600, float %601, i64 3
  %603 = extractelement <31 x float> %col.load152, i64 5
  %604 = insertelement <17 x float> %602, float %603, i64 4
  %605 = extractelement <31 x float> %col.load154, i64 5
  %606 = insertelement <17 x float> %604, float %605, i64 5
  %607 = extractelement <31 x float> %col.load156, i64 5
  %608 = insertelement <17 x float> %606, float %607, i64 6
  %609 = extractelement <31 x float> %col.load158, i64 5
  %610 = insertelement <17 x float> %608, float %609, i64 7
  %611 = extractelement <31 x float> %col.load160, i64 5
  %612 = insertelement <17 x float> %610, float %611, i64 8
  %613 = extractelement <31 x float> %col.load162, i64 5
  %614 = insertelement <17 x float> %612, float %613, i64 9
  %615 = extractelement <31 x float> %col.load164, i64 5
  %616 = insertelement <17 x float> %614, float %615, i64 10
  %617 = extractelement <31 x float> %col.load166, i64 5
  %618 = insertelement <17 x float> %616, float %617, i64 11
  %619 = extractelement <31 x float> %col.load168, i64 5
  %620 = insertelement <17 x float> %618, float %619, i64 12
  %621 = extractelement <31 x float> %col.load170, i64 5
  %622 = insertelement <17 x float> %620, float %621, i64 13
  %623 = extractelement <31 x float> %col.load172, i64 5
  %624 = insertelement <17 x float> %622, float %623, i64 14
  %625 = extractelement <31 x float> %col.load174, i64 5
  %626 = insertelement <17 x float> %624, float %625, i64 15
  %627 = extractelement <31 x float> %col.load176, i64 5
  %628 = insertelement <17 x float> %626, float %627, i64 16
  %629 = extractelement <31 x float> %col.load, i64 6
  %630 = insertelement <17 x float> poison, float %629, i64 0
  %631 = extractelement <31 x float> %col.load146, i64 6
  %632 = insertelement <17 x float> %630, float %631, i64 1
  %633 = extractelement <31 x float> %col.load148, i64 6
  %634 = insertelement <17 x float> %632, float %633, i64 2
  %635 = extractelement <31 x float> %col.load150, i64 6
  %636 = insertelement <17 x float> %634, float %635, i64 3
  %637 = extractelement <31 x float> %col.load152, i64 6
  %638 = insertelement <17 x float> %636, float %637, i64 4
  %639 = extractelement <31 x float> %col.load154, i64 6
  %640 = insertelement <17 x float> %638, float %639, i64 5
  %641 = extractelement <31 x float> %col.load156, i64 6
  %642 = insertelement <17 x float> %640, float %641, i64 6
  %643 = extractelement <31 x float> %col.load158, i64 6
  %644 = insertelement <17 x float> %642, float %643, i64 7
  %645 = extractelement <31 x float> %col.load160, i64 6
  %646 = insertelement <17 x float> %644, float %645, i64 8
  %647 = extractelement <31 x float> %col.load162, i64 6
  %648 = insertelement <17 x float> %646, float %647, i64 9
  %649 = extractelement <31 x float> %col.load164, i64 6
  %650 = insertelement <17 x float> %648, float %649, i64 10
  %651 = extractelement <31 x float> %col.load166, i64 6
  %652 = insertelement <17 x float> %650, float %651, i64 11
  %653 = extractelement <31 x float> %col.load168, i64 6
  %654 = insertelement <17 x float> %652, float %653, i64 12
  %655 = extractelement <31 x float> %col.load170, i64 6
  %656 = insertelement <17 x float> %654, float %655, i64 13
  %657 = extractelement <31 x float> %col.load172, i64 6
  %658 = insertelement <17 x float> %656, float %657, i64 14
  %659 = extractelement <31 x float> %col.load174, i64 6
  %660 = insertelement <17 x float> %658, float %659, i64 15
  %661 = extractelement <31 x float> %col.load176, i64 6
  %662 = insertelement <17 x float> %660, float %661, i64 16
  %663 = extractelement <31 x float> %col.load, i64 7
  %664 = insertelement <17 x float> poison, float %663, i64 0
  %665 = extractelement <31 x float> %col.load146, i64 7
  %666 = insertelement <17 x float> %664, float %665, i64 1
  %667 = extractelement <31 x float> %col.load148, i64 7
  %668 = insertelement <17 x float> %666, float %667, i64 2
  %669 = extractelement <31 x float> %col.load150, i64 7
  %670 = insertelement <17 x float> %668, float %669, i64 3
  %671 = extractelement <31 x float> %col.load152, i64 7
  %672 = insertelement <17 x float> %670, float %671, i64 4
  %673 = extractelement <31 x float> %col.load154, i64 7
  %674 = insertelement <17 x float> %672, float %673, i64 5
  %675 = extractelement <31 x float> %col.load156, i64 7
  %676 = insertelement <17 x float> %674, float %675, i64 6
  %677 = extractelement <31 x float> %col.load158, i64 7
  %678 = insertelement <17 x float> %676, float %677, i64 7
  %679 = extractelement <31 x float> %col.load160, i64 7
  %680 = insertelement <17 x float> %678, float %679, i64 8
  %681 = extractelement <31 x float> %col.load162, i64 7
  %682 = insertelement <17 x float> %680, float %681, i64 9
  %683 = extractelement <31 x float> %col.load164, i64 7
  %684 = insertelement <17 x float> %682, float %683, i64 10
  %685 = extractelement <31 x float> %col.load166, i64 7
  %686 = insertelement <17 x float> %684, float %685, i64 11
  %687 = extractelement <31 x float> %col.load168, i64 7
  %688 = insertelement <17 x float> %686, float %687, i64 12
  %689 = extractelement <31 x float> %col.load170, i64 7
  %690 = insertelement <17 x float> %688, float %689, i64 13
  %691 = extractelement <31 x float> %col.load172, i64 7
  %692 = insertelement <17 x float> %690, float %691, i64 14
  %693 = extractelement <31 x float> %col.load174, i64 7
  %694 = insertelement <17 x float> %692, float %693, i64 15
  %695 = extractelement <31 x float> %col.load176, i64 7
  %696 = insertelement <17 x float> %694, float %695, i64 16
  %697 = extractelement <31 x float> %col.load, i64 8
  %698 = insertelement <17 x float> poison, float %697, i64 0
  %699 = extractelement <31 x float> %col.load146, i64 8
  %700 = insertelement <17 x float> %698, float %699, i64 1
  %701 = extractelement <31 x float> %col.load148, i64 8
  %702 = insertelement <17 x float> %700, float %701, i64 2
  %703 = extractelement <31 x float> %col.load150, i64 8
  %704 = insertelement <17 x float> %702, float %703, i64 3
  %705 = extractelement <31 x float> %col.load152, i64 8
  %706 = insertelement <17 x float> %704, float %705, i64 4
  %707 = extractelement <31 x float> %col.load154, i64 8
  %708 = insertelement <17 x float> %706, float %707, i64 5
  %709 = extractelement <31 x float> %col.load156, i64 8
  %710 = insertelement <17 x float> %708, float %709, i64 6
  %711 = extractelement <31 x float> %col.load158, i64 8
  %712 = insertelement <17 x float> %710, float %711, i64 7
  %713 = extractelement <31 x float> %col.load160, i64 8
  %714 = insertelement <17 x float> %712, float %713, i64 8
  %715 = extractelement <31 x float> %col.load162, i64 8
  %716 = insertelement <17 x float> %714, float %715, i64 9
  %717 = extractelement <31 x float> %col.load164, i64 8
  %718 = insertelement <17 x float> %716, float %717, i64 10
  %719 = extractelement <31 x float> %col.load166, i64 8
  %720 = insertelement <17 x float> %718, float %719, i64 11
  %721 = extractelement <31 x float> %col.load168, i64 8
  %722 = insertelement <17 x float> %720, float %721, i64 12
  %723 = extractelement <31 x float> %col.load170, i64 8
  %724 = insertelement <17 x float> %722, float %723, i64 13
  %725 = extractelement <31 x float> %col.load172, i64 8
  %726 = insertelement <17 x float> %724, float %725, i64 14
  %727 = extractelement <31 x float> %col.load174, i64 8
  %728 = insertelement <17 x float> %726, float %727, i64 15
  %729 = extractelement <31 x float> %col.load176, i64 8
  %730 = insertelement <17 x float> %728, float %729, i64 16
  %731 = extractelement <31 x float> %col.load, i64 9
  %732 = insertelement <17 x float> poison, float %731, i64 0
  %733 = extractelement <31 x float> %col.load146, i64 9
  %734 = insertelement <17 x float> %732, float %733, i64 1
  %735 = extractelement <31 x float> %col.load148, i64 9
  %736 = insertelement <17 x float> %734, float %735, i64 2
  %737 = extractelement <31 x float> %col.load150, i64 9
  %738 = insertelement <17 x float> %736, float %737, i64 3
  %739 = extractelement <31 x float> %col.load152, i64 9
  %740 = insertelement <17 x float> %738, float %739, i64 4
  %741 = extractelement <31 x float> %col.load154, i64 9
  %742 = insertelement <17 x float> %740, float %741, i64 5
  %743 = extractelement <31 x float> %col.load156, i64 9
  %744 = insertelement <17 x float> %742, float %743, i64 6
  %745 = extractelement <31 x float> %col.load158, i64 9
  %746 = insertelement <17 x float> %744, float %745, i64 7
  %747 = extractelement <31 x float> %col.load160, i64 9
  %748 = insertelement <17 x float> %746, float %747, i64 8
  %749 = extractelement <31 x float> %col.load162, i64 9
  %750 = insertelement <17 x float> %748, float %749, i64 9
  %751 = extractelement <31 x float> %col.load164, i64 9
  %752 = insertelement <17 x float> %750, float %751, i64 10
  %753 = extractelement <31 x float> %col.load166, i64 9
  %754 = insertelement <17 x float> %752, float %753, i64 11
  %755 = extractelement <31 x float> %col.load168, i64 9
  %756 = insertelement <17 x float> %754, float %755, i64 12
  %757 = extractelement <31 x float> %col.load170, i64 9
  %758 = insertelement <17 x float> %756, float %757, i64 13
  %759 = extractelement <31 x float> %col.load172, i64 9
  %760 = insertelement <17 x float> %758, float %759, i64 14
  %761 = extractelement <31 x float> %col.load174, i64 9
  %762 = insertelement <17 x float> %760, float %761, i64 15
  %763 = extractelement <31 x float> %col.load176, i64 9
  %764 = insertelement <17 x float> %762, float %763, i64 16
  %765 = extractelement <31 x float> %col.load, i64 10
  %766 = insertelement <17 x float> poison, float %765, i64 0
  %767 = extractelement <31 x float> %col.load146, i64 10
  %768 = insertelement <17 x float> %766, float %767, i64 1
  %769 = extractelement <31 x float> %col.load148, i64 10
  %770 = insertelement <17 x float> %768, float %769, i64 2
  %771 = extractelement <31 x float> %col.load150, i64 10
  %772 = insertelement <17 x float> %770, float %771, i64 3
  %773 = extractelement <31 x float> %col.load152, i64 10
  %774 = insertelement <17 x float> %772, float %773, i64 4
  %775 = extractelement <31 x float> %col.load154, i64 10
  %776 = insertelement <17 x float> %774, float %775, i64 5
  %777 = extractelement <31 x float> %col.load156, i64 10
  %778 = insertelement <17 x float> %776, float %777, i64 6
  %779 = extractelement <31 x float> %col.load158, i64 10
  %780 = insertelement <17 x float> %778, float %779, i64 7
  %781 = extractelement <31 x float> %col.load160, i64 10
  %782 = insertelement <17 x float> %780, float %781, i64 8
  %783 = extractelement <31 x float> %col.load162, i64 10
  %784 = insertelement <17 x float> %782, float %783, i64 9
  %785 = extractelement <31 x float> %col.load164, i64 10
  %786 = insertelement <17 x float> %784, float %785, i64 10
  %787 = extractelement <31 x float> %col.load166, i64 10
  %788 = insertelement <17 x float> %786, float %787, i64 11
  %789 = extractelement <31 x float> %col.load168, i64 10
  %790 = insertelement <17 x float> %788, float %789, i64 12
  %791 = extractelement <31 x float> %col.load170, i64 10
  %792 = insertelement <17 x float> %790, float %791, i64 13
  %793 = extractelement <31 x float> %col.load172, i64 10
  %794 = insertelement <17 x float> %792, float %793, i64 14
  %795 = extractelement <31 x float> %col.load174, i64 10
  %796 = insertelement <17 x float> %794, float %795, i64 15
  %797 = extractelement <31 x float> %col.load176, i64 10
  %798 = insertelement <17 x float> %796, float %797, i64 16
  %799 = extractelement <31 x float> %col.load, i64 11
  %800 = insertelement <17 x float> poison, float %799, i64 0
  %801 = extractelement <31 x float> %col.load146, i64 11
  %802 = insertelement <17 x float> %800, float %801, i64 1
  %803 = extractelement <31 x float> %col.load148, i64 11
  %804 = insertelement <17 x float> %802, float %803, i64 2
  %805 = extractelement <31 x float> %col.load150, i64 11
  %806 = insertelement <17 x float> %804, float %805, i64 3
  %807 = extractelement <31 x float> %col.load152, i64 11
  %808 = insertelement <17 x float> %806, float %807, i64 4
  %809 = extractelement <31 x float> %col.load154, i64 11
  %810 = insertelement <17 x float> %808, float %809, i64 5
  %811 = extractelement <31 x float> %col.load156, i64 11
  %812 = insertelement <17 x float> %810, float %811, i64 6
  %813 = extractelement <31 x float> %col.load158, i64 11
  %814 = insertelement <17 x float> %812, float %813, i64 7
  %815 = extractelement <31 x float> %col.load160, i64 11
  %816 = insertelement <17 x float> %814, float %815, i64 8
  %817 = extractelement <31 x float> %col.load162, i64 11
  %818 = insertelement <17 x float> %816, float %817, i64 9
  %819 = extractelement <31 x float> %col.load164, i64 11
  %820 = insertelement <17 x float> %818, float %819, i64 10
  %821 = extractelement <31 x float> %col.load166, i64 11
  %822 = insertelement <17 x float> %820, float %821, i64 11
  %823 = extractelement <31 x float> %col.load168, i64 11
  %824 = insertelement <17 x float> %822, float %823, i64 12
  %825 = extractelement <31 x float> %col.load170, i64 11
  %826 = insertelement <17 x float> %824, float %825, i64 13
  %827 = extractelement <31 x float> %col.load172, i64 11
  %828 = insertelement <17 x float> %826, float %827, i64 14
  %829 = extractelement <31 x float> %col.load174, i64 11
  %830 = insertelement <17 x float> %828, float %829, i64 15
  %831 = extractelement <31 x float> %col.load176, i64 11
  %832 = insertelement <17 x float> %830, float %831, i64 16
  %833 = extractelement <31 x float> %col.load, i64 12
  %834 = insertelement <17 x float> poison, float %833, i64 0
  %835 = extractelement <31 x float> %col.load146, i64 12
  %836 = insertelement <17 x float> %834, float %835, i64 1
  %837 = extractelement <31 x float> %col.load148, i64 12
  %838 = insertelement <17 x float> %836, float %837, i64 2
  %839 = extractelement <31 x float> %col.load150, i64 12
  %840 = insertelement <17 x float> %838, float %839, i64 3
  %841 = extractelement <31 x float> %col.load152, i64 12
  %842 = insertelement <17 x float> %840, float %841, i64 4
  %843 = extractelement <31 x float> %col.load154, i64 12
  %844 = insertelement <17 x float> %842, float %843, i64 5
  %845 = extractelement <31 x float> %col.load156, i64 12
  %846 = insertelement <17 x float> %844, float %845, i64 6
  %847 = extractelement <31 x float> %col.load158, i64 12
  %848 = insertelement <17 x float> %846, float %847, i64 7
  %849 = extractelement <31 x float> %col.load160, i64 12
  %850 = insertelement <17 x float> %848, float %849, i64 8
  %851 = extractelement <31 x float> %col.load162, i64 12
  %852 = insertelement <17 x float> %850, float %851, i64 9
  %853 = extractelement <31 x float> %col.load164, i64 12
  %854 = insertelement <17 x float> %852, float %853, i64 10
  %855 = extractelement <31 x float> %col.load166, i64 12
  %856 = insertelement <17 x float> %854, float %855, i64 11
  %857 = extractelement <31 x float> %col.load168, i64 12
  %858 = insertelement <17 x float> %856, float %857, i64 12
  %859 = extractelement <31 x float> %col.load170, i64 12
  %860 = insertelement <17 x float> %858, float %859, i64 13
  %861 = extractelement <31 x float> %col.load172, i64 12
  %862 = insertelement <17 x float> %860, float %861, i64 14
  %863 = extractelement <31 x float> %col.load174, i64 12
  %864 = insertelement <17 x float> %862, float %863, i64 15
  %865 = extractelement <31 x float> %col.load176, i64 12
  %866 = insertelement <17 x float> %864, float %865, i64 16
  %867 = extractelement <31 x float> %col.load, i64 13
  %868 = insertelement <17 x float> poison, float %867, i64 0
  %869 = extractelement <31 x float> %col.load146, i64 13
  %870 = insertelement <17 x float> %868, float %869, i64 1
  %871 = extractelement <31 x float> %col.load148, i64 13
  %872 = insertelement <17 x float> %870, float %871, i64 2
  %873 = extractelement <31 x float> %col.load150, i64 13
  %874 = insertelement <17 x float> %872, float %873, i64 3
  %875 = extractelement <31 x float> %col.load152, i64 13
  %876 = insertelement <17 x float> %874, float %875, i64 4
  %877 = extractelement <31 x float> %col.load154, i64 13
  %878 = insertelement <17 x float> %876, float %877, i64 5
  %879 = extractelement <31 x float> %col.load156, i64 13
  %880 = insertelement <17 x float> %878, float %879, i64 6
  %881 = extractelement <31 x float> %col.load158, i64 13
  %882 = insertelement <17 x float> %880, float %881, i64 7
  %883 = extractelement <31 x float> %col.load160, i64 13
  %884 = insertelement <17 x float> %882, float %883, i64 8
  %885 = extractelement <31 x float> %col.load162, i64 13
  %886 = insertelement <17 x float> %884, float %885, i64 9
  %887 = extractelement <31 x float> %col.load164, i64 13
  %888 = insertelement <17 x float> %886, float %887, i64 10
  %889 = extractelement <31 x float> %col.load166, i64 13
  %890 = insertelement <17 x float> %888, float %889, i64 11
  %891 = extractelement <31 x float> %col.load168, i64 13
  %892 = insertelement <17 x float> %890, float %891, i64 12
  %893 = extractelement <31 x float> %col.load170, i64 13
  %894 = insertelement <17 x float> %892, float %893, i64 13
  %895 = extractelement <31 x float> %col.load172, i64 13
  %896 = insertelement <17 x float> %894, float %895, i64 14
  %897 = extractelement <31 x float> %col.load174, i64 13
  %898 = insertelement <17 x float> %896, float %897, i64 15
  %899 = extractelement <31 x float> %col.load176, i64 13
  %900 = insertelement <17 x float> %898, float %899, i64 16
  %901 = extractelement <31 x float> %col.load, i64 14
  %902 = insertelement <17 x float> poison, float %901, i64 0
  %903 = extractelement <31 x float> %col.load146, i64 14
  %904 = insertelement <17 x float> %902, float %903, i64 1
  %905 = extractelement <31 x float> %col.load148, i64 14
  %906 = insertelement <17 x float> %904, float %905, i64 2
  %907 = extractelement <31 x float> %col.load150, i64 14
  %908 = insertelement <17 x float> %906, float %907, i64 3
  %909 = extractelement <31 x float> %col.load152, i64 14
  %910 = insertelement <17 x float> %908, float %909, i64 4
  %911 = extractelement <31 x float> %col.load154, i64 14
  %912 = insertelement <17 x float> %910, float %911, i64 5
  %913 = extractelement <31 x float> %col.load156, i64 14
  %914 = insertelement <17 x float> %912, float %913, i64 6
  %915 = extractelement <31 x float> %col.load158, i64 14
  %916 = insertelement <17 x float> %914, float %915, i64 7
  %917 = extractelement <31 x float> %col.load160, i64 14
  %918 = insertelement <17 x float> %916, float %917, i64 8
  %919 = extractelement <31 x float> %col.load162, i64 14
  %920 = insertelement <17 x float> %918, float %919, i64 9
  %921 = extractelement <31 x float> %col.load164, i64 14
  %922 = insertelement <17 x float> %920, float %921, i64 10
  %923 = extractelement <31 x float> %col.load166, i64 14
  %924 = insertelement <17 x float> %922, float %923, i64 11
  %925 = extractelement <31 x float> %col.load168, i64 14
  %926 = insertelement <17 x float> %924, float %925, i64 12
  %927 = extractelement <31 x float> %col.load170, i64 14
  %928 = insertelement <17 x float> %926, float %927, i64 13
  %929 = extractelement <31 x float> %col.load172, i64 14
  %930 = insertelement <17 x float> %928, float %929, i64 14
  %931 = extractelement <31 x float> %col.load174, i64 14
  %932 = insertelement <17 x float> %930, float %931, i64 15
  %933 = extractelement <31 x float> %col.load176, i64 14
  %934 = insertelement <17 x float> %932, float %933, i64 16
  %935 = extractelement <31 x float> %col.load, i64 15
  %936 = insertelement <17 x float> poison, float %935, i64 0
  %937 = extractelement <31 x float> %col.load146, i64 15
  %938 = insertelement <17 x float> %936, float %937, i64 1
  %939 = extractelement <31 x float> %col.load148, i64 15
  %940 = insertelement <17 x float> %938, float %939, i64 2
  %941 = extractelement <31 x float> %col.load150, i64 15
  %942 = insertelement <17 x float> %940, float %941, i64 3
  %943 = extractelement <31 x float> %col.load152, i64 15
  %944 = insertelement <17 x float> %942, float %943, i64 4
  %945 = extractelement <31 x float> %col.load154, i64 15
  %946 = insertelement <17 x float> %944, float %945, i64 5
  %947 = extractelement <31 x float> %col.load156, i64 15
  %948 = insertelement <17 x float> %946, float %947, i64 6
  %949 = extractelement <31 x float> %col.load158, i64 15
  %950 = insertelement <17 x float> %948, float %949, i64 7
  %951 = extractelement <31 x float> %col.load160, i64 15
  %952 = insertelement <17 x float> %950, float %951, i64 8
  %953 = extractelement <31 x float> %col.load162, i64 15
  %954 = insertelement <17 x float> %952, float %953, i64 9
  %955 = extractelement <31 x float> %col.load164, i64 15
  %956 = insertelement <17 x float> %954, float %955, i64 10
  %957 = extractelement <31 x float> %col.load166, i64 15
  %958 = insertelement <17 x float> %956, float %957, i64 11
  %959 = extractelement <31 x float> %col.load168, i64 15
  %960 = insertelement <17 x float> %958, float %959, i64 12
  %961 = extractelement <31 x float> %col.load170, i64 15
  %962 = insertelement <17 x float> %960, float %961, i64 13
  %963 = extractelement <31 x float> %col.load172, i64 15
  %964 = insertelement <17 x float> %962, float %963, i64 14
  %965 = extractelement <31 x float> %col.load174, i64 15
  %966 = insertelement <17 x float> %964, float %965, i64 15
  %967 = extractelement <31 x float> %col.load176, i64 15
  %968 = insertelement <17 x float> %966, float %967, i64 16
  %969 = extractelement <31 x float> %col.load, i64 16
  %970 = insertelement <17 x float> poison, float %969, i64 0
  %971 = extractelement <31 x float> %col.load146, i64 16
  %972 = insertelement <17 x float> %970, float %971, i64 1
  %973 = extractelement <31 x float> %col.load148, i64 16
  %974 = insertelement <17 x float> %972, float %973, i64 2
  %975 = extractelement <31 x float> %col.load150, i64 16
  %976 = insertelement <17 x float> %974, float %975, i64 3
  %977 = extractelement <31 x float> %col.load152, i64 16
  %978 = insertelement <17 x float> %976, float %977, i64 4
  %979 = extractelement <31 x float> %col.load154, i64 16
  %980 = insertelement <17 x float> %978, float %979, i64 5
  %981 = extractelement <31 x float> %col.load156, i64 16
  %982 = insertelement <17 x float> %980, float %981, i64 6
  %983 = extractelement <31 x float> %col.load158, i64 16
  %984 = insertelement <17 x float> %982, float %983, i64 7
  %985 = extractelement <31 x float> %col.load160, i64 16
  %986 = insertelement <17 x float> %984, float %985, i64 8
  %987 = extractelement <31 x float> %col.load162, i64 16
  %988 = insertelement <17 x float> %986, float %987, i64 9
  %989 = extractelement <31 x float> %col.load164, i64 16
  %990 = insertelement <17 x float> %988, float %989, i64 10
  %991 = extractelement <31 x float> %col.load166, i64 16
  %992 = insertelement <17 x float> %990, float %991, i64 11
  %993 = extractelement <31 x float> %col.load168, i64 16
  %994 = insertelement <17 x float> %992, float %993, i64 12
  %995 = extractelement <31 x float> %col.load170, i64 16
  %996 = insertelement <17 x float> %994, float %995, i64 13
  %997 = extractelement <31 x float> %col.load172, i64 16
  %998 = insertelement <17 x float> %996, float %997, i64 14
  %999 = extractelement <31 x float> %col.load174, i64 16
  %1000 = insertelement <17 x float> %998, float %999, i64 15
  %1001 = extractelement <31 x float> %col.load176, i64 16
  %1002 = insertelement <17 x float> %1000, float %1001, i64 16
  %1003 = extractelement <31 x float> %col.load, i64 17
  %1004 = insertelement <17 x float> poison, float %1003, i64 0
  %1005 = extractelement <31 x float> %col.load146, i64 17
  %1006 = insertelement <17 x float> %1004, float %1005, i64 1
  %1007 = extractelement <31 x float> %col.load148, i64 17
  %1008 = insertelement <17 x float> %1006, float %1007, i64 2
  %1009 = extractelement <31 x float> %col.load150, i64 17
  %1010 = insertelement <17 x float> %1008, float %1009, i64 3
  %1011 = extractelement <31 x float> %col.load152, i64 17
  %1012 = insertelement <17 x float> %1010, float %1011, i64 4
  %1013 = extractelement <31 x float> %col.load154, i64 17
  %1014 = insertelement <17 x float> %1012, float %1013, i64 5
  %1015 = extractelement <31 x float> %col.load156, i64 17
  %1016 = insertelement <17 x float> %1014, float %1015, i64 6
  %1017 = extractelement <31 x float> %col.load158, i64 17
  %1018 = insertelement <17 x float> %1016, float %1017, i64 7
  %1019 = extractelement <31 x float> %col.load160, i64 17
  %1020 = insertelement <17 x float> %1018, float %1019, i64 8
  %1021 = extractelement <31 x float> %col.load162, i64 17
  %1022 = insertelement <17 x float> %1020, float %1021, i64 9
  %1023 = extractelement <31 x float> %col.load164, i64 17
  %1024 = insertelement <17 x float> %1022, float %1023, i64 10
  %1025 = extractelement <31 x float> %col.load166, i64 17
  %1026 = insertelement <17 x float> %1024, float %1025, i64 11
  %1027 = extractelement <31 x float> %col.load168, i64 17
  %1028 = insertelement <17 x float> %1026, float %1027, i64 12
  %1029 = extractelement <31 x float> %col.load170, i64 17
  %1030 = insertelement <17 x float> %1028, float %1029, i64 13
  %1031 = extractelement <31 x float> %col.load172, i64 17
  %1032 = insertelement <17 x float> %1030, float %1031, i64 14
  %1033 = extractelement <31 x float> %col.load174, i64 17
  %1034 = insertelement <17 x float> %1032, float %1033, i64 15
  %1035 = extractelement <31 x float> %col.load176, i64 17
  %1036 = insertelement <17 x float> %1034, float %1035, i64 16
  %1037 = extractelement <31 x float> %col.load, i64 18
  %1038 = insertelement <17 x float> poison, float %1037, i64 0
  %1039 = extractelement <31 x float> %col.load146, i64 18
  %1040 = insertelement <17 x float> %1038, float %1039, i64 1
  %1041 = extractelement <31 x float> %col.load148, i64 18
  %1042 = insertelement <17 x float> %1040, float %1041, i64 2
  %1043 = extractelement <31 x float> %col.load150, i64 18
  %1044 = insertelement <17 x float> %1042, float %1043, i64 3
  %1045 = extractelement <31 x float> %col.load152, i64 18
  %1046 = insertelement <17 x float> %1044, float %1045, i64 4
  %1047 = extractelement <31 x float> %col.load154, i64 18
  %1048 = insertelement <17 x float> %1046, float %1047, i64 5
  %1049 = extractelement <31 x float> %col.load156, i64 18
  %1050 = insertelement <17 x float> %1048, float %1049, i64 6
  %1051 = extractelement <31 x float> %col.load158, i64 18
  %1052 = insertelement <17 x float> %1050, float %1051, i64 7
  %1053 = extractelement <31 x float> %col.load160, i64 18
  %1054 = insertelement <17 x float> %1052, float %1053, i64 8
  %1055 = extractelement <31 x float> %col.load162, i64 18
  %1056 = insertelement <17 x float> %1054, float %1055, i64 9
  %1057 = extractelement <31 x float> %col.load164, i64 18
  %1058 = insertelement <17 x float> %1056, float %1057, i64 10
  %1059 = extractelement <31 x float> %col.load166, i64 18
  %1060 = insertelement <17 x float> %1058, float %1059, i64 11
  %1061 = extractelement <31 x float> %col.load168, i64 18
  %1062 = insertelement <17 x float> %1060, float %1061, i64 12
  %1063 = extractelement <31 x float> %col.load170, i64 18
  %1064 = insertelement <17 x float> %1062, float %1063, i64 13
  %1065 = extractelement <31 x float> %col.load172, i64 18
  %1066 = insertelement <17 x float> %1064, float %1065, i64 14
  %1067 = extractelement <31 x float> %col.load174, i64 18
  %1068 = insertelement <17 x float> %1066, float %1067, i64 15
  %1069 = extractelement <31 x float> %col.load176, i64 18
  %1070 = insertelement <17 x float> %1068, float %1069, i64 16
  %1071 = extractelement <31 x float> %col.load, i64 19
  %1072 = insertelement <17 x float> poison, float %1071, i64 0
  %1073 = extractelement <31 x float> %col.load146, i64 19
  %1074 = insertelement <17 x float> %1072, float %1073, i64 1
  %1075 = extractelement <31 x float> %col.load148, i64 19
  %1076 = insertelement <17 x float> %1074, float %1075, i64 2
  %1077 = extractelement <31 x float> %col.load150, i64 19
  %1078 = insertelement <17 x float> %1076, float %1077, i64 3
  %1079 = extractelement <31 x float> %col.load152, i64 19
  %1080 = insertelement <17 x float> %1078, float %1079, i64 4
  %1081 = extractelement <31 x float> %col.load154, i64 19
  %1082 = insertelement <17 x float> %1080, float %1081, i64 5
  %1083 = extractelement <31 x float> %col.load156, i64 19
  %1084 = insertelement <17 x float> %1082, float %1083, i64 6
  %1085 = extractelement <31 x float> %col.load158, i64 19
  %1086 = insertelement <17 x float> %1084, float %1085, i64 7
  %1087 = extractelement <31 x float> %col.load160, i64 19
  %1088 = insertelement <17 x float> %1086, float %1087, i64 8
  %1089 = extractelement <31 x float> %col.load162, i64 19
  %1090 = insertelement <17 x float> %1088, float %1089, i64 9
  %1091 = extractelement <31 x float> %col.load164, i64 19
  %1092 = insertelement <17 x float> %1090, float %1091, i64 10
  %1093 = extractelement <31 x float> %col.load166, i64 19
  %1094 = insertelement <17 x float> %1092, float %1093, i64 11
  %1095 = extractelement <31 x float> %col.load168, i64 19
  %1096 = insertelement <17 x float> %1094, float %1095, i64 12
  %1097 = extractelement <31 x float> %col.load170, i64 19
  %1098 = insertelement <17 x float> %1096, float %1097, i64 13
  %1099 = extractelement <31 x float> %col.load172, i64 19
  %1100 = insertelement <17 x float> %1098, float %1099, i64 14
  %1101 = extractelement <31 x float> %col.load174, i64 19
  %1102 = insertelement <17 x float> %1100, float %1101, i64 15
  %1103 = extractelement <31 x float> %col.load176, i64 19
  %1104 = insertelement <17 x float> %1102, float %1103, i64 16
  %1105 = extractelement <31 x float> %col.load, i64 20
  %1106 = insertelement <17 x float> poison, float %1105, i64 0
  %1107 = extractelement <31 x float> %col.load146, i64 20
  %1108 = insertelement <17 x float> %1106, float %1107, i64 1
  %1109 = extractelement <31 x float> %col.load148, i64 20
  %1110 = insertelement <17 x float> %1108, float %1109, i64 2
  %1111 = extractelement <31 x float> %col.load150, i64 20
  %1112 = insertelement <17 x float> %1110, float %1111, i64 3
  %1113 = extractelement <31 x float> %col.load152, i64 20
  %1114 = insertelement <17 x float> %1112, float %1113, i64 4
  %1115 = extractelement <31 x float> %col.load154, i64 20
  %1116 = insertelement <17 x float> %1114, float %1115, i64 5
  %1117 = extractelement <31 x float> %col.load156, i64 20
  %1118 = insertelement <17 x float> %1116, float %1117, i64 6
  %1119 = extractelement <31 x float> %col.load158, i64 20
  %1120 = insertelement <17 x float> %1118, float %1119, i64 7
  %1121 = extractelement <31 x float> %col.load160, i64 20
  %1122 = insertelement <17 x float> %1120, float %1121, i64 8
  %1123 = extractelement <31 x float> %col.load162, i64 20
  %1124 = insertelement <17 x float> %1122, float %1123, i64 9
  %1125 = extractelement <31 x float> %col.load164, i64 20
  %1126 = insertelement <17 x float> %1124, float %1125, i64 10
  %1127 = extractelement <31 x float> %col.load166, i64 20
  %1128 = insertelement <17 x float> %1126, float %1127, i64 11
  %1129 = extractelement <31 x float> %col.load168, i64 20
  %1130 = insertelement <17 x float> %1128, float %1129, i64 12
  %1131 = extractelement <31 x float> %col.load170, i64 20
  %1132 = insertelement <17 x float> %1130, float %1131, i64 13
  %1133 = extractelement <31 x float> %col.load172, i64 20
  %1134 = insertelement <17 x float> %1132, float %1133, i64 14
  %1135 = extractelement <31 x float> %col.load174, i64 20
  %1136 = insertelement <17 x float> %1134, float %1135, i64 15
  %1137 = extractelement <31 x float> %col.load176, i64 20
  %1138 = insertelement <17 x float> %1136, float %1137, i64 16
  %1139 = extractelement <31 x float> %col.load, i64 21
  %1140 = insertelement <17 x float> poison, float %1139, i64 0
  %1141 = extractelement <31 x float> %col.load146, i64 21
  %1142 = insertelement <17 x float> %1140, float %1141, i64 1
  %1143 = extractelement <31 x float> %col.load148, i64 21
  %1144 = insertelement <17 x float> %1142, float %1143, i64 2
  %1145 = extractelement <31 x float> %col.load150, i64 21
  %1146 = insertelement <17 x float> %1144, float %1145, i64 3
  %1147 = extractelement <31 x float> %col.load152, i64 21
  %1148 = insertelement <17 x float> %1146, float %1147, i64 4
  %1149 = extractelement <31 x float> %col.load154, i64 21
  %1150 = insertelement <17 x float> %1148, float %1149, i64 5
  %1151 = extractelement <31 x float> %col.load156, i64 21
  %1152 = insertelement <17 x float> %1150, float %1151, i64 6
  %1153 = extractelement <31 x float> %col.load158, i64 21
  %1154 = insertelement <17 x float> %1152, float %1153, i64 7
  %1155 = extractelement <31 x float> %col.load160, i64 21
  %1156 = insertelement <17 x float> %1154, float %1155, i64 8
  %1157 = extractelement <31 x float> %col.load162, i64 21
  %1158 = insertelement <17 x float> %1156, float %1157, i64 9
  %1159 = extractelement <31 x float> %col.load164, i64 21
  %1160 = insertelement <17 x float> %1158, float %1159, i64 10
  %1161 = extractelement <31 x float> %col.load166, i64 21
  %1162 = insertelement <17 x float> %1160, float %1161, i64 11
  %1163 = extractelement <31 x float> %col.load168, i64 21
  %1164 = insertelement <17 x float> %1162, float %1163, i64 12
  %1165 = extractelement <31 x float> %col.load170, i64 21
  %1166 = insertelement <17 x float> %1164, float %1165, i64 13
  %1167 = extractelement <31 x float> %col.load172, i64 21
  %1168 = insertelement <17 x float> %1166, float %1167, i64 14
  %1169 = extractelement <31 x float> %col.load174, i64 21
  %1170 = insertelement <17 x float> %1168, float %1169, i64 15
  %1171 = extractelement <31 x float> %col.load176, i64 21
  %1172 = insertelement <17 x float> %1170, float %1171, i64 16
  %1173 = extractelement <31 x float> %col.load, i64 22
  %1174 = insertelement <17 x float> poison, float %1173, i64 0
  %1175 = extractelement <31 x float> %col.load146, i64 22
  %1176 = insertelement <17 x float> %1174, float %1175, i64 1
  %1177 = extractelement <31 x float> %col.load148, i64 22
  %1178 = insertelement <17 x float> %1176, float %1177, i64 2
  %1179 = extractelement <31 x float> %col.load150, i64 22
  %1180 = insertelement <17 x float> %1178, float %1179, i64 3
  %1181 = extractelement <31 x float> %col.load152, i64 22
  %1182 = insertelement <17 x float> %1180, float %1181, i64 4
  %1183 = extractelement <31 x float> %col.load154, i64 22
  %1184 = insertelement <17 x float> %1182, float %1183, i64 5
  %1185 = extractelement <31 x float> %col.load156, i64 22
  %1186 = insertelement <17 x float> %1184, float %1185, i64 6
  %1187 = extractelement <31 x float> %col.load158, i64 22
  %1188 = insertelement <17 x float> %1186, float %1187, i64 7
  %1189 = extractelement <31 x float> %col.load160, i64 22
  %1190 = insertelement <17 x float> %1188, float %1189, i64 8
  %1191 = extractelement <31 x float> %col.load162, i64 22
  %1192 = insertelement <17 x float> %1190, float %1191, i64 9
  %1193 = extractelement <31 x float> %col.load164, i64 22
  %1194 = insertelement <17 x float> %1192, float %1193, i64 10
  %1195 = extractelement <31 x float> %col.load166, i64 22
  %1196 = insertelement <17 x float> %1194, float %1195, i64 11
  %1197 = extractelement <31 x float> %col.load168, i64 22
  %1198 = insertelement <17 x float> %1196, float %1197, i64 12
  %1199 = extractelement <31 x float> %col.load170, i64 22
  %1200 = insertelement <17 x float> %1198, float %1199, i64 13
  %1201 = extractelement <31 x float> %col.load172, i64 22
  %1202 = insertelement <17 x float> %1200, float %1201, i64 14
  %1203 = extractelement <31 x float> %col.load174, i64 22
  %1204 = insertelement <17 x float> %1202, float %1203, i64 15
  %1205 = extractelement <31 x float> %col.load176, i64 22
  %1206 = insertelement <17 x float> %1204, float %1205, i64 16
  %1207 = extractelement <31 x float> %col.load, i64 23
  %1208 = insertelement <17 x float> poison, float %1207, i64 0
  %1209 = extractelement <31 x float> %col.load146, i64 23
  %1210 = insertelement <17 x float> %1208, float %1209, i64 1
  %1211 = extractelement <31 x float> %col.load148, i64 23
  %1212 = insertelement <17 x float> %1210, float %1211, i64 2
  %1213 = extractelement <31 x float> %col.load150, i64 23
  %1214 = insertelement <17 x float> %1212, float %1213, i64 3
  %1215 = extractelement <31 x float> %col.load152, i64 23
  %1216 = insertelement <17 x float> %1214, float %1215, i64 4
  %1217 = extractelement <31 x float> %col.load154, i64 23
  %1218 = insertelement <17 x float> %1216, float %1217, i64 5
  %1219 = extractelement <31 x float> %col.load156, i64 23
  %1220 = insertelement <17 x float> %1218, float %1219, i64 6
  %1221 = extractelement <31 x float> %col.load158, i64 23
  %1222 = insertelement <17 x float> %1220, float %1221, i64 7
  %1223 = extractelement <31 x float> %col.load160, i64 23
  %1224 = insertelement <17 x float> %1222, float %1223, i64 8
  %1225 = extractelement <31 x float> %col.load162, i64 23
  %1226 = insertelement <17 x float> %1224, float %1225, i64 9
  %1227 = extractelement <31 x float> %col.load164, i64 23
  %1228 = insertelement <17 x float> %1226, float %1227, i64 10
  %1229 = extractelement <31 x float> %col.load166, i64 23
  %1230 = insertelement <17 x float> %1228, float %1229, i64 11
  %1231 = extractelement <31 x float> %col.load168, i64 23
  %1232 = insertelement <17 x float> %1230, float %1231, i64 12
  %1233 = extractelement <31 x float> %col.load170, i64 23
  %1234 = insertelement <17 x float> %1232, float %1233, i64 13
  %1235 = extractelement <31 x float> %col.load172, i64 23
  %1236 = insertelement <17 x float> %1234, float %1235, i64 14
  %1237 = extractelement <31 x float> %col.load174, i64 23
  %1238 = insertelement <17 x float> %1236, float %1237, i64 15
  %1239 = extractelement <31 x float> %col.load176, i64 23
  %1240 = insertelement <17 x float> %1238, float %1239, i64 16
  %1241 = extractelement <31 x float> %col.load, i64 24
  %1242 = insertelement <17 x float> poison, float %1241, i64 0
  %1243 = extractelement <31 x float> %col.load146, i64 24
  %1244 = insertelement <17 x float> %1242, float %1243, i64 1
  %1245 = extractelement <31 x float> %col.load148, i64 24
  %1246 = insertelement <17 x float> %1244, float %1245, i64 2
  %1247 = extractelement <31 x float> %col.load150, i64 24
  %1248 = insertelement <17 x float> %1246, float %1247, i64 3
  %1249 = extractelement <31 x float> %col.load152, i64 24
  %1250 = insertelement <17 x float> %1248, float %1249, i64 4
  %1251 = extractelement <31 x float> %col.load154, i64 24
  %1252 = insertelement <17 x float> %1250, float %1251, i64 5
  %1253 = extractelement <31 x float> %col.load156, i64 24
  %1254 = insertelement <17 x float> %1252, float %1253, i64 6
  %1255 = extractelement <31 x float> %col.load158, i64 24
  %1256 = insertelement <17 x float> %1254, float %1255, i64 7
  %1257 = extractelement <31 x float> %col.load160, i64 24
  %1258 = insertelement <17 x float> %1256, float %1257, i64 8
  %1259 = extractelement <31 x float> %col.load162, i64 24
  %1260 = insertelement <17 x float> %1258, float %1259, i64 9
  %1261 = extractelement <31 x float> %col.load164, i64 24
  %1262 = insertelement <17 x float> %1260, float %1261, i64 10
  %1263 = extractelement <31 x float> %col.load166, i64 24
  %1264 = insertelement <17 x float> %1262, float %1263, i64 11
  %1265 = extractelement <31 x float> %col.load168, i64 24
  %1266 = insertelement <17 x float> %1264, float %1265, i64 12
  %1267 = extractelement <31 x float> %col.load170, i64 24
  %1268 = insertelement <17 x float> %1266, float %1267, i64 13
  %1269 = extractelement <31 x float> %col.load172, i64 24
  %1270 = insertelement <17 x float> %1268, float %1269, i64 14
  %1271 = extractelement <31 x float> %col.load174, i64 24
  %1272 = insertelement <17 x float> %1270, float %1271, i64 15
  %1273 = extractelement <31 x float> %col.load176, i64 24
  %1274 = insertelement <17 x float> %1272, float %1273, i64 16
  %1275 = extractelement <31 x float> %col.load, i64 25
  %1276 = insertelement <17 x float> poison, float %1275, i64 0
  %1277 = extractelement <31 x float> %col.load146, i64 25
  %1278 = insertelement <17 x float> %1276, float %1277, i64 1
  %1279 = extractelement <31 x float> %col.load148, i64 25
  %1280 = insertelement <17 x float> %1278, float %1279, i64 2
  %1281 = extractelement <31 x float> %col.load150, i64 25
  %1282 = insertelement <17 x float> %1280, float %1281, i64 3
  %1283 = extractelement <31 x float> %col.load152, i64 25
  %1284 = insertelement <17 x float> %1282, float %1283, i64 4
  %1285 = extractelement <31 x float> %col.load154, i64 25
  %1286 = insertelement <17 x float> %1284, float %1285, i64 5
  %1287 = extractelement <31 x float> %col.load156, i64 25
  %1288 = insertelement <17 x float> %1286, float %1287, i64 6
  %1289 = extractelement <31 x float> %col.load158, i64 25
  %1290 = insertelement <17 x float> %1288, float %1289, i64 7
  %1291 = extractelement <31 x float> %col.load160, i64 25
  %1292 = insertelement <17 x float> %1290, float %1291, i64 8
  %1293 = extractelement <31 x float> %col.load162, i64 25
  %1294 = insertelement <17 x float> %1292, float %1293, i64 9
  %1295 = extractelement <31 x float> %col.load164, i64 25
  %1296 = insertelement <17 x float> %1294, float %1295, i64 10
  %1297 = extractelement <31 x float> %col.load166, i64 25
  %1298 = insertelement <17 x float> %1296, float %1297, i64 11
  %1299 = extractelement <31 x float> %col.load168, i64 25
  %1300 = insertelement <17 x float> %1298, float %1299, i64 12
  %1301 = extractelement <31 x float> %col.load170, i64 25
  %1302 = insertelement <17 x float> %1300, float %1301, i64 13
  %1303 = extractelement <31 x float> %col.load172, i64 25
  %1304 = insertelement <17 x float> %1302, float %1303, i64 14
  %1305 = extractelement <31 x float> %col.load174, i64 25
  %1306 = insertelement <17 x float> %1304, float %1305, i64 15
  %1307 = extractelement <31 x float> %col.load176, i64 25
  %1308 = insertelement <17 x float> %1306, float %1307, i64 16
  %1309 = extractelement <31 x float> %col.load, i64 26
  %1310 = insertelement <17 x float> poison, float %1309, i64 0
  %1311 = extractelement <31 x float> %col.load146, i64 26
  %1312 = insertelement <17 x float> %1310, float %1311, i64 1
  %1313 = extractelement <31 x float> %col.load148, i64 26
  %1314 = insertelement <17 x float> %1312, float %1313, i64 2
  %1315 = extractelement <31 x float> %col.load150, i64 26
  %1316 = insertelement <17 x float> %1314, float %1315, i64 3
  %1317 = extractelement <31 x float> %col.load152, i64 26
  %1318 = insertelement <17 x float> %1316, float %1317, i64 4
  %1319 = extractelement <31 x float> %col.load154, i64 26
  %1320 = insertelement <17 x float> %1318, float %1319, i64 5
  %1321 = extractelement <31 x float> %col.load156, i64 26
  %1322 = insertelement <17 x float> %1320, float %1321, i64 6
  %1323 = extractelement <31 x float> %col.load158, i64 26
  %1324 = insertelement <17 x float> %1322, float %1323, i64 7
  %1325 = extractelement <31 x float> %col.load160, i64 26
  %1326 = insertelement <17 x float> %1324, float %1325, i64 8
  %1327 = extractelement <31 x float> %col.load162, i64 26
  %1328 = insertelement <17 x float> %1326, float %1327, i64 9
  %1329 = extractelement <31 x float> %col.load164, i64 26
  %1330 = insertelement <17 x float> %1328, float %1329, i64 10
  %1331 = extractelement <31 x float> %col.load166, i64 26
  %1332 = insertelement <17 x float> %1330, float %1331, i64 11
  %1333 = extractelement <31 x float> %col.load168, i64 26
  %1334 = insertelement <17 x float> %1332, float %1333, i64 12
  %1335 = extractelement <31 x float> %col.load170, i64 26
  %1336 = insertelement <17 x float> %1334, float %1335, i64 13
  %1337 = extractelement <31 x float> %col.load172, i64 26
  %1338 = insertelement <17 x float> %1336, float %1337, i64 14
  %1339 = extractelement <31 x float> %col.load174, i64 26
  %1340 = insertelement <17 x float> %1338, float %1339, i64 15
  %1341 = extractelement <31 x float> %col.load176, i64 26
  %1342 = insertelement <17 x float> %1340, float %1341, i64 16
  %1343 = extractelement <31 x float> %col.load, i64 27
  %1344 = insertelement <17 x float> poison, float %1343, i64 0
  %1345 = extractelement <31 x float> %col.load146, i64 27
  %1346 = insertelement <17 x float> %1344, float %1345, i64 1
  %1347 = extractelement <31 x float> %col.load148, i64 27
  %1348 = insertelement <17 x float> %1346, float %1347, i64 2
  %1349 = extractelement <31 x float> %col.load150, i64 27
  %1350 = insertelement <17 x float> %1348, float %1349, i64 3
  %1351 = extractelement <31 x float> %col.load152, i64 27
  %1352 = insertelement <17 x float> %1350, float %1351, i64 4
  %1353 = extractelement <31 x float> %col.load154, i64 27
  %1354 = insertelement <17 x float> %1352, float %1353, i64 5
  %1355 = extractelement <31 x float> %col.load156, i64 27
  %1356 = insertelement <17 x float> %1354, float %1355, i64 6
  %1357 = extractelement <31 x float> %col.load158, i64 27
  %1358 = insertelement <17 x float> %1356, float %1357, i64 7
  %1359 = extractelement <31 x float> %col.load160, i64 27
  %1360 = insertelement <17 x float> %1358, float %1359, i64 8
  %1361 = extractelement <31 x float> %col.load162, i64 27
  %1362 = insertelement <17 x float> %1360, float %1361, i64 9
  %1363 = extractelement <31 x float> %col.load164, i64 27
  %1364 = insertelement <17 x float> %1362, float %1363, i64 10
  %1365 = extractelement <31 x float> %col.load166, i64 27
  %1366 = insertelement <17 x float> %1364, float %1365, i64 11
  %1367 = extractelement <31 x float> %col.load168, i64 27
  %1368 = insertelement <17 x float> %1366, float %1367, i64 12
  %1369 = extractelement <31 x float> %col.load170, i64 27
  %1370 = insertelement <17 x float> %1368, float %1369, i64 13
  %1371 = extractelement <31 x float> %col.load172, i64 27
  %1372 = insertelement <17 x float> %1370, float %1371, i64 14
  %1373 = extractelement <31 x float> %col.load174, i64 27
  %1374 = insertelement <17 x float> %1372, float %1373, i64 15
  %1375 = extractelement <31 x float> %col.load176, i64 27
  %1376 = insertelement <17 x float> %1374, float %1375, i64 16
  %1377 = extractelement <31 x float> %col.load, i64 28
  %1378 = insertelement <17 x float> poison, float %1377, i64 0
  %1379 = extractelement <31 x float> %col.load146, i64 28
  %1380 = insertelement <17 x float> %1378, float %1379, i64 1
  %1381 = extractelement <31 x float> %col.load148, i64 28
  %1382 = insertelement <17 x float> %1380, float %1381, i64 2
  %1383 = extractelement <31 x float> %col.load150, i64 28
  %1384 = insertelement <17 x float> %1382, float %1383, i64 3
  %1385 = extractelement <31 x float> %col.load152, i64 28
  %1386 = insertelement <17 x float> %1384, float %1385, i64 4
  %1387 = extractelement <31 x float> %col.load154, i64 28
  %1388 = insertelement <17 x float> %1386, float %1387, i64 5
  %1389 = extractelement <31 x float> %col.load156, i64 28
  %1390 = insertelement <17 x float> %1388, float %1389, i64 6
  %1391 = extractelement <31 x float> %col.load158, i64 28
  %1392 = insertelement <17 x float> %1390, float %1391, i64 7
  %1393 = extractelement <31 x float> %col.load160, i64 28
  %1394 = insertelement <17 x float> %1392, float %1393, i64 8
  %1395 = extractelement <31 x float> %col.load162, i64 28
  %1396 = insertelement <17 x float> %1394, float %1395, i64 9
  %1397 = extractelement <31 x float> %col.load164, i64 28
  %1398 = insertelement <17 x float> %1396, float %1397, i64 10
  %1399 = extractelement <31 x float> %col.load166, i64 28
  %1400 = insertelement <17 x float> %1398, float %1399, i64 11
  %1401 = extractelement <31 x float> %col.load168, i64 28
  %1402 = insertelement <17 x float> %1400, float %1401, i64 12
  %1403 = extractelement <31 x float> %col.load170, i64 28
  %1404 = insertelement <17 x float> %1402, float %1403, i64 13
  %1405 = extractelement <31 x float> %col.load172, i64 28
  %1406 = insertelement <17 x float> %1404, float %1405, i64 14
  %1407 = extractelement <31 x float> %col.load174, i64 28
  %1408 = insertelement <17 x float> %1406, float %1407, i64 15
  %1409 = extractelement <31 x float> %col.load176, i64 28
  %1410 = insertelement <17 x float> %1408, float %1409, i64 16
  %1411 = extractelement <31 x float> %col.load, i64 29
  %1412 = insertelement <17 x float> poison, float %1411, i64 0
  %1413 = extractelement <31 x float> %col.load146, i64 29
  %1414 = insertelement <17 x float> %1412, float %1413, i64 1
  %1415 = extractelement <31 x float> %col.load148, i64 29
  %1416 = insertelement <17 x float> %1414, float %1415, i64 2
  %1417 = extractelement <31 x float> %col.load150, i64 29
  %1418 = insertelement <17 x float> %1416, float %1417, i64 3
  %1419 = extractelement <31 x float> %col.load152, i64 29
  %1420 = insertelement <17 x float> %1418, float %1419, i64 4
  %1421 = extractelement <31 x float> %col.load154, i64 29
  %1422 = insertelement <17 x float> %1420, float %1421, i64 5
  %1423 = extractelement <31 x float> %col.load156, i64 29
  %1424 = insertelement <17 x float> %1422, float %1423, i64 6
  %1425 = extractelement <31 x float> %col.load158, i64 29
  %1426 = insertelement <17 x float> %1424, float %1425, i64 7
  %1427 = extractelement <31 x float> %col.load160, i64 29
  %1428 = insertelement <17 x float> %1426, float %1427, i64 8
  %1429 = extractelement <31 x float> %col.load162, i64 29
  %1430 = insertelement <17 x float> %1428, float %1429, i64 9
  %1431 = extractelement <31 x float> %col.load164, i64 29
  %1432 = insertelement <17 x float> %1430, float %1431, i64 10
  %1433 = extractelement <31 x float> %col.load166, i64 29
  %1434 = insertelement <17 x float> %1432, float %1433, i64 11
  %1435 = extractelement <31 x float> %col.load168, i64 29
  %1436 = insertelement <17 x float> %1434, float %1435, i64 12
  %1437 = extractelement <31 x float> %col.load170, i64 29
  %1438 = insertelement <17 x float> %1436, float %1437, i64 13
  %1439 = extractelement <31 x float> %col.load172, i64 29
  %1440 = insertelement <17 x float> %1438, float %1439, i64 14
  %1441 = extractelement <31 x float> %col.load174, i64 29
  %1442 = insertelement <17 x float> %1440, float %1441, i64 15
  %1443 = extractelement <31 x float> %col.load176, i64 29
  %1444 = insertelement <17 x float> %1442, float %1443, i64 16
  %1445 = extractelement <31 x float> %col.load, i64 30
  %1446 = insertelement <17 x float> poison, float %1445, i64 0
  %1447 = extractelement <31 x float> %col.load146, i64 30
  %1448 = insertelement <17 x float> %1446, float %1447, i64 1
  %1449 = extractelement <31 x float> %col.load148, i64 30
  %1450 = insertelement <17 x float> %1448, float %1449, i64 2
  %1451 = extractelement <31 x float> %col.load150, i64 30
  %1452 = insertelement <17 x float> %1450, float %1451, i64 3
  %1453 = extractelement <31 x float> %col.load152, i64 30
  %1454 = insertelement <17 x float> %1452, float %1453, i64 4
  %1455 = extractelement <31 x float> %col.load154, i64 30
  %1456 = insertelement <17 x float> %1454, float %1455, i64 5
  %1457 = extractelement <31 x float> %col.load156, i64 30
  %1458 = insertelement <17 x float> %1456, float %1457, i64 6
  %1459 = extractelement <31 x float> %col.load158, i64 30
  %1460 = insertelement <17 x float> %1458, float %1459, i64 7
  %1461 = extractelement <31 x float> %col.load160, i64 30
  %1462 = insertelement <17 x float> %1460, float %1461, i64 8
  %1463 = extractelement <31 x float> %col.load162, i64 30
  %1464 = insertelement <17 x float> %1462, float %1463, i64 9
  %1465 = extractelement <31 x float> %col.load164, i64 30
  %1466 = insertelement <17 x float> %1464, float %1465, i64 10
  %1467 = extractelement <31 x float> %col.load166, i64 30
  %1468 = insertelement <17 x float> %1466, float %1467, i64 11
  %1469 = extractelement <31 x float> %col.load168, i64 30
  %1470 = insertelement <17 x float> %1468, float %1469, i64 12
  %1471 = extractelement <31 x float> %col.load170, i64 30
  %1472 = insertelement <17 x float> %1470, float %1471, i64 13
  %1473 = extractelement <31 x float> %col.load172, i64 30
  %1474 = insertelement <17 x float> %1472, float %1473, i64 14
  %1475 = extractelement <31 x float> %col.load174, i64 30
  %1476 = insertelement <17 x float> %1474, float %1475, i64 15
  %1477 = extractelement <31 x float> %col.load176, i64 30
  %1478 = insertelement <17 x float> %1476, float %1477, i64 16
  store <17 x float> %458, ptr %ResBuiltin, align 16
  %vec.gep177 = getelementptr inbounds float, ptr %ResBuiltin, i64 17
  store <17 x float> %492, ptr %vec.gep177, align 4
  %vec.gep178 = getelementptr inbounds float, ptr %ResBuiltin, i64 34
  store <17 x float> %526, ptr %vec.gep178, align 8
  %vec.gep179 = getelementptr inbounds float, ptr %ResBuiltin, i64 51
  store <17 x float> %560, ptr %vec.gep179, align 4
  %vec.gep180 = getelementptr inbounds float, ptr %ResBuiltin, i64 68
  store <17 x float> %594, ptr %vec.gep180, align 16
  %vec.gep181 = getelementptr inbounds float, ptr %ResBuiltin, i64 85
  store <17 x float> %628, ptr %vec.gep181, align 4
  %vec.gep182 = getelementptr inbounds float, ptr %ResBuiltin, i64 102
  store <17 x float> %662, ptr %vec.gep182, align 8
  %vec.gep183 = getelementptr inbounds float, ptr %ResBuiltin, i64 119
  store <17 x float> %696, ptr %vec.gep183, align 4
  %vec.gep184 = getelementptr inbounds float, ptr %ResBuiltin, i64 136
  store <17 x float> %730, ptr %vec.gep184, align 16
  %vec.gep185 = getelementptr inbounds float, ptr %ResBuiltin, i64 153
  store <17 x float> %764, ptr %vec.gep185, align 4
  %vec.gep186 = getelementptr inbounds float, ptr %ResBuiltin, i64 170
  store <17 x float> %798, ptr %vec.gep186, align 8
  %vec.gep187 = getelementptr inbounds float, ptr %ResBuiltin, i64 187
  store <17 x float> %832, ptr %vec.gep187, align 4
  %vec.gep188 = getelementptr inbounds float, ptr %ResBuiltin, i64 204
  store <17 x float> %866, ptr %vec.gep188, align 16
  %vec.gep189 = getelementptr inbounds float, ptr %ResBuiltin, i64 221
  store <17 x float> %900, ptr %vec.gep189, align 4
  %vec.gep190 = getelementptr inbounds float, ptr %ResBuiltin, i64 238
  store <17 x float> %934, ptr %vec.gep190, align 8
  %vec.gep191 = getelementptr inbounds float, ptr %ResBuiltin, i64 255
  store <17 x float> %968, ptr %vec.gep191, align 4
  %vec.gep192 = getelementptr inbounds float, ptr %ResBuiltin, i64 272
  store <17 x float> %1002, ptr %vec.gep192, align 16
  %vec.gep193 = getelementptr inbounds float, ptr %ResBuiltin, i64 289
  store <17 x float> %1036, ptr %vec.gep193, align 4
  %vec.gep194 = getelementptr inbounds float, ptr %ResBuiltin, i64 306
  store <17 x float> %1070, ptr %vec.gep194, align 8
  %vec.gep195 = getelementptr inbounds float, ptr %ResBuiltin, i64 323
  store <17 x float> %1104, ptr %vec.gep195, align 4
  %vec.gep196 = getelementptr inbounds float, ptr %ResBuiltin, i64 340
  store <17 x float> %1138, ptr %vec.gep196, align 16
  %vec.gep197 = getelementptr inbounds float, ptr %ResBuiltin, i64 357
  store <17 x float> %1172, ptr %vec.gep197, align 4
  %vec.gep198 = getelementptr inbounds float, ptr %ResBuiltin, i64 374
  store <17 x float> %1206, ptr %vec.gep198, align 8
  %vec.gep199 = getelementptr inbounds float, ptr %ResBuiltin, i64 391
  store <17 x float> %1240, ptr %vec.gep199, align 4
  %vec.gep200 = getelementptr inbounds float, ptr %ResBuiltin, i64 408
  store <17 x float> %1274, ptr %vec.gep200, align 16
  %vec.gep201 = getelementptr inbounds float, ptr %ResBuiltin, i64 425
  store <17 x float> %1308, ptr %vec.gep201, align 4
  %vec.gep202 = getelementptr inbounds float, ptr %ResBuiltin, i64 442
  store <17 x float> %1342, ptr %vec.gep202, align 8
  %vec.gep203 = getelementptr inbounds float, ptr %ResBuiltin, i64 459
  store <17 x float> %1376, ptr %vec.gep203, align 4
  %vec.gep204 = getelementptr inbounds float, ptr %ResBuiltin, i64 476
  store <17 x float> %1410, ptr %vec.gep204, align 16
  %vec.gep205 = getelementptr inbounds float, ptr %ResBuiltin, i64 493
  store <17 x float> %1444, ptr %vec.gep205, align 4
  %vec.gep206 = getelementptr inbounds float, ptr %ResBuiltin, i64 510
  store <17 x float> %1478, ptr %vec.gep206, align 8
  call void @_Z14expectMatrixEQIfLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase, ptr noundef nonnull %ResBuiltin, i32 noundef 31, i32 noundef 17)
  call void @_Z14expectMatrixEQIfLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase, ptr noundef nonnull %ResSpec, i32 noundef 17, i32 noundef 31)
  call void @llvm.lifetime.end.p0(i64 2108, ptr nonnull %ResBuiltin) #16
  call void @llvm.lifetime.end.p0(i64 2108, ptr nonnull %ResSpec) #16
  call void @llvm.lifetime.end.p0(i64 2108, ptr nonnull %ResBase) #16
  call void @llvm.lifetime.end.p0(i64 2108, ptr nonnull %X) #16
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_Z13testTransposeIjLj8ELj7EEvv() local_unnamed_addr #4 comdat {
entry:
  %generator.i = alloca %"class.std::__1::linear_congruential_engine", align 8
  %distribution.i = alloca %"class.std::__1::uniform_int_distribution", align 4
  %X = alloca [56 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 224, ptr nonnull %X) #16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %generator.i) #16
  store i64 1, ptr %generator.i, align 8, !tbaa !15
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %distribution.i) #16
  store i32 -10, ptr %distribution.i, align 4, !tbaa !18
  %__b_.i.i.i = getelementptr inbounds %"class.std::__1::uniform_int_distribution<unsigned int>::param_type", ptr %distribution.i, i64 0, i32 1
  store i32 10, ptr %__b_.i.i.i, align 4, !tbaa !21
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %call.i.i = call noundef i32 @_ZNSt3__124uniform_int_distributionIjEclINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEEjRT_RKNS1_10param_typeE(ptr noundef nonnull align 4 dereferenceable(8) %distribution.i, ptr noundef nonnull align 8 dereferenceable(8) %generator.i, ptr noundef nonnull align 4 dereferenceable(8) %distribution.i)
  %arrayidx.i = getelementptr inbounds i32, ptr %X, i64 %indvars.iv.i
  store i32 %call.i.i, ptr %arrayidx.i, align 4, !tbaa !22
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 56
  br i1 %exitcond.not.i, label %_Z10initRandomIjLi0EEvPT_jj.exit, label %for.body.i, !llvm.loop !23

_Z10initRandomIjLi0EEvPT_jj.exit:                 ; preds = %for.body.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %distribution.i) #16
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %generator.i) #16
  %0 = load i32, ptr %X, align 16, !tbaa !22
  %arrayidx.1.i = getelementptr inbounds i32, ptr %X, i64 8
  %1 = load i32, ptr %arrayidx.1.i, align 16, !tbaa !22
  %arrayidx.2.i = getelementptr inbounds i32, ptr %X, i64 16
  %2 = load i32, ptr %arrayidx.2.i, align 16, !tbaa !22
  %arrayidx.3.i = getelementptr inbounds i32, ptr %X, i64 24
  %3 = load i32, ptr %arrayidx.3.i, align 16, !tbaa !22
  %arrayidx.4.i = getelementptr inbounds i32, ptr %X, i64 32
  %4 = load i32, ptr %arrayidx.4.i, align 16, !tbaa !22
  %arrayidx.5.i = getelementptr inbounds i32, ptr %X, i64 40
  %5 = load i32, ptr %arrayidx.5.i, align 16, !tbaa !22
  %arrayidx.6.i = getelementptr inbounds i32, ptr %X, i64 48
  %6 = load i32, ptr %arrayidx.6.i, align 16, !tbaa !22
  %arrayidx.128.i = getelementptr inbounds i32, ptr %X, i64 1
  %7 = load i32, ptr %arrayidx.128.i, align 4, !tbaa !22
  %arrayidx.1.1.i = getelementptr inbounds i32, ptr %X, i64 9
  %8 = load i32, ptr %arrayidx.1.1.i, align 4, !tbaa !22
  %arrayidx.2.1.i = getelementptr inbounds i32, ptr %X, i64 17
  %9 = load i32, ptr %arrayidx.2.1.i, align 4, !tbaa !22
  %arrayidx.3.1.i = getelementptr inbounds i32, ptr %X, i64 25
  %10 = load i32, ptr %arrayidx.3.1.i, align 4, !tbaa !22
  %arrayidx.4.1.i = getelementptr inbounds i32, ptr %X, i64 33
  %11 = load i32, ptr %arrayidx.4.1.i, align 4, !tbaa !22
  %arrayidx.5.1.i = getelementptr inbounds i32, ptr %X, i64 41
  %12 = load i32, ptr %arrayidx.5.1.i, align 4, !tbaa !22
  %arrayidx.6.1.i = getelementptr inbounds i32, ptr %X, i64 49
  %13 = load i32, ptr %arrayidx.6.1.i, align 4, !tbaa !22
  %arrayidx.230.i = getelementptr inbounds i32, ptr %X, i64 2
  %14 = load i32, ptr %arrayidx.230.i, align 8, !tbaa !22
  %arrayidx.1.2.i = getelementptr inbounds i32, ptr %X, i64 10
  %15 = load i32, ptr %arrayidx.1.2.i, align 8, !tbaa !22
  %arrayidx.2.2.i = getelementptr inbounds i32, ptr %X, i64 18
  %16 = load i32, ptr %arrayidx.2.2.i, align 8, !tbaa !22
  %arrayidx.3.2.i = getelementptr inbounds i32, ptr %X, i64 26
  %17 = load i32, ptr %arrayidx.3.2.i, align 8, !tbaa !22
  %arrayidx.4.2.i = getelementptr inbounds i32, ptr %X, i64 34
  %18 = load i32, ptr %arrayidx.4.2.i, align 8, !tbaa !22
  %arrayidx.5.2.i = getelementptr inbounds i32, ptr %X, i64 42
  %19 = load i32, ptr %arrayidx.5.2.i, align 8, !tbaa !22
  %arrayidx.6.2.i = getelementptr inbounds i32, ptr %X, i64 50
  %20 = load i32, ptr %arrayidx.6.2.i, align 8, !tbaa !22
  %arrayidx.332.i = getelementptr inbounds i32, ptr %X, i64 3
  %21 = load i32, ptr %arrayidx.332.i, align 4, !tbaa !22
  %arrayidx.1.3.i = getelementptr inbounds i32, ptr %X, i64 11
  %22 = load i32, ptr %arrayidx.1.3.i, align 4, !tbaa !22
  %arrayidx.2.3.i = getelementptr inbounds i32, ptr %X, i64 19
  %23 = load i32, ptr %arrayidx.2.3.i, align 4, !tbaa !22
  %arrayidx.3.3.i = getelementptr inbounds i32, ptr %X, i64 27
  %24 = load i32, ptr %arrayidx.3.3.i, align 4, !tbaa !22
  %arrayidx.4.3.i = getelementptr inbounds i32, ptr %X, i64 35
  %25 = load i32, ptr %arrayidx.4.3.i, align 4, !tbaa !22
  %arrayidx.5.3.i = getelementptr inbounds i32, ptr %X, i64 43
  %26 = load i32, ptr %arrayidx.5.3.i, align 4, !tbaa !22
  %arrayidx.6.3.i = getelementptr inbounds i32, ptr %X, i64 51
  %27 = load i32, ptr %arrayidx.6.3.i, align 4, !tbaa !22
  %arrayidx.434.i = getelementptr inbounds i32, ptr %X, i64 4
  %28 = load i32, ptr %arrayidx.434.i, align 16, !tbaa !22
  %arrayidx.1.4.i = getelementptr inbounds i32, ptr %X, i64 12
  %29 = load i32, ptr %arrayidx.1.4.i, align 16, !tbaa !22
  %arrayidx.2.4.i = getelementptr inbounds i32, ptr %X, i64 20
  %30 = load i32, ptr %arrayidx.2.4.i, align 16, !tbaa !22
  %arrayidx.3.4.i = getelementptr inbounds i32, ptr %X, i64 28
  %31 = load i32, ptr %arrayidx.3.4.i, align 16, !tbaa !22
  %arrayidx.4.4.i = getelementptr inbounds i32, ptr %X, i64 36
  %32 = load i32, ptr %arrayidx.4.4.i, align 16, !tbaa !22
  %arrayidx.5.4.i = getelementptr inbounds i32, ptr %X, i64 44
  %33 = load i32, ptr %arrayidx.5.4.i, align 16, !tbaa !22
  %arrayidx.6.4.i = getelementptr inbounds i32, ptr %X, i64 52
  %34 = load i32, ptr %arrayidx.6.4.i, align 16, !tbaa !22
  %arrayidx.536.i = getelementptr inbounds i32, ptr %X, i64 5
  %35 = load i32, ptr %arrayidx.536.i, align 4, !tbaa !22
  %arrayidx.1.5.i = getelementptr inbounds i32, ptr %X, i64 13
  %36 = load i32, ptr %arrayidx.1.5.i, align 4, !tbaa !22
  %arrayidx.2.5.i = getelementptr inbounds i32, ptr %X, i64 21
  %37 = load i32, ptr %arrayidx.2.5.i, align 4, !tbaa !22
  %arrayidx.3.5.i = getelementptr inbounds i32, ptr %X, i64 29
  %38 = load i32, ptr %arrayidx.3.5.i, align 4, !tbaa !22
  %arrayidx.4.5.i = getelementptr inbounds i32, ptr %X, i64 37
  %39 = load i32, ptr %arrayidx.4.5.i, align 4, !tbaa !22
  %arrayidx.5.5.i = getelementptr inbounds i32, ptr %X, i64 45
  %40 = load i32, ptr %arrayidx.5.5.i, align 4, !tbaa !22
  %arrayidx.6.5.i = getelementptr inbounds i32, ptr %X, i64 53
  %41 = load i32, ptr %arrayidx.6.5.i, align 4, !tbaa !22
  %arrayidx.638.i = getelementptr inbounds i32, ptr %X, i64 6
  %42 = load i32, ptr %arrayidx.638.i, align 8, !tbaa !22
  %arrayidx.1.6.i = getelementptr inbounds i32, ptr %X, i64 14
  %43 = load i32, ptr %arrayidx.1.6.i, align 8, !tbaa !22
  %arrayidx.2.6.i = getelementptr inbounds i32, ptr %X, i64 22
  %44 = load i32, ptr %arrayidx.2.6.i, align 8, !tbaa !22
  %arrayidx.3.6.i = getelementptr inbounds i32, ptr %X, i64 30
  %45 = load i32, ptr %arrayidx.3.6.i, align 8, !tbaa !22
  %arrayidx.4.6.i = getelementptr inbounds i32, ptr %X, i64 38
  %46 = load i32, ptr %arrayidx.4.6.i, align 8, !tbaa !22
  %arrayidx.5.6.i = getelementptr inbounds i32, ptr %X, i64 46
  %47 = load i32, ptr %arrayidx.5.6.i, align 8, !tbaa !22
  %arrayidx.6.6.i = getelementptr inbounds i32, ptr %X, i64 54
  %48 = load i32, ptr %arrayidx.6.6.i, align 8, !tbaa !22
  %arrayidx.7.i = getelementptr inbounds i32, ptr %X, i64 7
  %49 = load i32, ptr %arrayidx.7.i, align 4, !tbaa !22
  %arrayidx.1.7.i = getelementptr inbounds i32, ptr %X, i64 15
  %50 = load i32, ptr %arrayidx.1.7.i, align 4, !tbaa !22
  %arrayidx.2.7.i = getelementptr inbounds i32, ptr %X, i64 23
  %51 = load i32, ptr %arrayidx.2.7.i, align 4, !tbaa !22
  %arrayidx.3.7.i = getelementptr inbounds i32, ptr %X, i64 31
  %52 = load i32, ptr %arrayidx.3.7.i, align 4, !tbaa !22
  %arrayidx.4.7.i = getelementptr inbounds i32, ptr %X, i64 39
  %53 = load i32, ptr %arrayidx.4.7.i, align 4, !tbaa !22
  %arrayidx.5.7.i = getelementptr inbounds i32, ptr %X, i64 47
  %54 = load i32, ptr %arrayidx.5.7.i, align 4, !tbaa !22
  %arrayidx.6.7.i = getelementptr inbounds i32, ptr %X, i64 55
  %55 = load i32, ptr %arrayidx.6.7.i, align 4, !tbaa !22
  %col.load = load <8 x i32>, ptr %X, align 16
  %col.load249 = load <8 x i32>, ptr %arrayidx.1.i, align 16
  %col.load251 = load <8 x i32>, ptr %arrayidx.2.i, align 16
  %col.load253 = load <8 x i32>, ptr %arrayidx.3.i, align 16
  %col.load255 = load <8 x i32>, ptr %arrayidx.4.i, align 16
  %col.load257 = load <8 x i32>, ptr %arrayidx.5.i, align 16
  %col.load259 = load <8 x i32>, ptr %arrayidx.6.i, align 16
  %56 = extractelement <8 x i32> %col.load, i64 0
  %57 = extractelement <8 x i32> %col.load249, i64 0
  %58 = extractelement <8 x i32> %col.load251, i64 0
  %59 = extractelement <8 x i32> %col.load253, i64 0
  %60 = extractelement <8 x i32> %col.load255, i64 0
  %61 = extractelement <8 x i32> %col.load257, i64 0
  %62 = extractelement <8 x i32> %col.load259, i64 0
  %63 = extractelement <8 x i32> %col.load, i64 1
  %64 = extractelement <8 x i32> %col.load251, i64 1
  %65 = extractelement <8 x i32> %col.load253, i64 1
  %66 = extractelement <8 x i32> %col.load255, i64 1
  %67 = extractelement <8 x i32> %col.load257, i64 1
  %68 = extractelement <8 x i32> %col.load259, i64 1
  %69 = extractelement <8 x i32> %col.load, i64 2
  %70 = extractelement <8 x i32> %col.load249, i64 2
  %71 = extractelement <8 x i32> %col.load251, i64 2
  %72 = extractelement <8 x i32> %col.load253, i64 2
  %73 = extractelement <8 x i32> %col.load255, i64 2
  %74 = extractelement <8 x i32> %col.load257, i64 2
  %75 = extractelement <8 x i32> %col.load259, i64 2
  %76 = extractelement <8 x i32> %col.load, i64 3
  %77 = extractelement <8 x i32> %col.load249, i64 3
  %78 = extractelement <8 x i32> %col.load251, i64 3
  %79 = extractelement <8 x i32> %col.load253, i64 3
  %80 = extractelement <8 x i32> %col.load255, i64 3
  %81 = extractelement <8 x i32> %col.load257, i64 3
  %82 = extractelement <8 x i32> %col.load259, i64 3
  %83 = extractelement <8 x i32> %col.load, i64 4
  %84 = extractelement <8 x i32> %col.load249, i64 4
  %85 = extractelement <8 x i32> %col.load251, i64 4
  %86 = extractelement <8 x i32> %col.load253, i64 4
  %87 = extractelement <8 x i32> %col.load255, i64 4
  %88 = extractelement <8 x i32> %col.load257, i64 4
  %89 = extractelement <8 x i32> %col.load259, i64 4
  %90 = extractelement <8 x i32> %col.load, i64 5
  %91 = extractelement <8 x i32> %col.load249, i64 5
  %92 = extractelement <8 x i32> %col.load251, i64 5
  %93 = extractelement <8 x i32> %col.load253, i64 5
  %94 = extractelement <8 x i32> %col.load255, i64 5
  %95 = extractelement <8 x i32> %col.load257, i64 5
  %96 = extractelement <8 x i32> %col.load259, i64 5
  %97 = extractelement <8 x i32> %col.load, i64 6
  %98 = extractelement <8 x i32> %col.load249, i64 6
  %99 = extractelement <8 x i32> %col.load251, i64 6
  %100 = extractelement <8 x i32> %col.load253, i64 6
  %101 = extractelement <8 x i32> %col.load255, i64 6
  %102 = extractelement <8 x i32> %col.load257, i64 6
  %103 = extractelement <8 x i32> %col.load259, i64 6
  %104 = extractelement <8 x i32> %col.load, i64 7
  %105 = extractelement <8 x i32> %col.load249, i64 7
  %106 = extractelement <8 x i32> %col.load251, i64 7
  %107 = extractelement <8 x i32> %col.load253, i64 7
  %108 = extractelement <8 x i32> %col.load255, i64 7
  %109 = extractelement <8 x i32> %col.load257, i64 7
  %110 = extractelement <8 x i32> %col.load259, i64 7
  %cmp9.not.us.i = icmp eq i32 %0, %56
  br i1 %cmp9.not.us.i, label %for.inc.us.i, label %if.then.i

for.inc.us.i:                                     ; preds = %_Z10initRandomIjLi0EEvPT_jj.exit
  %111 = extractelement <8 x i32> %col.load249, i64 1
  %cmp9.not.us.i.1 = icmp eq i32 %8, %111
  br i1 %cmp9.not.us.i.1, label %for.inc.us.i.1, label %if.then.i

for.inc.us.i.1:                                   ; preds = %for.inc.us.i
  %cmp9.not.us.i.2 = icmp eq i32 %16, %71
  br i1 %cmp9.not.us.i.2, label %for.inc.us.i.2, label %if.then.i

for.inc.us.i.2:                                   ; preds = %for.inc.us.i.1
  %cmp9.not.us.i.3 = icmp eq i32 %24, %79
  br i1 %cmp9.not.us.i.3, label %for.inc.us.i.3, label %if.then.i

for.inc.us.i.3:                                   ; preds = %for.inc.us.i.2
  %cmp9.not.us.i.4 = icmp eq i32 %32, %87
  br i1 %cmp9.not.us.i.4, label %for.inc.us.i.4, label %if.then.i

for.inc.us.i.4:                                   ; preds = %for.inc.us.i.3
  %cmp9.not.us.i.5 = icmp eq i32 %40, %95
  br i1 %cmp9.not.us.i.5, label %for.inc.us.i.5, label %if.then.i

for.inc.us.i.5:                                   ; preds = %for.inc.us.i.4
  %cmp9.not.us.i.6 = icmp eq i32 %48, %103
  br i1 %cmp9.not.us.i.6, label %for.inc.us.i.6, label %if.then.i

for.inc.us.i.6:                                   ; preds = %for.inc.us.i.5
  %cmp9.not.us.i.1139 = icmp eq i32 %1, %57
  br i1 %cmp9.not.us.i.1139, label %for.inc.us.i.1140, label %if.then.i

for.inc.us.i.1140:                                ; preds = %for.inc.us.i.6
  %cmp9.not.us.i.1.1 = icmp eq i32 %9, %64
  br i1 %cmp9.not.us.i.1.1, label %for.inc.us.i.1.1, label %if.then.i

for.inc.us.i.1.1:                                 ; preds = %for.inc.us.i.1140
  %cmp9.not.us.i.2.1 = icmp eq i32 %17, %72
  br i1 %cmp9.not.us.i.2.1, label %for.inc.us.i.2.1, label %if.then.i

for.inc.us.i.2.1:                                 ; preds = %for.inc.us.i.1.1
  %cmp9.not.us.i.3.1 = icmp eq i32 %25, %80
  br i1 %cmp9.not.us.i.3.1, label %for.inc.us.i.3.1, label %if.then.i

for.inc.us.i.3.1:                                 ; preds = %for.inc.us.i.2.1
  %cmp9.not.us.i.4.1 = icmp eq i32 %33, %88
  br i1 %cmp9.not.us.i.4.1, label %for.inc.us.i.4.1, label %if.then.i

for.inc.us.i.4.1:                                 ; preds = %for.inc.us.i.3.1
  %cmp9.not.us.i.5.1 = icmp eq i32 %41, %96
  br i1 %cmp9.not.us.i.5.1, label %for.inc.us.i.5.1, label %if.then.i

for.inc.us.i.5.1:                                 ; preds = %for.inc.us.i.4.1
  %cmp9.not.us.i.6.1 = icmp eq i32 %49, %104
  br i1 %cmp9.not.us.i.6.1, label %for.inc.us.i.6.1, label %if.then.i

for.inc.us.i.6.1:                                 ; preds = %for.inc.us.i.5.1
  %cmp9.not.us.i.2143 = icmp eq i32 %2, %58
  br i1 %cmp9.not.us.i.2143, label %for.inc.us.i.2144, label %if.then.i

for.inc.us.i.2144:                                ; preds = %for.inc.us.i.6.1
  %cmp9.not.us.i.1.2 = icmp eq i32 %10, %65
  br i1 %cmp9.not.us.i.1.2, label %for.inc.us.i.1.2, label %if.then.i

for.inc.us.i.1.2:                                 ; preds = %for.inc.us.i.2144
  %cmp9.not.us.i.2.2 = icmp eq i32 %18, %73
  br i1 %cmp9.not.us.i.2.2, label %for.inc.us.i.2.2, label %if.then.i

for.inc.us.i.2.2:                                 ; preds = %for.inc.us.i.1.2
  %cmp9.not.us.i.3.2 = icmp eq i32 %26, %81
  br i1 %cmp9.not.us.i.3.2, label %for.inc.us.i.3.2, label %if.then.i

for.inc.us.i.3.2:                                 ; preds = %for.inc.us.i.2.2
  %cmp9.not.us.i.4.2 = icmp eq i32 %34, %89
  br i1 %cmp9.not.us.i.4.2, label %for.inc.us.i.4.2, label %if.then.i

for.inc.us.i.4.2:                                 ; preds = %for.inc.us.i.3.2
  %cmp9.not.us.i.5.2 = icmp eq i32 %42, %97
  br i1 %cmp9.not.us.i.5.2, label %for.inc.us.i.5.2, label %if.then.i

for.inc.us.i.5.2:                                 ; preds = %for.inc.us.i.4.2
  %cmp9.not.us.i.6.2 = icmp eq i32 %50, %105
  br i1 %cmp9.not.us.i.6.2, label %for.inc.us.i.6.2, label %if.then.i

for.inc.us.i.6.2:                                 ; preds = %for.inc.us.i.5.2
  %cmp9.not.us.i.3147 = icmp eq i32 %3, %59
  br i1 %cmp9.not.us.i.3147, label %for.inc.us.i.3148, label %if.then.i

for.inc.us.i.3148:                                ; preds = %for.inc.us.i.6.2
  %cmp9.not.us.i.1.3 = icmp eq i32 %11, %66
  br i1 %cmp9.not.us.i.1.3, label %for.inc.us.i.1.3, label %if.then.i

for.inc.us.i.1.3:                                 ; preds = %for.inc.us.i.3148
  %cmp9.not.us.i.2.3 = icmp eq i32 %19, %74
  br i1 %cmp9.not.us.i.2.3, label %for.inc.us.i.2.3, label %if.then.i

for.inc.us.i.2.3:                                 ; preds = %for.inc.us.i.1.3
  %cmp9.not.us.i.3.3 = icmp eq i32 %27, %82
  br i1 %cmp9.not.us.i.3.3, label %for.inc.us.i.3.3, label %if.then.i

for.inc.us.i.3.3:                                 ; preds = %for.inc.us.i.2.3
  %cmp9.not.us.i.4.3 = icmp eq i32 %35, %90
  br i1 %cmp9.not.us.i.4.3, label %for.inc.us.i.4.3, label %if.then.i

for.inc.us.i.4.3:                                 ; preds = %for.inc.us.i.3.3
  %cmp9.not.us.i.5.3 = icmp eq i32 %43, %98
  br i1 %cmp9.not.us.i.5.3, label %for.inc.us.i.5.3, label %if.then.i

for.inc.us.i.5.3:                                 ; preds = %for.inc.us.i.4.3
  %cmp9.not.us.i.6.3 = icmp eq i32 %51, %106
  br i1 %cmp9.not.us.i.6.3, label %for.inc.us.i.6.3, label %if.then.i

for.inc.us.i.6.3:                                 ; preds = %for.inc.us.i.5.3
  %cmp9.not.us.i.4151 = icmp eq i32 %4, %60
  br i1 %cmp9.not.us.i.4151, label %for.inc.us.i.4152, label %if.then.i

for.inc.us.i.4152:                                ; preds = %for.inc.us.i.6.3
  %cmp9.not.us.i.1.4 = icmp eq i32 %12, %67
  br i1 %cmp9.not.us.i.1.4, label %for.inc.us.i.1.4, label %if.then.i

for.inc.us.i.1.4:                                 ; preds = %for.inc.us.i.4152
  %cmp9.not.us.i.2.4 = icmp eq i32 %20, %75
  br i1 %cmp9.not.us.i.2.4, label %for.inc.us.i.2.4, label %if.then.i

for.inc.us.i.2.4:                                 ; preds = %for.inc.us.i.1.4
  %cmp9.not.us.i.3.4 = icmp eq i32 %28, %83
  br i1 %cmp9.not.us.i.3.4, label %for.inc.us.i.3.4, label %if.then.i

for.inc.us.i.3.4:                                 ; preds = %for.inc.us.i.2.4
  %cmp9.not.us.i.4.4 = icmp eq i32 %36, %91
  br i1 %cmp9.not.us.i.4.4, label %for.inc.us.i.4.4, label %if.then.i

for.inc.us.i.4.4:                                 ; preds = %for.inc.us.i.3.4
  %cmp9.not.us.i.5.4 = icmp eq i32 %44, %99
  br i1 %cmp9.not.us.i.5.4, label %for.inc.us.i.5.4, label %if.then.i

for.inc.us.i.5.4:                                 ; preds = %for.inc.us.i.4.4
  %cmp9.not.us.i.6.4 = icmp eq i32 %52, %107
  br i1 %cmp9.not.us.i.6.4, label %for.inc.us.i.6.4, label %if.then.i

for.inc.us.i.6.4:                                 ; preds = %for.inc.us.i.5.4
  %cmp9.not.us.i.5155 = icmp eq i32 %5, %61
  br i1 %cmp9.not.us.i.5155, label %for.inc.us.i.5156, label %if.then.i

for.inc.us.i.5156:                                ; preds = %for.inc.us.i.6.4
  %cmp9.not.us.i.1.5 = icmp eq i32 %13, %68
  br i1 %cmp9.not.us.i.1.5, label %for.inc.us.i.1.5, label %if.then.i

for.inc.us.i.1.5:                                 ; preds = %for.inc.us.i.5156
  %cmp9.not.us.i.2.5 = icmp eq i32 %21, %76
  br i1 %cmp9.not.us.i.2.5, label %for.inc.us.i.2.5, label %if.then.i

for.inc.us.i.2.5:                                 ; preds = %for.inc.us.i.1.5
  %cmp9.not.us.i.3.5 = icmp eq i32 %29, %84
  br i1 %cmp9.not.us.i.3.5, label %for.inc.us.i.3.5, label %if.then.i

for.inc.us.i.3.5:                                 ; preds = %for.inc.us.i.2.5
  %cmp9.not.us.i.4.5 = icmp eq i32 %37, %92
  br i1 %cmp9.not.us.i.4.5, label %for.inc.us.i.4.5, label %if.then.i

for.inc.us.i.4.5:                                 ; preds = %for.inc.us.i.3.5
  %cmp9.not.us.i.5.5 = icmp eq i32 %45, %100
  br i1 %cmp9.not.us.i.5.5, label %for.inc.us.i.5.5, label %if.then.i

for.inc.us.i.5.5:                                 ; preds = %for.inc.us.i.4.5
  %cmp9.not.us.i.6.5 = icmp eq i32 %53, %108
  br i1 %cmp9.not.us.i.6.5, label %for.inc.us.i.6.5, label %if.then.i

for.inc.us.i.6.5:                                 ; preds = %for.inc.us.i.5.5
  %cmp9.not.us.i.6159 = icmp eq i32 %6, %62
  br i1 %cmp9.not.us.i.6159, label %for.inc.us.i.6160, label %if.then.i

for.inc.us.i.6160:                                ; preds = %for.inc.us.i.6.5
  %cmp9.not.us.i.1.6 = icmp eq i32 %14, %69
  br i1 %cmp9.not.us.i.1.6, label %for.inc.us.i.1.6, label %if.then.i

for.inc.us.i.1.6:                                 ; preds = %for.inc.us.i.6160
  %cmp9.not.us.i.2.6 = icmp eq i32 %22, %77
  br i1 %cmp9.not.us.i.2.6, label %for.inc.us.i.2.6, label %if.then.i

for.inc.us.i.2.6:                                 ; preds = %for.inc.us.i.1.6
  %cmp9.not.us.i.3.6 = icmp eq i32 %30, %85
  br i1 %cmp9.not.us.i.3.6, label %for.inc.us.i.3.6, label %if.then.i

for.inc.us.i.3.6:                                 ; preds = %for.inc.us.i.2.6
  %cmp9.not.us.i.4.6 = icmp eq i32 %38, %93
  br i1 %cmp9.not.us.i.4.6, label %for.inc.us.i.4.6, label %if.then.i

for.inc.us.i.4.6:                                 ; preds = %for.inc.us.i.3.6
  %cmp9.not.us.i.5.6 = icmp eq i32 %46, %101
  br i1 %cmp9.not.us.i.5.6, label %for.inc.us.i.5.6, label %if.then.i

for.inc.us.i.5.6:                                 ; preds = %for.inc.us.i.4.6
  %cmp9.not.us.i.6.6 = icmp eq i32 %54, %109
  br i1 %cmp9.not.us.i.6.6, label %for.inc.us.i.6.6, label %if.then.i

for.inc.us.i.6.6:                                 ; preds = %for.inc.us.i.5.6
  %cmp9.not.us.i.7 = icmp eq i32 %7, %63
  br i1 %cmp9.not.us.i.7, label %for.inc.us.i.7, label %if.then.i

for.inc.us.i.7:                                   ; preds = %for.inc.us.i.6.6
  %cmp9.not.us.i.1.7 = icmp eq i32 %15, %70
  br i1 %cmp9.not.us.i.1.7, label %for.inc.us.i.1.7, label %if.then.i

for.inc.us.i.1.7:                                 ; preds = %for.inc.us.i.7
  %cmp9.not.us.i.2.7 = icmp eq i32 %23, %78
  br i1 %cmp9.not.us.i.2.7, label %for.inc.us.i.2.7, label %if.then.i

for.inc.us.i.2.7:                                 ; preds = %for.inc.us.i.1.7
  %cmp9.not.us.i.3.7 = icmp eq i32 %31, %86
  br i1 %cmp9.not.us.i.3.7, label %for.inc.us.i.3.7, label %if.then.i

for.inc.us.i.3.7:                                 ; preds = %for.inc.us.i.2.7
  %cmp9.not.us.i.4.7 = icmp eq i32 %39, %94
  br i1 %cmp9.not.us.i.4.7, label %for.inc.us.i.4.7, label %if.then.i

for.inc.us.i.4.7:                                 ; preds = %for.inc.us.i.3.7
  %cmp9.not.us.i.5.7 = icmp eq i32 %47, %102
  br i1 %cmp9.not.us.i.5.7, label %for.inc.us.i.5.7, label %if.then.i

for.inc.us.i.5.7:                                 ; preds = %for.inc.us.i.4.7
  %cmp9.not.us.i.6.7 = icmp eq i32 %55, %110
  br i1 %cmp9.not.us.i.6.7, label %for.inc.us.i.6.7, label %if.then.i

for.inc.us.i.6.7:                                 ; preds = %for.inc.us.i.5.7
  %ResSpec.sroa.0.0.vec.extract = extractelement <8 x i32> %col.load, i64 0
  %cmp9.not.us.i64 = icmp eq i32 %0, %ResSpec.sroa.0.0.vec.extract
  br i1 %cmp9.not.us.i64, label %for.inc.us.i68, label %if.then.i77

if.then.i:                                        ; preds = %for.inc.us.i.5.7, %for.inc.us.i.4.7, %for.inc.us.i.3.7, %for.inc.us.i.2.7, %for.inc.us.i.1.7, %for.inc.us.i.7, %for.inc.us.i.6.6, %for.inc.us.i.5.6, %for.inc.us.i.4.6, %for.inc.us.i.3.6, %for.inc.us.i.2.6, %for.inc.us.i.1.6, %for.inc.us.i.6160, %for.inc.us.i.6.5, %for.inc.us.i.5.5, %for.inc.us.i.4.5, %for.inc.us.i.3.5, %for.inc.us.i.2.5, %for.inc.us.i.1.5, %for.inc.us.i.5156, %for.inc.us.i.6.4, %for.inc.us.i.5.4, %for.inc.us.i.4.4, %for.inc.us.i.3.4, %for.inc.us.i.2.4, %for.inc.us.i.1.4, %for.inc.us.i.4152, %for.inc.us.i.6.3, %for.inc.us.i.5.3, %for.inc.us.i.4.3, %for.inc.us.i.3.3, %for.inc.us.i.2.3, %for.inc.us.i.1.3, %for.inc.us.i.3148, %for.inc.us.i.6.2, %for.inc.us.i.5.2, %for.inc.us.i.4.2, %for.inc.us.i.3.2, %for.inc.us.i.2.2, %for.inc.us.i.1.2, %for.inc.us.i.2144, %for.inc.us.i.6.1, %for.inc.us.i.5.1, %for.inc.us.i.4.1, %for.inc.us.i.3.1, %for.inc.us.i.2.1, %for.inc.us.i.1.1, %for.inc.us.i.1140, %for.inc.us.i.6, %for.inc.us.i.5, %for.inc.us.i.4, %for.inc.us.i.3, %for.inc.us.i.2, %for.inc.us.i.1, %for.inc.us.i, %_Z10initRandomIjLi0EEvPT_jj.exit
  %r.032.us.i.lcssa = phi i32 [ 0, %_Z10initRandomIjLi0EEvPT_jj.exit ], [ 0, %for.inc.us.i ], [ 0, %for.inc.us.i.1 ], [ 0, %for.inc.us.i.2 ], [ 0, %for.inc.us.i.3 ], [ 0, %for.inc.us.i.4 ], [ 0, %for.inc.us.i.5 ], [ 1, %for.inc.us.i.6 ], [ 1, %for.inc.us.i.1140 ], [ 1, %for.inc.us.i.1.1 ], [ 1, %for.inc.us.i.2.1 ], [ 1, %for.inc.us.i.3.1 ], [ 1, %for.inc.us.i.4.1 ], [ 1, %for.inc.us.i.5.1 ], [ 2, %for.inc.us.i.6.1 ], [ 2, %for.inc.us.i.2144 ], [ 2, %for.inc.us.i.1.2 ], [ 2, %for.inc.us.i.2.2 ], [ 2, %for.inc.us.i.3.2 ], [ 2, %for.inc.us.i.4.2 ], [ 2, %for.inc.us.i.5.2 ], [ 3, %for.inc.us.i.6.2 ], [ 3, %for.inc.us.i.3148 ], [ 3, %for.inc.us.i.1.3 ], [ 3, %for.inc.us.i.2.3 ], [ 3, %for.inc.us.i.3.3 ], [ 3, %for.inc.us.i.4.3 ], [ 3, %for.inc.us.i.5.3 ], [ 4, %for.inc.us.i.6.3 ], [ 4, %for.inc.us.i.4152 ], [ 4, %for.inc.us.i.1.4 ], [ 4, %for.inc.us.i.2.4 ], [ 4, %for.inc.us.i.3.4 ], [ 4, %for.inc.us.i.4.4 ], [ 4, %for.inc.us.i.5.4 ], [ 5, %for.inc.us.i.6.4 ], [ 5, %for.inc.us.i.5156 ], [ 5, %for.inc.us.i.1.5 ], [ 5, %for.inc.us.i.2.5 ], [ 5, %for.inc.us.i.3.5 ], [ 5, %for.inc.us.i.4.5 ], [ 5, %for.inc.us.i.5.5 ], [ 6, %for.inc.us.i.6.5 ], [ 6, %for.inc.us.i.6160 ], [ 6, %for.inc.us.i.1.6 ], [ 6, %for.inc.us.i.2.6 ], [ 6, %for.inc.us.i.3.6 ], [ 6, %for.inc.us.i.4.6 ], [ 6, %for.inc.us.i.5.6 ], [ 7, %for.inc.us.i.6.6 ], [ 7, %for.inc.us.i.7 ], [ 7, %for.inc.us.i.1.7 ], [ 7, %for.inc.us.i.2.7 ], [ 7, %for.inc.us.i.3.7 ], [ 7, %for.inc.us.i.4.7 ], [ 7, %for.inc.us.i.5.7 ]
  %indvars.iv.i47.lcssa = phi i32 [ 0, %_Z10initRandomIjLi0EEvPT_jj.exit ], [ 1, %for.inc.us.i ], [ 2, %for.inc.us.i.1 ], [ 3, %for.inc.us.i.2 ], [ 4, %for.inc.us.i.3 ], [ 5, %for.inc.us.i.4 ], [ 6, %for.inc.us.i.5 ], [ 0, %for.inc.us.i.6 ], [ 1, %for.inc.us.i.1140 ], [ 2, %for.inc.us.i.1.1 ], [ 3, %for.inc.us.i.2.1 ], [ 4, %for.inc.us.i.3.1 ], [ 5, %for.inc.us.i.4.1 ], [ 6, %for.inc.us.i.5.1 ], [ 0, %for.inc.us.i.6.1 ], [ 1, %for.inc.us.i.2144 ], [ 2, %for.inc.us.i.1.2 ], [ 3, %for.inc.us.i.2.2 ], [ 4, %for.inc.us.i.3.2 ], [ 5, %for.inc.us.i.4.2 ], [ 6, %for.inc.us.i.5.2 ], [ 0, %for.inc.us.i.6.2 ], [ 1, %for.inc.us.i.3148 ], [ 2, %for.inc.us.i.1.3 ], [ 3, %for.inc.us.i.2.3 ], [ 4, %for.inc.us.i.3.3 ], [ 5, %for.inc.us.i.4.3 ], [ 6, %for.inc.us.i.5.3 ], [ 0, %for.inc.us.i.6.3 ], [ 1, %for.inc.us.i.4152 ], [ 2, %for.inc.us.i.1.4 ], [ 3, %for.inc.us.i.2.4 ], [ 4, %for.inc.us.i.3.4 ], [ 5, %for.inc.us.i.4.4 ], [ 6, %for.inc.us.i.5.4 ], [ 0, %for.inc.us.i.6.4 ], [ 1, %for.inc.us.i.5156 ], [ 2, %for.inc.us.i.1.5 ], [ 3, %for.inc.us.i.2.5 ], [ 4, %for.inc.us.i.3.5 ], [ 5, %for.inc.us.i.4.5 ], [ 6, %for.inc.us.i.5.5 ], [ 0, %for.inc.us.i.6.5 ], [ 1, %for.inc.us.i.6160 ], [ 2, %for.inc.us.i.1.6 ], [ 3, %for.inc.us.i.2.6 ], [ 4, %for.inc.us.i.3.6 ], [ 5, %for.inc.us.i.4.6 ], [ 6, %for.inc.us.i.5.6 ], [ 0, %for.inc.us.i.6.6 ], [ 1, %for.inc.us.i.7 ], [ 2, %for.inc.us.i.1.7 ], [ 3, %for.inc.us.i.2.7 ], [ 4, %for.inc.us.i.3.7 ], [ 5, %for.inc.us.i.4.7 ], [ 6, %for.inc.us.i.5.7 ]
  %call.i = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) @_ZNSt3__14cerrE, ptr noundef nonnull @.str)
  %call10.i = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(ptr noundef nonnull align 8 dereferenceable(8) %call.i, i32 noundef %r.032.us.i.lcssa)
  %call11.i = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) %call10.i, ptr noundef nonnull @.str.1)
  %call12.i = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(ptr noundef nonnull align 8 dereferenceable(8) %call11.i, i32 noundef %indvars.iv.i47.lcssa)
  %call13.i = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) %call12.i, ptr noundef nonnull @.str.2)
  call void @exit(i32 noundef 1) #17
  unreachable

for.inc.us.i68:                                   ; preds = %for.inc.us.i.6.7
  %ResSpec.sroa.11.28.vec.extract = extractelement <8 x i32> %col.load, i64 1
  %cmp9.not.us.i64.1 = icmp eq i32 %7, %ResSpec.sroa.11.28.vec.extract
  br i1 %cmp9.not.us.i64.1, label %for.inc.us.i68.1, label %if.then.i77

for.inc.us.i68.1:                                 ; preds = %for.inc.us.i68
  %ResSpec.sroa.19.56.vec.extract = extractelement <8 x i32> %col.load, i64 2
  %cmp9.not.us.i64.2 = icmp eq i32 %14, %ResSpec.sroa.19.56.vec.extract
  br i1 %cmp9.not.us.i64.2, label %for.inc.us.i68.2, label %if.then.i77

for.inc.us.i68.2:                                 ; preds = %for.inc.us.i68.1
  %ResSpec.sroa.27.84.vec.extract = extractelement <8 x i32> %col.load, i64 3
  %cmp9.not.us.i64.3 = icmp eq i32 %21, %ResSpec.sroa.27.84.vec.extract
  br i1 %cmp9.not.us.i64.3, label %for.inc.us.i68.3, label %if.then.i77

for.inc.us.i68.3:                                 ; preds = %for.inc.us.i68.2
  %ResSpec.sroa.35.112.vec.extract = extractelement <8 x i32> %col.load, i64 4
  %cmp9.not.us.i64.4 = icmp eq i32 %28, %ResSpec.sroa.35.112.vec.extract
  br i1 %cmp9.not.us.i64.4, label %for.inc.us.i68.4, label %if.then.i77

for.inc.us.i68.4:                                 ; preds = %for.inc.us.i68.3
  %ResSpec.sroa.43.140.vec.extract = extractelement <8 x i32> %col.load, i64 5
  %cmp9.not.us.i64.5 = icmp eq i32 %35, %ResSpec.sroa.43.140.vec.extract
  br i1 %cmp9.not.us.i64.5, label %for.inc.us.i68.5, label %if.then.i77

for.inc.us.i68.5:                                 ; preds = %for.inc.us.i68.4
  %ResSpec.sroa.51.168.vec.extract = extractelement <8 x i32> %col.load, i64 6
  %cmp9.not.us.i64.6 = icmp eq i32 %42, %ResSpec.sroa.51.168.vec.extract
  br i1 %cmp9.not.us.i64.6, label %for.inc.us.i68.6, label %if.then.i77

for.inc.us.i68.6:                                 ; preds = %for.inc.us.i68.5
  %ResSpec.sroa.59.196.vec.extract = extractelement <8 x i32> %col.load, i64 7
  %cmp9.not.us.i64.7 = icmp eq i32 %49, %ResSpec.sroa.59.196.vec.extract
  br i1 %cmp9.not.us.i64.7, label %for.inc.us.i68.7, label %if.then.i77

for.inc.us.i68.7:                                 ; preds = %for.inc.us.i68.6
  %ResSpec.sroa.0.4.vec.extract = extractelement <8 x i32> %col.load249, i64 0
  %cmp9.not.us.i64.1171 = icmp eq i32 %1, %ResSpec.sroa.0.4.vec.extract
  br i1 %cmp9.not.us.i64.1171, label %for.inc.us.i68.1172, label %if.then.i77

for.inc.us.i68.1172:                              ; preds = %for.inc.us.i68.7
  %ResSpec.sroa.11.32.vec.extract = extractelement <8 x i32> %col.load249, i64 1
  %cmp9.not.us.i64.1.1 = icmp eq i32 %8, %ResSpec.sroa.11.32.vec.extract
  br i1 %cmp9.not.us.i64.1.1, label %for.inc.us.i68.1.1, label %if.then.i77

for.inc.us.i68.1.1:                               ; preds = %for.inc.us.i68.1172
  %ResSpec.sroa.19.60.vec.extract = extractelement <8 x i32> %col.load249, i64 2
  %cmp9.not.us.i64.2.1 = icmp eq i32 %15, %ResSpec.sroa.19.60.vec.extract
  br i1 %cmp9.not.us.i64.2.1, label %for.inc.us.i68.2.1, label %if.then.i77

for.inc.us.i68.2.1:                               ; preds = %for.inc.us.i68.1.1
  %ResSpec.sroa.27.88.vec.extract = extractelement <8 x i32> %col.load249, i64 3
  %cmp9.not.us.i64.3.1 = icmp eq i32 %22, %ResSpec.sroa.27.88.vec.extract
  br i1 %cmp9.not.us.i64.3.1, label %for.inc.us.i68.3.1, label %if.then.i77

for.inc.us.i68.3.1:                               ; preds = %for.inc.us.i68.2.1
  %ResSpec.sroa.35.116.vec.extract = extractelement <8 x i32> %col.load249, i64 4
  %cmp9.not.us.i64.4.1 = icmp eq i32 %29, %ResSpec.sroa.35.116.vec.extract
  br i1 %cmp9.not.us.i64.4.1, label %for.inc.us.i68.4.1, label %if.then.i77

for.inc.us.i68.4.1:                               ; preds = %for.inc.us.i68.3.1
  %ResSpec.sroa.43.144.vec.extract = extractelement <8 x i32> %col.load249, i64 5
  %cmp9.not.us.i64.5.1 = icmp eq i32 %36, %ResSpec.sroa.43.144.vec.extract
  br i1 %cmp9.not.us.i64.5.1, label %for.inc.us.i68.5.1, label %if.then.i77

for.inc.us.i68.5.1:                               ; preds = %for.inc.us.i68.4.1
  %ResSpec.sroa.51.172.vec.extract = extractelement <8 x i32> %col.load249, i64 6
  %cmp9.not.us.i64.6.1 = icmp eq i32 %43, %ResSpec.sroa.51.172.vec.extract
  br i1 %cmp9.not.us.i64.6.1, label %for.inc.us.i68.6.1, label %if.then.i77

for.inc.us.i68.6.1:                               ; preds = %for.inc.us.i68.5.1
  %ResSpec.sroa.59.200.vec.extract = extractelement <8 x i32> %col.load249, i64 7
  %cmp9.not.us.i64.7.1 = icmp eq i32 %50, %ResSpec.sroa.59.200.vec.extract
  br i1 %cmp9.not.us.i64.7.1, label %for.inc.us.i68.7.1, label %if.then.i77

for.inc.us.i68.7.1:                               ; preds = %for.inc.us.i68.6.1
  %ResSpec.sroa.0.8.vec.extract = extractelement <8 x i32> %col.load251, i64 0
  %cmp9.not.us.i64.2175 = icmp eq i32 %2, %ResSpec.sroa.0.8.vec.extract
  br i1 %cmp9.not.us.i64.2175, label %for.inc.us.i68.2176, label %if.then.i77

for.inc.us.i68.2176:                              ; preds = %for.inc.us.i68.7.1
  %ResSpec.sroa.11.36.vec.extract = extractelement <8 x i32> %col.load251, i64 1
  %cmp9.not.us.i64.1.2 = icmp eq i32 %9, %ResSpec.sroa.11.36.vec.extract
  br i1 %cmp9.not.us.i64.1.2, label %for.inc.us.i68.1.2, label %if.then.i77

for.inc.us.i68.1.2:                               ; preds = %for.inc.us.i68.2176
  %ResSpec.sroa.19.64.vec.extract = extractelement <8 x i32> %col.load251, i64 2
  %cmp9.not.us.i64.2.2 = icmp eq i32 %16, %ResSpec.sroa.19.64.vec.extract
  br i1 %cmp9.not.us.i64.2.2, label %for.inc.us.i68.2.2, label %if.then.i77

for.inc.us.i68.2.2:                               ; preds = %for.inc.us.i68.1.2
  %ResSpec.sroa.27.92.vec.extract = extractelement <8 x i32> %col.load251, i64 3
  %cmp9.not.us.i64.3.2 = icmp eq i32 %23, %ResSpec.sroa.27.92.vec.extract
  br i1 %cmp9.not.us.i64.3.2, label %for.inc.us.i68.3.2, label %if.then.i77

for.inc.us.i68.3.2:                               ; preds = %for.inc.us.i68.2.2
  %ResSpec.sroa.35.120.vec.extract = extractelement <8 x i32> %col.load251, i64 4
  %cmp9.not.us.i64.4.2 = icmp eq i32 %30, %ResSpec.sroa.35.120.vec.extract
  br i1 %cmp9.not.us.i64.4.2, label %for.inc.us.i68.4.2, label %if.then.i77

for.inc.us.i68.4.2:                               ; preds = %for.inc.us.i68.3.2
  %ResSpec.sroa.43.148.vec.extract = extractelement <8 x i32> %col.load251, i64 5
  %cmp9.not.us.i64.5.2 = icmp eq i32 %37, %ResSpec.sroa.43.148.vec.extract
  br i1 %cmp9.not.us.i64.5.2, label %for.inc.us.i68.5.2, label %if.then.i77

for.inc.us.i68.5.2:                               ; preds = %for.inc.us.i68.4.2
  %ResSpec.sroa.51.176.vec.extract = extractelement <8 x i32> %col.load251, i64 6
  %cmp9.not.us.i64.6.2 = icmp eq i32 %44, %ResSpec.sroa.51.176.vec.extract
  br i1 %cmp9.not.us.i64.6.2, label %for.inc.us.i68.6.2, label %if.then.i77

for.inc.us.i68.6.2:                               ; preds = %for.inc.us.i68.5.2
  %ResSpec.sroa.59.204.vec.extract = extractelement <8 x i32> %col.load251, i64 7
  %cmp9.not.us.i64.7.2 = icmp eq i32 %51, %ResSpec.sroa.59.204.vec.extract
  br i1 %cmp9.not.us.i64.7.2, label %for.inc.us.i68.7.2, label %if.then.i77

for.inc.us.i68.7.2:                               ; preds = %for.inc.us.i68.6.2
  %ResSpec.sroa.0.12.vec.extract = extractelement <8 x i32> %col.load253, i64 0
  %cmp9.not.us.i64.3179 = icmp eq i32 %3, %ResSpec.sroa.0.12.vec.extract
  br i1 %cmp9.not.us.i64.3179, label %for.inc.us.i68.3180, label %if.then.i77

for.inc.us.i68.3180:                              ; preds = %for.inc.us.i68.7.2
  %ResSpec.sroa.11.40.vec.extract = extractelement <8 x i32> %col.load253, i64 1
  %cmp9.not.us.i64.1.3 = icmp eq i32 %10, %ResSpec.sroa.11.40.vec.extract
  br i1 %cmp9.not.us.i64.1.3, label %for.inc.us.i68.1.3, label %if.then.i77

for.inc.us.i68.1.3:                               ; preds = %for.inc.us.i68.3180
  %ResSpec.sroa.19.68.vec.extract = extractelement <8 x i32> %col.load253, i64 2
  %cmp9.not.us.i64.2.3 = icmp eq i32 %17, %ResSpec.sroa.19.68.vec.extract
  br i1 %cmp9.not.us.i64.2.3, label %for.inc.us.i68.2.3, label %if.then.i77

for.inc.us.i68.2.3:                               ; preds = %for.inc.us.i68.1.3
  %ResSpec.sroa.27.96.vec.extract = extractelement <8 x i32> %col.load253, i64 3
  %cmp9.not.us.i64.3.3 = icmp eq i32 %24, %ResSpec.sroa.27.96.vec.extract
  br i1 %cmp9.not.us.i64.3.3, label %for.inc.us.i68.3.3, label %if.then.i77

for.inc.us.i68.3.3:                               ; preds = %for.inc.us.i68.2.3
  %ResSpec.sroa.35.124.vec.extract = extractelement <8 x i32> %col.load253, i64 4
  %cmp9.not.us.i64.4.3 = icmp eq i32 %31, %ResSpec.sroa.35.124.vec.extract
  br i1 %cmp9.not.us.i64.4.3, label %for.inc.us.i68.4.3, label %if.then.i77

for.inc.us.i68.4.3:                               ; preds = %for.inc.us.i68.3.3
  %ResSpec.sroa.43.152.vec.extract = extractelement <8 x i32> %col.load253, i64 5
  %cmp9.not.us.i64.5.3 = icmp eq i32 %38, %ResSpec.sroa.43.152.vec.extract
  br i1 %cmp9.not.us.i64.5.3, label %for.inc.us.i68.5.3, label %if.then.i77

for.inc.us.i68.5.3:                               ; preds = %for.inc.us.i68.4.3
  %ResSpec.sroa.51.180.vec.extract = extractelement <8 x i32> %col.load253, i64 6
  %cmp9.not.us.i64.6.3 = icmp eq i32 %45, %ResSpec.sroa.51.180.vec.extract
  br i1 %cmp9.not.us.i64.6.3, label %for.inc.us.i68.6.3, label %if.then.i77

for.inc.us.i68.6.3:                               ; preds = %for.inc.us.i68.5.3
  %ResSpec.sroa.59.208.vec.extract = extractelement <8 x i32> %col.load253, i64 7
  %cmp9.not.us.i64.7.3 = icmp eq i32 %52, %ResSpec.sroa.59.208.vec.extract
  br i1 %cmp9.not.us.i64.7.3, label %for.inc.us.i68.7.3, label %if.then.i77

for.inc.us.i68.7.3:                               ; preds = %for.inc.us.i68.6.3
  %ResSpec.sroa.0.16.vec.extract = extractelement <8 x i32> %col.load255, i64 0
  %cmp9.not.us.i64.4183 = icmp eq i32 %4, %ResSpec.sroa.0.16.vec.extract
  br i1 %cmp9.not.us.i64.4183, label %for.inc.us.i68.4184, label %if.then.i77

for.inc.us.i68.4184:                              ; preds = %for.inc.us.i68.7.3
  %ResSpec.sroa.11.44.vec.extract = extractelement <8 x i32> %col.load255, i64 1
  %cmp9.not.us.i64.1.4 = icmp eq i32 %11, %ResSpec.sroa.11.44.vec.extract
  br i1 %cmp9.not.us.i64.1.4, label %for.inc.us.i68.1.4, label %if.then.i77

for.inc.us.i68.1.4:                               ; preds = %for.inc.us.i68.4184
  %ResSpec.sroa.19.72.vec.extract = extractelement <8 x i32> %col.load255, i64 2
  %cmp9.not.us.i64.2.4 = icmp eq i32 %18, %ResSpec.sroa.19.72.vec.extract
  br i1 %cmp9.not.us.i64.2.4, label %for.inc.us.i68.2.4, label %if.then.i77

for.inc.us.i68.2.4:                               ; preds = %for.inc.us.i68.1.4
  %ResSpec.sroa.27.100.vec.extract = extractelement <8 x i32> %col.load255, i64 3
  %cmp9.not.us.i64.3.4 = icmp eq i32 %25, %ResSpec.sroa.27.100.vec.extract
  br i1 %cmp9.not.us.i64.3.4, label %for.inc.us.i68.3.4, label %if.then.i77

for.inc.us.i68.3.4:                               ; preds = %for.inc.us.i68.2.4
  %ResSpec.sroa.35.128.vec.extract = extractelement <8 x i32> %col.load255, i64 4
  %cmp9.not.us.i64.4.4 = icmp eq i32 %32, %ResSpec.sroa.35.128.vec.extract
  br i1 %cmp9.not.us.i64.4.4, label %for.inc.us.i68.4.4, label %if.then.i77

for.inc.us.i68.4.4:                               ; preds = %for.inc.us.i68.3.4
  %ResSpec.sroa.43.156.vec.extract = extractelement <8 x i32> %col.load255, i64 5
  %cmp9.not.us.i64.5.4 = icmp eq i32 %39, %ResSpec.sroa.43.156.vec.extract
  br i1 %cmp9.not.us.i64.5.4, label %for.inc.us.i68.5.4, label %if.then.i77

for.inc.us.i68.5.4:                               ; preds = %for.inc.us.i68.4.4
  %ResSpec.sroa.51.184.vec.extract = extractelement <8 x i32> %col.load255, i64 6
  %cmp9.not.us.i64.6.4 = icmp eq i32 %46, %ResSpec.sroa.51.184.vec.extract
  br i1 %cmp9.not.us.i64.6.4, label %for.inc.us.i68.6.4, label %if.then.i77

for.inc.us.i68.6.4:                               ; preds = %for.inc.us.i68.5.4
  %ResSpec.sroa.59.212.vec.extract = extractelement <8 x i32> %col.load255, i64 7
  %cmp9.not.us.i64.7.4 = icmp eq i32 %53, %ResSpec.sroa.59.212.vec.extract
  br i1 %cmp9.not.us.i64.7.4, label %for.inc.us.i68.7.4, label %if.then.i77

for.inc.us.i68.7.4:                               ; preds = %for.inc.us.i68.6.4
  %ResSpec.sroa.0.20.vec.extract = extractelement <8 x i32> %col.load257, i64 0
  %cmp9.not.us.i64.5187 = icmp eq i32 %5, %ResSpec.sroa.0.20.vec.extract
  br i1 %cmp9.not.us.i64.5187, label %for.inc.us.i68.5188, label %if.then.i77

for.inc.us.i68.5188:                              ; preds = %for.inc.us.i68.7.4
  %ResSpec.sroa.11.48.vec.extract = extractelement <8 x i32> %col.load257, i64 1
  %cmp9.not.us.i64.1.5 = icmp eq i32 %12, %ResSpec.sroa.11.48.vec.extract
  br i1 %cmp9.not.us.i64.1.5, label %for.inc.us.i68.1.5, label %if.then.i77

for.inc.us.i68.1.5:                               ; preds = %for.inc.us.i68.5188
  %ResSpec.sroa.19.76.vec.extract = extractelement <8 x i32> %col.load257, i64 2
  %cmp9.not.us.i64.2.5 = icmp eq i32 %19, %ResSpec.sroa.19.76.vec.extract
  br i1 %cmp9.not.us.i64.2.5, label %for.inc.us.i68.2.5, label %if.then.i77

for.inc.us.i68.2.5:                               ; preds = %for.inc.us.i68.1.5
  %ResSpec.sroa.27.104.vec.extract = extractelement <8 x i32> %col.load257, i64 3
  %cmp9.not.us.i64.3.5 = icmp eq i32 %26, %ResSpec.sroa.27.104.vec.extract
  br i1 %cmp9.not.us.i64.3.5, label %for.inc.us.i68.3.5, label %if.then.i77

for.inc.us.i68.3.5:                               ; preds = %for.inc.us.i68.2.5
  %ResSpec.sroa.35.132.vec.extract = extractelement <8 x i32> %col.load257, i64 4
  %cmp9.not.us.i64.4.5 = icmp eq i32 %33, %ResSpec.sroa.35.132.vec.extract
  br i1 %cmp9.not.us.i64.4.5, label %for.inc.us.i68.4.5, label %if.then.i77

for.inc.us.i68.4.5:                               ; preds = %for.inc.us.i68.3.5
  %ResSpec.sroa.43.160.vec.extract = extractelement <8 x i32> %col.load257, i64 5
  %cmp9.not.us.i64.5.5 = icmp eq i32 %40, %ResSpec.sroa.43.160.vec.extract
  br i1 %cmp9.not.us.i64.5.5, label %for.inc.us.i68.5.5, label %if.then.i77

for.inc.us.i68.5.5:                               ; preds = %for.inc.us.i68.4.5
  %ResSpec.sroa.51.188.vec.extract = extractelement <8 x i32> %col.load257, i64 6
  %cmp9.not.us.i64.6.5 = icmp eq i32 %47, %ResSpec.sroa.51.188.vec.extract
  br i1 %cmp9.not.us.i64.6.5, label %for.inc.us.i68.6.5, label %if.then.i77

for.inc.us.i68.6.5:                               ; preds = %for.inc.us.i68.5.5
  %ResSpec.sroa.59.216.vec.extract = extractelement <8 x i32> %col.load257, i64 7
  %cmp9.not.us.i64.7.5 = icmp eq i32 %54, %ResSpec.sroa.59.216.vec.extract
  br i1 %cmp9.not.us.i64.7.5, label %for.inc.us.i68.7.5, label %if.then.i77

for.inc.us.i68.7.5:                               ; preds = %for.inc.us.i68.6.5
  %ResSpec.sroa.0.24.vec.extract = extractelement <8 x i32> %col.load259, i64 0
  %cmp9.not.us.i64.6191 = icmp eq i32 %6, %ResSpec.sroa.0.24.vec.extract
  br i1 %cmp9.not.us.i64.6191, label %for.inc.us.i68.6192, label %if.then.i77

for.inc.us.i68.6192:                              ; preds = %for.inc.us.i68.7.5
  %ResSpec.sroa.11.52.vec.extract = extractelement <8 x i32> %col.load259, i64 1
  %cmp9.not.us.i64.1.6 = icmp eq i32 %13, %ResSpec.sroa.11.52.vec.extract
  br i1 %cmp9.not.us.i64.1.6, label %for.inc.us.i68.1.6, label %if.then.i77

for.inc.us.i68.1.6:                               ; preds = %for.inc.us.i68.6192
  %ResSpec.sroa.19.80.vec.extract = extractelement <8 x i32> %col.load259, i64 2
  %cmp9.not.us.i64.2.6 = icmp eq i32 %20, %ResSpec.sroa.19.80.vec.extract
  br i1 %cmp9.not.us.i64.2.6, label %for.inc.us.i68.2.6, label %if.then.i77

for.inc.us.i68.2.6:                               ; preds = %for.inc.us.i68.1.6
  %ResSpec.sroa.27.108.vec.extract = extractelement <8 x i32> %col.load259, i64 3
  %cmp9.not.us.i64.3.6 = icmp eq i32 %27, %ResSpec.sroa.27.108.vec.extract
  br i1 %cmp9.not.us.i64.3.6, label %for.inc.us.i68.3.6, label %if.then.i77

for.inc.us.i68.3.6:                               ; preds = %for.inc.us.i68.2.6
  %ResSpec.sroa.35.136.vec.extract = extractelement <8 x i32> %col.load259, i64 4
  %cmp9.not.us.i64.4.6 = icmp eq i32 %34, %ResSpec.sroa.35.136.vec.extract
  br i1 %cmp9.not.us.i64.4.6, label %for.inc.us.i68.4.6, label %if.then.i77

for.inc.us.i68.4.6:                               ; preds = %for.inc.us.i68.3.6
  %ResSpec.sroa.43.164.vec.extract = extractelement <8 x i32> %col.load259, i64 5
  %cmp9.not.us.i64.5.6 = icmp eq i32 %41, %ResSpec.sroa.43.164.vec.extract
  br i1 %cmp9.not.us.i64.5.6, label %for.inc.us.i68.5.6, label %if.then.i77

for.inc.us.i68.5.6:                               ; preds = %for.inc.us.i68.4.6
  %ResSpec.sroa.51.192.vec.extract = extractelement <8 x i32> %col.load259, i64 6
  %cmp9.not.us.i64.6.6 = icmp eq i32 %48, %ResSpec.sroa.51.192.vec.extract
  br i1 %cmp9.not.us.i64.6.6, label %for.inc.us.i68.6.6, label %if.then.i77

for.inc.us.i68.6.6:                               ; preds = %for.inc.us.i68.5.6
  %ResSpec.sroa.59.220.vec.extract = extractelement <8 x i32> %col.load259, i64 7
  %cmp9.not.us.i64.7.6 = icmp eq i32 %55, %ResSpec.sroa.59.220.vec.extract
  br i1 %cmp9.not.us.i64.7.6, label %for.inc.us.i68.7.6, label %if.then.i77

for.inc.us.i68.7.6:                               ; preds = %for.inc.us.i68.6.6
  call void @llvm.lifetime.end.p0(i64 224, ptr nonnull %X) #16
  ret void

if.then.i77:                                      ; preds = %for.inc.us.i68.6.6, %for.inc.us.i68.5.6, %for.inc.us.i68.4.6, %for.inc.us.i68.3.6, %for.inc.us.i68.2.6, %for.inc.us.i68.1.6, %for.inc.us.i68.6192, %for.inc.us.i68.7.5, %for.inc.us.i68.6.5, %for.inc.us.i68.5.5, %for.inc.us.i68.4.5, %for.inc.us.i68.3.5, %for.inc.us.i68.2.5, %for.inc.us.i68.1.5, %for.inc.us.i68.5188, %for.inc.us.i68.7.4, %for.inc.us.i68.6.4, %for.inc.us.i68.5.4, %for.inc.us.i68.4.4, %for.inc.us.i68.3.4, %for.inc.us.i68.2.4, %for.inc.us.i68.1.4, %for.inc.us.i68.4184, %for.inc.us.i68.7.3, %for.inc.us.i68.6.3, %for.inc.us.i68.5.3, %for.inc.us.i68.4.3, %for.inc.us.i68.3.3, %for.inc.us.i68.2.3, %for.inc.us.i68.1.3, %for.inc.us.i68.3180, %for.inc.us.i68.7.2, %for.inc.us.i68.6.2, %for.inc.us.i68.5.2, %for.inc.us.i68.4.2, %for.inc.us.i68.3.2, %for.inc.us.i68.2.2, %for.inc.us.i68.1.2, %for.inc.us.i68.2176, %for.inc.us.i68.7.1, %for.inc.us.i68.6.1, %for.inc.us.i68.5.1, %for.inc.us.i68.4.1, %for.inc.us.i68.3.1, %for.inc.us.i68.2.1, %for.inc.us.i68.1.1, %for.inc.us.i68.1172, %for.inc.us.i68.7, %for.inc.us.i68.6, %for.inc.us.i68.5, %for.inc.us.i68.4, %for.inc.us.i68.3, %for.inc.us.i68.2, %for.inc.us.i68.1, %for.inc.us.i68, %for.inc.us.i.6.7
  %r.032.us.i56.lcssa = phi i32 [ 0, %for.inc.us.i.6.7 ], [ 0, %for.inc.us.i68 ], [ 0, %for.inc.us.i68.1 ], [ 0, %for.inc.us.i68.2 ], [ 0, %for.inc.us.i68.3 ], [ 0, %for.inc.us.i68.4 ], [ 0, %for.inc.us.i68.5 ], [ 0, %for.inc.us.i68.6 ], [ 1, %for.inc.us.i68.7 ], [ 1, %for.inc.us.i68.1172 ], [ 1, %for.inc.us.i68.1.1 ], [ 1, %for.inc.us.i68.2.1 ], [ 1, %for.inc.us.i68.3.1 ], [ 1, %for.inc.us.i68.4.1 ], [ 1, %for.inc.us.i68.5.1 ], [ 1, %for.inc.us.i68.6.1 ], [ 2, %for.inc.us.i68.7.1 ], [ 2, %for.inc.us.i68.2176 ], [ 2, %for.inc.us.i68.1.2 ], [ 2, %for.inc.us.i68.2.2 ], [ 2, %for.inc.us.i68.3.2 ], [ 2, %for.inc.us.i68.4.2 ], [ 2, %for.inc.us.i68.5.2 ], [ 2, %for.inc.us.i68.6.2 ], [ 3, %for.inc.us.i68.7.2 ], [ 3, %for.inc.us.i68.3180 ], [ 3, %for.inc.us.i68.1.3 ], [ 3, %for.inc.us.i68.2.3 ], [ 3, %for.inc.us.i68.3.3 ], [ 3, %for.inc.us.i68.4.3 ], [ 3, %for.inc.us.i68.5.3 ], [ 3, %for.inc.us.i68.6.3 ], [ 4, %for.inc.us.i68.7.3 ], [ 4, %for.inc.us.i68.4184 ], [ 4, %for.inc.us.i68.1.4 ], [ 4, %for.inc.us.i68.2.4 ], [ 4, %for.inc.us.i68.3.4 ], [ 4, %for.inc.us.i68.4.4 ], [ 4, %for.inc.us.i68.5.4 ], [ 4, %for.inc.us.i68.6.4 ], [ 5, %for.inc.us.i68.7.4 ], [ 5, %for.inc.us.i68.5188 ], [ 5, %for.inc.us.i68.1.5 ], [ 5, %for.inc.us.i68.2.5 ], [ 5, %for.inc.us.i68.3.5 ], [ 5, %for.inc.us.i68.4.5 ], [ 5, %for.inc.us.i68.5.5 ], [ 5, %for.inc.us.i68.6.5 ], [ 6, %for.inc.us.i68.7.5 ], [ 6, %for.inc.us.i68.6192 ], [ 6, %for.inc.us.i68.1.6 ], [ 6, %for.inc.us.i68.2.6 ], [ 6, %for.inc.us.i68.3.6 ], [ 6, %for.inc.us.i68.4.6 ], [ 6, %for.inc.us.i68.5.6 ], [ 6, %for.inc.us.i68.6.6 ]
  %indvars.iv.i58.lcssa = phi i32 [ 0, %for.inc.us.i.6.7 ], [ 1, %for.inc.us.i68 ], [ 2, %for.inc.us.i68.1 ], [ 3, %for.inc.us.i68.2 ], [ 4, %for.inc.us.i68.3 ], [ 5, %for.inc.us.i68.4 ], [ 6, %for.inc.us.i68.5 ], [ 7, %for.inc.us.i68.6 ], [ 0, %for.inc.us.i68.7 ], [ 1, %for.inc.us.i68.1172 ], [ 2, %for.inc.us.i68.1.1 ], [ 3, %for.inc.us.i68.2.1 ], [ 4, %for.inc.us.i68.3.1 ], [ 5, %for.inc.us.i68.4.1 ], [ 6, %for.inc.us.i68.5.1 ], [ 7, %for.inc.us.i68.6.1 ], [ 0, %for.inc.us.i68.7.1 ], [ 1, %for.inc.us.i68.2176 ], [ 2, %for.inc.us.i68.1.2 ], [ 3, %for.inc.us.i68.2.2 ], [ 4, %for.inc.us.i68.3.2 ], [ 5, %for.inc.us.i68.4.2 ], [ 6, %for.inc.us.i68.5.2 ], [ 7, %for.inc.us.i68.6.2 ], [ 0, %for.inc.us.i68.7.2 ], [ 1, %for.inc.us.i68.3180 ], [ 2, %for.inc.us.i68.1.3 ], [ 3, %for.inc.us.i68.2.3 ], [ 4, %for.inc.us.i68.3.3 ], [ 5, %for.inc.us.i68.4.3 ], [ 6, %for.inc.us.i68.5.3 ], [ 7, %for.inc.us.i68.6.3 ], [ 0, %for.inc.us.i68.7.3 ], [ 1, %for.inc.us.i68.4184 ], [ 2, %for.inc.us.i68.1.4 ], [ 3, %for.inc.us.i68.2.4 ], [ 4, %for.inc.us.i68.3.4 ], [ 5, %for.inc.us.i68.4.4 ], [ 6, %for.inc.us.i68.5.4 ], [ 7, %for.inc.us.i68.6.4 ], [ 0, %for.inc.us.i68.7.4 ], [ 1, %for.inc.us.i68.5188 ], [ 2, %for.inc.us.i68.1.5 ], [ 3, %for.inc.us.i68.2.5 ], [ 4, %for.inc.us.i68.3.5 ], [ 5, %for.inc.us.i68.4.5 ], [ 6, %for.inc.us.i68.5.5 ], [ 7, %for.inc.us.i68.6.5 ], [ 0, %for.inc.us.i68.7.5 ], [ 1, %for.inc.us.i68.6192 ], [ 2, %for.inc.us.i68.1.6 ], [ 3, %for.inc.us.i68.2.6 ], [ 4, %for.inc.us.i68.3.6 ], [ 5, %for.inc.us.i68.4.6 ], [ 6, %for.inc.us.i68.5.6 ], [ 7, %for.inc.us.i68.6.6 ]
  %call.i72 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) @_ZNSt3__14cerrE, ptr noundef nonnull @.str)
  %call10.i73 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(ptr noundef nonnull align 8 dereferenceable(8) %call.i72, i32 noundef %r.032.us.i56.lcssa)
  %call11.i74 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) %call10.i73, ptr noundef nonnull @.str.1)
  %call12.i75 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(ptr noundef nonnull align 8 dereferenceable(8) %call11.i74, i32 noundef %indvars.iv.i58.lcssa)
  %call13.i76 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) %call12.i75, ptr noundef nonnull @.str.2)
  call void @exit(i32 noundef 1) #17
  unreachable
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_Z12testMultiplyIdLj10ELj21ELj23EEvv() local_unnamed_addr #4 comdat {
entry:
  %X = alloca [210 x double], align 16
  %Y = alloca [483 x double], align 16
  %ResBase = alloca [230 x double], align 16
  %ResSpec = alloca [230 x double], align 16
  %ResBuiltin = alloca [230 x double], align 16
  call void @llvm.lifetime.start.p0(i64 1680, ptr nonnull %X) #16
  call void @llvm.lifetime.start.p0(i64 3864, ptr nonnull %Y) #16
  call void @llvm.lifetime.start.p0(i64 1840, ptr nonnull %ResBase) #16
  call void @llvm.lifetime.start.p0(i64 1840, ptr nonnull %ResSpec) #16
  call void @llvm.lifetime.start.p0(i64 1840, ptr nonnull %ResBuiltin) #16
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %generator.sroa.0.04.i = phi i64 [ 1, %entry ], [ %rem.i.i16.i.i.i.i, %for.body.i ]
  %mul.i.i.i.i.i.i = mul nuw nsw i64 %generator.sroa.0.04.i, 48271
  %rem.i.i.i.i.i.i = urem i64 %mul.i.i.i.i.i.i, 2147483647
  %sub4.i.i.i.i = add nsw i64 %rem.i.i.i.i.i.i, -1
  %conv5.i.i.i.i = uitofp i64 %sub4.i.i.i.i to double
  %mul.i.i15.i.i.i.i = mul nuw nsw i64 %rem.i.i.i.i.i.i, 48271
  %rem.i.i16.i.i.i.i = urem i64 %mul.i.i15.i.i.i.i, 2147483647
  %sub8.i.i.i.i = add nsw i64 %rem.i.i16.i.i.i.i, -1
  %conv9.i.i.i.i = uitofp i64 %sub8.i.i.i.i to double
  %0 = tail call double @llvm.fmuladd.f64(double %conv9.i.i.i.i, double 0x41DFFFFFFF800000, double %conv5.i.i.i.i)
  %div.i.i.i.i = fdiv double %0, 0x43CFFFFFFF000000
  %1 = tail call double @llvm.fmuladd.f64(double %div.i.i.i.i, double 2.000000e+01, double -1.000000e+01)
  %arrayidx.i = getelementptr inbounds double, ptr %X, i64 %indvars.iv.i
  store double %1, ptr %arrayidx.i, align 8, !tbaa !5
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 210
  br i1 %exitcond.not.i, label %for.body.i34, label %for.body.i, !llvm.loop !9

for.body.i34:                                     ; preds = %for.body.i, %for.body.i34
  %indvars.iv.i20 = phi i64 [ %indvars.iv.next.i32, %for.body.i34 ], [ 0, %for.body.i ]
  %generator.sroa.0.04.i21 = phi i64 [ %rem.i.i16.i.i.i.i27, %for.body.i34 ], [ 1, %for.body.i ]
  %mul.i.i.i.i.i.i22 = mul nuw nsw i64 %generator.sroa.0.04.i21, 48271
  %rem.i.i.i.i.i.i23 = urem i64 %mul.i.i.i.i.i.i22, 2147483647
  %sub4.i.i.i.i24 = add nsw i64 %rem.i.i.i.i.i.i23, -1
  %conv5.i.i.i.i25 = uitofp i64 %sub4.i.i.i.i24 to double
  %mul.i.i15.i.i.i.i26 = mul nuw nsw i64 %rem.i.i.i.i.i.i23, 48271
  %rem.i.i16.i.i.i.i27 = urem i64 %mul.i.i15.i.i.i.i26, 2147483647
  %sub8.i.i.i.i28 = add nsw i64 %rem.i.i16.i.i.i.i27, -1
  %conv9.i.i.i.i29 = uitofp i64 %sub8.i.i.i.i28 to double
  %2 = tail call double @llvm.fmuladd.f64(double %conv9.i.i.i.i29, double 0x41DFFFFFFF800000, double %conv5.i.i.i.i25)
  %div.i.i.i.i30 = fdiv double %2, 0x43CFFFFFFF000000
  %3 = tail call double @llvm.fmuladd.f64(double %div.i.i.i.i30, double 2.000000e+01, double -1.000000e+01)
  %arrayidx.i31 = getelementptr inbounds double, ptr %Y, i64 %indvars.iv.i20
  store double %3, ptr %arrayidx.i31, align 8, !tbaa !5
  %indvars.iv.next.i32 = add nuw nsw i64 %indvars.iv.i20, 1
  %exitcond.not.i33 = icmp eq i64 %indvars.iv.next.i32, 483
  br i1 %exitcond.not.i33, label %vector.body, label %for.body.i34, !llvm.loop !9

vector.body:                                      ; preds = %for.body.i34
  store <2 x double> zeroinitializer, ptr %ResBase, align 16, !tbaa !5
  %4 = getelementptr inbounds double, ptr %ResBase, i64 10
  store <2 x double> zeroinitializer, ptr %4, align 16, !tbaa !5
  %5 = getelementptr inbounds double, ptr %ResBase, i64 20
  store <2 x double> zeroinitializer, ptr %5, align 16, !tbaa !5
  %6 = getelementptr inbounds double, ptr %ResBase, i64 30
  store <2 x double> zeroinitializer, ptr %6, align 16, !tbaa !5
  %7 = getelementptr inbounds double, ptr %ResBase, i64 40
  store <2 x double> zeroinitializer, ptr %7, align 16, !tbaa !5
  %8 = getelementptr inbounds double, ptr %ResBase, i64 50
  store <2 x double> zeroinitializer, ptr %8, align 16, !tbaa !5
  %9 = getelementptr inbounds double, ptr %ResBase, i64 60
  store <2 x double> zeroinitializer, ptr %9, align 16, !tbaa !5
  %10 = getelementptr inbounds double, ptr %ResBase, i64 70
  store <2 x double> zeroinitializer, ptr %10, align 16, !tbaa !5
  %11 = getelementptr inbounds double, ptr %ResBase, i64 80
  store <2 x double> zeroinitializer, ptr %11, align 16, !tbaa !5
  %12 = getelementptr inbounds double, ptr %ResBase, i64 90
  store <2 x double> zeroinitializer, ptr %12, align 16, !tbaa !5
  %13 = getelementptr inbounds double, ptr %ResBase, i64 100
  store <2 x double> zeroinitializer, ptr %13, align 16, !tbaa !5
  %14 = getelementptr inbounds double, ptr %ResBase, i64 110
  store <2 x double> zeroinitializer, ptr %14, align 16, !tbaa !5
  %15 = getelementptr inbounds double, ptr %ResBase, i64 120
  store <2 x double> zeroinitializer, ptr %15, align 16, !tbaa !5
  %16 = getelementptr inbounds double, ptr %ResBase, i64 130
  store <2 x double> zeroinitializer, ptr %16, align 16, !tbaa !5
  %17 = getelementptr inbounds double, ptr %ResBase, i64 140
  store <2 x double> zeroinitializer, ptr %17, align 16, !tbaa !5
  %18 = getelementptr inbounds double, ptr %ResBase, i64 150
  store <2 x double> zeroinitializer, ptr %18, align 16, !tbaa !5
  %19 = getelementptr inbounds double, ptr %ResBase, i64 160
  store <2 x double> zeroinitializer, ptr %19, align 16, !tbaa !5
  %20 = getelementptr inbounds double, ptr %ResBase, i64 170
  store <2 x double> zeroinitializer, ptr %20, align 16, !tbaa !5
  %21 = getelementptr inbounds double, ptr %ResBase, i64 180
  store <2 x double> zeroinitializer, ptr %21, align 16, !tbaa !5
  %22 = getelementptr inbounds double, ptr %ResBase, i64 190
  store <2 x double> zeroinitializer, ptr %22, align 16, !tbaa !5
  %23 = getelementptr inbounds double, ptr %ResBase, i64 200
  store <2 x double> zeroinitializer, ptr %23, align 16, !tbaa !5
  %24 = getelementptr inbounds double, ptr %ResBase, i64 210
  store <2 x double> zeroinitializer, ptr %24, align 16, !tbaa !5
  %25 = getelementptr inbounds double, ptr %ResBase, i64 220
  store <2 x double> zeroinitializer, ptr %25, align 16, !tbaa !5
  %26 = getelementptr inbounds double, ptr %ResBase, i64 2
  store <2 x double> zeroinitializer, ptr %26, align 16, !tbaa !5
  %27 = getelementptr inbounds double, ptr %ResBase, i64 12
  store <2 x double> zeroinitializer, ptr %27, align 16, !tbaa !5
  %28 = getelementptr inbounds double, ptr %ResBase, i64 22
  store <2 x double> zeroinitializer, ptr %28, align 16, !tbaa !5
  %29 = getelementptr inbounds double, ptr %ResBase, i64 32
  store <2 x double> zeroinitializer, ptr %29, align 16, !tbaa !5
  %30 = getelementptr inbounds double, ptr %ResBase, i64 42
  store <2 x double> zeroinitializer, ptr %30, align 16, !tbaa !5
  %31 = getelementptr inbounds double, ptr %ResBase, i64 52
  store <2 x double> zeroinitializer, ptr %31, align 16, !tbaa !5
  %32 = getelementptr inbounds double, ptr %ResBase, i64 62
  store <2 x double> zeroinitializer, ptr %32, align 16, !tbaa !5
  %33 = getelementptr inbounds double, ptr %ResBase, i64 72
  store <2 x double> zeroinitializer, ptr %33, align 16, !tbaa !5
  %34 = getelementptr inbounds double, ptr %ResBase, i64 82
  store <2 x double> zeroinitializer, ptr %34, align 16, !tbaa !5
  %35 = getelementptr inbounds double, ptr %ResBase, i64 92
  store <2 x double> zeroinitializer, ptr %35, align 16, !tbaa !5
  %36 = getelementptr inbounds double, ptr %ResBase, i64 102
  store <2 x double> zeroinitializer, ptr %36, align 16, !tbaa !5
  %37 = getelementptr inbounds double, ptr %ResBase, i64 112
  store <2 x double> zeroinitializer, ptr %37, align 16, !tbaa !5
  %38 = getelementptr inbounds double, ptr %ResBase, i64 122
  store <2 x double> zeroinitializer, ptr %38, align 16, !tbaa !5
  %39 = getelementptr inbounds double, ptr %ResBase, i64 132
  store <2 x double> zeroinitializer, ptr %39, align 16, !tbaa !5
  %40 = getelementptr inbounds double, ptr %ResBase, i64 142
  store <2 x double> zeroinitializer, ptr %40, align 16, !tbaa !5
  %41 = getelementptr inbounds double, ptr %ResBase, i64 152
  store <2 x double> zeroinitializer, ptr %41, align 16, !tbaa !5
  %42 = getelementptr inbounds double, ptr %ResBase, i64 162
  store <2 x double> zeroinitializer, ptr %42, align 16, !tbaa !5
  %43 = getelementptr inbounds double, ptr %ResBase, i64 172
  store <2 x double> zeroinitializer, ptr %43, align 16, !tbaa !5
  %44 = getelementptr inbounds double, ptr %ResBase, i64 182
  store <2 x double> zeroinitializer, ptr %44, align 16, !tbaa !5
  %45 = getelementptr inbounds double, ptr %ResBase, i64 192
  store <2 x double> zeroinitializer, ptr %45, align 16, !tbaa !5
  %46 = getelementptr inbounds double, ptr %ResBase, i64 202
  store <2 x double> zeroinitializer, ptr %46, align 16, !tbaa !5
  %47 = getelementptr inbounds double, ptr %ResBase, i64 212
  store <2 x double> zeroinitializer, ptr %47, align 16, !tbaa !5
  %48 = getelementptr inbounds double, ptr %ResBase, i64 222
  store <2 x double> zeroinitializer, ptr %48, align 16, !tbaa !5
  %49 = getelementptr inbounds double, ptr %ResBase, i64 4
  store <2 x double> zeroinitializer, ptr %49, align 16, !tbaa !5
  %50 = getelementptr inbounds double, ptr %ResBase, i64 14
  store <2 x double> zeroinitializer, ptr %50, align 16, !tbaa !5
  %51 = getelementptr inbounds double, ptr %ResBase, i64 24
  store <2 x double> zeroinitializer, ptr %51, align 16, !tbaa !5
  %52 = getelementptr inbounds double, ptr %ResBase, i64 34
  store <2 x double> zeroinitializer, ptr %52, align 16, !tbaa !5
  %53 = getelementptr inbounds double, ptr %ResBase, i64 44
  store <2 x double> zeroinitializer, ptr %53, align 16, !tbaa !5
  %54 = getelementptr inbounds double, ptr %ResBase, i64 54
  store <2 x double> zeroinitializer, ptr %54, align 16, !tbaa !5
  %55 = getelementptr inbounds double, ptr %ResBase, i64 64
  store <2 x double> zeroinitializer, ptr %55, align 16, !tbaa !5
  %56 = getelementptr inbounds double, ptr %ResBase, i64 74
  store <2 x double> zeroinitializer, ptr %56, align 16, !tbaa !5
  %57 = getelementptr inbounds double, ptr %ResBase, i64 84
  store <2 x double> zeroinitializer, ptr %57, align 16, !tbaa !5
  %58 = getelementptr inbounds double, ptr %ResBase, i64 94
  store <2 x double> zeroinitializer, ptr %58, align 16, !tbaa !5
  %59 = getelementptr inbounds double, ptr %ResBase, i64 104
  store <2 x double> zeroinitializer, ptr %59, align 16, !tbaa !5
  %60 = getelementptr inbounds double, ptr %ResBase, i64 114
  store <2 x double> zeroinitializer, ptr %60, align 16, !tbaa !5
  %61 = getelementptr inbounds double, ptr %ResBase, i64 124
  store <2 x double> zeroinitializer, ptr %61, align 16, !tbaa !5
  %62 = getelementptr inbounds double, ptr %ResBase, i64 134
  store <2 x double> zeroinitializer, ptr %62, align 16, !tbaa !5
  %63 = getelementptr inbounds double, ptr %ResBase, i64 144
  store <2 x double> zeroinitializer, ptr %63, align 16, !tbaa !5
  %64 = getelementptr inbounds double, ptr %ResBase, i64 154
  store <2 x double> zeroinitializer, ptr %64, align 16, !tbaa !5
  %65 = getelementptr inbounds double, ptr %ResBase, i64 164
  store <2 x double> zeroinitializer, ptr %65, align 16, !tbaa !5
  %66 = getelementptr inbounds double, ptr %ResBase, i64 174
  store <2 x double> zeroinitializer, ptr %66, align 16, !tbaa !5
  %67 = getelementptr inbounds double, ptr %ResBase, i64 184
  store <2 x double> zeroinitializer, ptr %67, align 16, !tbaa !5
  %68 = getelementptr inbounds double, ptr %ResBase, i64 194
  store <2 x double> zeroinitializer, ptr %68, align 16, !tbaa !5
  %69 = getelementptr inbounds double, ptr %ResBase, i64 204
  store <2 x double> zeroinitializer, ptr %69, align 16, !tbaa !5
  %70 = getelementptr inbounds double, ptr %ResBase, i64 214
  store <2 x double> zeroinitializer, ptr %70, align 16, !tbaa !5
  %71 = getelementptr inbounds double, ptr %ResBase, i64 224
  store <2 x double> zeroinitializer, ptr %71, align 16, !tbaa !5
  %72 = getelementptr inbounds double, ptr %ResBase, i64 6
  store <2 x double> zeroinitializer, ptr %72, align 16, !tbaa !5
  %73 = getelementptr inbounds double, ptr %ResBase, i64 16
  store <2 x double> zeroinitializer, ptr %73, align 16, !tbaa !5
  %74 = getelementptr inbounds double, ptr %ResBase, i64 26
  store <2 x double> zeroinitializer, ptr %74, align 16, !tbaa !5
  %75 = getelementptr inbounds double, ptr %ResBase, i64 36
  store <2 x double> zeroinitializer, ptr %75, align 16, !tbaa !5
  %76 = getelementptr inbounds double, ptr %ResBase, i64 46
  store <2 x double> zeroinitializer, ptr %76, align 16, !tbaa !5
  %77 = getelementptr inbounds double, ptr %ResBase, i64 56
  store <2 x double> zeroinitializer, ptr %77, align 16, !tbaa !5
  %78 = getelementptr inbounds double, ptr %ResBase, i64 66
  store <2 x double> zeroinitializer, ptr %78, align 16, !tbaa !5
  %79 = getelementptr inbounds double, ptr %ResBase, i64 76
  store <2 x double> zeroinitializer, ptr %79, align 16, !tbaa !5
  %80 = getelementptr inbounds double, ptr %ResBase, i64 86
  store <2 x double> zeroinitializer, ptr %80, align 16, !tbaa !5
  %81 = getelementptr inbounds double, ptr %ResBase, i64 96
  store <2 x double> zeroinitializer, ptr %81, align 16, !tbaa !5
  %82 = getelementptr inbounds double, ptr %ResBase, i64 106
  store <2 x double> zeroinitializer, ptr %82, align 16, !tbaa !5
  %83 = getelementptr inbounds double, ptr %ResBase, i64 116
  store <2 x double> zeroinitializer, ptr %83, align 16, !tbaa !5
  %84 = getelementptr inbounds double, ptr %ResBase, i64 126
  store <2 x double> zeroinitializer, ptr %84, align 16, !tbaa !5
  %85 = getelementptr inbounds double, ptr %ResBase, i64 136
  store <2 x double> zeroinitializer, ptr %85, align 16, !tbaa !5
  %86 = getelementptr inbounds double, ptr %ResBase, i64 146
  store <2 x double> zeroinitializer, ptr %86, align 16, !tbaa !5
  %87 = getelementptr inbounds double, ptr %ResBase, i64 156
  store <2 x double> zeroinitializer, ptr %87, align 16, !tbaa !5
  %88 = getelementptr inbounds double, ptr %ResBase, i64 166
  store <2 x double> zeroinitializer, ptr %88, align 16, !tbaa !5
  %89 = getelementptr inbounds double, ptr %ResBase, i64 176
  store <2 x double> zeroinitializer, ptr %89, align 16, !tbaa !5
  %90 = getelementptr inbounds double, ptr %ResBase, i64 186
  store <2 x double> zeroinitializer, ptr %90, align 16, !tbaa !5
  %91 = getelementptr inbounds double, ptr %ResBase, i64 196
  store <2 x double> zeroinitializer, ptr %91, align 16, !tbaa !5
  %92 = getelementptr inbounds double, ptr %ResBase, i64 206
  store <2 x double> zeroinitializer, ptr %92, align 16, !tbaa !5
  %93 = getelementptr inbounds double, ptr %ResBase, i64 216
  store <2 x double> zeroinitializer, ptr %93, align 16, !tbaa !5
  %94 = getelementptr inbounds double, ptr %ResBase, i64 226
  store <2 x double> zeroinitializer, ptr %94, align 16, !tbaa !5
  %95 = getelementptr inbounds double, ptr %ResBase, i64 8
  store <2 x double> zeroinitializer, ptr %95, align 16, !tbaa !5
  %96 = getelementptr inbounds double, ptr %ResBase, i64 18
  store <2 x double> zeroinitializer, ptr %96, align 16, !tbaa !5
  %97 = getelementptr inbounds double, ptr %ResBase, i64 28
  store <2 x double> zeroinitializer, ptr %97, align 16, !tbaa !5
  %98 = getelementptr inbounds double, ptr %ResBase, i64 38
  store <2 x double> zeroinitializer, ptr %98, align 16, !tbaa !5
  %99 = getelementptr inbounds double, ptr %ResBase, i64 48
  store <2 x double> zeroinitializer, ptr %99, align 16, !tbaa !5
  %100 = getelementptr inbounds double, ptr %ResBase, i64 58
  store <2 x double> zeroinitializer, ptr %100, align 16, !tbaa !5
  %101 = getelementptr inbounds double, ptr %ResBase, i64 68
  store <2 x double> zeroinitializer, ptr %101, align 16, !tbaa !5
  %102 = getelementptr inbounds double, ptr %ResBase, i64 78
  store <2 x double> zeroinitializer, ptr %102, align 16, !tbaa !5
  %103 = getelementptr inbounds double, ptr %ResBase, i64 88
  store <2 x double> zeroinitializer, ptr %103, align 16, !tbaa !5
  %104 = getelementptr inbounds double, ptr %ResBase, i64 98
  store <2 x double> zeroinitializer, ptr %104, align 16, !tbaa !5
  %105 = getelementptr inbounds double, ptr %ResBase, i64 108
  store <2 x double> zeroinitializer, ptr %105, align 16, !tbaa !5
  %106 = getelementptr inbounds double, ptr %ResBase, i64 118
  store <2 x double> zeroinitializer, ptr %106, align 16, !tbaa !5
  %107 = getelementptr inbounds double, ptr %ResBase, i64 128
  store <2 x double> zeroinitializer, ptr %107, align 16, !tbaa !5
  %108 = getelementptr inbounds double, ptr %ResBase, i64 138
  store <2 x double> zeroinitializer, ptr %108, align 16, !tbaa !5
  %109 = getelementptr inbounds double, ptr %ResBase, i64 148
  store <2 x double> zeroinitializer, ptr %109, align 16, !tbaa !5
  %110 = getelementptr inbounds double, ptr %ResBase, i64 158
  store <2 x double> zeroinitializer, ptr %110, align 16, !tbaa !5
  %111 = getelementptr inbounds double, ptr %ResBase, i64 168
  store <2 x double> zeroinitializer, ptr %111, align 16, !tbaa !5
  %112 = getelementptr inbounds double, ptr %ResBase, i64 178
  store <2 x double> zeroinitializer, ptr %112, align 16, !tbaa !5
  %113 = getelementptr inbounds double, ptr %ResBase, i64 188
  store <2 x double> zeroinitializer, ptr %113, align 16, !tbaa !5
  %114 = getelementptr inbounds double, ptr %ResBase, i64 198
  store <2 x double> zeroinitializer, ptr %114, align 16, !tbaa !5
  %115 = getelementptr inbounds double, ptr %ResBase, i64 208
  store <2 x double> zeroinitializer, ptr %115, align 16, !tbaa !5
  %116 = getelementptr inbounds double, ptr %ResBase, i64 218
  store <2 x double> zeroinitializer, ptr %116, align 16, !tbaa !5
  %117 = getelementptr inbounds double, ptr %ResBase, i64 228
  store <2 x double> zeroinitializer, ptr %117, align 16, !tbaa !5
  store <2 x double> zeroinitializer, ptr %ResSpec, align 16, !tbaa !5
  %118 = getelementptr inbounds double, ptr %ResSpec, i64 10
  store <2 x double> zeroinitializer, ptr %118, align 16, !tbaa !5
  %119 = getelementptr inbounds double, ptr %ResSpec, i64 20
  store <2 x double> zeroinitializer, ptr %119, align 16, !tbaa !5
  %120 = getelementptr inbounds double, ptr %ResSpec, i64 30
  store <2 x double> zeroinitializer, ptr %120, align 16, !tbaa !5
  %121 = getelementptr inbounds double, ptr %ResSpec, i64 40
  store <2 x double> zeroinitializer, ptr %121, align 16, !tbaa !5
  %122 = getelementptr inbounds double, ptr %ResSpec, i64 50
  store <2 x double> zeroinitializer, ptr %122, align 16, !tbaa !5
  %123 = getelementptr inbounds double, ptr %ResSpec, i64 60
  store <2 x double> zeroinitializer, ptr %123, align 16, !tbaa !5
  %124 = getelementptr inbounds double, ptr %ResSpec, i64 70
  store <2 x double> zeroinitializer, ptr %124, align 16, !tbaa !5
  %125 = getelementptr inbounds double, ptr %ResSpec, i64 80
  store <2 x double> zeroinitializer, ptr %125, align 16, !tbaa !5
  %126 = getelementptr inbounds double, ptr %ResSpec, i64 90
  store <2 x double> zeroinitializer, ptr %126, align 16, !tbaa !5
  %127 = getelementptr inbounds double, ptr %ResSpec, i64 100
  store <2 x double> zeroinitializer, ptr %127, align 16, !tbaa !5
  %128 = getelementptr inbounds double, ptr %ResSpec, i64 110
  store <2 x double> zeroinitializer, ptr %128, align 16, !tbaa !5
  %129 = getelementptr inbounds double, ptr %ResSpec, i64 120
  store <2 x double> zeroinitializer, ptr %129, align 16, !tbaa !5
  %130 = getelementptr inbounds double, ptr %ResSpec, i64 130
  store <2 x double> zeroinitializer, ptr %130, align 16, !tbaa !5
  %131 = getelementptr inbounds double, ptr %ResSpec, i64 140
  store <2 x double> zeroinitializer, ptr %131, align 16, !tbaa !5
  %132 = getelementptr inbounds double, ptr %ResSpec, i64 150
  store <2 x double> zeroinitializer, ptr %132, align 16, !tbaa !5
  %133 = getelementptr inbounds double, ptr %ResSpec, i64 160
  store <2 x double> zeroinitializer, ptr %133, align 16, !tbaa !5
  %134 = getelementptr inbounds double, ptr %ResSpec, i64 170
  store <2 x double> zeroinitializer, ptr %134, align 16, !tbaa !5
  %135 = getelementptr inbounds double, ptr %ResSpec, i64 180
  store <2 x double> zeroinitializer, ptr %135, align 16, !tbaa !5
  %136 = getelementptr inbounds double, ptr %ResSpec, i64 190
  store <2 x double> zeroinitializer, ptr %136, align 16, !tbaa !5
  %137 = getelementptr inbounds double, ptr %ResSpec, i64 200
  store <2 x double> zeroinitializer, ptr %137, align 16, !tbaa !5
  %138 = getelementptr inbounds double, ptr %ResSpec, i64 210
  store <2 x double> zeroinitializer, ptr %138, align 16, !tbaa !5
  %139 = getelementptr inbounds double, ptr %ResSpec, i64 220
  store <2 x double> zeroinitializer, ptr %139, align 16, !tbaa !5
  %140 = getelementptr inbounds double, ptr %ResSpec, i64 2
  store <2 x double> zeroinitializer, ptr %140, align 16, !tbaa !5
  %141 = getelementptr inbounds double, ptr %ResSpec, i64 12
  store <2 x double> zeroinitializer, ptr %141, align 16, !tbaa !5
  %142 = getelementptr inbounds double, ptr %ResSpec, i64 22
  store <2 x double> zeroinitializer, ptr %142, align 16, !tbaa !5
  %143 = getelementptr inbounds double, ptr %ResSpec, i64 32
  store <2 x double> zeroinitializer, ptr %143, align 16, !tbaa !5
  %144 = getelementptr inbounds double, ptr %ResSpec, i64 42
  store <2 x double> zeroinitializer, ptr %144, align 16, !tbaa !5
  %145 = getelementptr inbounds double, ptr %ResSpec, i64 52
  store <2 x double> zeroinitializer, ptr %145, align 16, !tbaa !5
  %146 = getelementptr inbounds double, ptr %ResSpec, i64 62
  store <2 x double> zeroinitializer, ptr %146, align 16, !tbaa !5
  %147 = getelementptr inbounds double, ptr %ResSpec, i64 72
  store <2 x double> zeroinitializer, ptr %147, align 16, !tbaa !5
  %148 = getelementptr inbounds double, ptr %ResSpec, i64 82
  store <2 x double> zeroinitializer, ptr %148, align 16, !tbaa !5
  %149 = getelementptr inbounds double, ptr %ResSpec, i64 92
  store <2 x double> zeroinitializer, ptr %149, align 16, !tbaa !5
  %150 = getelementptr inbounds double, ptr %ResSpec, i64 102
  store <2 x double> zeroinitializer, ptr %150, align 16, !tbaa !5
  %151 = getelementptr inbounds double, ptr %ResSpec, i64 112
  store <2 x double> zeroinitializer, ptr %151, align 16, !tbaa !5
  %152 = getelementptr inbounds double, ptr %ResSpec, i64 122
  store <2 x double> zeroinitializer, ptr %152, align 16, !tbaa !5
  %153 = getelementptr inbounds double, ptr %ResSpec, i64 132
  store <2 x double> zeroinitializer, ptr %153, align 16, !tbaa !5
  %154 = getelementptr inbounds double, ptr %ResSpec, i64 142
  store <2 x double> zeroinitializer, ptr %154, align 16, !tbaa !5
  %155 = getelementptr inbounds double, ptr %ResSpec, i64 152
  store <2 x double> zeroinitializer, ptr %155, align 16, !tbaa !5
  %156 = getelementptr inbounds double, ptr %ResSpec, i64 162
  store <2 x double> zeroinitializer, ptr %156, align 16, !tbaa !5
  %157 = getelementptr inbounds double, ptr %ResSpec, i64 172
  store <2 x double> zeroinitializer, ptr %157, align 16, !tbaa !5
  %158 = getelementptr inbounds double, ptr %ResSpec, i64 182
  store <2 x double> zeroinitializer, ptr %158, align 16, !tbaa !5
  %159 = getelementptr inbounds double, ptr %ResSpec, i64 192
  store <2 x double> zeroinitializer, ptr %159, align 16, !tbaa !5
  %160 = getelementptr inbounds double, ptr %ResSpec, i64 202
  store <2 x double> zeroinitializer, ptr %160, align 16, !tbaa !5
  %161 = getelementptr inbounds double, ptr %ResSpec, i64 212
  store <2 x double> zeroinitializer, ptr %161, align 16, !tbaa !5
  %162 = getelementptr inbounds double, ptr %ResSpec, i64 222
  store <2 x double> zeroinitializer, ptr %162, align 16, !tbaa !5
  %163 = getelementptr inbounds double, ptr %ResSpec, i64 4
  store <2 x double> zeroinitializer, ptr %163, align 16, !tbaa !5
  %164 = getelementptr inbounds double, ptr %ResSpec, i64 14
  store <2 x double> zeroinitializer, ptr %164, align 16, !tbaa !5
  %165 = getelementptr inbounds double, ptr %ResSpec, i64 24
  store <2 x double> zeroinitializer, ptr %165, align 16, !tbaa !5
  %166 = getelementptr inbounds double, ptr %ResSpec, i64 34
  store <2 x double> zeroinitializer, ptr %166, align 16, !tbaa !5
  %167 = getelementptr inbounds double, ptr %ResSpec, i64 44
  store <2 x double> zeroinitializer, ptr %167, align 16, !tbaa !5
  %168 = getelementptr inbounds double, ptr %ResSpec, i64 54
  store <2 x double> zeroinitializer, ptr %168, align 16, !tbaa !5
  %169 = getelementptr inbounds double, ptr %ResSpec, i64 64
  store <2 x double> zeroinitializer, ptr %169, align 16, !tbaa !5
  %170 = getelementptr inbounds double, ptr %ResSpec, i64 74
  store <2 x double> zeroinitializer, ptr %170, align 16, !tbaa !5
  %171 = getelementptr inbounds double, ptr %ResSpec, i64 84
  store <2 x double> zeroinitializer, ptr %171, align 16, !tbaa !5
  %172 = getelementptr inbounds double, ptr %ResSpec, i64 94
  store <2 x double> zeroinitializer, ptr %172, align 16, !tbaa !5
  %173 = getelementptr inbounds double, ptr %ResSpec, i64 104
  store <2 x double> zeroinitializer, ptr %173, align 16, !tbaa !5
  %174 = getelementptr inbounds double, ptr %ResSpec, i64 114
  store <2 x double> zeroinitializer, ptr %174, align 16, !tbaa !5
  %175 = getelementptr inbounds double, ptr %ResSpec, i64 124
  store <2 x double> zeroinitializer, ptr %175, align 16, !tbaa !5
  %176 = getelementptr inbounds double, ptr %ResSpec, i64 134
  store <2 x double> zeroinitializer, ptr %176, align 16, !tbaa !5
  %177 = getelementptr inbounds double, ptr %ResSpec, i64 144
  store <2 x double> zeroinitializer, ptr %177, align 16, !tbaa !5
  %178 = getelementptr inbounds double, ptr %ResSpec, i64 154
  store <2 x double> zeroinitializer, ptr %178, align 16, !tbaa !5
  %179 = getelementptr inbounds double, ptr %ResSpec, i64 164
  store <2 x double> zeroinitializer, ptr %179, align 16, !tbaa !5
  %180 = getelementptr inbounds double, ptr %ResSpec, i64 174
  store <2 x double> zeroinitializer, ptr %180, align 16, !tbaa !5
  %181 = getelementptr inbounds double, ptr %ResSpec, i64 184
  store <2 x double> zeroinitializer, ptr %181, align 16, !tbaa !5
  %182 = getelementptr inbounds double, ptr %ResSpec, i64 194
  store <2 x double> zeroinitializer, ptr %182, align 16, !tbaa !5
  %183 = getelementptr inbounds double, ptr %ResSpec, i64 204
  store <2 x double> zeroinitializer, ptr %183, align 16, !tbaa !5
  %184 = getelementptr inbounds double, ptr %ResSpec, i64 214
  store <2 x double> zeroinitializer, ptr %184, align 16, !tbaa !5
  %185 = getelementptr inbounds double, ptr %ResSpec, i64 224
  store <2 x double> zeroinitializer, ptr %185, align 16, !tbaa !5
  %186 = getelementptr inbounds double, ptr %ResSpec, i64 6
  store <2 x double> zeroinitializer, ptr %186, align 16, !tbaa !5
  %187 = getelementptr inbounds double, ptr %ResSpec, i64 16
  store <2 x double> zeroinitializer, ptr %187, align 16, !tbaa !5
  %188 = getelementptr inbounds double, ptr %ResSpec, i64 26
  store <2 x double> zeroinitializer, ptr %188, align 16, !tbaa !5
  %189 = getelementptr inbounds double, ptr %ResSpec, i64 36
  store <2 x double> zeroinitializer, ptr %189, align 16, !tbaa !5
  %190 = getelementptr inbounds double, ptr %ResSpec, i64 46
  store <2 x double> zeroinitializer, ptr %190, align 16, !tbaa !5
  %191 = getelementptr inbounds double, ptr %ResSpec, i64 56
  store <2 x double> zeroinitializer, ptr %191, align 16, !tbaa !5
  %192 = getelementptr inbounds double, ptr %ResSpec, i64 66
  store <2 x double> zeroinitializer, ptr %192, align 16, !tbaa !5
  %193 = getelementptr inbounds double, ptr %ResSpec, i64 76
  store <2 x double> zeroinitializer, ptr %193, align 16, !tbaa !5
  %194 = getelementptr inbounds double, ptr %ResSpec, i64 86
  store <2 x double> zeroinitializer, ptr %194, align 16, !tbaa !5
  %195 = getelementptr inbounds double, ptr %ResSpec, i64 96
  store <2 x double> zeroinitializer, ptr %195, align 16, !tbaa !5
  %196 = getelementptr inbounds double, ptr %ResSpec, i64 106
  store <2 x double> zeroinitializer, ptr %196, align 16, !tbaa !5
  %197 = getelementptr inbounds double, ptr %ResSpec, i64 116
  store <2 x double> zeroinitializer, ptr %197, align 16, !tbaa !5
  %198 = getelementptr inbounds double, ptr %ResSpec, i64 126
  store <2 x double> zeroinitializer, ptr %198, align 16, !tbaa !5
  %199 = getelementptr inbounds double, ptr %ResSpec, i64 136
  store <2 x double> zeroinitializer, ptr %199, align 16, !tbaa !5
  %200 = getelementptr inbounds double, ptr %ResSpec, i64 146
  store <2 x double> zeroinitializer, ptr %200, align 16, !tbaa !5
  %201 = getelementptr inbounds double, ptr %ResSpec, i64 156
  store <2 x double> zeroinitializer, ptr %201, align 16, !tbaa !5
  %202 = getelementptr inbounds double, ptr %ResSpec, i64 166
  store <2 x double> zeroinitializer, ptr %202, align 16, !tbaa !5
  %203 = getelementptr inbounds double, ptr %ResSpec, i64 176
  store <2 x double> zeroinitializer, ptr %203, align 16, !tbaa !5
  %204 = getelementptr inbounds double, ptr %ResSpec, i64 186
  store <2 x double> zeroinitializer, ptr %204, align 16, !tbaa !5
  %205 = getelementptr inbounds double, ptr %ResSpec, i64 196
  store <2 x double> zeroinitializer, ptr %205, align 16, !tbaa !5
  %206 = getelementptr inbounds double, ptr %ResSpec, i64 206
  store <2 x double> zeroinitializer, ptr %206, align 16, !tbaa !5
  %207 = getelementptr inbounds double, ptr %ResSpec, i64 216
  store <2 x double> zeroinitializer, ptr %207, align 16, !tbaa !5
  %208 = getelementptr inbounds double, ptr %ResSpec, i64 226
  store <2 x double> zeroinitializer, ptr %208, align 16, !tbaa !5
  %209 = getelementptr inbounds double, ptr %ResSpec, i64 8
  store <2 x double> zeroinitializer, ptr %209, align 16, !tbaa !5
  %210 = getelementptr inbounds double, ptr %ResSpec, i64 18
  store <2 x double> zeroinitializer, ptr %210, align 16, !tbaa !5
  %211 = getelementptr inbounds double, ptr %ResSpec, i64 28
  store <2 x double> zeroinitializer, ptr %211, align 16, !tbaa !5
  %212 = getelementptr inbounds double, ptr %ResSpec, i64 38
  store <2 x double> zeroinitializer, ptr %212, align 16, !tbaa !5
  %213 = getelementptr inbounds double, ptr %ResSpec, i64 48
  store <2 x double> zeroinitializer, ptr %213, align 16, !tbaa !5
  %214 = getelementptr inbounds double, ptr %ResSpec, i64 58
  store <2 x double> zeroinitializer, ptr %214, align 16, !tbaa !5
  %215 = getelementptr inbounds double, ptr %ResSpec, i64 68
  store <2 x double> zeroinitializer, ptr %215, align 16, !tbaa !5
  %216 = getelementptr inbounds double, ptr %ResSpec, i64 78
  store <2 x double> zeroinitializer, ptr %216, align 16, !tbaa !5
  %217 = getelementptr inbounds double, ptr %ResSpec, i64 88
  store <2 x double> zeroinitializer, ptr %217, align 16, !tbaa !5
  %218 = getelementptr inbounds double, ptr %ResSpec, i64 98
  store <2 x double> zeroinitializer, ptr %218, align 16, !tbaa !5
  %219 = getelementptr inbounds double, ptr %ResSpec, i64 108
  store <2 x double> zeroinitializer, ptr %219, align 16, !tbaa !5
  %220 = getelementptr inbounds double, ptr %ResSpec, i64 118
  store <2 x double> zeroinitializer, ptr %220, align 16, !tbaa !5
  %221 = getelementptr inbounds double, ptr %ResSpec, i64 128
  store <2 x double> zeroinitializer, ptr %221, align 16, !tbaa !5
  %222 = getelementptr inbounds double, ptr %ResSpec, i64 138
  store <2 x double> zeroinitializer, ptr %222, align 16, !tbaa !5
  %223 = getelementptr inbounds double, ptr %ResSpec, i64 148
  store <2 x double> zeroinitializer, ptr %223, align 16, !tbaa !5
  %224 = getelementptr inbounds double, ptr %ResSpec, i64 158
  store <2 x double> zeroinitializer, ptr %224, align 16, !tbaa !5
  %225 = getelementptr inbounds double, ptr %ResSpec, i64 168
  store <2 x double> zeroinitializer, ptr %225, align 16, !tbaa !5
  %226 = getelementptr inbounds double, ptr %ResSpec, i64 178
  store <2 x double> zeroinitializer, ptr %226, align 16, !tbaa !5
  %227 = getelementptr inbounds double, ptr %ResSpec, i64 188
  store <2 x double> zeroinitializer, ptr %227, align 16, !tbaa !5
  %228 = getelementptr inbounds double, ptr %ResSpec, i64 198
  store <2 x double> zeroinitializer, ptr %228, align 16, !tbaa !5
  %229 = getelementptr inbounds double, ptr %ResSpec, i64 208
  store <2 x double> zeroinitializer, ptr %229, align 16, !tbaa !5
  %230 = getelementptr inbounds double, ptr %ResSpec, i64 218
  store <2 x double> zeroinitializer, ptr %230, align 16, !tbaa !5
  %231 = getelementptr inbounds double, ptr %ResSpec, i64 228
  store <2 x double> zeroinitializer, ptr %231, align 16, !tbaa !5
  store <2 x double> zeroinitializer, ptr %ResBuiltin, align 16, !tbaa !5
  %232 = getelementptr inbounds double, ptr %ResBuiltin, i64 10
  store <2 x double> zeroinitializer, ptr %232, align 16, !tbaa !5
  %233 = getelementptr inbounds double, ptr %ResBuiltin, i64 20
  store <2 x double> zeroinitializer, ptr %233, align 16, !tbaa !5
  %234 = getelementptr inbounds double, ptr %ResBuiltin, i64 30
  store <2 x double> zeroinitializer, ptr %234, align 16, !tbaa !5
  %235 = getelementptr inbounds double, ptr %ResBuiltin, i64 40
  store <2 x double> zeroinitializer, ptr %235, align 16, !tbaa !5
  %236 = getelementptr inbounds double, ptr %ResBuiltin, i64 50
  store <2 x double> zeroinitializer, ptr %236, align 16, !tbaa !5
  %237 = getelementptr inbounds double, ptr %ResBuiltin, i64 60
  store <2 x double> zeroinitializer, ptr %237, align 16, !tbaa !5
  %238 = getelementptr inbounds double, ptr %ResBuiltin, i64 70
  store <2 x double> zeroinitializer, ptr %238, align 16, !tbaa !5
  %239 = getelementptr inbounds double, ptr %ResBuiltin, i64 80
  store <2 x double> zeroinitializer, ptr %239, align 16, !tbaa !5
  %240 = getelementptr inbounds double, ptr %ResBuiltin, i64 90
  store <2 x double> zeroinitializer, ptr %240, align 16, !tbaa !5
  %241 = getelementptr inbounds double, ptr %ResBuiltin, i64 100
  store <2 x double> zeroinitializer, ptr %241, align 16, !tbaa !5
  %242 = getelementptr inbounds double, ptr %ResBuiltin, i64 110
  store <2 x double> zeroinitializer, ptr %242, align 16, !tbaa !5
  %243 = getelementptr inbounds double, ptr %ResBuiltin, i64 120
  store <2 x double> zeroinitializer, ptr %243, align 16, !tbaa !5
  %244 = getelementptr inbounds double, ptr %ResBuiltin, i64 130
  store <2 x double> zeroinitializer, ptr %244, align 16, !tbaa !5
  %245 = getelementptr inbounds double, ptr %ResBuiltin, i64 140
  store <2 x double> zeroinitializer, ptr %245, align 16, !tbaa !5
  %246 = getelementptr inbounds double, ptr %ResBuiltin, i64 150
  store <2 x double> zeroinitializer, ptr %246, align 16, !tbaa !5
  %247 = getelementptr inbounds double, ptr %ResBuiltin, i64 160
  store <2 x double> zeroinitializer, ptr %247, align 16, !tbaa !5
  %248 = getelementptr inbounds double, ptr %ResBuiltin, i64 170
  store <2 x double> zeroinitializer, ptr %248, align 16, !tbaa !5
  %249 = getelementptr inbounds double, ptr %ResBuiltin, i64 180
  store <2 x double> zeroinitializer, ptr %249, align 16, !tbaa !5
  %250 = getelementptr inbounds double, ptr %ResBuiltin, i64 190
  store <2 x double> zeroinitializer, ptr %250, align 16, !tbaa !5
  %251 = getelementptr inbounds double, ptr %ResBuiltin, i64 200
  store <2 x double> zeroinitializer, ptr %251, align 16, !tbaa !5
  %252 = getelementptr inbounds double, ptr %ResBuiltin, i64 210
  store <2 x double> zeroinitializer, ptr %252, align 16, !tbaa !5
  %253 = getelementptr inbounds double, ptr %ResBuiltin, i64 220
  store <2 x double> zeroinitializer, ptr %253, align 16, !tbaa !5
  %254 = getelementptr inbounds double, ptr %ResBuiltin, i64 2
  store <2 x double> zeroinitializer, ptr %254, align 16, !tbaa !5
  %255 = getelementptr inbounds double, ptr %ResBuiltin, i64 12
  store <2 x double> zeroinitializer, ptr %255, align 16, !tbaa !5
  %256 = getelementptr inbounds double, ptr %ResBuiltin, i64 22
  store <2 x double> zeroinitializer, ptr %256, align 16, !tbaa !5
  %257 = getelementptr inbounds double, ptr %ResBuiltin, i64 32
  store <2 x double> zeroinitializer, ptr %257, align 16, !tbaa !5
  %258 = getelementptr inbounds double, ptr %ResBuiltin, i64 42
  store <2 x double> zeroinitializer, ptr %258, align 16, !tbaa !5
  %259 = getelementptr inbounds double, ptr %ResBuiltin, i64 52
  store <2 x double> zeroinitializer, ptr %259, align 16, !tbaa !5
  %260 = getelementptr inbounds double, ptr %ResBuiltin, i64 62
  store <2 x double> zeroinitializer, ptr %260, align 16, !tbaa !5
  %261 = getelementptr inbounds double, ptr %ResBuiltin, i64 72
  store <2 x double> zeroinitializer, ptr %261, align 16, !tbaa !5
  %262 = getelementptr inbounds double, ptr %ResBuiltin, i64 82
  store <2 x double> zeroinitializer, ptr %262, align 16, !tbaa !5
  %263 = getelementptr inbounds double, ptr %ResBuiltin, i64 92
  store <2 x double> zeroinitializer, ptr %263, align 16, !tbaa !5
  %264 = getelementptr inbounds double, ptr %ResBuiltin, i64 102
  store <2 x double> zeroinitializer, ptr %264, align 16, !tbaa !5
  %265 = getelementptr inbounds double, ptr %ResBuiltin, i64 112
  store <2 x double> zeroinitializer, ptr %265, align 16, !tbaa !5
  %266 = getelementptr inbounds double, ptr %ResBuiltin, i64 122
  store <2 x double> zeroinitializer, ptr %266, align 16, !tbaa !5
  %267 = getelementptr inbounds double, ptr %ResBuiltin, i64 132
  store <2 x double> zeroinitializer, ptr %267, align 16, !tbaa !5
  %268 = getelementptr inbounds double, ptr %ResBuiltin, i64 142
  store <2 x double> zeroinitializer, ptr %268, align 16, !tbaa !5
  %269 = getelementptr inbounds double, ptr %ResBuiltin, i64 152
  store <2 x double> zeroinitializer, ptr %269, align 16, !tbaa !5
  %270 = getelementptr inbounds double, ptr %ResBuiltin, i64 162
  store <2 x double> zeroinitializer, ptr %270, align 16, !tbaa !5
  %271 = getelementptr inbounds double, ptr %ResBuiltin, i64 172
  store <2 x double> zeroinitializer, ptr %271, align 16, !tbaa !5
  %272 = getelementptr inbounds double, ptr %ResBuiltin, i64 182
  store <2 x double> zeroinitializer, ptr %272, align 16, !tbaa !5
  %273 = getelementptr inbounds double, ptr %ResBuiltin, i64 192
  store <2 x double> zeroinitializer, ptr %273, align 16, !tbaa !5
  %274 = getelementptr inbounds double, ptr %ResBuiltin, i64 202
  store <2 x double> zeroinitializer, ptr %274, align 16, !tbaa !5
  %275 = getelementptr inbounds double, ptr %ResBuiltin, i64 212
  store <2 x double> zeroinitializer, ptr %275, align 16, !tbaa !5
  %276 = getelementptr inbounds double, ptr %ResBuiltin, i64 222
  store <2 x double> zeroinitializer, ptr %276, align 16, !tbaa !5
  %277 = getelementptr inbounds double, ptr %ResBuiltin, i64 4
  store <2 x double> zeroinitializer, ptr %277, align 16, !tbaa !5
  %278 = getelementptr inbounds double, ptr %ResBuiltin, i64 14
  store <2 x double> zeroinitializer, ptr %278, align 16, !tbaa !5
  %279 = getelementptr inbounds double, ptr %ResBuiltin, i64 24
  store <2 x double> zeroinitializer, ptr %279, align 16, !tbaa !5
  %280 = getelementptr inbounds double, ptr %ResBuiltin, i64 34
  store <2 x double> zeroinitializer, ptr %280, align 16, !tbaa !5
  %281 = getelementptr inbounds double, ptr %ResBuiltin, i64 44
  store <2 x double> zeroinitializer, ptr %281, align 16, !tbaa !5
  %282 = getelementptr inbounds double, ptr %ResBuiltin, i64 54
  store <2 x double> zeroinitializer, ptr %282, align 16, !tbaa !5
  %283 = getelementptr inbounds double, ptr %ResBuiltin, i64 64
  store <2 x double> zeroinitializer, ptr %283, align 16, !tbaa !5
  %284 = getelementptr inbounds double, ptr %ResBuiltin, i64 74
  store <2 x double> zeroinitializer, ptr %284, align 16, !tbaa !5
  %285 = getelementptr inbounds double, ptr %ResBuiltin, i64 84
  store <2 x double> zeroinitializer, ptr %285, align 16, !tbaa !5
  %286 = getelementptr inbounds double, ptr %ResBuiltin, i64 94
  store <2 x double> zeroinitializer, ptr %286, align 16, !tbaa !5
  %287 = getelementptr inbounds double, ptr %ResBuiltin, i64 104
  store <2 x double> zeroinitializer, ptr %287, align 16, !tbaa !5
  %288 = getelementptr inbounds double, ptr %ResBuiltin, i64 114
  store <2 x double> zeroinitializer, ptr %288, align 16, !tbaa !5
  %289 = getelementptr inbounds double, ptr %ResBuiltin, i64 124
  store <2 x double> zeroinitializer, ptr %289, align 16, !tbaa !5
  %290 = getelementptr inbounds double, ptr %ResBuiltin, i64 134
  store <2 x double> zeroinitializer, ptr %290, align 16, !tbaa !5
  %291 = getelementptr inbounds double, ptr %ResBuiltin, i64 144
  store <2 x double> zeroinitializer, ptr %291, align 16, !tbaa !5
  %292 = getelementptr inbounds double, ptr %ResBuiltin, i64 154
  store <2 x double> zeroinitializer, ptr %292, align 16, !tbaa !5
  %293 = getelementptr inbounds double, ptr %ResBuiltin, i64 164
  store <2 x double> zeroinitializer, ptr %293, align 16, !tbaa !5
  %294 = getelementptr inbounds double, ptr %ResBuiltin, i64 174
  store <2 x double> zeroinitializer, ptr %294, align 16, !tbaa !5
  %295 = getelementptr inbounds double, ptr %ResBuiltin, i64 184
  store <2 x double> zeroinitializer, ptr %295, align 16, !tbaa !5
  %296 = getelementptr inbounds double, ptr %ResBuiltin, i64 194
  store <2 x double> zeroinitializer, ptr %296, align 16, !tbaa !5
  %297 = getelementptr inbounds double, ptr %ResBuiltin, i64 204
  store <2 x double> zeroinitializer, ptr %297, align 16, !tbaa !5
  %298 = getelementptr inbounds double, ptr %ResBuiltin, i64 214
  store <2 x double> zeroinitializer, ptr %298, align 16, !tbaa !5
  %299 = getelementptr inbounds double, ptr %ResBuiltin, i64 224
  store <2 x double> zeroinitializer, ptr %299, align 16, !tbaa !5
  %300 = getelementptr inbounds double, ptr %ResBuiltin, i64 6
  store <2 x double> zeroinitializer, ptr %300, align 16, !tbaa !5
  %301 = getelementptr inbounds double, ptr %ResBuiltin, i64 16
  store <2 x double> zeroinitializer, ptr %301, align 16, !tbaa !5
  %302 = getelementptr inbounds double, ptr %ResBuiltin, i64 26
  store <2 x double> zeroinitializer, ptr %302, align 16, !tbaa !5
  %303 = getelementptr inbounds double, ptr %ResBuiltin, i64 36
  store <2 x double> zeroinitializer, ptr %303, align 16, !tbaa !5
  %304 = getelementptr inbounds double, ptr %ResBuiltin, i64 46
  store <2 x double> zeroinitializer, ptr %304, align 16, !tbaa !5
  %305 = getelementptr inbounds double, ptr %ResBuiltin, i64 56
  store <2 x double> zeroinitializer, ptr %305, align 16, !tbaa !5
  %306 = getelementptr inbounds double, ptr %ResBuiltin, i64 66
  store <2 x double> zeroinitializer, ptr %306, align 16, !tbaa !5
  %307 = getelementptr inbounds double, ptr %ResBuiltin, i64 76
  store <2 x double> zeroinitializer, ptr %307, align 16, !tbaa !5
  %308 = getelementptr inbounds double, ptr %ResBuiltin, i64 86
  store <2 x double> zeroinitializer, ptr %308, align 16, !tbaa !5
  %309 = getelementptr inbounds double, ptr %ResBuiltin, i64 96
  store <2 x double> zeroinitializer, ptr %309, align 16, !tbaa !5
  %310 = getelementptr inbounds double, ptr %ResBuiltin, i64 106
  store <2 x double> zeroinitializer, ptr %310, align 16, !tbaa !5
  %311 = getelementptr inbounds double, ptr %ResBuiltin, i64 116
  store <2 x double> zeroinitializer, ptr %311, align 16, !tbaa !5
  %312 = getelementptr inbounds double, ptr %ResBuiltin, i64 126
  store <2 x double> zeroinitializer, ptr %312, align 16, !tbaa !5
  %313 = getelementptr inbounds double, ptr %ResBuiltin, i64 136
  store <2 x double> zeroinitializer, ptr %313, align 16, !tbaa !5
  %314 = getelementptr inbounds double, ptr %ResBuiltin, i64 146
  store <2 x double> zeroinitializer, ptr %314, align 16, !tbaa !5
  %315 = getelementptr inbounds double, ptr %ResBuiltin, i64 156
  store <2 x double> zeroinitializer, ptr %315, align 16, !tbaa !5
  %316 = getelementptr inbounds double, ptr %ResBuiltin, i64 166
  store <2 x double> zeroinitializer, ptr %316, align 16, !tbaa !5
  %317 = getelementptr inbounds double, ptr %ResBuiltin, i64 176
  store <2 x double> zeroinitializer, ptr %317, align 16, !tbaa !5
  %318 = getelementptr inbounds double, ptr %ResBuiltin, i64 186
  store <2 x double> zeroinitializer, ptr %318, align 16, !tbaa !5
  %319 = getelementptr inbounds double, ptr %ResBuiltin, i64 196
  store <2 x double> zeroinitializer, ptr %319, align 16, !tbaa !5
  %320 = getelementptr inbounds double, ptr %ResBuiltin, i64 206
  store <2 x double> zeroinitializer, ptr %320, align 16, !tbaa !5
  %321 = getelementptr inbounds double, ptr %ResBuiltin, i64 216
  store <2 x double> zeroinitializer, ptr %321, align 16, !tbaa !5
  %322 = getelementptr inbounds double, ptr %ResBuiltin, i64 226
  store <2 x double> zeroinitializer, ptr %322, align 16, !tbaa !5
  %323 = getelementptr inbounds double, ptr %ResBuiltin, i64 8
  store <2 x double> zeroinitializer, ptr %323, align 16, !tbaa !5
  %324 = getelementptr inbounds double, ptr %ResBuiltin, i64 18
  store <2 x double> zeroinitializer, ptr %324, align 16, !tbaa !5
  %325 = getelementptr inbounds double, ptr %ResBuiltin, i64 28
  store <2 x double> zeroinitializer, ptr %325, align 16, !tbaa !5
  %326 = getelementptr inbounds double, ptr %ResBuiltin, i64 38
  store <2 x double> zeroinitializer, ptr %326, align 16, !tbaa !5
  %327 = getelementptr inbounds double, ptr %ResBuiltin, i64 48
  store <2 x double> zeroinitializer, ptr %327, align 16, !tbaa !5
  %328 = getelementptr inbounds double, ptr %ResBuiltin, i64 58
  store <2 x double> zeroinitializer, ptr %328, align 16, !tbaa !5
  %329 = getelementptr inbounds double, ptr %ResBuiltin, i64 68
  store <2 x double> zeroinitializer, ptr %329, align 16, !tbaa !5
  %330 = getelementptr inbounds double, ptr %ResBuiltin, i64 78
  store <2 x double> zeroinitializer, ptr %330, align 16, !tbaa !5
  %331 = getelementptr inbounds double, ptr %ResBuiltin, i64 88
  store <2 x double> zeroinitializer, ptr %331, align 16, !tbaa !5
  %332 = getelementptr inbounds double, ptr %ResBuiltin, i64 98
  store <2 x double> zeroinitializer, ptr %332, align 16, !tbaa !5
  %333 = getelementptr inbounds double, ptr %ResBuiltin, i64 108
  store <2 x double> zeroinitializer, ptr %333, align 16, !tbaa !5
  %334 = getelementptr inbounds double, ptr %ResBuiltin, i64 118
  store <2 x double> zeroinitializer, ptr %334, align 16, !tbaa !5
  %335 = getelementptr inbounds double, ptr %ResBuiltin, i64 128
  store <2 x double> zeroinitializer, ptr %335, align 16, !tbaa !5
  %336 = getelementptr inbounds double, ptr %ResBuiltin, i64 138
  store <2 x double> zeroinitializer, ptr %336, align 16, !tbaa !5
  %337 = getelementptr inbounds double, ptr %ResBuiltin, i64 148
  store <2 x double> zeroinitializer, ptr %337, align 16, !tbaa !5
  %338 = getelementptr inbounds double, ptr %ResBuiltin, i64 158
  store <2 x double> zeroinitializer, ptr %338, align 16, !tbaa !5
  %339 = getelementptr inbounds double, ptr %ResBuiltin, i64 168
  store <2 x double> zeroinitializer, ptr %339, align 16, !tbaa !5
  %340 = getelementptr inbounds double, ptr %ResBuiltin, i64 178
  store <2 x double> zeroinitializer, ptr %340, align 16, !tbaa !5
  %341 = getelementptr inbounds double, ptr %ResBuiltin, i64 188
  store <2 x double> zeroinitializer, ptr %341, align 16, !tbaa !5
  %342 = getelementptr inbounds double, ptr %ResBuiltin, i64 198
  store <2 x double> zeroinitializer, ptr %342, align 16, !tbaa !5
  %343 = getelementptr inbounds double, ptr %ResBuiltin, i64 208
  store <2 x double> zeroinitializer, ptr %343, align 16, !tbaa !5
  %344 = getelementptr inbounds double, ptr %ResBuiltin, i64 218
  store <2 x double> zeroinitializer, ptr %344, align 16, !tbaa !5
  %345 = getelementptr inbounds double, ptr %ResBuiltin, i64 228
  store <2 x double> zeroinitializer, ptr %345, align 16, !tbaa !5
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %vector.body, %for.cond.cleanup3.i
  %indvars.iv44.i = phi i64 [ %indvars.iv.next45.i, %for.cond.cleanup3.i ], [ 0, %vector.body ]
  %arrayidx.i67 = getelementptr inbounds double, ptr %X, i64 %indvars.iv44.i
  %346 = add nuw nsw i64 %indvars.iv44.i, 10
  %arrayidx.1.i = getelementptr inbounds double, ptr %X, i64 %346
  %347 = add nuw nsw i64 %indvars.iv44.i, 20
  %arrayidx.2.i = getelementptr inbounds double, ptr %X, i64 %347
  %348 = add nuw nsw i64 %indvars.iv44.i, 30
  %arrayidx.3.i = getelementptr inbounds double, ptr %X, i64 %348
  %349 = add nuw nsw i64 %indvars.iv44.i, 40
  %arrayidx.4.i = getelementptr inbounds double, ptr %X, i64 %349
  %350 = add nuw nsw i64 %indvars.iv44.i, 50
  %arrayidx.5.i = getelementptr inbounds double, ptr %X, i64 %350
  %351 = add nuw nsw i64 %indvars.iv44.i, 60
  %arrayidx.6.i = getelementptr inbounds double, ptr %X, i64 %351
  %352 = add nuw nsw i64 %indvars.iv44.i, 70
  %arrayidx.7.i = getelementptr inbounds double, ptr %X, i64 %352
  %353 = add nuw nsw i64 %indvars.iv44.i, 80
  %arrayidx.8.i = getelementptr inbounds double, ptr %X, i64 %353
  %354 = add nuw nsw i64 %indvars.iv44.i, 90
  %arrayidx.9.i = getelementptr inbounds double, ptr %X, i64 %354
  %355 = add nuw nsw i64 %indvars.iv44.i, 100
  %arrayidx.10.i = getelementptr inbounds double, ptr %X, i64 %355
  %356 = add nuw nsw i64 %indvars.iv44.i, 110
  %arrayidx.11.i = getelementptr inbounds double, ptr %X, i64 %356
  %357 = add nuw nsw i64 %indvars.iv44.i, 120
  %arrayidx.12.i = getelementptr inbounds double, ptr %X, i64 %357
  %358 = add nuw nsw i64 %indvars.iv44.i, 130
  %arrayidx.13.i = getelementptr inbounds double, ptr %X, i64 %358
  %359 = add nuw nsw i64 %indvars.iv44.i, 140
  %arrayidx.14.i = getelementptr inbounds double, ptr %X, i64 %359
  %360 = add nuw nsw i64 %indvars.iv44.i, 150
  %arrayidx.15.i = getelementptr inbounds double, ptr %X, i64 %360
  %361 = add nuw nsw i64 %indvars.iv44.i, 160
  %arrayidx.16.i = getelementptr inbounds double, ptr %X, i64 %361
  %362 = add nuw nsw i64 %indvars.iv44.i, 170
  %arrayidx.17.i = getelementptr inbounds double, ptr %X, i64 %362
  %363 = add nuw nsw i64 %indvars.iv44.i, 180
  %arrayidx.18.i = getelementptr inbounds double, ptr %X, i64 %363
  %364 = add nuw nsw i64 %indvars.iv44.i, 190
  %arrayidx.19.i = getelementptr inbounds double, ptr %X, i64 %364
  %365 = add nuw nsw i64 %indvars.iv44.i, 200
  %arrayidx.20.i = getelementptr inbounds double, ptr %X, i64 %365
  %366 = load double, ptr %arrayidx.i67, align 8, !tbaa !5
  %367 = load double, ptr %arrayidx.1.i, align 8, !tbaa !5
  %368 = load double, ptr %arrayidx.2.i, align 8, !tbaa !5
  %369 = load double, ptr %arrayidx.3.i, align 8, !tbaa !5
  %370 = load double, ptr %arrayidx.4.i, align 8, !tbaa !5
  %371 = load double, ptr %arrayidx.5.i, align 8, !tbaa !5
  %372 = load double, ptr %arrayidx.6.i, align 8, !tbaa !5
  %373 = load double, ptr %arrayidx.7.i, align 8, !tbaa !5
  %374 = load double, ptr %arrayidx.8.i, align 8, !tbaa !5
  %375 = load double, ptr %arrayidx.9.i, align 8, !tbaa !5
  %376 = load double, ptr %arrayidx.10.i, align 8, !tbaa !5
  %377 = load double, ptr %arrayidx.11.i, align 8, !tbaa !5
  %378 = load double, ptr %arrayidx.12.i, align 8, !tbaa !5
  %379 = load double, ptr %arrayidx.13.i, align 8, !tbaa !5
  %380 = load double, ptr %arrayidx.14.i, align 8, !tbaa !5
  %381 = load double, ptr %arrayidx.15.i, align 8, !tbaa !5
  %382 = load double, ptr %arrayidx.16.i, align 8, !tbaa !5
  %383 = load double, ptr %arrayidx.17.i, align 8, !tbaa !5
  %384 = load double, ptr %arrayidx.18.i, align 8, !tbaa !5
  %385 = load double, ptr %arrayidx.19.i, align 8, !tbaa !5
  %386 = load double, ptr %arrayidx.20.i, align 8, !tbaa !5
  br label %for.cond5.preheader.i

for.cond5.preheader.i:                            ; preds = %for.cond5.preheader.i, %for.cond1.preheader.i
  %indvars.iv.i68 = phi i64 [ 0, %for.cond1.preheader.i ], [ %indvars.iv.next.i69, %for.cond5.preheader.i ]
  %387 = mul nuw nsw i64 %indvars.iv.i68, 21
  %388 = mul nuw nsw i64 %indvars.iv.i68, 10
  %389 = add nuw nsw i64 %388, %indvars.iv44.i
  %arrayidx17.i = getelementptr inbounds double, ptr %ResBase, i64 %389
  %arrayidx17.promoted.i = load double, ptr %arrayidx17.i, align 8, !tbaa !5
  %arrayidx12.i = getelementptr inbounds double, ptr %Y, i64 %387
  %390 = load double, ptr %arrayidx12.i, align 8, !tbaa !5
  %391 = tail call double @llvm.fmuladd.f64(double %366, double %390, double %arrayidx17.promoted.i)
  %392 = add nuw nsw i64 %387, 1
  %arrayidx12.1.i = getelementptr inbounds double, ptr %Y, i64 %392
  %393 = load double, ptr %arrayidx12.1.i, align 8, !tbaa !5
  %394 = tail call double @llvm.fmuladd.f64(double %367, double %393, double %391)
  %395 = add nuw nsw i64 %387, 2
  %arrayidx12.2.i = getelementptr inbounds double, ptr %Y, i64 %395
  %396 = load double, ptr %arrayidx12.2.i, align 8, !tbaa !5
  %397 = tail call double @llvm.fmuladd.f64(double %368, double %396, double %394)
  %398 = add nuw nsw i64 %387, 3
  %arrayidx12.3.i = getelementptr inbounds double, ptr %Y, i64 %398
  %399 = load double, ptr %arrayidx12.3.i, align 8, !tbaa !5
  %400 = tail call double @llvm.fmuladd.f64(double %369, double %399, double %397)
  %401 = add nuw nsw i64 %387, 4
  %arrayidx12.4.i = getelementptr inbounds double, ptr %Y, i64 %401
  %402 = load double, ptr %arrayidx12.4.i, align 8, !tbaa !5
  %403 = tail call double @llvm.fmuladd.f64(double %370, double %402, double %400)
  %404 = add nuw nsw i64 %387, 5
  %arrayidx12.5.i = getelementptr inbounds double, ptr %Y, i64 %404
  %405 = load double, ptr %arrayidx12.5.i, align 8, !tbaa !5
  %406 = tail call double @llvm.fmuladd.f64(double %371, double %405, double %403)
  %407 = add nuw nsw i64 %387, 6
  %arrayidx12.6.i = getelementptr inbounds double, ptr %Y, i64 %407
  %408 = load double, ptr %arrayidx12.6.i, align 8, !tbaa !5
  %409 = tail call double @llvm.fmuladd.f64(double %372, double %408, double %406)
  %410 = add nuw nsw i64 %387, 7
  %arrayidx12.7.i = getelementptr inbounds double, ptr %Y, i64 %410
  %411 = load double, ptr %arrayidx12.7.i, align 8, !tbaa !5
  %412 = tail call double @llvm.fmuladd.f64(double %373, double %411, double %409)
  %413 = add nuw nsw i64 %387, 8
  %arrayidx12.8.i = getelementptr inbounds double, ptr %Y, i64 %413
  %414 = load double, ptr %arrayidx12.8.i, align 8, !tbaa !5
  %415 = tail call double @llvm.fmuladd.f64(double %374, double %414, double %412)
  %416 = add nuw nsw i64 %387, 9
  %arrayidx12.9.i = getelementptr inbounds double, ptr %Y, i64 %416
  %417 = load double, ptr %arrayidx12.9.i, align 8, !tbaa !5
  %418 = tail call double @llvm.fmuladd.f64(double %375, double %417, double %415)
  %419 = add nuw nsw i64 %387, 10
  %arrayidx12.10.i = getelementptr inbounds double, ptr %Y, i64 %419
  %420 = load double, ptr %arrayidx12.10.i, align 8, !tbaa !5
  %421 = tail call double @llvm.fmuladd.f64(double %376, double %420, double %418)
  %422 = add nuw nsw i64 %387, 11
  %arrayidx12.11.i = getelementptr inbounds double, ptr %Y, i64 %422
  %423 = load double, ptr %arrayidx12.11.i, align 8, !tbaa !5
  %424 = tail call double @llvm.fmuladd.f64(double %377, double %423, double %421)
  %425 = add nuw nsw i64 %387, 12
  %arrayidx12.12.i = getelementptr inbounds double, ptr %Y, i64 %425
  %426 = load double, ptr %arrayidx12.12.i, align 8, !tbaa !5
  %427 = tail call double @llvm.fmuladd.f64(double %378, double %426, double %424)
  %428 = add nuw nsw i64 %387, 13
  %arrayidx12.13.i = getelementptr inbounds double, ptr %Y, i64 %428
  %429 = load double, ptr %arrayidx12.13.i, align 8, !tbaa !5
  %430 = tail call double @llvm.fmuladd.f64(double %379, double %429, double %427)
  %431 = add nuw nsw i64 %387, 14
  %arrayidx12.14.i = getelementptr inbounds double, ptr %Y, i64 %431
  %432 = load double, ptr %arrayidx12.14.i, align 8, !tbaa !5
  %433 = tail call double @llvm.fmuladd.f64(double %380, double %432, double %430)
  %434 = add nuw nsw i64 %387, 15
  %arrayidx12.15.i = getelementptr inbounds double, ptr %Y, i64 %434
  %435 = load double, ptr %arrayidx12.15.i, align 8, !tbaa !5
  %436 = tail call double @llvm.fmuladd.f64(double %381, double %435, double %433)
  %437 = add nuw nsw i64 %387, 16
  %arrayidx12.16.i = getelementptr inbounds double, ptr %Y, i64 %437
  %438 = load double, ptr %arrayidx12.16.i, align 8, !tbaa !5
  %439 = tail call double @llvm.fmuladd.f64(double %382, double %438, double %436)
  %440 = add nuw nsw i64 %387, 17
  %arrayidx12.17.i = getelementptr inbounds double, ptr %Y, i64 %440
  %441 = load double, ptr %arrayidx12.17.i, align 8, !tbaa !5
  %442 = tail call double @llvm.fmuladd.f64(double %383, double %441, double %439)
  %443 = add nuw nsw i64 %387, 18
  %arrayidx12.18.i = getelementptr inbounds double, ptr %Y, i64 %443
  %444 = load double, ptr %arrayidx12.18.i, align 8, !tbaa !5
  %445 = tail call double @llvm.fmuladd.f64(double %384, double %444, double %442)
  %446 = add nuw nsw i64 %387, 19
  %arrayidx12.19.i = getelementptr inbounds double, ptr %Y, i64 %446
  %447 = load double, ptr %arrayidx12.19.i, align 8, !tbaa !5
  %448 = tail call double @llvm.fmuladd.f64(double %385, double %447, double %445)
  %449 = add nuw nsw i64 %387, 20
  %arrayidx12.20.i = getelementptr inbounds double, ptr %Y, i64 %449
  %450 = load double, ptr %arrayidx12.20.i, align 8, !tbaa !5
  %451 = tail call double @llvm.fmuladd.f64(double %386, double %450, double %448)
  store double %451, ptr %arrayidx17.i, align 8, !tbaa !5
  %indvars.iv.next.i69 = add nuw nsw i64 %indvars.iv.i68, 1
  %exitcond.not.i70 = icmp eq i64 %indvars.iv.next.i69, 23
  br i1 %exitcond.not.i70, label %for.cond.cleanup3.i, label %for.cond5.preheader.i, !llvm.loop !24

for.cond.cleanup3.i:                              ; preds = %for.cond5.preheader.i
  %indvars.iv.next45.i = add nuw nsw i64 %indvars.iv44.i, 1
  %exitcond47.not.i = icmp eq i64 %indvars.iv.next45.i, 10
  br i1 %exitcond47.not.i, label %_ZL12multiplyBaseIdLj10ELj21ELj23EEvPT_S1_S1_.exit, label %for.cond1.preheader.i, !llvm.loop !25

_ZL12multiplyBaseIdLj10ELj21ELj23EEvPT_S1_S1_.exit: ; preds = %for.cond.cleanup3.i
  call void @_Z12multiplySpecIdLj10ELj21ELj23EEvPT_S1_S1_(ptr noundef nonnull %ResSpec, ptr noundef nonnull %X, ptr noundef nonnull %Y)
  %col.load = load <10 x double>, ptr %X, align 16
  %vec.gep = getelementptr inbounds double, ptr %X, i64 10
  %col.load144 = load <10 x double>, ptr %vec.gep, align 16
  %vec.gep145 = getelementptr inbounds double, ptr %X, i64 20
  %col.load146 = load <10 x double>, ptr %vec.gep145, align 16
  %vec.gep147 = getelementptr inbounds double, ptr %X, i64 30
  %col.load148 = load <10 x double>, ptr %vec.gep147, align 16
  %vec.gep149 = getelementptr inbounds double, ptr %X, i64 40
  %col.load150 = load <10 x double>, ptr %vec.gep149, align 16
  %vec.gep151 = getelementptr inbounds double, ptr %X, i64 50
  %col.load152 = load <10 x double>, ptr %vec.gep151, align 16
  %vec.gep153 = getelementptr inbounds double, ptr %X, i64 60
  %col.load154 = load <10 x double>, ptr %vec.gep153, align 16
  %vec.gep155 = getelementptr inbounds double, ptr %X, i64 70
  %col.load156 = load <10 x double>, ptr %vec.gep155, align 16
  %vec.gep157 = getelementptr inbounds double, ptr %X, i64 80
  %col.load158 = load <10 x double>, ptr %vec.gep157, align 16
  %vec.gep159 = getelementptr inbounds double, ptr %X, i64 90
  %col.load160 = load <10 x double>, ptr %vec.gep159, align 16
  %vec.gep161 = getelementptr inbounds double, ptr %X, i64 100
  %col.load162 = load <10 x double>, ptr %vec.gep161, align 16
  %vec.gep163 = getelementptr inbounds double, ptr %X, i64 110
  %col.load164 = load <10 x double>, ptr %vec.gep163, align 16
  %vec.gep165 = getelementptr inbounds double, ptr %X, i64 120
  %col.load166 = load <10 x double>, ptr %vec.gep165, align 16
  %vec.gep167 = getelementptr inbounds double, ptr %X, i64 130
  %col.load168 = load <10 x double>, ptr %vec.gep167, align 16
  %vec.gep169 = getelementptr inbounds double, ptr %X, i64 140
  %col.load170 = load <10 x double>, ptr %vec.gep169, align 16
  %vec.gep171 = getelementptr inbounds double, ptr %X, i64 150
  %col.load172 = load <10 x double>, ptr %vec.gep171, align 16
  %vec.gep173 = getelementptr inbounds double, ptr %X, i64 160
  %col.load174 = load <10 x double>, ptr %vec.gep173, align 16
  %vec.gep175 = getelementptr inbounds double, ptr %X, i64 170
  %col.load176 = load <10 x double>, ptr %vec.gep175, align 16
  %vec.gep177 = getelementptr inbounds double, ptr %X, i64 180
  %col.load178 = load <10 x double>, ptr %vec.gep177, align 16
  %vec.gep179 = getelementptr inbounds double, ptr %X, i64 190
  %col.load180 = load <10 x double>, ptr %vec.gep179, align 16
  %vec.gep181 = getelementptr inbounds double, ptr %X, i64 200
  %col.load182 = load <10 x double>, ptr %vec.gep181, align 16
  %col.load183 = load <21 x double>, ptr %Y, align 16
  %vec.gep184 = getelementptr inbounds double, ptr %Y, i64 21
  %col.load185 = load <21 x double>, ptr %vec.gep184, align 8
  %vec.gep186 = getelementptr inbounds double, ptr %Y, i64 42
  %col.load187 = load <21 x double>, ptr %vec.gep186, align 16
  %vec.gep188 = getelementptr inbounds double, ptr %Y, i64 63
  %col.load189 = load <21 x double>, ptr %vec.gep188, align 8
  %vec.gep190 = getelementptr inbounds double, ptr %Y, i64 84
  %col.load191 = load <21 x double>, ptr %vec.gep190, align 16
  %vec.gep192 = getelementptr inbounds double, ptr %Y, i64 105
  %col.load193 = load <21 x double>, ptr %vec.gep192, align 8
  %vec.gep194 = getelementptr inbounds double, ptr %Y, i64 126
  %col.load195 = load <21 x double>, ptr %vec.gep194, align 16
  %vec.gep196 = getelementptr inbounds double, ptr %Y, i64 147
  %col.load197 = load <21 x double>, ptr %vec.gep196, align 8
  %vec.gep198 = getelementptr inbounds double, ptr %Y, i64 168
  %col.load199 = load <21 x double>, ptr %vec.gep198, align 16
  %vec.gep200 = getelementptr inbounds double, ptr %Y, i64 189
  %col.load201 = load <21 x double>, ptr %vec.gep200, align 8
  %vec.gep202 = getelementptr inbounds double, ptr %Y, i64 210
  %col.load203 = load <21 x double>, ptr %vec.gep202, align 16
  %vec.gep204 = getelementptr inbounds double, ptr %Y, i64 231
  %col.load205 = load <21 x double>, ptr %vec.gep204, align 8
  %vec.gep206 = getelementptr inbounds double, ptr %Y, i64 252
  %col.load207 = load <21 x double>, ptr %vec.gep206, align 16
  %vec.gep208 = getelementptr inbounds double, ptr %Y, i64 273
  %col.load209 = load <21 x double>, ptr %vec.gep208, align 8
  %vec.gep210 = getelementptr inbounds double, ptr %Y, i64 294
  %col.load211 = load <21 x double>, ptr %vec.gep210, align 16
  %vec.gep212 = getelementptr inbounds double, ptr %Y, i64 315
  %col.load213 = load <21 x double>, ptr %vec.gep212, align 8
  %vec.gep214 = getelementptr inbounds double, ptr %Y, i64 336
  %col.load215 = load <21 x double>, ptr %vec.gep214, align 16
  %vec.gep216 = getelementptr inbounds double, ptr %Y, i64 357
  %col.load217 = load <21 x double>, ptr %vec.gep216, align 8
  %vec.gep218 = getelementptr inbounds double, ptr %Y, i64 378
  %col.load219 = load <21 x double>, ptr %vec.gep218, align 16
  %vec.gep220 = getelementptr inbounds double, ptr %Y, i64 399
  %col.load221 = load <21 x double>, ptr %vec.gep220, align 8
  %vec.gep222 = getelementptr inbounds double, ptr %Y, i64 420
  %col.load223 = load <21 x double>, ptr %vec.gep222, align 16
  %vec.gep224 = getelementptr inbounds double, ptr %Y, i64 441
  %col.load225 = load <21 x double>, ptr %vec.gep224, align 8
  %vec.gep226 = getelementptr inbounds double, ptr %Y, i64 462
  %col.load227 = load <21 x double>, ptr %vec.gep226, align 16
  %block = shufflevector <10 x double> %col.load, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> zeroinitializer
  %452 = fmul <2 x double> %block, %splat.splat
  %block228 = shufflevector <10 x double> %col.load144, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat230 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %453 = fmul <2 x double> %block228, %splat.splat230
  %454 = fadd <2 x double> %452, %453
  %block231 = shufflevector <10 x double> %col.load146, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat233 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %455 = fmul <2 x double> %block231, %splat.splat233
  %456 = fadd <2 x double> %454, %455
  %block234 = shufflevector <10 x double> %col.load148, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat236 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %457 = fmul <2 x double> %block234, %splat.splat236
  %458 = fadd <2 x double> %456, %457
  %block237 = shufflevector <10 x double> %col.load150, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat239 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %459 = fmul <2 x double> %block237, %splat.splat239
  %460 = fadd <2 x double> %458, %459
  %block240 = shufflevector <10 x double> %col.load152, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat242 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %461 = fmul <2 x double> %block240, %splat.splat242
  %462 = fadd <2 x double> %460, %461
  %block243 = shufflevector <10 x double> %col.load154, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat245 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %463 = fmul <2 x double> %block243, %splat.splat245
  %464 = fadd <2 x double> %462, %463
  %block246 = shufflevector <10 x double> %col.load156, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat248 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %465 = fmul <2 x double> %block246, %splat.splat248
  %466 = fadd <2 x double> %464, %465
  %block249 = shufflevector <10 x double> %col.load158, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat251 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %467 = fmul <2 x double> %block249, %splat.splat251
  %468 = fadd <2 x double> %466, %467
  %block252 = shufflevector <10 x double> %col.load160, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat254 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %469 = fmul <2 x double> %block252, %splat.splat254
  %470 = fadd <2 x double> %468, %469
  %block255 = shufflevector <10 x double> %col.load162, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat257 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %471 = fmul <2 x double> %block255, %splat.splat257
  %472 = fadd <2 x double> %470, %471
  %block258 = shufflevector <10 x double> %col.load164, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat260 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %473 = fmul <2 x double> %block258, %splat.splat260
  %474 = fadd <2 x double> %472, %473
  %block261 = shufflevector <10 x double> %col.load166, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat263 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %475 = fmul <2 x double> %block261, %splat.splat263
  %476 = fadd <2 x double> %474, %475
  %block264 = shufflevector <10 x double> %col.load168, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat266 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %477 = fmul <2 x double> %block264, %splat.splat266
  %478 = fadd <2 x double> %476, %477
  %block267 = shufflevector <10 x double> %col.load170, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat269 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %479 = fmul <2 x double> %block267, %splat.splat269
  %480 = fadd <2 x double> %478, %479
  %block270 = shufflevector <10 x double> %col.load172, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat272 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %481 = fmul <2 x double> %block270, %splat.splat272
  %482 = fadd <2 x double> %480, %481
  %block273 = shufflevector <10 x double> %col.load174, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat275 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %483 = fmul <2 x double> %block273, %splat.splat275
  %484 = fadd <2 x double> %482, %483
  %block276 = shufflevector <10 x double> %col.load176, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat278 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %485 = fmul <2 x double> %block276, %splat.splat278
  %486 = fadd <2 x double> %484, %485
  %block279 = shufflevector <10 x double> %col.load178, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat281 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %487 = fmul <2 x double> %block279, %splat.splat281
  %488 = fadd <2 x double> %486, %487
  %block282 = shufflevector <10 x double> %col.load180, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat284 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %489 = fmul <2 x double> %block282, %splat.splat284
  %490 = fadd <2 x double> %488, %489
  %block285 = shufflevector <10 x double> %col.load182, <10 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat287 = shufflevector <21 x double> %col.load183, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %491 = fmul <2 x double> %block285, %splat.splat287
  %492 = fadd <2 x double> %490, %491
  %493 = shufflevector <2 x double> %492, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block288 = shufflevector <10 x double> %col.load, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %494 = fmul <2 x double> %block288, %splat.splat
  %block291 = shufflevector <10 x double> %col.load144, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %495 = fmul <2 x double> %block291, %splat.splat230
  %496 = fadd <2 x double> %494, %495
  %block294 = shufflevector <10 x double> %col.load146, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %497 = fmul <2 x double> %block294, %splat.splat233
  %498 = fadd <2 x double> %496, %497
  %block297 = shufflevector <10 x double> %col.load148, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %499 = fmul <2 x double> %block297, %splat.splat236
  %500 = fadd <2 x double> %498, %499
  %block300 = shufflevector <10 x double> %col.load150, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %501 = fmul <2 x double> %block300, %splat.splat239
  %502 = fadd <2 x double> %500, %501
  %block303 = shufflevector <10 x double> %col.load152, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %503 = fmul <2 x double> %block303, %splat.splat242
  %504 = fadd <2 x double> %502, %503
  %block306 = shufflevector <10 x double> %col.load154, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %505 = fmul <2 x double> %block306, %splat.splat245
  %506 = fadd <2 x double> %504, %505
  %block309 = shufflevector <10 x double> %col.load156, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %507 = fmul <2 x double> %block309, %splat.splat248
  %508 = fadd <2 x double> %506, %507
  %block312 = shufflevector <10 x double> %col.load158, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %509 = fmul <2 x double> %block312, %splat.splat251
  %510 = fadd <2 x double> %508, %509
  %block315 = shufflevector <10 x double> %col.load160, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %511 = fmul <2 x double> %block315, %splat.splat254
  %512 = fadd <2 x double> %510, %511
  %block318 = shufflevector <10 x double> %col.load162, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %513 = fmul <2 x double> %block318, %splat.splat257
  %514 = fadd <2 x double> %512, %513
  %block321 = shufflevector <10 x double> %col.load164, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %515 = fmul <2 x double> %block321, %splat.splat260
  %516 = fadd <2 x double> %514, %515
  %block324 = shufflevector <10 x double> %col.load166, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %517 = fmul <2 x double> %block324, %splat.splat263
  %518 = fadd <2 x double> %516, %517
  %block327 = shufflevector <10 x double> %col.load168, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %519 = fmul <2 x double> %block327, %splat.splat266
  %520 = fadd <2 x double> %518, %519
  %block330 = shufflevector <10 x double> %col.load170, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %521 = fmul <2 x double> %block330, %splat.splat269
  %522 = fadd <2 x double> %520, %521
  %block333 = shufflevector <10 x double> %col.load172, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %523 = fmul <2 x double> %block333, %splat.splat272
  %524 = fadd <2 x double> %522, %523
  %block336 = shufflevector <10 x double> %col.load174, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %525 = fmul <2 x double> %block336, %splat.splat275
  %526 = fadd <2 x double> %524, %525
  %block339 = shufflevector <10 x double> %col.load176, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %527 = fmul <2 x double> %block339, %splat.splat278
  %528 = fadd <2 x double> %526, %527
  %block342 = shufflevector <10 x double> %col.load178, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %529 = fmul <2 x double> %block342, %splat.splat281
  %530 = fadd <2 x double> %528, %529
  %block345 = shufflevector <10 x double> %col.load180, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %531 = fmul <2 x double> %block345, %splat.splat284
  %532 = fadd <2 x double> %530, %531
  %block348 = shufflevector <10 x double> %col.load182, <10 x double> poison, <2 x i32> <i32 2, i32 3>
  %533 = fmul <2 x double> %block348, %splat.splat287
  %534 = fadd <2 x double> %532, %533
  %535 = shufflevector <2 x double> %534, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %536 = shufflevector <10 x double> %493, <10 x double> %535, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block351 = shufflevector <10 x double> %col.load, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %537 = fmul <2 x double> %block351, %splat.splat
  %block354 = shufflevector <10 x double> %col.load144, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %538 = fmul <2 x double> %block354, %splat.splat230
  %539 = fadd <2 x double> %537, %538
  %block357 = shufflevector <10 x double> %col.load146, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %540 = fmul <2 x double> %block357, %splat.splat233
  %541 = fadd <2 x double> %539, %540
  %block360 = shufflevector <10 x double> %col.load148, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %542 = fmul <2 x double> %block360, %splat.splat236
  %543 = fadd <2 x double> %541, %542
  %block363 = shufflevector <10 x double> %col.load150, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %544 = fmul <2 x double> %block363, %splat.splat239
  %545 = fadd <2 x double> %543, %544
  %block366 = shufflevector <10 x double> %col.load152, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %546 = fmul <2 x double> %block366, %splat.splat242
  %547 = fadd <2 x double> %545, %546
  %block369 = shufflevector <10 x double> %col.load154, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %548 = fmul <2 x double> %block369, %splat.splat245
  %549 = fadd <2 x double> %547, %548
  %block372 = shufflevector <10 x double> %col.load156, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %550 = fmul <2 x double> %block372, %splat.splat248
  %551 = fadd <2 x double> %549, %550
  %block375 = shufflevector <10 x double> %col.load158, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %552 = fmul <2 x double> %block375, %splat.splat251
  %553 = fadd <2 x double> %551, %552
  %block378 = shufflevector <10 x double> %col.load160, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %554 = fmul <2 x double> %block378, %splat.splat254
  %555 = fadd <2 x double> %553, %554
  %block381 = shufflevector <10 x double> %col.load162, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %556 = fmul <2 x double> %block381, %splat.splat257
  %557 = fadd <2 x double> %555, %556
  %block384 = shufflevector <10 x double> %col.load164, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %558 = fmul <2 x double> %block384, %splat.splat260
  %559 = fadd <2 x double> %557, %558
  %block387 = shufflevector <10 x double> %col.load166, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %560 = fmul <2 x double> %block387, %splat.splat263
  %561 = fadd <2 x double> %559, %560
  %block390 = shufflevector <10 x double> %col.load168, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %562 = fmul <2 x double> %block390, %splat.splat266
  %563 = fadd <2 x double> %561, %562
  %block393 = shufflevector <10 x double> %col.load170, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %564 = fmul <2 x double> %block393, %splat.splat269
  %565 = fadd <2 x double> %563, %564
  %block396 = shufflevector <10 x double> %col.load172, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %566 = fmul <2 x double> %block396, %splat.splat272
  %567 = fadd <2 x double> %565, %566
  %block399 = shufflevector <10 x double> %col.load174, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %568 = fmul <2 x double> %block399, %splat.splat275
  %569 = fadd <2 x double> %567, %568
  %block402 = shufflevector <10 x double> %col.load176, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %570 = fmul <2 x double> %block402, %splat.splat278
  %571 = fadd <2 x double> %569, %570
  %block405 = shufflevector <10 x double> %col.load178, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %572 = fmul <2 x double> %block405, %splat.splat281
  %573 = fadd <2 x double> %571, %572
  %block408 = shufflevector <10 x double> %col.load180, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %574 = fmul <2 x double> %block408, %splat.splat284
  %575 = fadd <2 x double> %573, %574
  %block411 = shufflevector <10 x double> %col.load182, <10 x double> poison, <2 x i32> <i32 4, i32 5>
  %576 = fmul <2 x double> %block411, %splat.splat287
  %577 = fadd <2 x double> %575, %576
  %578 = shufflevector <2 x double> %577, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %579 = shufflevector <10 x double> %536, <10 x double> %578, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %block414 = shufflevector <10 x double> %col.load, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %580 = fmul <2 x double> %block414, %splat.splat
  %block417 = shufflevector <10 x double> %col.load144, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %581 = fmul <2 x double> %block417, %splat.splat230
  %582 = fadd <2 x double> %580, %581
  %block420 = shufflevector <10 x double> %col.load146, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %583 = fmul <2 x double> %block420, %splat.splat233
  %584 = fadd <2 x double> %582, %583
  %block423 = shufflevector <10 x double> %col.load148, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %585 = fmul <2 x double> %block423, %splat.splat236
  %586 = fadd <2 x double> %584, %585
  %block426 = shufflevector <10 x double> %col.load150, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %587 = fmul <2 x double> %block426, %splat.splat239
  %588 = fadd <2 x double> %586, %587
  %block429 = shufflevector <10 x double> %col.load152, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %589 = fmul <2 x double> %block429, %splat.splat242
  %590 = fadd <2 x double> %588, %589
  %block432 = shufflevector <10 x double> %col.load154, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %591 = fmul <2 x double> %block432, %splat.splat245
  %592 = fadd <2 x double> %590, %591
  %block435 = shufflevector <10 x double> %col.load156, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %593 = fmul <2 x double> %block435, %splat.splat248
  %594 = fadd <2 x double> %592, %593
  %block438 = shufflevector <10 x double> %col.load158, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %595 = fmul <2 x double> %block438, %splat.splat251
  %596 = fadd <2 x double> %594, %595
  %block441 = shufflevector <10 x double> %col.load160, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %597 = fmul <2 x double> %block441, %splat.splat254
  %598 = fadd <2 x double> %596, %597
  %block444 = shufflevector <10 x double> %col.load162, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %599 = fmul <2 x double> %block444, %splat.splat257
  %600 = fadd <2 x double> %598, %599
  %block447 = shufflevector <10 x double> %col.load164, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %601 = fmul <2 x double> %block447, %splat.splat260
  %602 = fadd <2 x double> %600, %601
  %block450 = shufflevector <10 x double> %col.load166, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %603 = fmul <2 x double> %block450, %splat.splat263
  %604 = fadd <2 x double> %602, %603
  %block453 = shufflevector <10 x double> %col.load168, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %605 = fmul <2 x double> %block453, %splat.splat266
  %606 = fadd <2 x double> %604, %605
  %block456 = shufflevector <10 x double> %col.load170, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %607 = fmul <2 x double> %block456, %splat.splat269
  %608 = fadd <2 x double> %606, %607
  %block459 = shufflevector <10 x double> %col.load172, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %609 = fmul <2 x double> %block459, %splat.splat272
  %610 = fadd <2 x double> %608, %609
  %block462 = shufflevector <10 x double> %col.load174, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %611 = fmul <2 x double> %block462, %splat.splat275
  %612 = fadd <2 x double> %610, %611
  %block465 = shufflevector <10 x double> %col.load176, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %613 = fmul <2 x double> %block465, %splat.splat278
  %614 = fadd <2 x double> %612, %613
  %block468 = shufflevector <10 x double> %col.load178, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %615 = fmul <2 x double> %block468, %splat.splat281
  %616 = fadd <2 x double> %614, %615
  %block471 = shufflevector <10 x double> %col.load180, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %617 = fmul <2 x double> %block471, %splat.splat284
  %618 = fadd <2 x double> %616, %617
  %block474 = shufflevector <10 x double> %col.load182, <10 x double> poison, <2 x i32> <i32 6, i32 7>
  %619 = fmul <2 x double> %block474, %splat.splat287
  %620 = fadd <2 x double> %618, %619
  %621 = shufflevector <2 x double> %620, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %622 = shufflevector <10 x double> %579, <10 x double> %621, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %block477 = shufflevector <10 x double> %col.load, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %623 = fmul <2 x double> %block477, %splat.splat
  %block480 = shufflevector <10 x double> %col.load144, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %624 = fmul <2 x double> %block480, %splat.splat230
  %625 = fadd <2 x double> %623, %624
  %block483 = shufflevector <10 x double> %col.load146, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %626 = fmul <2 x double> %block483, %splat.splat233
  %627 = fadd <2 x double> %625, %626
  %block486 = shufflevector <10 x double> %col.load148, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %628 = fmul <2 x double> %block486, %splat.splat236
  %629 = fadd <2 x double> %627, %628
  %block489 = shufflevector <10 x double> %col.load150, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %630 = fmul <2 x double> %block489, %splat.splat239
  %631 = fadd <2 x double> %629, %630
  %block492 = shufflevector <10 x double> %col.load152, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %632 = fmul <2 x double> %block492, %splat.splat242
  %633 = fadd <2 x double> %631, %632
  %block495 = shufflevector <10 x double> %col.load154, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %634 = fmul <2 x double> %block495, %splat.splat245
  %635 = fadd <2 x double> %633, %634
  %block498 = shufflevector <10 x double> %col.load156, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %636 = fmul <2 x double> %block498, %splat.splat248
  %637 = fadd <2 x double> %635, %636
  %block501 = shufflevector <10 x double> %col.load158, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %638 = fmul <2 x double> %block501, %splat.splat251
  %639 = fadd <2 x double> %637, %638
  %block504 = shufflevector <10 x double> %col.load160, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %640 = fmul <2 x double> %block504, %splat.splat254
  %641 = fadd <2 x double> %639, %640
  %block507 = shufflevector <10 x double> %col.load162, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %642 = fmul <2 x double> %block507, %splat.splat257
  %643 = fadd <2 x double> %641, %642
  %block510 = shufflevector <10 x double> %col.load164, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %644 = fmul <2 x double> %block510, %splat.splat260
  %645 = fadd <2 x double> %643, %644
  %block513 = shufflevector <10 x double> %col.load166, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %646 = fmul <2 x double> %block513, %splat.splat263
  %647 = fadd <2 x double> %645, %646
  %block516 = shufflevector <10 x double> %col.load168, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %648 = fmul <2 x double> %block516, %splat.splat266
  %649 = fadd <2 x double> %647, %648
  %block519 = shufflevector <10 x double> %col.load170, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %650 = fmul <2 x double> %block519, %splat.splat269
  %651 = fadd <2 x double> %649, %650
  %block522 = shufflevector <10 x double> %col.load172, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %652 = fmul <2 x double> %block522, %splat.splat272
  %653 = fadd <2 x double> %651, %652
  %block525 = shufflevector <10 x double> %col.load174, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %654 = fmul <2 x double> %block525, %splat.splat275
  %655 = fadd <2 x double> %653, %654
  %block528 = shufflevector <10 x double> %col.load176, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %656 = fmul <2 x double> %block528, %splat.splat278
  %657 = fadd <2 x double> %655, %656
  %block531 = shufflevector <10 x double> %col.load178, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %658 = fmul <2 x double> %block531, %splat.splat281
  %659 = fadd <2 x double> %657, %658
  %block534 = shufflevector <10 x double> %col.load180, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %660 = fmul <2 x double> %block534, %splat.splat284
  %661 = fadd <2 x double> %659, %660
  %block537 = shufflevector <10 x double> %col.load182, <10 x double> poison, <2 x i32> <i32 8, i32 9>
  %662 = fmul <2 x double> %block537, %splat.splat287
  %663 = fadd <2 x double> %661, %662
  %664 = shufflevector <2 x double> %663, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %665 = shufflevector <10 x double> %622, <10 x double> %664, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat542 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> zeroinitializer
  %666 = fmul <2 x double> %block, %splat.splat542
  %splat.splat545 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %667 = fmul <2 x double> %block228, %splat.splat545
  %668 = fadd <2 x double> %666, %667
  %splat.splat548 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %669 = fmul <2 x double> %block231, %splat.splat548
  %670 = fadd <2 x double> %668, %669
  %splat.splat551 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %671 = fmul <2 x double> %block234, %splat.splat551
  %672 = fadd <2 x double> %670, %671
  %splat.splat554 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %673 = fmul <2 x double> %block237, %splat.splat554
  %674 = fadd <2 x double> %672, %673
  %splat.splat557 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %675 = fmul <2 x double> %block240, %splat.splat557
  %676 = fadd <2 x double> %674, %675
  %splat.splat560 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %677 = fmul <2 x double> %block243, %splat.splat560
  %678 = fadd <2 x double> %676, %677
  %splat.splat563 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %679 = fmul <2 x double> %block246, %splat.splat563
  %680 = fadd <2 x double> %678, %679
  %splat.splat566 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %681 = fmul <2 x double> %block249, %splat.splat566
  %682 = fadd <2 x double> %680, %681
  %splat.splat569 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %683 = fmul <2 x double> %block252, %splat.splat569
  %684 = fadd <2 x double> %682, %683
  %splat.splat572 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %685 = fmul <2 x double> %block255, %splat.splat572
  %686 = fadd <2 x double> %684, %685
  %splat.splat575 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %687 = fmul <2 x double> %block258, %splat.splat575
  %688 = fadd <2 x double> %686, %687
  %splat.splat578 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %689 = fmul <2 x double> %block261, %splat.splat578
  %690 = fadd <2 x double> %688, %689
  %splat.splat581 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %691 = fmul <2 x double> %block264, %splat.splat581
  %692 = fadd <2 x double> %690, %691
  %splat.splat584 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %693 = fmul <2 x double> %block267, %splat.splat584
  %694 = fadd <2 x double> %692, %693
  %splat.splat587 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %695 = fmul <2 x double> %block270, %splat.splat587
  %696 = fadd <2 x double> %694, %695
  %splat.splat590 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %697 = fmul <2 x double> %block273, %splat.splat590
  %698 = fadd <2 x double> %696, %697
  %splat.splat593 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %699 = fmul <2 x double> %block276, %splat.splat593
  %700 = fadd <2 x double> %698, %699
  %splat.splat596 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %701 = fmul <2 x double> %block279, %splat.splat596
  %702 = fadd <2 x double> %700, %701
  %splat.splat599 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %703 = fmul <2 x double> %block282, %splat.splat599
  %704 = fadd <2 x double> %702, %703
  %splat.splat602 = shufflevector <21 x double> %col.load185, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %705 = fmul <2 x double> %block285, %splat.splat602
  %706 = fadd <2 x double> %704, %705
  %707 = shufflevector <2 x double> %706, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %708 = fmul <2 x double> %block288, %splat.splat542
  %709 = fmul <2 x double> %block291, %splat.splat545
  %710 = fadd <2 x double> %708, %709
  %711 = fmul <2 x double> %block294, %splat.splat548
  %712 = fadd <2 x double> %710, %711
  %713 = fmul <2 x double> %block297, %splat.splat551
  %714 = fadd <2 x double> %712, %713
  %715 = fmul <2 x double> %block300, %splat.splat554
  %716 = fadd <2 x double> %714, %715
  %717 = fmul <2 x double> %block303, %splat.splat557
  %718 = fadd <2 x double> %716, %717
  %719 = fmul <2 x double> %block306, %splat.splat560
  %720 = fadd <2 x double> %718, %719
  %721 = fmul <2 x double> %block309, %splat.splat563
  %722 = fadd <2 x double> %720, %721
  %723 = fmul <2 x double> %block312, %splat.splat566
  %724 = fadd <2 x double> %722, %723
  %725 = fmul <2 x double> %block315, %splat.splat569
  %726 = fadd <2 x double> %724, %725
  %727 = fmul <2 x double> %block318, %splat.splat572
  %728 = fadd <2 x double> %726, %727
  %729 = fmul <2 x double> %block321, %splat.splat575
  %730 = fadd <2 x double> %728, %729
  %731 = fmul <2 x double> %block324, %splat.splat578
  %732 = fadd <2 x double> %730, %731
  %733 = fmul <2 x double> %block327, %splat.splat581
  %734 = fadd <2 x double> %732, %733
  %735 = fmul <2 x double> %block330, %splat.splat584
  %736 = fadd <2 x double> %734, %735
  %737 = fmul <2 x double> %block333, %splat.splat587
  %738 = fadd <2 x double> %736, %737
  %739 = fmul <2 x double> %block336, %splat.splat590
  %740 = fadd <2 x double> %738, %739
  %741 = fmul <2 x double> %block339, %splat.splat593
  %742 = fadd <2 x double> %740, %741
  %743 = fmul <2 x double> %block342, %splat.splat596
  %744 = fadd <2 x double> %742, %743
  %745 = fmul <2 x double> %block345, %splat.splat599
  %746 = fadd <2 x double> %744, %745
  %747 = fmul <2 x double> %block348, %splat.splat602
  %748 = fadd <2 x double> %746, %747
  %749 = shufflevector <2 x double> %748, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %750 = shufflevector <10 x double> %707, <10 x double> %749, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %751 = fmul <2 x double> %block351, %splat.splat542
  %752 = fmul <2 x double> %block354, %splat.splat545
  %753 = fadd <2 x double> %751, %752
  %754 = fmul <2 x double> %block357, %splat.splat548
  %755 = fadd <2 x double> %753, %754
  %756 = fmul <2 x double> %block360, %splat.splat551
  %757 = fadd <2 x double> %755, %756
  %758 = fmul <2 x double> %block363, %splat.splat554
  %759 = fadd <2 x double> %757, %758
  %760 = fmul <2 x double> %block366, %splat.splat557
  %761 = fadd <2 x double> %759, %760
  %762 = fmul <2 x double> %block369, %splat.splat560
  %763 = fadd <2 x double> %761, %762
  %764 = fmul <2 x double> %block372, %splat.splat563
  %765 = fadd <2 x double> %763, %764
  %766 = fmul <2 x double> %block375, %splat.splat566
  %767 = fadd <2 x double> %765, %766
  %768 = fmul <2 x double> %block378, %splat.splat569
  %769 = fadd <2 x double> %767, %768
  %770 = fmul <2 x double> %block381, %splat.splat572
  %771 = fadd <2 x double> %769, %770
  %772 = fmul <2 x double> %block384, %splat.splat575
  %773 = fadd <2 x double> %771, %772
  %774 = fmul <2 x double> %block387, %splat.splat578
  %775 = fadd <2 x double> %773, %774
  %776 = fmul <2 x double> %block390, %splat.splat581
  %777 = fadd <2 x double> %775, %776
  %778 = fmul <2 x double> %block393, %splat.splat584
  %779 = fadd <2 x double> %777, %778
  %780 = fmul <2 x double> %block396, %splat.splat587
  %781 = fadd <2 x double> %779, %780
  %782 = fmul <2 x double> %block399, %splat.splat590
  %783 = fadd <2 x double> %781, %782
  %784 = fmul <2 x double> %block402, %splat.splat593
  %785 = fadd <2 x double> %783, %784
  %786 = fmul <2 x double> %block405, %splat.splat596
  %787 = fadd <2 x double> %785, %786
  %788 = fmul <2 x double> %block408, %splat.splat599
  %789 = fadd <2 x double> %787, %788
  %790 = fmul <2 x double> %block411, %splat.splat602
  %791 = fadd <2 x double> %789, %790
  %792 = shufflevector <2 x double> %791, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %793 = shufflevector <10 x double> %750, <10 x double> %792, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %794 = fmul <2 x double> %block414, %splat.splat542
  %795 = fmul <2 x double> %block417, %splat.splat545
  %796 = fadd <2 x double> %794, %795
  %797 = fmul <2 x double> %block420, %splat.splat548
  %798 = fadd <2 x double> %796, %797
  %799 = fmul <2 x double> %block423, %splat.splat551
  %800 = fadd <2 x double> %798, %799
  %801 = fmul <2 x double> %block426, %splat.splat554
  %802 = fadd <2 x double> %800, %801
  %803 = fmul <2 x double> %block429, %splat.splat557
  %804 = fadd <2 x double> %802, %803
  %805 = fmul <2 x double> %block432, %splat.splat560
  %806 = fadd <2 x double> %804, %805
  %807 = fmul <2 x double> %block435, %splat.splat563
  %808 = fadd <2 x double> %806, %807
  %809 = fmul <2 x double> %block438, %splat.splat566
  %810 = fadd <2 x double> %808, %809
  %811 = fmul <2 x double> %block441, %splat.splat569
  %812 = fadd <2 x double> %810, %811
  %813 = fmul <2 x double> %block444, %splat.splat572
  %814 = fadd <2 x double> %812, %813
  %815 = fmul <2 x double> %block447, %splat.splat575
  %816 = fadd <2 x double> %814, %815
  %817 = fmul <2 x double> %block450, %splat.splat578
  %818 = fadd <2 x double> %816, %817
  %819 = fmul <2 x double> %block453, %splat.splat581
  %820 = fadd <2 x double> %818, %819
  %821 = fmul <2 x double> %block456, %splat.splat584
  %822 = fadd <2 x double> %820, %821
  %823 = fmul <2 x double> %block459, %splat.splat587
  %824 = fadd <2 x double> %822, %823
  %825 = fmul <2 x double> %block462, %splat.splat590
  %826 = fadd <2 x double> %824, %825
  %827 = fmul <2 x double> %block465, %splat.splat593
  %828 = fadd <2 x double> %826, %827
  %829 = fmul <2 x double> %block468, %splat.splat596
  %830 = fadd <2 x double> %828, %829
  %831 = fmul <2 x double> %block471, %splat.splat599
  %832 = fadd <2 x double> %830, %831
  %833 = fmul <2 x double> %block474, %splat.splat602
  %834 = fadd <2 x double> %832, %833
  %835 = shufflevector <2 x double> %834, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %836 = shufflevector <10 x double> %793, <10 x double> %835, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %837 = fmul <2 x double> %block477, %splat.splat542
  %838 = fmul <2 x double> %block480, %splat.splat545
  %839 = fadd <2 x double> %837, %838
  %840 = fmul <2 x double> %block483, %splat.splat548
  %841 = fadd <2 x double> %839, %840
  %842 = fmul <2 x double> %block486, %splat.splat551
  %843 = fadd <2 x double> %841, %842
  %844 = fmul <2 x double> %block489, %splat.splat554
  %845 = fadd <2 x double> %843, %844
  %846 = fmul <2 x double> %block492, %splat.splat557
  %847 = fadd <2 x double> %845, %846
  %848 = fmul <2 x double> %block495, %splat.splat560
  %849 = fadd <2 x double> %847, %848
  %850 = fmul <2 x double> %block498, %splat.splat563
  %851 = fadd <2 x double> %849, %850
  %852 = fmul <2 x double> %block501, %splat.splat566
  %853 = fadd <2 x double> %851, %852
  %854 = fmul <2 x double> %block504, %splat.splat569
  %855 = fadd <2 x double> %853, %854
  %856 = fmul <2 x double> %block507, %splat.splat572
  %857 = fadd <2 x double> %855, %856
  %858 = fmul <2 x double> %block510, %splat.splat575
  %859 = fadd <2 x double> %857, %858
  %860 = fmul <2 x double> %block513, %splat.splat578
  %861 = fadd <2 x double> %859, %860
  %862 = fmul <2 x double> %block516, %splat.splat581
  %863 = fadd <2 x double> %861, %862
  %864 = fmul <2 x double> %block519, %splat.splat584
  %865 = fadd <2 x double> %863, %864
  %866 = fmul <2 x double> %block522, %splat.splat587
  %867 = fadd <2 x double> %865, %866
  %868 = fmul <2 x double> %block525, %splat.splat590
  %869 = fadd <2 x double> %867, %868
  %870 = fmul <2 x double> %block528, %splat.splat593
  %871 = fadd <2 x double> %869, %870
  %872 = fmul <2 x double> %block531, %splat.splat596
  %873 = fadd <2 x double> %871, %872
  %874 = fmul <2 x double> %block534, %splat.splat599
  %875 = fadd <2 x double> %873, %874
  %876 = fmul <2 x double> %block537, %splat.splat602
  %877 = fadd <2 x double> %875, %876
  %878 = shufflevector <2 x double> %877, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %879 = shufflevector <10 x double> %836, <10 x double> %878, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat857 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> zeroinitializer
  %880 = fmul <2 x double> %block, %splat.splat857
  %splat.splat860 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %881 = fmul <2 x double> %block228, %splat.splat860
  %882 = fadd <2 x double> %880, %881
  %splat.splat863 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %883 = fmul <2 x double> %block231, %splat.splat863
  %884 = fadd <2 x double> %882, %883
  %splat.splat866 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %885 = fmul <2 x double> %block234, %splat.splat866
  %886 = fadd <2 x double> %884, %885
  %splat.splat869 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %887 = fmul <2 x double> %block237, %splat.splat869
  %888 = fadd <2 x double> %886, %887
  %splat.splat872 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %889 = fmul <2 x double> %block240, %splat.splat872
  %890 = fadd <2 x double> %888, %889
  %splat.splat875 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %891 = fmul <2 x double> %block243, %splat.splat875
  %892 = fadd <2 x double> %890, %891
  %splat.splat878 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %893 = fmul <2 x double> %block246, %splat.splat878
  %894 = fadd <2 x double> %892, %893
  %splat.splat881 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %895 = fmul <2 x double> %block249, %splat.splat881
  %896 = fadd <2 x double> %894, %895
  %splat.splat884 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %897 = fmul <2 x double> %block252, %splat.splat884
  %898 = fadd <2 x double> %896, %897
  %splat.splat887 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %899 = fmul <2 x double> %block255, %splat.splat887
  %900 = fadd <2 x double> %898, %899
  %splat.splat890 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %901 = fmul <2 x double> %block258, %splat.splat890
  %902 = fadd <2 x double> %900, %901
  %splat.splat893 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %903 = fmul <2 x double> %block261, %splat.splat893
  %904 = fadd <2 x double> %902, %903
  %splat.splat896 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %905 = fmul <2 x double> %block264, %splat.splat896
  %906 = fadd <2 x double> %904, %905
  %splat.splat899 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %907 = fmul <2 x double> %block267, %splat.splat899
  %908 = fadd <2 x double> %906, %907
  %splat.splat902 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %909 = fmul <2 x double> %block270, %splat.splat902
  %910 = fadd <2 x double> %908, %909
  %splat.splat905 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %911 = fmul <2 x double> %block273, %splat.splat905
  %912 = fadd <2 x double> %910, %911
  %splat.splat908 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %913 = fmul <2 x double> %block276, %splat.splat908
  %914 = fadd <2 x double> %912, %913
  %splat.splat911 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %915 = fmul <2 x double> %block279, %splat.splat911
  %916 = fadd <2 x double> %914, %915
  %splat.splat914 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %917 = fmul <2 x double> %block282, %splat.splat914
  %918 = fadd <2 x double> %916, %917
  %splat.splat917 = shufflevector <21 x double> %col.load187, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %919 = fmul <2 x double> %block285, %splat.splat917
  %920 = fadd <2 x double> %918, %919
  %921 = shufflevector <2 x double> %920, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %922 = fmul <2 x double> %block288, %splat.splat857
  %923 = fmul <2 x double> %block291, %splat.splat860
  %924 = fadd <2 x double> %922, %923
  %925 = fmul <2 x double> %block294, %splat.splat863
  %926 = fadd <2 x double> %924, %925
  %927 = fmul <2 x double> %block297, %splat.splat866
  %928 = fadd <2 x double> %926, %927
  %929 = fmul <2 x double> %block300, %splat.splat869
  %930 = fadd <2 x double> %928, %929
  %931 = fmul <2 x double> %block303, %splat.splat872
  %932 = fadd <2 x double> %930, %931
  %933 = fmul <2 x double> %block306, %splat.splat875
  %934 = fadd <2 x double> %932, %933
  %935 = fmul <2 x double> %block309, %splat.splat878
  %936 = fadd <2 x double> %934, %935
  %937 = fmul <2 x double> %block312, %splat.splat881
  %938 = fadd <2 x double> %936, %937
  %939 = fmul <2 x double> %block315, %splat.splat884
  %940 = fadd <2 x double> %938, %939
  %941 = fmul <2 x double> %block318, %splat.splat887
  %942 = fadd <2 x double> %940, %941
  %943 = fmul <2 x double> %block321, %splat.splat890
  %944 = fadd <2 x double> %942, %943
  %945 = fmul <2 x double> %block324, %splat.splat893
  %946 = fadd <2 x double> %944, %945
  %947 = fmul <2 x double> %block327, %splat.splat896
  %948 = fadd <2 x double> %946, %947
  %949 = fmul <2 x double> %block330, %splat.splat899
  %950 = fadd <2 x double> %948, %949
  %951 = fmul <2 x double> %block333, %splat.splat902
  %952 = fadd <2 x double> %950, %951
  %953 = fmul <2 x double> %block336, %splat.splat905
  %954 = fadd <2 x double> %952, %953
  %955 = fmul <2 x double> %block339, %splat.splat908
  %956 = fadd <2 x double> %954, %955
  %957 = fmul <2 x double> %block342, %splat.splat911
  %958 = fadd <2 x double> %956, %957
  %959 = fmul <2 x double> %block345, %splat.splat914
  %960 = fadd <2 x double> %958, %959
  %961 = fmul <2 x double> %block348, %splat.splat917
  %962 = fadd <2 x double> %960, %961
  %963 = shufflevector <2 x double> %962, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %964 = shufflevector <10 x double> %921, <10 x double> %963, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %965 = fmul <2 x double> %block351, %splat.splat857
  %966 = fmul <2 x double> %block354, %splat.splat860
  %967 = fadd <2 x double> %965, %966
  %968 = fmul <2 x double> %block357, %splat.splat863
  %969 = fadd <2 x double> %967, %968
  %970 = fmul <2 x double> %block360, %splat.splat866
  %971 = fadd <2 x double> %969, %970
  %972 = fmul <2 x double> %block363, %splat.splat869
  %973 = fadd <2 x double> %971, %972
  %974 = fmul <2 x double> %block366, %splat.splat872
  %975 = fadd <2 x double> %973, %974
  %976 = fmul <2 x double> %block369, %splat.splat875
  %977 = fadd <2 x double> %975, %976
  %978 = fmul <2 x double> %block372, %splat.splat878
  %979 = fadd <2 x double> %977, %978
  %980 = fmul <2 x double> %block375, %splat.splat881
  %981 = fadd <2 x double> %979, %980
  %982 = fmul <2 x double> %block378, %splat.splat884
  %983 = fadd <2 x double> %981, %982
  %984 = fmul <2 x double> %block381, %splat.splat887
  %985 = fadd <2 x double> %983, %984
  %986 = fmul <2 x double> %block384, %splat.splat890
  %987 = fadd <2 x double> %985, %986
  %988 = fmul <2 x double> %block387, %splat.splat893
  %989 = fadd <2 x double> %987, %988
  %990 = fmul <2 x double> %block390, %splat.splat896
  %991 = fadd <2 x double> %989, %990
  %992 = fmul <2 x double> %block393, %splat.splat899
  %993 = fadd <2 x double> %991, %992
  %994 = fmul <2 x double> %block396, %splat.splat902
  %995 = fadd <2 x double> %993, %994
  %996 = fmul <2 x double> %block399, %splat.splat905
  %997 = fadd <2 x double> %995, %996
  %998 = fmul <2 x double> %block402, %splat.splat908
  %999 = fadd <2 x double> %997, %998
  %1000 = fmul <2 x double> %block405, %splat.splat911
  %1001 = fadd <2 x double> %999, %1000
  %1002 = fmul <2 x double> %block408, %splat.splat914
  %1003 = fadd <2 x double> %1001, %1002
  %1004 = fmul <2 x double> %block411, %splat.splat917
  %1005 = fadd <2 x double> %1003, %1004
  %1006 = shufflevector <2 x double> %1005, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1007 = shufflevector <10 x double> %964, <10 x double> %1006, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %1008 = fmul <2 x double> %block414, %splat.splat857
  %1009 = fmul <2 x double> %block417, %splat.splat860
  %1010 = fadd <2 x double> %1008, %1009
  %1011 = fmul <2 x double> %block420, %splat.splat863
  %1012 = fadd <2 x double> %1010, %1011
  %1013 = fmul <2 x double> %block423, %splat.splat866
  %1014 = fadd <2 x double> %1012, %1013
  %1015 = fmul <2 x double> %block426, %splat.splat869
  %1016 = fadd <2 x double> %1014, %1015
  %1017 = fmul <2 x double> %block429, %splat.splat872
  %1018 = fadd <2 x double> %1016, %1017
  %1019 = fmul <2 x double> %block432, %splat.splat875
  %1020 = fadd <2 x double> %1018, %1019
  %1021 = fmul <2 x double> %block435, %splat.splat878
  %1022 = fadd <2 x double> %1020, %1021
  %1023 = fmul <2 x double> %block438, %splat.splat881
  %1024 = fadd <2 x double> %1022, %1023
  %1025 = fmul <2 x double> %block441, %splat.splat884
  %1026 = fadd <2 x double> %1024, %1025
  %1027 = fmul <2 x double> %block444, %splat.splat887
  %1028 = fadd <2 x double> %1026, %1027
  %1029 = fmul <2 x double> %block447, %splat.splat890
  %1030 = fadd <2 x double> %1028, %1029
  %1031 = fmul <2 x double> %block450, %splat.splat893
  %1032 = fadd <2 x double> %1030, %1031
  %1033 = fmul <2 x double> %block453, %splat.splat896
  %1034 = fadd <2 x double> %1032, %1033
  %1035 = fmul <2 x double> %block456, %splat.splat899
  %1036 = fadd <2 x double> %1034, %1035
  %1037 = fmul <2 x double> %block459, %splat.splat902
  %1038 = fadd <2 x double> %1036, %1037
  %1039 = fmul <2 x double> %block462, %splat.splat905
  %1040 = fadd <2 x double> %1038, %1039
  %1041 = fmul <2 x double> %block465, %splat.splat908
  %1042 = fadd <2 x double> %1040, %1041
  %1043 = fmul <2 x double> %block468, %splat.splat911
  %1044 = fadd <2 x double> %1042, %1043
  %1045 = fmul <2 x double> %block471, %splat.splat914
  %1046 = fadd <2 x double> %1044, %1045
  %1047 = fmul <2 x double> %block474, %splat.splat917
  %1048 = fadd <2 x double> %1046, %1047
  %1049 = shufflevector <2 x double> %1048, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1050 = shufflevector <10 x double> %1007, <10 x double> %1049, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %1051 = fmul <2 x double> %block477, %splat.splat857
  %1052 = fmul <2 x double> %block480, %splat.splat860
  %1053 = fadd <2 x double> %1051, %1052
  %1054 = fmul <2 x double> %block483, %splat.splat863
  %1055 = fadd <2 x double> %1053, %1054
  %1056 = fmul <2 x double> %block486, %splat.splat866
  %1057 = fadd <2 x double> %1055, %1056
  %1058 = fmul <2 x double> %block489, %splat.splat869
  %1059 = fadd <2 x double> %1057, %1058
  %1060 = fmul <2 x double> %block492, %splat.splat872
  %1061 = fadd <2 x double> %1059, %1060
  %1062 = fmul <2 x double> %block495, %splat.splat875
  %1063 = fadd <2 x double> %1061, %1062
  %1064 = fmul <2 x double> %block498, %splat.splat878
  %1065 = fadd <2 x double> %1063, %1064
  %1066 = fmul <2 x double> %block501, %splat.splat881
  %1067 = fadd <2 x double> %1065, %1066
  %1068 = fmul <2 x double> %block504, %splat.splat884
  %1069 = fadd <2 x double> %1067, %1068
  %1070 = fmul <2 x double> %block507, %splat.splat887
  %1071 = fadd <2 x double> %1069, %1070
  %1072 = fmul <2 x double> %block510, %splat.splat890
  %1073 = fadd <2 x double> %1071, %1072
  %1074 = fmul <2 x double> %block513, %splat.splat893
  %1075 = fadd <2 x double> %1073, %1074
  %1076 = fmul <2 x double> %block516, %splat.splat896
  %1077 = fadd <2 x double> %1075, %1076
  %1078 = fmul <2 x double> %block519, %splat.splat899
  %1079 = fadd <2 x double> %1077, %1078
  %1080 = fmul <2 x double> %block522, %splat.splat902
  %1081 = fadd <2 x double> %1079, %1080
  %1082 = fmul <2 x double> %block525, %splat.splat905
  %1083 = fadd <2 x double> %1081, %1082
  %1084 = fmul <2 x double> %block528, %splat.splat908
  %1085 = fadd <2 x double> %1083, %1084
  %1086 = fmul <2 x double> %block531, %splat.splat911
  %1087 = fadd <2 x double> %1085, %1086
  %1088 = fmul <2 x double> %block534, %splat.splat914
  %1089 = fadd <2 x double> %1087, %1088
  %1090 = fmul <2 x double> %block537, %splat.splat917
  %1091 = fadd <2 x double> %1089, %1090
  %1092 = shufflevector <2 x double> %1091, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1093 = shufflevector <10 x double> %1050, <10 x double> %1092, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat1172 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> zeroinitializer
  %1094 = fmul <2 x double> %block, %splat.splat1172
  %splat.splat1175 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %1095 = fmul <2 x double> %block228, %splat.splat1175
  %1096 = fadd <2 x double> %1094, %1095
  %splat.splat1178 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %1097 = fmul <2 x double> %block231, %splat.splat1178
  %1098 = fadd <2 x double> %1096, %1097
  %splat.splat1181 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %1099 = fmul <2 x double> %block234, %splat.splat1181
  %1100 = fadd <2 x double> %1098, %1099
  %splat.splat1184 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %1101 = fmul <2 x double> %block237, %splat.splat1184
  %1102 = fadd <2 x double> %1100, %1101
  %splat.splat1187 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %1103 = fmul <2 x double> %block240, %splat.splat1187
  %1104 = fadd <2 x double> %1102, %1103
  %splat.splat1190 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %1105 = fmul <2 x double> %block243, %splat.splat1190
  %1106 = fadd <2 x double> %1104, %1105
  %splat.splat1193 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %1107 = fmul <2 x double> %block246, %splat.splat1193
  %1108 = fadd <2 x double> %1106, %1107
  %splat.splat1196 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %1109 = fmul <2 x double> %block249, %splat.splat1196
  %1110 = fadd <2 x double> %1108, %1109
  %splat.splat1199 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %1111 = fmul <2 x double> %block252, %splat.splat1199
  %1112 = fadd <2 x double> %1110, %1111
  %splat.splat1202 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %1113 = fmul <2 x double> %block255, %splat.splat1202
  %1114 = fadd <2 x double> %1112, %1113
  %splat.splat1205 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %1115 = fmul <2 x double> %block258, %splat.splat1205
  %1116 = fadd <2 x double> %1114, %1115
  %splat.splat1208 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %1117 = fmul <2 x double> %block261, %splat.splat1208
  %1118 = fadd <2 x double> %1116, %1117
  %splat.splat1211 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %1119 = fmul <2 x double> %block264, %splat.splat1211
  %1120 = fadd <2 x double> %1118, %1119
  %splat.splat1214 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %1121 = fmul <2 x double> %block267, %splat.splat1214
  %1122 = fadd <2 x double> %1120, %1121
  %splat.splat1217 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %1123 = fmul <2 x double> %block270, %splat.splat1217
  %1124 = fadd <2 x double> %1122, %1123
  %splat.splat1220 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %1125 = fmul <2 x double> %block273, %splat.splat1220
  %1126 = fadd <2 x double> %1124, %1125
  %splat.splat1223 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %1127 = fmul <2 x double> %block276, %splat.splat1223
  %1128 = fadd <2 x double> %1126, %1127
  %splat.splat1226 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %1129 = fmul <2 x double> %block279, %splat.splat1226
  %1130 = fadd <2 x double> %1128, %1129
  %splat.splat1229 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %1131 = fmul <2 x double> %block282, %splat.splat1229
  %1132 = fadd <2 x double> %1130, %1131
  %splat.splat1232 = shufflevector <21 x double> %col.load189, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %1133 = fmul <2 x double> %block285, %splat.splat1232
  %1134 = fadd <2 x double> %1132, %1133
  %1135 = shufflevector <2 x double> %1134, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1136 = fmul <2 x double> %block288, %splat.splat1172
  %1137 = fmul <2 x double> %block291, %splat.splat1175
  %1138 = fadd <2 x double> %1136, %1137
  %1139 = fmul <2 x double> %block294, %splat.splat1178
  %1140 = fadd <2 x double> %1138, %1139
  %1141 = fmul <2 x double> %block297, %splat.splat1181
  %1142 = fadd <2 x double> %1140, %1141
  %1143 = fmul <2 x double> %block300, %splat.splat1184
  %1144 = fadd <2 x double> %1142, %1143
  %1145 = fmul <2 x double> %block303, %splat.splat1187
  %1146 = fadd <2 x double> %1144, %1145
  %1147 = fmul <2 x double> %block306, %splat.splat1190
  %1148 = fadd <2 x double> %1146, %1147
  %1149 = fmul <2 x double> %block309, %splat.splat1193
  %1150 = fadd <2 x double> %1148, %1149
  %1151 = fmul <2 x double> %block312, %splat.splat1196
  %1152 = fadd <2 x double> %1150, %1151
  %1153 = fmul <2 x double> %block315, %splat.splat1199
  %1154 = fadd <2 x double> %1152, %1153
  %1155 = fmul <2 x double> %block318, %splat.splat1202
  %1156 = fadd <2 x double> %1154, %1155
  %1157 = fmul <2 x double> %block321, %splat.splat1205
  %1158 = fadd <2 x double> %1156, %1157
  %1159 = fmul <2 x double> %block324, %splat.splat1208
  %1160 = fadd <2 x double> %1158, %1159
  %1161 = fmul <2 x double> %block327, %splat.splat1211
  %1162 = fadd <2 x double> %1160, %1161
  %1163 = fmul <2 x double> %block330, %splat.splat1214
  %1164 = fadd <2 x double> %1162, %1163
  %1165 = fmul <2 x double> %block333, %splat.splat1217
  %1166 = fadd <2 x double> %1164, %1165
  %1167 = fmul <2 x double> %block336, %splat.splat1220
  %1168 = fadd <2 x double> %1166, %1167
  %1169 = fmul <2 x double> %block339, %splat.splat1223
  %1170 = fadd <2 x double> %1168, %1169
  %1171 = fmul <2 x double> %block342, %splat.splat1226
  %1172 = fadd <2 x double> %1170, %1171
  %1173 = fmul <2 x double> %block345, %splat.splat1229
  %1174 = fadd <2 x double> %1172, %1173
  %1175 = fmul <2 x double> %block348, %splat.splat1232
  %1176 = fadd <2 x double> %1174, %1175
  %1177 = shufflevector <2 x double> %1176, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1178 = shufflevector <10 x double> %1135, <10 x double> %1177, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1179 = fmul <2 x double> %block351, %splat.splat1172
  %1180 = fmul <2 x double> %block354, %splat.splat1175
  %1181 = fadd <2 x double> %1179, %1180
  %1182 = fmul <2 x double> %block357, %splat.splat1178
  %1183 = fadd <2 x double> %1181, %1182
  %1184 = fmul <2 x double> %block360, %splat.splat1181
  %1185 = fadd <2 x double> %1183, %1184
  %1186 = fmul <2 x double> %block363, %splat.splat1184
  %1187 = fadd <2 x double> %1185, %1186
  %1188 = fmul <2 x double> %block366, %splat.splat1187
  %1189 = fadd <2 x double> %1187, %1188
  %1190 = fmul <2 x double> %block369, %splat.splat1190
  %1191 = fadd <2 x double> %1189, %1190
  %1192 = fmul <2 x double> %block372, %splat.splat1193
  %1193 = fadd <2 x double> %1191, %1192
  %1194 = fmul <2 x double> %block375, %splat.splat1196
  %1195 = fadd <2 x double> %1193, %1194
  %1196 = fmul <2 x double> %block378, %splat.splat1199
  %1197 = fadd <2 x double> %1195, %1196
  %1198 = fmul <2 x double> %block381, %splat.splat1202
  %1199 = fadd <2 x double> %1197, %1198
  %1200 = fmul <2 x double> %block384, %splat.splat1205
  %1201 = fadd <2 x double> %1199, %1200
  %1202 = fmul <2 x double> %block387, %splat.splat1208
  %1203 = fadd <2 x double> %1201, %1202
  %1204 = fmul <2 x double> %block390, %splat.splat1211
  %1205 = fadd <2 x double> %1203, %1204
  %1206 = fmul <2 x double> %block393, %splat.splat1214
  %1207 = fadd <2 x double> %1205, %1206
  %1208 = fmul <2 x double> %block396, %splat.splat1217
  %1209 = fadd <2 x double> %1207, %1208
  %1210 = fmul <2 x double> %block399, %splat.splat1220
  %1211 = fadd <2 x double> %1209, %1210
  %1212 = fmul <2 x double> %block402, %splat.splat1223
  %1213 = fadd <2 x double> %1211, %1212
  %1214 = fmul <2 x double> %block405, %splat.splat1226
  %1215 = fadd <2 x double> %1213, %1214
  %1216 = fmul <2 x double> %block408, %splat.splat1229
  %1217 = fadd <2 x double> %1215, %1216
  %1218 = fmul <2 x double> %block411, %splat.splat1232
  %1219 = fadd <2 x double> %1217, %1218
  %1220 = shufflevector <2 x double> %1219, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1221 = shufflevector <10 x double> %1178, <10 x double> %1220, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %1222 = fmul <2 x double> %block414, %splat.splat1172
  %1223 = fmul <2 x double> %block417, %splat.splat1175
  %1224 = fadd <2 x double> %1222, %1223
  %1225 = fmul <2 x double> %block420, %splat.splat1178
  %1226 = fadd <2 x double> %1224, %1225
  %1227 = fmul <2 x double> %block423, %splat.splat1181
  %1228 = fadd <2 x double> %1226, %1227
  %1229 = fmul <2 x double> %block426, %splat.splat1184
  %1230 = fadd <2 x double> %1228, %1229
  %1231 = fmul <2 x double> %block429, %splat.splat1187
  %1232 = fadd <2 x double> %1230, %1231
  %1233 = fmul <2 x double> %block432, %splat.splat1190
  %1234 = fadd <2 x double> %1232, %1233
  %1235 = fmul <2 x double> %block435, %splat.splat1193
  %1236 = fadd <2 x double> %1234, %1235
  %1237 = fmul <2 x double> %block438, %splat.splat1196
  %1238 = fadd <2 x double> %1236, %1237
  %1239 = fmul <2 x double> %block441, %splat.splat1199
  %1240 = fadd <2 x double> %1238, %1239
  %1241 = fmul <2 x double> %block444, %splat.splat1202
  %1242 = fadd <2 x double> %1240, %1241
  %1243 = fmul <2 x double> %block447, %splat.splat1205
  %1244 = fadd <2 x double> %1242, %1243
  %1245 = fmul <2 x double> %block450, %splat.splat1208
  %1246 = fadd <2 x double> %1244, %1245
  %1247 = fmul <2 x double> %block453, %splat.splat1211
  %1248 = fadd <2 x double> %1246, %1247
  %1249 = fmul <2 x double> %block456, %splat.splat1214
  %1250 = fadd <2 x double> %1248, %1249
  %1251 = fmul <2 x double> %block459, %splat.splat1217
  %1252 = fadd <2 x double> %1250, %1251
  %1253 = fmul <2 x double> %block462, %splat.splat1220
  %1254 = fadd <2 x double> %1252, %1253
  %1255 = fmul <2 x double> %block465, %splat.splat1223
  %1256 = fadd <2 x double> %1254, %1255
  %1257 = fmul <2 x double> %block468, %splat.splat1226
  %1258 = fadd <2 x double> %1256, %1257
  %1259 = fmul <2 x double> %block471, %splat.splat1229
  %1260 = fadd <2 x double> %1258, %1259
  %1261 = fmul <2 x double> %block474, %splat.splat1232
  %1262 = fadd <2 x double> %1260, %1261
  %1263 = shufflevector <2 x double> %1262, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1264 = shufflevector <10 x double> %1221, <10 x double> %1263, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %1265 = fmul <2 x double> %block477, %splat.splat1172
  %1266 = fmul <2 x double> %block480, %splat.splat1175
  %1267 = fadd <2 x double> %1265, %1266
  %1268 = fmul <2 x double> %block483, %splat.splat1178
  %1269 = fadd <2 x double> %1267, %1268
  %1270 = fmul <2 x double> %block486, %splat.splat1181
  %1271 = fadd <2 x double> %1269, %1270
  %1272 = fmul <2 x double> %block489, %splat.splat1184
  %1273 = fadd <2 x double> %1271, %1272
  %1274 = fmul <2 x double> %block492, %splat.splat1187
  %1275 = fadd <2 x double> %1273, %1274
  %1276 = fmul <2 x double> %block495, %splat.splat1190
  %1277 = fadd <2 x double> %1275, %1276
  %1278 = fmul <2 x double> %block498, %splat.splat1193
  %1279 = fadd <2 x double> %1277, %1278
  %1280 = fmul <2 x double> %block501, %splat.splat1196
  %1281 = fadd <2 x double> %1279, %1280
  %1282 = fmul <2 x double> %block504, %splat.splat1199
  %1283 = fadd <2 x double> %1281, %1282
  %1284 = fmul <2 x double> %block507, %splat.splat1202
  %1285 = fadd <2 x double> %1283, %1284
  %1286 = fmul <2 x double> %block510, %splat.splat1205
  %1287 = fadd <2 x double> %1285, %1286
  %1288 = fmul <2 x double> %block513, %splat.splat1208
  %1289 = fadd <2 x double> %1287, %1288
  %1290 = fmul <2 x double> %block516, %splat.splat1211
  %1291 = fadd <2 x double> %1289, %1290
  %1292 = fmul <2 x double> %block519, %splat.splat1214
  %1293 = fadd <2 x double> %1291, %1292
  %1294 = fmul <2 x double> %block522, %splat.splat1217
  %1295 = fadd <2 x double> %1293, %1294
  %1296 = fmul <2 x double> %block525, %splat.splat1220
  %1297 = fadd <2 x double> %1295, %1296
  %1298 = fmul <2 x double> %block528, %splat.splat1223
  %1299 = fadd <2 x double> %1297, %1298
  %1300 = fmul <2 x double> %block531, %splat.splat1226
  %1301 = fadd <2 x double> %1299, %1300
  %1302 = fmul <2 x double> %block534, %splat.splat1229
  %1303 = fadd <2 x double> %1301, %1302
  %1304 = fmul <2 x double> %block537, %splat.splat1232
  %1305 = fadd <2 x double> %1303, %1304
  %1306 = shufflevector <2 x double> %1305, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1307 = shufflevector <10 x double> %1264, <10 x double> %1306, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat1487 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> zeroinitializer
  %1308 = fmul <2 x double> %block, %splat.splat1487
  %splat.splat1490 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %1309 = fmul <2 x double> %block228, %splat.splat1490
  %1310 = fadd <2 x double> %1308, %1309
  %splat.splat1493 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %1311 = fmul <2 x double> %block231, %splat.splat1493
  %1312 = fadd <2 x double> %1310, %1311
  %splat.splat1496 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %1313 = fmul <2 x double> %block234, %splat.splat1496
  %1314 = fadd <2 x double> %1312, %1313
  %splat.splat1499 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %1315 = fmul <2 x double> %block237, %splat.splat1499
  %1316 = fadd <2 x double> %1314, %1315
  %splat.splat1502 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %1317 = fmul <2 x double> %block240, %splat.splat1502
  %1318 = fadd <2 x double> %1316, %1317
  %splat.splat1505 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %1319 = fmul <2 x double> %block243, %splat.splat1505
  %1320 = fadd <2 x double> %1318, %1319
  %splat.splat1508 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %1321 = fmul <2 x double> %block246, %splat.splat1508
  %1322 = fadd <2 x double> %1320, %1321
  %splat.splat1511 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %1323 = fmul <2 x double> %block249, %splat.splat1511
  %1324 = fadd <2 x double> %1322, %1323
  %splat.splat1514 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %1325 = fmul <2 x double> %block252, %splat.splat1514
  %1326 = fadd <2 x double> %1324, %1325
  %splat.splat1517 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %1327 = fmul <2 x double> %block255, %splat.splat1517
  %1328 = fadd <2 x double> %1326, %1327
  %splat.splat1520 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %1329 = fmul <2 x double> %block258, %splat.splat1520
  %1330 = fadd <2 x double> %1328, %1329
  %splat.splat1523 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %1331 = fmul <2 x double> %block261, %splat.splat1523
  %1332 = fadd <2 x double> %1330, %1331
  %splat.splat1526 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %1333 = fmul <2 x double> %block264, %splat.splat1526
  %1334 = fadd <2 x double> %1332, %1333
  %splat.splat1529 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %1335 = fmul <2 x double> %block267, %splat.splat1529
  %1336 = fadd <2 x double> %1334, %1335
  %splat.splat1532 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %1337 = fmul <2 x double> %block270, %splat.splat1532
  %1338 = fadd <2 x double> %1336, %1337
  %splat.splat1535 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %1339 = fmul <2 x double> %block273, %splat.splat1535
  %1340 = fadd <2 x double> %1338, %1339
  %splat.splat1538 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %1341 = fmul <2 x double> %block276, %splat.splat1538
  %1342 = fadd <2 x double> %1340, %1341
  %splat.splat1541 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %1343 = fmul <2 x double> %block279, %splat.splat1541
  %1344 = fadd <2 x double> %1342, %1343
  %splat.splat1544 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %1345 = fmul <2 x double> %block282, %splat.splat1544
  %1346 = fadd <2 x double> %1344, %1345
  %splat.splat1547 = shufflevector <21 x double> %col.load191, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %1347 = fmul <2 x double> %block285, %splat.splat1547
  %1348 = fadd <2 x double> %1346, %1347
  %1349 = shufflevector <2 x double> %1348, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1350 = fmul <2 x double> %block288, %splat.splat1487
  %1351 = fmul <2 x double> %block291, %splat.splat1490
  %1352 = fadd <2 x double> %1350, %1351
  %1353 = fmul <2 x double> %block294, %splat.splat1493
  %1354 = fadd <2 x double> %1352, %1353
  %1355 = fmul <2 x double> %block297, %splat.splat1496
  %1356 = fadd <2 x double> %1354, %1355
  %1357 = fmul <2 x double> %block300, %splat.splat1499
  %1358 = fadd <2 x double> %1356, %1357
  %1359 = fmul <2 x double> %block303, %splat.splat1502
  %1360 = fadd <2 x double> %1358, %1359
  %1361 = fmul <2 x double> %block306, %splat.splat1505
  %1362 = fadd <2 x double> %1360, %1361
  %1363 = fmul <2 x double> %block309, %splat.splat1508
  %1364 = fadd <2 x double> %1362, %1363
  %1365 = fmul <2 x double> %block312, %splat.splat1511
  %1366 = fadd <2 x double> %1364, %1365
  %1367 = fmul <2 x double> %block315, %splat.splat1514
  %1368 = fadd <2 x double> %1366, %1367
  %1369 = fmul <2 x double> %block318, %splat.splat1517
  %1370 = fadd <2 x double> %1368, %1369
  %1371 = fmul <2 x double> %block321, %splat.splat1520
  %1372 = fadd <2 x double> %1370, %1371
  %1373 = fmul <2 x double> %block324, %splat.splat1523
  %1374 = fadd <2 x double> %1372, %1373
  %1375 = fmul <2 x double> %block327, %splat.splat1526
  %1376 = fadd <2 x double> %1374, %1375
  %1377 = fmul <2 x double> %block330, %splat.splat1529
  %1378 = fadd <2 x double> %1376, %1377
  %1379 = fmul <2 x double> %block333, %splat.splat1532
  %1380 = fadd <2 x double> %1378, %1379
  %1381 = fmul <2 x double> %block336, %splat.splat1535
  %1382 = fadd <2 x double> %1380, %1381
  %1383 = fmul <2 x double> %block339, %splat.splat1538
  %1384 = fadd <2 x double> %1382, %1383
  %1385 = fmul <2 x double> %block342, %splat.splat1541
  %1386 = fadd <2 x double> %1384, %1385
  %1387 = fmul <2 x double> %block345, %splat.splat1544
  %1388 = fadd <2 x double> %1386, %1387
  %1389 = fmul <2 x double> %block348, %splat.splat1547
  %1390 = fadd <2 x double> %1388, %1389
  %1391 = shufflevector <2 x double> %1390, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1392 = shufflevector <10 x double> %1349, <10 x double> %1391, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1393 = fmul <2 x double> %block351, %splat.splat1487
  %1394 = fmul <2 x double> %block354, %splat.splat1490
  %1395 = fadd <2 x double> %1393, %1394
  %1396 = fmul <2 x double> %block357, %splat.splat1493
  %1397 = fadd <2 x double> %1395, %1396
  %1398 = fmul <2 x double> %block360, %splat.splat1496
  %1399 = fadd <2 x double> %1397, %1398
  %1400 = fmul <2 x double> %block363, %splat.splat1499
  %1401 = fadd <2 x double> %1399, %1400
  %1402 = fmul <2 x double> %block366, %splat.splat1502
  %1403 = fadd <2 x double> %1401, %1402
  %1404 = fmul <2 x double> %block369, %splat.splat1505
  %1405 = fadd <2 x double> %1403, %1404
  %1406 = fmul <2 x double> %block372, %splat.splat1508
  %1407 = fadd <2 x double> %1405, %1406
  %1408 = fmul <2 x double> %block375, %splat.splat1511
  %1409 = fadd <2 x double> %1407, %1408
  %1410 = fmul <2 x double> %block378, %splat.splat1514
  %1411 = fadd <2 x double> %1409, %1410
  %1412 = fmul <2 x double> %block381, %splat.splat1517
  %1413 = fadd <2 x double> %1411, %1412
  %1414 = fmul <2 x double> %block384, %splat.splat1520
  %1415 = fadd <2 x double> %1413, %1414
  %1416 = fmul <2 x double> %block387, %splat.splat1523
  %1417 = fadd <2 x double> %1415, %1416
  %1418 = fmul <2 x double> %block390, %splat.splat1526
  %1419 = fadd <2 x double> %1417, %1418
  %1420 = fmul <2 x double> %block393, %splat.splat1529
  %1421 = fadd <2 x double> %1419, %1420
  %1422 = fmul <2 x double> %block396, %splat.splat1532
  %1423 = fadd <2 x double> %1421, %1422
  %1424 = fmul <2 x double> %block399, %splat.splat1535
  %1425 = fadd <2 x double> %1423, %1424
  %1426 = fmul <2 x double> %block402, %splat.splat1538
  %1427 = fadd <2 x double> %1425, %1426
  %1428 = fmul <2 x double> %block405, %splat.splat1541
  %1429 = fadd <2 x double> %1427, %1428
  %1430 = fmul <2 x double> %block408, %splat.splat1544
  %1431 = fadd <2 x double> %1429, %1430
  %1432 = fmul <2 x double> %block411, %splat.splat1547
  %1433 = fadd <2 x double> %1431, %1432
  %1434 = shufflevector <2 x double> %1433, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1435 = shufflevector <10 x double> %1392, <10 x double> %1434, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %1436 = fmul <2 x double> %block414, %splat.splat1487
  %1437 = fmul <2 x double> %block417, %splat.splat1490
  %1438 = fadd <2 x double> %1436, %1437
  %1439 = fmul <2 x double> %block420, %splat.splat1493
  %1440 = fadd <2 x double> %1438, %1439
  %1441 = fmul <2 x double> %block423, %splat.splat1496
  %1442 = fadd <2 x double> %1440, %1441
  %1443 = fmul <2 x double> %block426, %splat.splat1499
  %1444 = fadd <2 x double> %1442, %1443
  %1445 = fmul <2 x double> %block429, %splat.splat1502
  %1446 = fadd <2 x double> %1444, %1445
  %1447 = fmul <2 x double> %block432, %splat.splat1505
  %1448 = fadd <2 x double> %1446, %1447
  %1449 = fmul <2 x double> %block435, %splat.splat1508
  %1450 = fadd <2 x double> %1448, %1449
  %1451 = fmul <2 x double> %block438, %splat.splat1511
  %1452 = fadd <2 x double> %1450, %1451
  %1453 = fmul <2 x double> %block441, %splat.splat1514
  %1454 = fadd <2 x double> %1452, %1453
  %1455 = fmul <2 x double> %block444, %splat.splat1517
  %1456 = fadd <2 x double> %1454, %1455
  %1457 = fmul <2 x double> %block447, %splat.splat1520
  %1458 = fadd <2 x double> %1456, %1457
  %1459 = fmul <2 x double> %block450, %splat.splat1523
  %1460 = fadd <2 x double> %1458, %1459
  %1461 = fmul <2 x double> %block453, %splat.splat1526
  %1462 = fadd <2 x double> %1460, %1461
  %1463 = fmul <2 x double> %block456, %splat.splat1529
  %1464 = fadd <2 x double> %1462, %1463
  %1465 = fmul <2 x double> %block459, %splat.splat1532
  %1466 = fadd <2 x double> %1464, %1465
  %1467 = fmul <2 x double> %block462, %splat.splat1535
  %1468 = fadd <2 x double> %1466, %1467
  %1469 = fmul <2 x double> %block465, %splat.splat1538
  %1470 = fadd <2 x double> %1468, %1469
  %1471 = fmul <2 x double> %block468, %splat.splat1541
  %1472 = fadd <2 x double> %1470, %1471
  %1473 = fmul <2 x double> %block471, %splat.splat1544
  %1474 = fadd <2 x double> %1472, %1473
  %1475 = fmul <2 x double> %block474, %splat.splat1547
  %1476 = fadd <2 x double> %1474, %1475
  %1477 = shufflevector <2 x double> %1476, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1478 = shufflevector <10 x double> %1435, <10 x double> %1477, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %1479 = fmul <2 x double> %block477, %splat.splat1487
  %1480 = fmul <2 x double> %block480, %splat.splat1490
  %1481 = fadd <2 x double> %1479, %1480
  %1482 = fmul <2 x double> %block483, %splat.splat1493
  %1483 = fadd <2 x double> %1481, %1482
  %1484 = fmul <2 x double> %block486, %splat.splat1496
  %1485 = fadd <2 x double> %1483, %1484
  %1486 = fmul <2 x double> %block489, %splat.splat1499
  %1487 = fadd <2 x double> %1485, %1486
  %1488 = fmul <2 x double> %block492, %splat.splat1502
  %1489 = fadd <2 x double> %1487, %1488
  %1490 = fmul <2 x double> %block495, %splat.splat1505
  %1491 = fadd <2 x double> %1489, %1490
  %1492 = fmul <2 x double> %block498, %splat.splat1508
  %1493 = fadd <2 x double> %1491, %1492
  %1494 = fmul <2 x double> %block501, %splat.splat1511
  %1495 = fadd <2 x double> %1493, %1494
  %1496 = fmul <2 x double> %block504, %splat.splat1514
  %1497 = fadd <2 x double> %1495, %1496
  %1498 = fmul <2 x double> %block507, %splat.splat1517
  %1499 = fadd <2 x double> %1497, %1498
  %1500 = fmul <2 x double> %block510, %splat.splat1520
  %1501 = fadd <2 x double> %1499, %1500
  %1502 = fmul <2 x double> %block513, %splat.splat1523
  %1503 = fadd <2 x double> %1501, %1502
  %1504 = fmul <2 x double> %block516, %splat.splat1526
  %1505 = fadd <2 x double> %1503, %1504
  %1506 = fmul <2 x double> %block519, %splat.splat1529
  %1507 = fadd <2 x double> %1505, %1506
  %1508 = fmul <2 x double> %block522, %splat.splat1532
  %1509 = fadd <2 x double> %1507, %1508
  %1510 = fmul <2 x double> %block525, %splat.splat1535
  %1511 = fadd <2 x double> %1509, %1510
  %1512 = fmul <2 x double> %block528, %splat.splat1538
  %1513 = fadd <2 x double> %1511, %1512
  %1514 = fmul <2 x double> %block531, %splat.splat1541
  %1515 = fadd <2 x double> %1513, %1514
  %1516 = fmul <2 x double> %block534, %splat.splat1544
  %1517 = fadd <2 x double> %1515, %1516
  %1518 = fmul <2 x double> %block537, %splat.splat1547
  %1519 = fadd <2 x double> %1517, %1518
  %1520 = shufflevector <2 x double> %1519, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1521 = shufflevector <10 x double> %1478, <10 x double> %1520, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat1802 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> zeroinitializer
  %1522 = fmul <2 x double> %block, %splat.splat1802
  %splat.splat1805 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %1523 = fmul <2 x double> %block228, %splat.splat1805
  %1524 = fadd <2 x double> %1522, %1523
  %splat.splat1808 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %1525 = fmul <2 x double> %block231, %splat.splat1808
  %1526 = fadd <2 x double> %1524, %1525
  %splat.splat1811 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %1527 = fmul <2 x double> %block234, %splat.splat1811
  %1528 = fadd <2 x double> %1526, %1527
  %splat.splat1814 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %1529 = fmul <2 x double> %block237, %splat.splat1814
  %1530 = fadd <2 x double> %1528, %1529
  %splat.splat1817 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %1531 = fmul <2 x double> %block240, %splat.splat1817
  %1532 = fadd <2 x double> %1530, %1531
  %splat.splat1820 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %1533 = fmul <2 x double> %block243, %splat.splat1820
  %1534 = fadd <2 x double> %1532, %1533
  %splat.splat1823 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %1535 = fmul <2 x double> %block246, %splat.splat1823
  %1536 = fadd <2 x double> %1534, %1535
  %splat.splat1826 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %1537 = fmul <2 x double> %block249, %splat.splat1826
  %1538 = fadd <2 x double> %1536, %1537
  %splat.splat1829 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %1539 = fmul <2 x double> %block252, %splat.splat1829
  %1540 = fadd <2 x double> %1538, %1539
  %splat.splat1832 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %1541 = fmul <2 x double> %block255, %splat.splat1832
  %1542 = fadd <2 x double> %1540, %1541
  %splat.splat1835 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %1543 = fmul <2 x double> %block258, %splat.splat1835
  %1544 = fadd <2 x double> %1542, %1543
  %splat.splat1838 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %1545 = fmul <2 x double> %block261, %splat.splat1838
  %1546 = fadd <2 x double> %1544, %1545
  %splat.splat1841 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %1547 = fmul <2 x double> %block264, %splat.splat1841
  %1548 = fadd <2 x double> %1546, %1547
  %splat.splat1844 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %1549 = fmul <2 x double> %block267, %splat.splat1844
  %1550 = fadd <2 x double> %1548, %1549
  %splat.splat1847 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %1551 = fmul <2 x double> %block270, %splat.splat1847
  %1552 = fadd <2 x double> %1550, %1551
  %splat.splat1850 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %1553 = fmul <2 x double> %block273, %splat.splat1850
  %1554 = fadd <2 x double> %1552, %1553
  %splat.splat1853 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %1555 = fmul <2 x double> %block276, %splat.splat1853
  %1556 = fadd <2 x double> %1554, %1555
  %splat.splat1856 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %1557 = fmul <2 x double> %block279, %splat.splat1856
  %1558 = fadd <2 x double> %1556, %1557
  %splat.splat1859 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %1559 = fmul <2 x double> %block282, %splat.splat1859
  %1560 = fadd <2 x double> %1558, %1559
  %splat.splat1862 = shufflevector <21 x double> %col.load193, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %1561 = fmul <2 x double> %block285, %splat.splat1862
  %1562 = fadd <2 x double> %1560, %1561
  %1563 = shufflevector <2 x double> %1562, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1564 = fmul <2 x double> %block288, %splat.splat1802
  %1565 = fmul <2 x double> %block291, %splat.splat1805
  %1566 = fadd <2 x double> %1564, %1565
  %1567 = fmul <2 x double> %block294, %splat.splat1808
  %1568 = fadd <2 x double> %1566, %1567
  %1569 = fmul <2 x double> %block297, %splat.splat1811
  %1570 = fadd <2 x double> %1568, %1569
  %1571 = fmul <2 x double> %block300, %splat.splat1814
  %1572 = fadd <2 x double> %1570, %1571
  %1573 = fmul <2 x double> %block303, %splat.splat1817
  %1574 = fadd <2 x double> %1572, %1573
  %1575 = fmul <2 x double> %block306, %splat.splat1820
  %1576 = fadd <2 x double> %1574, %1575
  %1577 = fmul <2 x double> %block309, %splat.splat1823
  %1578 = fadd <2 x double> %1576, %1577
  %1579 = fmul <2 x double> %block312, %splat.splat1826
  %1580 = fadd <2 x double> %1578, %1579
  %1581 = fmul <2 x double> %block315, %splat.splat1829
  %1582 = fadd <2 x double> %1580, %1581
  %1583 = fmul <2 x double> %block318, %splat.splat1832
  %1584 = fadd <2 x double> %1582, %1583
  %1585 = fmul <2 x double> %block321, %splat.splat1835
  %1586 = fadd <2 x double> %1584, %1585
  %1587 = fmul <2 x double> %block324, %splat.splat1838
  %1588 = fadd <2 x double> %1586, %1587
  %1589 = fmul <2 x double> %block327, %splat.splat1841
  %1590 = fadd <2 x double> %1588, %1589
  %1591 = fmul <2 x double> %block330, %splat.splat1844
  %1592 = fadd <2 x double> %1590, %1591
  %1593 = fmul <2 x double> %block333, %splat.splat1847
  %1594 = fadd <2 x double> %1592, %1593
  %1595 = fmul <2 x double> %block336, %splat.splat1850
  %1596 = fadd <2 x double> %1594, %1595
  %1597 = fmul <2 x double> %block339, %splat.splat1853
  %1598 = fadd <2 x double> %1596, %1597
  %1599 = fmul <2 x double> %block342, %splat.splat1856
  %1600 = fadd <2 x double> %1598, %1599
  %1601 = fmul <2 x double> %block345, %splat.splat1859
  %1602 = fadd <2 x double> %1600, %1601
  %1603 = fmul <2 x double> %block348, %splat.splat1862
  %1604 = fadd <2 x double> %1602, %1603
  %1605 = shufflevector <2 x double> %1604, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1606 = shufflevector <10 x double> %1563, <10 x double> %1605, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1607 = fmul <2 x double> %block351, %splat.splat1802
  %1608 = fmul <2 x double> %block354, %splat.splat1805
  %1609 = fadd <2 x double> %1607, %1608
  %1610 = fmul <2 x double> %block357, %splat.splat1808
  %1611 = fadd <2 x double> %1609, %1610
  %1612 = fmul <2 x double> %block360, %splat.splat1811
  %1613 = fadd <2 x double> %1611, %1612
  %1614 = fmul <2 x double> %block363, %splat.splat1814
  %1615 = fadd <2 x double> %1613, %1614
  %1616 = fmul <2 x double> %block366, %splat.splat1817
  %1617 = fadd <2 x double> %1615, %1616
  %1618 = fmul <2 x double> %block369, %splat.splat1820
  %1619 = fadd <2 x double> %1617, %1618
  %1620 = fmul <2 x double> %block372, %splat.splat1823
  %1621 = fadd <2 x double> %1619, %1620
  %1622 = fmul <2 x double> %block375, %splat.splat1826
  %1623 = fadd <2 x double> %1621, %1622
  %1624 = fmul <2 x double> %block378, %splat.splat1829
  %1625 = fadd <2 x double> %1623, %1624
  %1626 = fmul <2 x double> %block381, %splat.splat1832
  %1627 = fadd <2 x double> %1625, %1626
  %1628 = fmul <2 x double> %block384, %splat.splat1835
  %1629 = fadd <2 x double> %1627, %1628
  %1630 = fmul <2 x double> %block387, %splat.splat1838
  %1631 = fadd <2 x double> %1629, %1630
  %1632 = fmul <2 x double> %block390, %splat.splat1841
  %1633 = fadd <2 x double> %1631, %1632
  %1634 = fmul <2 x double> %block393, %splat.splat1844
  %1635 = fadd <2 x double> %1633, %1634
  %1636 = fmul <2 x double> %block396, %splat.splat1847
  %1637 = fadd <2 x double> %1635, %1636
  %1638 = fmul <2 x double> %block399, %splat.splat1850
  %1639 = fadd <2 x double> %1637, %1638
  %1640 = fmul <2 x double> %block402, %splat.splat1853
  %1641 = fadd <2 x double> %1639, %1640
  %1642 = fmul <2 x double> %block405, %splat.splat1856
  %1643 = fadd <2 x double> %1641, %1642
  %1644 = fmul <2 x double> %block408, %splat.splat1859
  %1645 = fadd <2 x double> %1643, %1644
  %1646 = fmul <2 x double> %block411, %splat.splat1862
  %1647 = fadd <2 x double> %1645, %1646
  %1648 = shufflevector <2 x double> %1647, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1649 = shufflevector <10 x double> %1606, <10 x double> %1648, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %1650 = fmul <2 x double> %block414, %splat.splat1802
  %1651 = fmul <2 x double> %block417, %splat.splat1805
  %1652 = fadd <2 x double> %1650, %1651
  %1653 = fmul <2 x double> %block420, %splat.splat1808
  %1654 = fadd <2 x double> %1652, %1653
  %1655 = fmul <2 x double> %block423, %splat.splat1811
  %1656 = fadd <2 x double> %1654, %1655
  %1657 = fmul <2 x double> %block426, %splat.splat1814
  %1658 = fadd <2 x double> %1656, %1657
  %1659 = fmul <2 x double> %block429, %splat.splat1817
  %1660 = fadd <2 x double> %1658, %1659
  %1661 = fmul <2 x double> %block432, %splat.splat1820
  %1662 = fadd <2 x double> %1660, %1661
  %1663 = fmul <2 x double> %block435, %splat.splat1823
  %1664 = fadd <2 x double> %1662, %1663
  %1665 = fmul <2 x double> %block438, %splat.splat1826
  %1666 = fadd <2 x double> %1664, %1665
  %1667 = fmul <2 x double> %block441, %splat.splat1829
  %1668 = fadd <2 x double> %1666, %1667
  %1669 = fmul <2 x double> %block444, %splat.splat1832
  %1670 = fadd <2 x double> %1668, %1669
  %1671 = fmul <2 x double> %block447, %splat.splat1835
  %1672 = fadd <2 x double> %1670, %1671
  %1673 = fmul <2 x double> %block450, %splat.splat1838
  %1674 = fadd <2 x double> %1672, %1673
  %1675 = fmul <2 x double> %block453, %splat.splat1841
  %1676 = fadd <2 x double> %1674, %1675
  %1677 = fmul <2 x double> %block456, %splat.splat1844
  %1678 = fadd <2 x double> %1676, %1677
  %1679 = fmul <2 x double> %block459, %splat.splat1847
  %1680 = fadd <2 x double> %1678, %1679
  %1681 = fmul <2 x double> %block462, %splat.splat1850
  %1682 = fadd <2 x double> %1680, %1681
  %1683 = fmul <2 x double> %block465, %splat.splat1853
  %1684 = fadd <2 x double> %1682, %1683
  %1685 = fmul <2 x double> %block468, %splat.splat1856
  %1686 = fadd <2 x double> %1684, %1685
  %1687 = fmul <2 x double> %block471, %splat.splat1859
  %1688 = fadd <2 x double> %1686, %1687
  %1689 = fmul <2 x double> %block474, %splat.splat1862
  %1690 = fadd <2 x double> %1688, %1689
  %1691 = shufflevector <2 x double> %1690, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1692 = shufflevector <10 x double> %1649, <10 x double> %1691, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %1693 = fmul <2 x double> %block477, %splat.splat1802
  %1694 = fmul <2 x double> %block480, %splat.splat1805
  %1695 = fadd <2 x double> %1693, %1694
  %1696 = fmul <2 x double> %block483, %splat.splat1808
  %1697 = fadd <2 x double> %1695, %1696
  %1698 = fmul <2 x double> %block486, %splat.splat1811
  %1699 = fadd <2 x double> %1697, %1698
  %1700 = fmul <2 x double> %block489, %splat.splat1814
  %1701 = fadd <2 x double> %1699, %1700
  %1702 = fmul <2 x double> %block492, %splat.splat1817
  %1703 = fadd <2 x double> %1701, %1702
  %1704 = fmul <2 x double> %block495, %splat.splat1820
  %1705 = fadd <2 x double> %1703, %1704
  %1706 = fmul <2 x double> %block498, %splat.splat1823
  %1707 = fadd <2 x double> %1705, %1706
  %1708 = fmul <2 x double> %block501, %splat.splat1826
  %1709 = fadd <2 x double> %1707, %1708
  %1710 = fmul <2 x double> %block504, %splat.splat1829
  %1711 = fadd <2 x double> %1709, %1710
  %1712 = fmul <2 x double> %block507, %splat.splat1832
  %1713 = fadd <2 x double> %1711, %1712
  %1714 = fmul <2 x double> %block510, %splat.splat1835
  %1715 = fadd <2 x double> %1713, %1714
  %1716 = fmul <2 x double> %block513, %splat.splat1838
  %1717 = fadd <2 x double> %1715, %1716
  %1718 = fmul <2 x double> %block516, %splat.splat1841
  %1719 = fadd <2 x double> %1717, %1718
  %1720 = fmul <2 x double> %block519, %splat.splat1844
  %1721 = fadd <2 x double> %1719, %1720
  %1722 = fmul <2 x double> %block522, %splat.splat1847
  %1723 = fadd <2 x double> %1721, %1722
  %1724 = fmul <2 x double> %block525, %splat.splat1850
  %1725 = fadd <2 x double> %1723, %1724
  %1726 = fmul <2 x double> %block528, %splat.splat1853
  %1727 = fadd <2 x double> %1725, %1726
  %1728 = fmul <2 x double> %block531, %splat.splat1856
  %1729 = fadd <2 x double> %1727, %1728
  %1730 = fmul <2 x double> %block534, %splat.splat1859
  %1731 = fadd <2 x double> %1729, %1730
  %1732 = fmul <2 x double> %block537, %splat.splat1862
  %1733 = fadd <2 x double> %1731, %1732
  %1734 = shufflevector <2 x double> %1733, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1735 = shufflevector <10 x double> %1692, <10 x double> %1734, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat2117 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> zeroinitializer
  %1736 = fmul <2 x double> %block, %splat.splat2117
  %splat.splat2120 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %1737 = fmul <2 x double> %block228, %splat.splat2120
  %1738 = fadd <2 x double> %1736, %1737
  %splat.splat2123 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %1739 = fmul <2 x double> %block231, %splat.splat2123
  %1740 = fadd <2 x double> %1738, %1739
  %splat.splat2126 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %1741 = fmul <2 x double> %block234, %splat.splat2126
  %1742 = fadd <2 x double> %1740, %1741
  %splat.splat2129 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %1743 = fmul <2 x double> %block237, %splat.splat2129
  %1744 = fadd <2 x double> %1742, %1743
  %splat.splat2132 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %1745 = fmul <2 x double> %block240, %splat.splat2132
  %1746 = fadd <2 x double> %1744, %1745
  %splat.splat2135 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %1747 = fmul <2 x double> %block243, %splat.splat2135
  %1748 = fadd <2 x double> %1746, %1747
  %splat.splat2138 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %1749 = fmul <2 x double> %block246, %splat.splat2138
  %1750 = fadd <2 x double> %1748, %1749
  %splat.splat2141 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %1751 = fmul <2 x double> %block249, %splat.splat2141
  %1752 = fadd <2 x double> %1750, %1751
  %splat.splat2144 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %1753 = fmul <2 x double> %block252, %splat.splat2144
  %1754 = fadd <2 x double> %1752, %1753
  %splat.splat2147 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %1755 = fmul <2 x double> %block255, %splat.splat2147
  %1756 = fadd <2 x double> %1754, %1755
  %splat.splat2150 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %1757 = fmul <2 x double> %block258, %splat.splat2150
  %1758 = fadd <2 x double> %1756, %1757
  %splat.splat2153 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %1759 = fmul <2 x double> %block261, %splat.splat2153
  %1760 = fadd <2 x double> %1758, %1759
  %splat.splat2156 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %1761 = fmul <2 x double> %block264, %splat.splat2156
  %1762 = fadd <2 x double> %1760, %1761
  %splat.splat2159 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %1763 = fmul <2 x double> %block267, %splat.splat2159
  %1764 = fadd <2 x double> %1762, %1763
  %splat.splat2162 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %1765 = fmul <2 x double> %block270, %splat.splat2162
  %1766 = fadd <2 x double> %1764, %1765
  %splat.splat2165 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %1767 = fmul <2 x double> %block273, %splat.splat2165
  %1768 = fadd <2 x double> %1766, %1767
  %splat.splat2168 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %1769 = fmul <2 x double> %block276, %splat.splat2168
  %1770 = fadd <2 x double> %1768, %1769
  %splat.splat2171 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %1771 = fmul <2 x double> %block279, %splat.splat2171
  %1772 = fadd <2 x double> %1770, %1771
  %splat.splat2174 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %1773 = fmul <2 x double> %block282, %splat.splat2174
  %1774 = fadd <2 x double> %1772, %1773
  %splat.splat2177 = shufflevector <21 x double> %col.load195, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %1775 = fmul <2 x double> %block285, %splat.splat2177
  %1776 = fadd <2 x double> %1774, %1775
  %1777 = shufflevector <2 x double> %1776, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1778 = fmul <2 x double> %block288, %splat.splat2117
  %1779 = fmul <2 x double> %block291, %splat.splat2120
  %1780 = fadd <2 x double> %1778, %1779
  %1781 = fmul <2 x double> %block294, %splat.splat2123
  %1782 = fadd <2 x double> %1780, %1781
  %1783 = fmul <2 x double> %block297, %splat.splat2126
  %1784 = fadd <2 x double> %1782, %1783
  %1785 = fmul <2 x double> %block300, %splat.splat2129
  %1786 = fadd <2 x double> %1784, %1785
  %1787 = fmul <2 x double> %block303, %splat.splat2132
  %1788 = fadd <2 x double> %1786, %1787
  %1789 = fmul <2 x double> %block306, %splat.splat2135
  %1790 = fadd <2 x double> %1788, %1789
  %1791 = fmul <2 x double> %block309, %splat.splat2138
  %1792 = fadd <2 x double> %1790, %1791
  %1793 = fmul <2 x double> %block312, %splat.splat2141
  %1794 = fadd <2 x double> %1792, %1793
  %1795 = fmul <2 x double> %block315, %splat.splat2144
  %1796 = fadd <2 x double> %1794, %1795
  %1797 = fmul <2 x double> %block318, %splat.splat2147
  %1798 = fadd <2 x double> %1796, %1797
  %1799 = fmul <2 x double> %block321, %splat.splat2150
  %1800 = fadd <2 x double> %1798, %1799
  %1801 = fmul <2 x double> %block324, %splat.splat2153
  %1802 = fadd <2 x double> %1800, %1801
  %1803 = fmul <2 x double> %block327, %splat.splat2156
  %1804 = fadd <2 x double> %1802, %1803
  %1805 = fmul <2 x double> %block330, %splat.splat2159
  %1806 = fadd <2 x double> %1804, %1805
  %1807 = fmul <2 x double> %block333, %splat.splat2162
  %1808 = fadd <2 x double> %1806, %1807
  %1809 = fmul <2 x double> %block336, %splat.splat2165
  %1810 = fadd <2 x double> %1808, %1809
  %1811 = fmul <2 x double> %block339, %splat.splat2168
  %1812 = fadd <2 x double> %1810, %1811
  %1813 = fmul <2 x double> %block342, %splat.splat2171
  %1814 = fadd <2 x double> %1812, %1813
  %1815 = fmul <2 x double> %block345, %splat.splat2174
  %1816 = fadd <2 x double> %1814, %1815
  %1817 = fmul <2 x double> %block348, %splat.splat2177
  %1818 = fadd <2 x double> %1816, %1817
  %1819 = shufflevector <2 x double> %1818, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1820 = shufflevector <10 x double> %1777, <10 x double> %1819, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1821 = fmul <2 x double> %block351, %splat.splat2117
  %1822 = fmul <2 x double> %block354, %splat.splat2120
  %1823 = fadd <2 x double> %1821, %1822
  %1824 = fmul <2 x double> %block357, %splat.splat2123
  %1825 = fadd <2 x double> %1823, %1824
  %1826 = fmul <2 x double> %block360, %splat.splat2126
  %1827 = fadd <2 x double> %1825, %1826
  %1828 = fmul <2 x double> %block363, %splat.splat2129
  %1829 = fadd <2 x double> %1827, %1828
  %1830 = fmul <2 x double> %block366, %splat.splat2132
  %1831 = fadd <2 x double> %1829, %1830
  %1832 = fmul <2 x double> %block369, %splat.splat2135
  %1833 = fadd <2 x double> %1831, %1832
  %1834 = fmul <2 x double> %block372, %splat.splat2138
  %1835 = fadd <2 x double> %1833, %1834
  %1836 = fmul <2 x double> %block375, %splat.splat2141
  %1837 = fadd <2 x double> %1835, %1836
  %1838 = fmul <2 x double> %block378, %splat.splat2144
  %1839 = fadd <2 x double> %1837, %1838
  %1840 = fmul <2 x double> %block381, %splat.splat2147
  %1841 = fadd <2 x double> %1839, %1840
  %1842 = fmul <2 x double> %block384, %splat.splat2150
  %1843 = fadd <2 x double> %1841, %1842
  %1844 = fmul <2 x double> %block387, %splat.splat2153
  %1845 = fadd <2 x double> %1843, %1844
  %1846 = fmul <2 x double> %block390, %splat.splat2156
  %1847 = fadd <2 x double> %1845, %1846
  %1848 = fmul <2 x double> %block393, %splat.splat2159
  %1849 = fadd <2 x double> %1847, %1848
  %1850 = fmul <2 x double> %block396, %splat.splat2162
  %1851 = fadd <2 x double> %1849, %1850
  %1852 = fmul <2 x double> %block399, %splat.splat2165
  %1853 = fadd <2 x double> %1851, %1852
  %1854 = fmul <2 x double> %block402, %splat.splat2168
  %1855 = fadd <2 x double> %1853, %1854
  %1856 = fmul <2 x double> %block405, %splat.splat2171
  %1857 = fadd <2 x double> %1855, %1856
  %1858 = fmul <2 x double> %block408, %splat.splat2174
  %1859 = fadd <2 x double> %1857, %1858
  %1860 = fmul <2 x double> %block411, %splat.splat2177
  %1861 = fadd <2 x double> %1859, %1860
  %1862 = shufflevector <2 x double> %1861, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1863 = shufflevector <10 x double> %1820, <10 x double> %1862, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %1864 = fmul <2 x double> %block414, %splat.splat2117
  %1865 = fmul <2 x double> %block417, %splat.splat2120
  %1866 = fadd <2 x double> %1864, %1865
  %1867 = fmul <2 x double> %block420, %splat.splat2123
  %1868 = fadd <2 x double> %1866, %1867
  %1869 = fmul <2 x double> %block423, %splat.splat2126
  %1870 = fadd <2 x double> %1868, %1869
  %1871 = fmul <2 x double> %block426, %splat.splat2129
  %1872 = fadd <2 x double> %1870, %1871
  %1873 = fmul <2 x double> %block429, %splat.splat2132
  %1874 = fadd <2 x double> %1872, %1873
  %1875 = fmul <2 x double> %block432, %splat.splat2135
  %1876 = fadd <2 x double> %1874, %1875
  %1877 = fmul <2 x double> %block435, %splat.splat2138
  %1878 = fadd <2 x double> %1876, %1877
  %1879 = fmul <2 x double> %block438, %splat.splat2141
  %1880 = fadd <2 x double> %1878, %1879
  %1881 = fmul <2 x double> %block441, %splat.splat2144
  %1882 = fadd <2 x double> %1880, %1881
  %1883 = fmul <2 x double> %block444, %splat.splat2147
  %1884 = fadd <2 x double> %1882, %1883
  %1885 = fmul <2 x double> %block447, %splat.splat2150
  %1886 = fadd <2 x double> %1884, %1885
  %1887 = fmul <2 x double> %block450, %splat.splat2153
  %1888 = fadd <2 x double> %1886, %1887
  %1889 = fmul <2 x double> %block453, %splat.splat2156
  %1890 = fadd <2 x double> %1888, %1889
  %1891 = fmul <2 x double> %block456, %splat.splat2159
  %1892 = fadd <2 x double> %1890, %1891
  %1893 = fmul <2 x double> %block459, %splat.splat2162
  %1894 = fadd <2 x double> %1892, %1893
  %1895 = fmul <2 x double> %block462, %splat.splat2165
  %1896 = fadd <2 x double> %1894, %1895
  %1897 = fmul <2 x double> %block465, %splat.splat2168
  %1898 = fadd <2 x double> %1896, %1897
  %1899 = fmul <2 x double> %block468, %splat.splat2171
  %1900 = fadd <2 x double> %1898, %1899
  %1901 = fmul <2 x double> %block471, %splat.splat2174
  %1902 = fadd <2 x double> %1900, %1901
  %1903 = fmul <2 x double> %block474, %splat.splat2177
  %1904 = fadd <2 x double> %1902, %1903
  %1905 = shufflevector <2 x double> %1904, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1906 = shufflevector <10 x double> %1863, <10 x double> %1905, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %1907 = fmul <2 x double> %block477, %splat.splat2117
  %1908 = fmul <2 x double> %block480, %splat.splat2120
  %1909 = fadd <2 x double> %1907, %1908
  %1910 = fmul <2 x double> %block483, %splat.splat2123
  %1911 = fadd <2 x double> %1909, %1910
  %1912 = fmul <2 x double> %block486, %splat.splat2126
  %1913 = fadd <2 x double> %1911, %1912
  %1914 = fmul <2 x double> %block489, %splat.splat2129
  %1915 = fadd <2 x double> %1913, %1914
  %1916 = fmul <2 x double> %block492, %splat.splat2132
  %1917 = fadd <2 x double> %1915, %1916
  %1918 = fmul <2 x double> %block495, %splat.splat2135
  %1919 = fadd <2 x double> %1917, %1918
  %1920 = fmul <2 x double> %block498, %splat.splat2138
  %1921 = fadd <2 x double> %1919, %1920
  %1922 = fmul <2 x double> %block501, %splat.splat2141
  %1923 = fadd <2 x double> %1921, %1922
  %1924 = fmul <2 x double> %block504, %splat.splat2144
  %1925 = fadd <2 x double> %1923, %1924
  %1926 = fmul <2 x double> %block507, %splat.splat2147
  %1927 = fadd <2 x double> %1925, %1926
  %1928 = fmul <2 x double> %block510, %splat.splat2150
  %1929 = fadd <2 x double> %1927, %1928
  %1930 = fmul <2 x double> %block513, %splat.splat2153
  %1931 = fadd <2 x double> %1929, %1930
  %1932 = fmul <2 x double> %block516, %splat.splat2156
  %1933 = fadd <2 x double> %1931, %1932
  %1934 = fmul <2 x double> %block519, %splat.splat2159
  %1935 = fadd <2 x double> %1933, %1934
  %1936 = fmul <2 x double> %block522, %splat.splat2162
  %1937 = fadd <2 x double> %1935, %1936
  %1938 = fmul <2 x double> %block525, %splat.splat2165
  %1939 = fadd <2 x double> %1937, %1938
  %1940 = fmul <2 x double> %block528, %splat.splat2168
  %1941 = fadd <2 x double> %1939, %1940
  %1942 = fmul <2 x double> %block531, %splat.splat2171
  %1943 = fadd <2 x double> %1941, %1942
  %1944 = fmul <2 x double> %block534, %splat.splat2174
  %1945 = fadd <2 x double> %1943, %1944
  %1946 = fmul <2 x double> %block537, %splat.splat2177
  %1947 = fadd <2 x double> %1945, %1946
  %1948 = shufflevector <2 x double> %1947, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1949 = shufflevector <10 x double> %1906, <10 x double> %1948, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat2432 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> zeroinitializer
  %1950 = fmul <2 x double> %block, %splat.splat2432
  %splat.splat2435 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %1951 = fmul <2 x double> %block228, %splat.splat2435
  %1952 = fadd <2 x double> %1950, %1951
  %splat.splat2438 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %1953 = fmul <2 x double> %block231, %splat.splat2438
  %1954 = fadd <2 x double> %1952, %1953
  %splat.splat2441 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %1955 = fmul <2 x double> %block234, %splat.splat2441
  %1956 = fadd <2 x double> %1954, %1955
  %splat.splat2444 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %1957 = fmul <2 x double> %block237, %splat.splat2444
  %1958 = fadd <2 x double> %1956, %1957
  %splat.splat2447 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %1959 = fmul <2 x double> %block240, %splat.splat2447
  %1960 = fadd <2 x double> %1958, %1959
  %splat.splat2450 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %1961 = fmul <2 x double> %block243, %splat.splat2450
  %1962 = fadd <2 x double> %1960, %1961
  %splat.splat2453 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %1963 = fmul <2 x double> %block246, %splat.splat2453
  %1964 = fadd <2 x double> %1962, %1963
  %splat.splat2456 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %1965 = fmul <2 x double> %block249, %splat.splat2456
  %1966 = fadd <2 x double> %1964, %1965
  %splat.splat2459 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %1967 = fmul <2 x double> %block252, %splat.splat2459
  %1968 = fadd <2 x double> %1966, %1967
  %splat.splat2462 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %1969 = fmul <2 x double> %block255, %splat.splat2462
  %1970 = fadd <2 x double> %1968, %1969
  %splat.splat2465 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %1971 = fmul <2 x double> %block258, %splat.splat2465
  %1972 = fadd <2 x double> %1970, %1971
  %splat.splat2468 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %1973 = fmul <2 x double> %block261, %splat.splat2468
  %1974 = fadd <2 x double> %1972, %1973
  %splat.splat2471 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %1975 = fmul <2 x double> %block264, %splat.splat2471
  %1976 = fadd <2 x double> %1974, %1975
  %splat.splat2474 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %1977 = fmul <2 x double> %block267, %splat.splat2474
  %1978 = fadd <2 x double> %1976, %1977
  %splat.splat2477 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %1979 = fmul <2 x double> %block270, %splat.splat2477
  %1980 = fadd <2 x double> %1978, %1979
  %splat.splat2480 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %1981 = fmul <2 x double> %block273, %splat.splat2480
  %1982 = fadd <2 x double> %1980, %1981
  %splat.splat2483 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %1983 = fmul <2 x double> %block276, %splat.splat2483
  %1984 = fadd <2 x double> %1982, %1983
  %splat.splat2486 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %1985 = fmul <2 x double> %block279, %splat.splat2486
  %1986 = fadd <2 x double> %1984, %1985
  %splat.splat2489 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %1987 = fmul <2 x double> %block282, %splat.splat2489
  %1988 = fadd <2 x double> %1986, %1987
  %splat.splat2492 = shufflevector <21 x double> %col.load197, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %1989 = fmul <2 x double> %block285, %splat.splat2492
  %1990 = fadd <2 x double> %1988, %1989
  %1991 = shufflevector <2 x double> %1990, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1992 = fmul <2 x double> %block288, %splat.splat2432
  %1993 = fmul <2 x double> %block291, %splat.splat2435
  %1994 = fadd <2 x double> %1992, %1993
  %1995 = fmul <2 x double> %block294, %splat.splat2438
  %1996 = fadd <2 x double> %1994, %1995
  %1997 = fmul <2 x double> %block297, %splat.splat2441
  %1998 = fadd <2 x double> %1996, %1997
  %1999 = fmul <2 x double> %block300, %splat.splat2444
  %2000 = fadd <2 x double> %1998, %1999
  %2001 = fmul <2 x double> %block303, %splat.splat2447
  %2002 = fadd <2 x double> %2000, %2001
  %2003 = fmul <2 x double> %block306, %splat.splat2450
  %2004 = fadd <2 x double> %2002, %2003
  %2005 = fmul <2 x double> %block309, %splat.splat2453
  %2006 = fadd <2 x double> %2004, %2005
  %2007 = fmul <2 x double> %block312, %splat.splat2456
  %2008 = fadd <2 x double> %2006, %2007
  %2009 = fmul <2 x double> %block315, %splat.splat2459
  %2010 = fadd <2 x double> %2008, %2009
  %2011 = fmul <2 x double> %block318, %splat.splat2462
  %2012 = fadd <2 x double> %2010, %2011
  %2013 = fmul <2 x double> %block321, %splat.splat2465
  %2014 = fadd <2 x double> %2012, %2013
  %2015 = fmul <2 x double> %block324, %splat.splat2468
  %2016 = fadd <2 x double> %2014, %2015
  %2017 = fmul <2 x double> %block327, %splat.splat2471
  %2018 = fadd <2 x double> %2016, %2017
  %2019 = fmul <2 x double> %block330, %splat.splat2474
  %2020 = fadd <2 x double> %2018, %2019
  %2021 = fmul <2 x double> %block333, %splat.splat2477
  %2022 = fadd <2 x double> %2020, %2021
  %2023 = fmul <2 x double> %block336, %splat.splat2480
  %2024 = fadd <2 x double> %2022, %2023
  %2025 = fmul <2 x double> %block339, %splat.splat2483
  %2026 = fadd <2 x double> %2024, %2025
  %2027 = fmul <2 x double> %block342, %splat.splat2486
  %2028 = fadd <2 x double> %2026, %2027
  %2029 = fmul <2 x double> %block345, %splat.splat2489
  %2030 = fadd <2 x double> %2028, %2029
  %2031 = fmul <2 x double> %block348, %splat.splat2492
  %2032 = fadd <2 x double> %2030, %2031
  %2033 = shufflevector <2 x double> %2032, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2034 = shufflevector <10 x double> %1991, <10 x double> %2033, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2035 = fmul <2 x double> %block351, %splat.splat2432
  %2036 = fmul <2 x double> %block354, %splat.splat2435
  %2037 = fadd <2 x double> %2035, %2036
  %2038 = fmul <2 x double> %block357, %splat.splat2438
  %2039 = fadd <2 x double> %2037, %2038
  %2040 = fmul <2 x double> %block360, %splat.splat2441
  %2041 = fadd <2 x double> %2039, %2040
  %2042 = fmul <2 x double> %block363, %splat.splat2444
  %2043 = fadd <2 x double> %2041, %2042
  %2044 = fmul <2 x double> %block366, %splat.splat2447
  %2045 = fadd <2 x double> %2043, %2044
  %2046 = fmul <2 x double> %block369, %splat.splat2450
  %2047 = fadd <2 x double> %2045, %2046
  %2048 = fmul <2 x double> %block372, %splat.splat2453
  %2049 = fadd <2 x double> %2047, %2048
  %2050 = fmul <2 x double> %block375, %splat.splat2456
  %2051 = fadd <2 x double> %2049, %2050
  %2052 = fmul <2 x double> %block378, %splat.splat2459
  %2053 = fadd <2 x double> %2051, %2052
  %2054 = fmul <2 x double> %block381, %splat.splat2462
  %2055 = fadd <2 x double> %2053, %2054
  %2056 = fmul <2 x double> %block384, %splat.splat2465
  %2057 = fadd <2 x double> %2055, %2056
  %2058 = fmul <2 x double> %block387, %splat.splat2468
  %2059 = fadd <2 x double> %2057, %2058
  %2060 = fmul <2 x double> %block390, %splat.splat2471
  %2061 = fadd <2 x double> %2059, %2060
  %2062 = fmul <2 x double> %block393, %splat.splat2474
  %2063 = fadd <2 x double> %2061, %2062
  %2064 = fmul <2 x double> %block396, %splat.splat2477
  %2065 = fadd <2 x double> %2063, %2064
  %2066 = fmul <2 x double> %block399, %splat.splat2480
  %2067 = fadd <2 x double> %2065, %2066
  %2068 = fmul <2 x double> %block402, %splat.splat2483
  %2069 = fadd <2 x double> %2067, %2068
  %2070 = fmul <2 x double> %block405, %splat.splat2486
  %2071 = fadd <2 x double> %2069, %2070
  %2072 = fmul <2 x double> %block408, %splat.splat2489
  %2073 = fadd <2 x double> %2071, %2072
  %2074 = fmul <2 x double> %block411, %splat.splat2492
  %2075 = fadd <2 x double> %2073, %2074
  %2076 = shufflevector <2 x double> %2075, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2077 = shufflevector <10 x double> %2034, <10 x double> %2076, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %2078 = fmul <2 x double> %block414, %splat.splat2432
  %2079 = fmul <2 x double> %block417, %splat.splat2435
  %2080 = fadd <2 x double> %2078, %2079
  %2081 = fmul <2 x double> %block420, %splat.splat2438
  %2082 = fadd <2 x double> %2080, %2081
  %2083 = fmul <2 x double> %block423, %splat.splat2441
  %2084 = fadd <2 x double> %2082, %2083
  %2085 = fmul <2 x double> %block426, %splat.splat2444
  %2086 = fadd <2 x double> %2084, %2085
  %2087 = fmul <2 x double> %block429, %splat.splat2447
  %2088 = fadd <2 x double> %2086, %2087
  %2089 = fmul <2 x double> %block432, %splat.splat2450
  %2090 = fadd <2 x double> %2088, %2089
  %2091 = fmul <2 x double> %block435, %splat.splat2453
  %2092 = fadd <2 x double> %2090, %2091
  %2093 = fmul <2 x double> %block438, %splat.splat2456
  %2094 = fadd <2 x double> %2092, %2093
  %2095 = fmul <2 x double> %block441, %splat.splat2459
  %2096 = fadd <2 x double> %2094, %2095
  %2097 = fmul <2 x double> %block444, %splat.splat2462
  %2098 = fadd <2 x double> %2096, %2097
  %2099 = fmul <2 x double> %block447, %splat.splat2465
  %2100 = fadd <2 x double> %2098, %2099
  %2101 = fmul <2 x double> %block450, %splat.splat2468
  %2102 = fadd <2 x double> %2100, %2101
  %2103 = fmul <2 x double> %block453, %splat.splat2471
  %2104 = fadd <2 x double> %2102, %2103
  %2105 = fmul <2 x double> %block456, %splat.splat2474
  %2106 = fadd <2 x double> %2104, %2105
  %2107 = fmul <2 x double> %block459, %splat.splat2477
  %2108 = fadd <2 x double> %2106, %2107
  %2109 = fmul <2 x double> %block462, %splat.splat2480
  %2110 = fadd <2 x double> %2108, %2109
  %2111 = fmul <2 x double> %block465, %splat.splat2483
  %2112 = fadd <2 x double> %2110, %2111
  %2113 = fmul <2 x double> %block468, %splat.splat2486
  %2114 = fadd <2 x double> %2112, %2113
  %2115 = fmul <2 x double> %block471, %splat.splat2489
  %2116 = fadd <2 x double> %2114, %2115
  %2117 = fmul <2 x double> %block474, %splat.splat2492
  %2118 = fadd <2 x double> %2116, %2117
  %2119 = shufflevector <2 x double> %2118, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2120 = shufflevector <10 x double> %2077, <10 x double> %2119, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %2121 = fmul <2 x double> %block477, %splat.splat2432
  %2122 = fmul <2 x double> %block480, %splat.splat2435
  %2123 = fadd <2 x double> %2121, %2122
  %2124 = fmul <2 x double> %block483, %splat.splat2438
  %2125 = fadd <2 x double> %2123, %2124
  %2126 = fmul <2 x double> %block486, %splat.splat2441
  %2127 = fadd <2 x double> %2125, %2126
  %2128 = fmul <2 x double> %block489, %splat.splat2444
  %2129 = fadd <2 x double> %2127, %2128
  %2130 = fmul <2 x double> %block492, %splat.splat2447
  %2131 = fadd <2 x double> %2129, %2130
  %2132 = fmul <2 x double> %block495, %splat.splat2450
  %2133 = fadd <2 x double> %2131, %2132
  %2134 = fmul <2 x double> %block498, %splat.splat2453
  %2135 = fadd <2 x double> %2133, %2134
  %2136 = fmul <2 x double> %block501, %splat.splat2456
  %2137 = fadd <2 x double> %2135, %2136
  %2138 = fmul <2 x double> %block504, %splat.splat2459
  %2139 = fadd <2 x double> %2137, %2138
  %2140 = fmul <2 x double> %block507, %splat.splat2462
  %2141 = fadd <2 x double> %2139, %2140
  %2142 = fmul <2 x double> %block510, %splat.splat2465
  %2143 = fadd <2 x double> %2141, %2142
  %2144 = fmul <2 x double> %block513, %splat.splat2468
  %2145 = fadd <2 x double> %2143, %2144
  %2146 = fmul <2 x double> %block516, %splat.splat2471
  %2147 = fadd <2 x double> %2145, %2146
  %2148 = fmul <2 x double> %block519, %splat.splat2474
  %2149 = fadd <2 x double> %2147, %2148
  %2150 = fmul <2 x double> %block522, %splat.splat2477
  %2151 = fadd <2 x double> %2149, %2150
  %2152 = fmul <2 x double> %block525, %splat.splat2480
  %2153 = fadd <2 x double> %2151, %2152
  %2154 = fmul <2 x double> %block528, %splat.splat2483
  %2155 = fadd <2 x double> %2153, %2154
  %2156 = fmul <2 x double> %block531, %splat.splat2486
  %2157 = fadd <2 x double> %2155, %2156
  %2158 = fmul <2 x double> %block534, %splat.splat2489
  %2159 = fadd <2 x double> %2157, %2158
  %2160 = fmul <2 x double> %block537, %splat.splat2492
  %2161 = fadd <2 x double> %2159, %2160
  %2162 = shufflevector <2 x double> %2161, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2163 = shufflevector <10 x double> %2120, <10 x double> %2162, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat2747 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> zeroinitializer
  %2164 = fmul <2 x double> %block, %splat.splat2747
  %splat.splat2750 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %2165 = fmul <2 x double> %block228, %splat.splat2750
  %2166 = fadd <2 x double> %2164, %2165
  %splat.splat2753 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %2167 = fmul <2 x double> %block231, %splat.splat2753
  %2168 = fadd <2 x double> %2166, %2167
  %splat.splat2756 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %2169 = fmul <2 x double> %block234, %splat.splat2756
  %2170 = fadd <2 x double> %2168, %2169
  %splat.splat2759 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %2171 = fmul <2 x double> %block237, %splat.splat2759
  %2172 = fadd <2 x double> %2170, %2171
  %splat.splat2762 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %2173 = fmul <2 x double> %block240, %splat.splat2762
  %2174 = fadd <2 x double> %2172, %2173
  %splat.splat2765 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %2175 = fmul <2 x double> %block243, %splat.splat2765
  %2176 = fadd <2 x double> %2174, %2175
  %splat.splat2768 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %2177 = fmul <2 x double> %block246, %splat.splat2768
  %2178 = fadd <2 x double> %2176, %2177
  %splat.splat2771 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %2179 = fmul <2 x double> %block249, %splat.splat2771
  %2180 = fadd <2 x double> %2178, %2179
  %splat.splat2774 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %2181 = fmul <2 x double> %block252, %splat.splat2774
  %2182 = fadd <2 x double> %2180, %2181
  %splat.splat2777 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %2183 = fmul <2 x double> %block255, %splat.splat2777
  %2184 = fadd <2 x double> %2182, %2183
  %splat.splat2780 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %2185 = fmul <2 x double> %block258, %splat.splat2780
  %2186 = fadd <2 x double> %2184, %2185
  %splat.splat2783 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %2187 = fmul <2 x double> %block261, %splat.splat2783
  %2188 = fadd <2 x double> %2186, %2187
  %splat.splat2786 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %2189 = fmul <2 x double> %block264, %splat.splat2786
  %2190 = fadd <2 x double> %2188, %2189
  %splat.splat2789 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %2191 = fmul <2 x double> %block267, %splat.splat2789
  %2192 = fadd <2 x double> %2190, %2191
  %splat.splat2792 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %2193 = fmul <2 x double> %block270, %splat.splat2792
  %2194 = fadd <2 x double> %2192, %2193
  %splat.splat2795 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %2195 = fmul <2 x double> %block273, %splat.splat2795
  %2196 = fadd <2 x double> %2194, %2195
  %splat.splat2798 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %2197 = fmul <2 x double> %block276, %splat.splat2798
  %2198 = fadd <2 x double> %2196, %2197
  %splat.splat2801 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %2199 = fmul <2 x double> %block279, %splat.splat2801
  %2200 = fadd <2 x double> %2198, %2199
  %splat.splat2804 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %2201 = fmul <2 x double> %block282, %splat.splat2804
  %2202 = fadd <2 x double> %2200, %2201
  %splat.splat2807 = shufflevector <21 x double> %col.load199, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %2203 = fmul <2 x double> %block285, %splat.splat2807
  %2204 = fadd <2 x double> %2202, %2203
  %2205 = shufflevector <2 x double> %2204, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2206 = fmul <2 x double> %block288, %splat.splat2747
  %2207 = fmul <2 x double> %block291, %splat.splat2750
  %2208 = fadd <2 x double> %2206, %2207
  %2209 = fmul <2 x double> %block294, %splat.splat2753
  %2210 = fadd <2 x double> %2208, %2209
  %2211 = fmul <2 x double> %block297, %splat.splat2756
  %2212 = fadd <2 x double> %2210, %2211
  %2213 = fmul <2 x double> %block300, %splat.splat2759
  %2214 = fadd <2 x double> %2212, %2213
  %2215 = fmul <2 x double> %block303, %splat.splat2762
  %2216 = fadd <2 x double> %2214, %2215
  %2217 = fmul <2 x double> %block306, %splat.splat2765
  %2218 = fadd <2 x double> %2216, %2217
  %2219 = fmul <2 x double> %block309, %splat.splat2768
  %2220 = fadd <2 x double> %2218, %2219
  %2221 = fmul <2 x double> %block312, %splat.splat2771
  %2222 = fadd <2 x double> %2220, %2221
  %2223 = fmul <2 x double> %block315, %splat.splat2774
  %2224 = fadd <2 x double> %2222, %2223
  %2225 = fmul <2 x double> %block318, %splat.splat2777
  %2226 = fadd <2 x double> %2224, %2225
  %2227 = fmul <2 x double> %block321, %splat.splat2780
  %2228 = fadd <2 x double> %2226, %2227
  %2229 = fmul <2 x double> %block324, %splat.splat2783
  %2230 = fadd <2 x double> %2228, %2229
  %2231 = fmul <2 x double> %block327, %splat.splat2786
  %2232 = fadd <2 x double> %2230, %2231
  %2233 = fmul <2 x double> %block330, %splat.splat2789
  %2234 = fadd <2 x double> %2232, %2233
  %2235 = fmul <2 x double> %block333, %splat.splat2792
  %2236 = fadd <2 x double> %2234, %2235
  %2237 = fmul <2 x double> %block336, %splat.splat2795
  %2238 = fadd <2 x double> %2236, %2237
  %2239 = fmul <2 x double> %block339, %splat.splat2798
  %2240 = fadd <2 x double> %2238, %2239
  %2241 = fmul <2 x double> %block342, %splat.splat2801
  %2242 = fadd <2 x double> %2240, %2241
  %2243 = fmul <2 x double> %block345, %splat.splat2804
  %2244 = fadd <2 x double> %2242, %2243
  %2245 = fmul <2 x double> %block348, %splat.splat2807
  %2246 = fadd <2 x double> %2244, %2245
  %2247 = shufflevector <2 x double> %2246, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2248 = shufflevector <10 x double> %2205, <10 x double> %2247, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2249 = fmul <2 x double> %block351, %splat.splat2747
  %2250 = fmul <2 x double> %block354, %splat.splat2750
  %2251 = fadd <2 x double> %2249, %2250
  %2252 = fmul <2 x double> %block357, %splat.splat2753
  %2253 = fadd <2 x double> %2251, %2252
  %2254 = fmul <2 x double> %block360, %splat.splat2756
  %2255 = fadd <2 x double> %2253, %2254
  %2256 = fmul <2 x double> %block363, %splat.splat2759
  %2257 = fadd <2 x double> %2255, %2256
  %2258 = fmul <2 x double> %block366, %splat.splat2762
  %2259 = fadd <2 x double> %2257, %2258
  %2260 = fmul <2 x double> %block369, %splat.splat2765
  %2261 = fadd <2 x double> %2259, %2260
  %2262 = fmul <2 x double> %block372, %splat.splat2768
  %2263 = fadd <2 x double> %2261, %2262
  %2264 = fmul <2 x double> %block375, %splat.splat2771
  %2265 = fadd <2 x double> %2263, %2264
  %2266 = fmul <2 x double> %block378, %splat.splat2774
  %2267 = fadd <2 x double> %2265, %2266
  %2268 = fmul <2 x double> %block381, %splat.splat2777
  %2269 = fadd <2 x double> %2267, %2268
  %2270 = fmul <2 x double> %block384, %splat.splat2780
  %2271 = fadd <2 x double> %2269, %2270
  %2272 = fmul <2 x double> %block387, %splat.splat2783
  %2273 = fadd <2 x double> %2271, %2272
  %2274 = fmul <2 x double> %block390, %splat.splat2786
  %2275 = fadd <2 x double> %2273, %2274
  %2276 = fmul <2 x double> %block393, %splat.splat2789
  %2277 = fadd <2 x double> %2275, %2276
  %2278 = fmul <2 x double> %block396, %splat.splat2792
  %2279 = fadd <2 x double> %2277, %2278
  %2280 = fmul <2 x double> %block399, %splat.splat2795
  %2281 = fadd <2 x double> %2279, %2280
  %2282 = fmul <2 x double> %block402, %splat.splat2798
  %2283 = fadd <2 x double> %2281, %2282
  %2284 = fmul <2 x double> %block405, %splat.splat2801
  %2285 = fadd <2 x double> %2283, %2284
  %2286 = fmul <2 x double> %block408, %splat.splat2804
  %2287 = fadd <2 x double> %2285, %2286
  %2288 = fmul <2 x double> %block411, %splat.splat2807
  %2289 = fadd <2 x double> %2287, %2288
  %2290 = shufflevector <2 x double> %2289, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2291 = shufflevector <10 x double> %2248, <10 x double> %2290, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %2292 = fmul <2 x double> %block414, %splat.splat2747
  %2293 = fmul <2 x double> %block417, %splat.splat2750
  %2294 = fadd <2 x double> %2292, %2293
  %2295 = fmul <2 x double> %block420, %splat.splat2753
  %2296 = fadd <2 x double> %2294, %2295
  %2297 = fmul <2 x double> %block423, %splat.splat2756
  %2298 = fadd <2 x double> %2296, %2297
  %2299 = fmul <2 x double> %block426, %splat.splat2759
  %2300 = fadd <2 x double> %2298, %2299
  %2301 = fmul <2 x double> %block429, %splat.splat2762
  %2302 = fadd <2 x double> %2300, %2301
  %2303 = fmul <2 x double> %block432, %splat.splat2765
  %2304 = fadd <2 x double> %2302, %2303
  %2305 = fmul <2 x double> %block435, %splat.splat2768
  %2306 = fadd <2 x double> %2304, %2305
  %2307 = fmul <2 x double> %block438, %splat.splat2771
  %2308 = fadd <2 x double> %2306, %2307
  %2309 = fmul <2 x double> %block441, %splat.splat2774
  %2310 = fadd <2 x double> %2308, %2309
  %2311 = fmul <2 x double> %block444, %splat.splat2777
  %2312 = fadd <2 x double> %2310, %2311
  %2313 = fmul <2 x double> %block447, %splat.splat2780
  %2314 = fadd <2 x double> %2312, %2313
  %2315 = fmul <2 x double> %block450, %splat.splat2783
  %2316 = fadd <2 x double> %2314, %2315
  %2317 = fmul <2 x double> %block453, %splat.splat2786
  %2318 = fadd <2 x double> %2316, %2317
  %2319 = fmul <2 x double> %block456, %splat.splat2789
  %2320 = fadd <2 x double> %2318, %2319
  %2321 = fmul <2 x double> %block459, %splat.splat2792
  %2322 = fadd <2 x double> %2320, %2321
  %2323 = fmul <2 x double> %block462, %splat.splat2795
  %2324 = fadd <2 x double> %2322, %2323
  %2325 = fmul <2 x double> %block465, %splat.splat2798
  %2326 = fadd <2 x double> %2324, %2325
  %2327 = fmul <2 x double> %block468, %splat.splat2801
  %2328 = fadd <2 x double> %2326, %2327
  %2329 = fmul <2 x double> %block471, %splat.splat2804
  %2330 = fadd <2 x double> %2328, %2329
  %2331 = fmul <2 x double> %block474, %splat.splat2807
  %2332 = fadd <2 x double> %2330, %2331
  %2333 = shufflevector <2 x double> %2332, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2334 = shufflevector <10 x double> %2291, <10 x double> %2333, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %2335 = fmul <2 x double> %block477, %splat.splat2747
  %2336 = fmul <2 x double> %block480, %splat.splat2750
  %2337 = fadd <2 x double> %2335, %2336
  %2338 = fmul <2 x double> %block483, %splat.splat2753
  %2339 = fadd <2 x double> %2337, %2338
  %2340 = fmul <2 x double> %block486, %splat.splat2756
  %2341 = fadd <2 x double> %2339, %2340
  %2342 = fmul <2 x double> %block489, %splat.splat2759
  %2343 = fadd <2 x double> %2341, %2342
  %2344 = fmul <2 x double> %block492, %splat.splat2762
  %2345 = fadd <2 x double> %2343, %2344
  %2346 = fmul <2 x double> %block495, %splat.splat2765
  %2347 = fadd <2 x double> %2345, %2346
  %2348 = fmul <2 x double> %block498, %splat.splat2768
  %2349 = fadd <2 x double> %2347, %2348
  %2350 = fmul <2 x double> %block501, %splat.splat2771
  %2351 = fadd <2 x double> %2349, %2350
  %2352 = fmul <2 x double> %block504, %splat.splat2774
  %2353 = fadd <2 x double> %2351, %2352
  %2354 = fmul <2 x double> %block507, %splat.splat2777
  %2355 = fadd <2 x double> %2353, %2354
  %2356 = fmul <2 x double> %block510, %splat.splat2780
  %2357 = fadd <2 x double> %2355, %2356
  %2358 = fmul <2 x double> %block513, %splat.splat2783
  %2359 = fadd <2 x double> %2357, %2358
  %2360 = fmul <2 x double> %block516, %splat.splat2786
  %2361 = fadd <2 x double> %2359, %2360
  %2362 = fmul <2 x double> %block519, %splat.splat2789
  %2363 = fadd <2 x double> %2361, %2362
  %2364 = fmul <2 x double> %block522, %splat.splat2792
  %2365 = fadd <2 x double> %2363, %2364
  %2366 = fmul <2 x double> %block525, %splat.splat2795
  %2367 = fadd <2 x double> %2365, %2366
  %2368 = fmul <2 x double> %block528, %splat.splat2798
  %2369 = fadd <2 x double> %2367, %2368
  %2370 = fmul <2 x double> %block531, %splat.splat2801
  %2371 = fadd <2 x double> %2369, %2370
  %2372 = fmul <2 x double> %block534, %splat.splat2804
  %2373 = fadd <2 x double> %2371, %2372
  %2374 = fmul <2 x double> %block537, %splat.splat2807
  %2375 = fadd <2 x double> %2373, %2374
  %2376 = shufflevector <2 x double> %2375, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2377 = shufflevector <10 x double> %2334, <10 x double> %2376, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat3062 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> zeroinitializer
  %2378 = fmul <2 x double> %block, %splat.splat3062
  %splat.splat3065 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %2379 = fmul <2 x double> %block228, %splat.splat3065
  %2380 = fadd <2 x double> %2378, %2379
  %splat.splat3068 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %2381 = fmul <2 x double> %block231, %splat.splat3068
  %2382 = fadd <2 x double> %2380, %2381
  %splat.splat3071 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %2383 = fmul <2 x double> %block234, %splat.splat3071
  %2384 = fadd <2 x double> %2382, %2383
  %splat.splat3074 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %2385 = fmul <2 x double> %block237, %splat.splat3074
  %2386 = fadd <2 x double> %2384, %2385
  %splat.splat3077 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %2387 = fmul <2 x double> %block240, %splat.splat3077
  %2388 = fadd <2 x double> %2386, %2387
  %splat.splat3080 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %2389 = fmul <2 x double> %block243, %splat.splat3080
  %2390 = fadd <2 x double> %2388, %2389
  %splat.splat3083 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %2391 = fmul <2 x double> %block246, %splat.splat3083
  %2392 = fadd <2 x double> %2390, %2391
  %splat.splat3086 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %2393 = fmul <2 x double> %block249, %splat.splat3086
  %2394 = fadd <2 x double> %2392, %2393
  %splat.splat3089 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %2395 = fmul <2 x double> %block252, %splat.splat3089
  %2396 = fadd <2 x double> %2394, %2395
  %splat.splat3092 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %2397 = fmul <2 x double> %block255, %splat.splat3092
  %2398 = fadd <2 x double> %2396, %2397
  %splat.splat3095 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %2399 = fmul <2 x double> %block258, %splat.splat3095
  %2400 = fadd <2 x double> %2398, %2399
  %splat.splat3098 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %2401 = fmul <2 x double> %block261, %splat.splat3098
  %2402 = fadd <2 x double> %2400, %2401
  %splat.splat3101 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %2403 = fmul <2 x double> %block264, %splat.splat3101
  %2404 = fadd <2 x double> %2402, %2403
  %splat.splat3104 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %2405 = fmul <2 x double> %block267, %splat.splat3104
  %2406 = fadd <2 x double> %2404, %2405
  %splat.splat3107 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %2407 = fmul <2 x double> %block270, %splat.splat3107
  %2408 = fadd <2 x double> %2406, %2407
  %splat.splat3110 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %2409 = fmul <2 x double> %block273, %splat.splat3110
  %2410 = fadd <2 x double> %2408, %2409
  %splat.splat3113 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %2411 = fmul <2 x double> %block276, %splat.splat3113
  %2412 = fadd <2 x double> %2410, %2411
  %splat.splat3116 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %2413 = fmul <2 x double> %block279, %splat.splat3116
  %2414 = fadd <2 x double> %2412, %2413
  %splat.splat3119 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %2415 = fmul <2 x double> %block282, %splat.splat3119
  %2416 = fadd <2 x double> %2414, %2415
  %splat.splat3122 = shufflevector <21 x double> %col.load201, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %2417 = fmul <2 x double> %block285, %splat.splat3122
  %2418 = fadd <2 x double> %2416, %2417
  %2419 = shufflevector <2 x double> %2418, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2420 = fmul <2 x double> %block288, %splat.splat3062
  %2421 = fmul <2 x double> %block291, %splat.splat3065
  %2422 = fadd <2 x double> %2420, %2421
  %2423 = fmul <2 x double> %block294, %splat.splat3068
  %2424 = fadd <2 x double> %2422, %2423
  %2425 = fmul <2 x double> %block297, %splat.splat3071
  %2426 = fadd <2 x double> %2424, %2425
  %2427 = fmul <2 x double> %block300, %splat.splat3074
  %2428 = fadd <2 x double> %2426, %2427
  %2429 = fmul <2 x double> %block303, %splat.splat3077
  %2430 = fadd <2 x double> %2428, %2429
  %2431 = fmul <2 x double> %block306, %splat.splat3080
  %2432 = fadd <2 x double> %2430, %2431
  %2433 = fmul <2 x double> %block309, %splat.splat3083
  %2434 = fadd <2 x double> %2432, %2433
  %2435 = fmul <2 x double> %block312, %splat.splat3086
  %2436 = fadd <2 x double> %2434, %2435
  %2437 = fmul <2 x double> %block315, %splat.splat3089
  %2438 = fadd <2 x double> %2436, %2437
  %2439 = fmul <2 x double> %block318, %splat.splat3092
  %2440 = fadd <2 x double> %2438, %2439
  %2441 = fmul <2 x double> %block321, %splat.splat3095
  %2442 = fadd <2 x double> %2440, %2441
  %2443 = fmul <2 x double> %block324, %splat.splat3098
  %2444 = fadd <2 x double> %2442, %2443
  %2445 = fmul <2 x double> %block327, %splat.splat3101
  %2446 = fadd <2 x double> %2444, %2445
  %2447 = fmul <2 x double> %block330, %splat.splat3104
  %2448 = fadd <2 x double> %2446, %2447
  %2449 = fmul <2 x double> %block333, %splat.splat3107
  %2450 = fadd <2 x double> %2448, %2449
  %2451 = fmul <2 x double> %block336, %splat.splat3110
  %2452 = fadd <2 x double> %2450, %2451
  %2453 = fmul <2 x double> %block339, %splat.splat3113
  %2454 = fadd <2 x double> %2452, %2453
  %2455 = fmul <2 x double> %block342, %splat.splat3116
  %2456 = fadd <2 x double> %2454, %2455
  %2457 = fmul <2 x double> %block345, %splat.splat3119
  %2458 = fadd <2 x double> %2456, %2457
  %2459 = fmul <2 x double> %block348, %splat.splat3122
  %2460 = fadd <2 x double> %2458, %2459
  %2461 = shufflevector <2 x double> %2460, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2462 = shufflevector <10 x double> %2419, <10 x double> %2461, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2463 = fmul <2 x double> %block351, %splat.splat3062
  %2464 = fmul <2 x double> %block354, %splat.splat3065
  %2465 = fadd <2 x double> %2463, %2464
  %2466 = fmul <2 x double> %block357, %splat.splat3068
  %2467 = fadd <2 x double> %2465, %2466
  %2468 = fmul <2 x double> %block360, %splat.splat3071
  %2469 = fadd <2 x double> %2467, %2468
  %2470 = fmul <2 x double> %block363, %splat.splat3074
  %2471 = fadd <2 x double> %2469, %2470
  %2472 = fmul <2 x double> %block366, %splat.splat3077
  %2473 = fadd <2 x double> %2471, %2472
  %2474 = fmul <2 x double> %block369, %splat.splat3080
  %2475 = fadd <2 x double> %2473, %2474
  %2476 = fmul <2 x double> %block372, %splat.splat3083
  %2477 = fadd <2 x double> %2475, %2476
  %2478 = fmul <2 x double> %block375, %splat.splat3086
  %2479 = fadd <2 x double> %2477, %2478
  %2480 = fmul <2 x double> %block378, %splat.splat3089
  %2481 = fadd <2 x double> %2479, %2480
  %2482 = fmul <2 x double> %block381, %splat.splat3092
  %2483 = fadd <2 x double> %2481, %2482
  %2484 = fmul <2 x double> %block384, %splat.splat3095
  %2485 = fadd <2 x double> %2483, %2484
  %2486 = fmul <2 x double> %block387, %splat.splat3098
  %2487 = fadd <2 x double> %2485, %2486
  %2488 = fmul <2 x double> %block390, %splat.splat3101
  %2489 = fadd <2 x double> %2487, %2488
  %2490 = fmul <2 x double> %block393, %splat.splat3104
  %2491 = fadd <2 x double> %2489, %2490
  %2492 = fmul <2 x double> %block396, %splat.splat3107
  %2493 = fadd <2 x double> %2491, %2492
  %2494 = fmul <2 x double> %block399, %splat.splat3110
  %2495 = fadd <2 x double> %2493, %2494
  %2496 = fmul <2 x double> %block402, %splat.splat3113
  %2497 = fadd <2 x double> %2495, %2496
  %2498 = fmul <2 x double> %block405, %splat.splat3116
  %2499 = fadd <2 x double> %2497, %2498
  %2500 = fmul <2 x double> %block408, %splat.splat3119
  %2501 = fadd <2 x double> %2499, %2500
  %2502 = fmul <2 x double> %block411, %splat.splat3122
  %2503 = fadd <2 x double> %2501, %2502
  %2504 = shufflevector <2 x double> %2503, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2505 = shufflevector <10 x double> %2462, <10 x double> %2504, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %2506 = fmul <2 x double> %block414, %splat.splat3062
  %2507 = fmul <2 x double> %block417, %splat.splat3065
  %2508 = fadd <2 x double> %2506, %2507
  %2509 = fmul <2 x double> %block420, %splat.splat3068
  %2510 = fadd <2 x double> %2508, %2509
  %2511 = fmul <2 x double> %block423, %splat.splat3071
  %2512 = fadd <2 x double> %2510, %2511
  %2513 = fmul <2 x double> %block426, %splat.splat3074
  %2514 = fadd <2 x double> %2512, %2513
  %2515 = fmul <2 x double> %block429, %splat.splat3077
  %2516 = fadd <2 x double> %2514, %2515
  %2517 = fmul <2 x double> %block432, %splat.splat3080
  %2518 = fadd <2 x double> %2516, %2517
  %2519 = fmul <2 x double> %block435, %splat.splat3083
  %2520 = fadd <2 x double> %2518, %2519
  %2521 = fmul <2 x double> %block438, %splat.splat3086
  %2522 = fadd <2 x double> %2520, %2521
  %2523 = fmul <2 x double> %block441, %splat.splat3089
  %2524 = fadd <2 x double> %2522, %2523
  %2525 = fmul <2 x double> %block444, %splat.splat3092
  %2526 = fadd <2 x double> %2524, %2525
  %2527 = fmul <2 x double> %block447, %splat.splat3095
  %2528 = fadd <2 x double> %2526, %2527
  %2529 = fmul <2 x double> %block450, %splat.splat3098
  %2530 = fadd <2 x double> %2528, %2529
  %2531 = fmul <2 x double> %block453, %splat.splat3101
  %2532 = fadd <2 x double> %2530, %2531
  %2533 = fmul <2 x double> %block456, %splat.splat3104
  %2534 = fadd <2 x double> %2532, %2533
  %2535 = fmul <2 x double> %block459, %splat.splat3107
  %2536 = fadd <2 x double> %2534, %2535
  %2537 = fmul <2 x double> %block462, %splat.splat3110
  %2538 = fadd <2 x double> %2536, %2537
  %2539 = fmul <2 x double> %block465, %splat.splat3113
  %2540 = fadd <2 x double> %2538, %2539
  %2541 = fmul <2 x double> %block468, %splat.splat3116
  %2542 = fadd <2 x double> %2540, %2541
  %2543 = fmul <2 x double> %block471, %splat.splat3119
  %2544 = fadd <2 x double> %2542, %2543
  %2545 = fmul <2 x double> %block474, %splat.splat3122
  %2546 = fadd <2 x double> %2544, %2545
  %2547 = shufflevector <2 x double> %2546, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2548 = shufflevector <10 x double> %2505, <10 x double> %2547, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %2549 = fmul <2 x double> %block477, %splat.splat3062
  %2550 = fmul <2 x double> %block480, %splat.splat3065
  %2551 = fadd <2 x double> %2549, %2550
  %2552 = fmul <2 x double> %block483, %splat.splat3068
  %2553 = fadd <2 x double> %2551, %2552
  %2554 = fmul <2 x double> %block486, %splat.splat3071
  %2555 = fadd <2 x double> %2553, %2554
  %2556 = fmul <2 x double> %block489, %splat.splat3074
  %2557 = fadd <2 x double> %2555, %2556
  %2558 = fmul <2 x double> %block492, %splat.splat3077
  %2559 = fadd <2 x double> %2557, %2558
  %2560 = fmul <2 x double> %block495, %splat.splat3080
  %2561 = fadd <2 x double> %2559, %2560
  %2562 = fmul <2 x double> %block498, %splat.splat3083
  %2563 = fadd <2 x double> %2561, %2562
  %2564 = fmul <2 x double> %block501, %splat.splat3086
  %2565 = fadd <2 x double> %2563, %2564
  %2566 = fmul <2 x double> %block504, %splat.splat3089
  %2567 = fadd <2 x double> %2565, %2566
  %2568 = fmul <2 x double> %block507, %splat.splat3092
  %2569 = fadd <2 x double> %2567, %2568
  %2570 = fmul <2 x double> %block510, %splat.splat3095
  %2571 = fadd <2 x double> %2569, %2570
  %2572 = fmul <2 x double> %block513, %splat.splat3098
  %2573 = fadd <2 x double> %2571, %2572
  %2574 = fmul <2 x double> %block516, %splat.splat3101
  %2575 = fadd <2 x double> %2573, %2574
  %2576 = fmul <2 x double> %block519, %splat.splat3104
  %2577 = fadd <2 x double> %2575, %2576
  %2578 = fmul <2 x double> %block522, %splat.splat3107
  %2579 = fadd <2 x double> %2577, %2578
  %2580 = fmul <2 x double> %block525, %splat.splat3110
  %2581 = fadd <2 x double> %2579, %2580
  %2582 = fmul <2 x double> %block528, %splat.splat3113
  %2583 = fadd <2 x double> %2581, %2582
  %2584 = fmul <2 x double> %block531, %splat.splat3116
  %2585 = fadd <2 x double> %2583, %2584
  %2586 = fmul <2 x double> %block534, %splat.splat3119
  %2587 = fadd <2 x double> %2585, %2586
  %2588 = fmul <2 x double> %block537, %splat.splat3122
  %2589 = fadd <2 x double> %2587, %2588
  %2590 = shufflevector <2 x double> %2589, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2591 = shufflevector <10 x double> %2548, <10 x double> %2590, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat3377 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> zeroinitializer
  %2592 = fmul <2 x double> %block, %splat.splat3377
  %splat.splat3380 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %2593 = fmul <2 x double> %block228, %splat.splat3380
  %2594 = fadd <2 x double> %2592, %2593
  %splat.splat3383 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %2595 = fmul <2 x double> %block231, %splat.splat3383
  %2596 = fadd <2 x double> %2594, %2595
  %splat.splat3386 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %2597 = fmul <2 x double> %block234, %splat.splat3386
  %2598 = fadd <2 x double> %2596, %2597
  %splat.splat3389 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %2599 = fmul <2 x double> %block237, %splat.splat3389
  %2600 = fadd <2 x double> %2598, %2599
  %splat.splat3392 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %2601 = fmul <2 x double> %block240, %splat.splat3392
  %2602 = fadd <2 x double> %2600, %2601
  %splat.splat3395 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %2603 = fmul <2 x double> %block243, %splat.splat3395
  %2604 = fadd <2 x double> %2602, %2603
  %splat.splat3398 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %2605 = fmul <2 x double> %block246, %splat.splat3398
  %2606 = fadd <2 x double> %2604, %2605
  %splat.splat3401 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %2607 = fmul <2 x double> %block249, %splat.splat3401
  %2608 = fadd <2 x double> %2606, %2607
  %splat.splat3404 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %2609 = fmul <2 x double> %block252, %splat.splat3404
  %2610 = fadd <2 x double> %2608, %2609
  %splat.splat3407 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %2611 = fmul <2 x double> %block255, %splat.splat3407
  %2612 = fadd <2 x double> %2610, %2611
  %splat.splat3410 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %2613 = fmul <2 x double> %block258, %splat.splat3410
  %2614 = fadd <2 x double> %2612, %2613
  %splat.splat3413 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %2615 = fmul <2 x double> %block261, %splat.splat3413
  %2616 = fadd <2 x double> %2614, %2615
  %splat.splat3416 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %2617 = fmul <2 x double> %block264, %splat.splat3416
  %2618 = fadd <2 x double> %2616, %2617
  %splat.splat3419 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %2619 = fmul <2 x double> %block267, %splat.splat3419
  %2620 = fadd <2 x double> %2618, %2619
  %splat.splat3422 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %2621 = fmul <2 x double> %block270, %splat.splat3422
  %2622 = fadd <2 x double> %2620, %2621
  %splat.splat3425 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %2623 = fmul <2 x double> %block273, %splat.splat3425
  %2624 = fadd <2 x double> %2622, %2623
  %splat.splat3428 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %2625 = fmul <2 x double> %block276, %splat.splat3428
  %2626 = fadd <2 x double> %2624, %2625
  %splat.splat3431 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %2627 = fmul <2 x double> %block279, %splat.splat3431
  %2628 = fadd <2 x double> %2626, %2627
  %splat.splat3434 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %2629 = fmul <2 x double> %block282, %splat.splat3434
  %2630 = fadd <2 x double> %2628, %2629
  %splat.splat3437 = shufflevector <21 x double> %col.load203, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %2631 = fmul <2 x double> %block285, %splat.splat3437
  %2632 = fadd <2 x double> %2630, %2631
  %2633 = shufflevector <2 x double> %2632, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2634 = fmul <2 x double> %block288, %splat.splat3377
  %2635 = fmul <2 x double> %block291, %splat.splat3380
  %2636 = fadd <2 x double> %2634, %2635
  %2637 = fmul <2 x double> %block294, %splat.splat3383
  %2638 = fadd <2 x double> %2636, %2637
  %2639 = fmul <2 x double> %block297, %splat.splat3386
  %2640 = fadd <2 x double> %2638, %2639
  %2641 = fmul <2 x double> %block300, %splat.splat3389
  %2642 = fadd <2 x double> %2640, %2641
  %2643 = fmul <2 x double> %block303, %splat.splat3392
  %2644 = fadd <2 x double> %2642, %2643
  %2645 = fmul <2 x double> %block306, %splat.splat3395
  %2646 = fadd <2 x double> %2644, %2645
  %2647 = fmul <2 x double> %block309, %splat.splat3398
  %2648 = fadd <2 x double> %2646, %2647
  %2649 = fmul <2 x double> %block312, %splat.splat3401
  %2650 = fadd <2 x double> %2648, %2649
  %2651 = fmul <2 x double> %block315, %splat.splat3404
  %2652 = fadd <2 x double> %2650, %2651
  %2653 = fmul <2 x double> %block318, %splat.splat3407
  %2654 = fadd <2 x double> %2652, %2653
  %2655 = fmul <2 x double> %block321, %splat.splat3410
  %2656 = fadd <2 x double> %2654, %2655
  %2657 = fmul <2 x double> %block324, %splat.splat3413
  %2658 = fadd <2 x double> %2656, %2657
  %2659 = fmul <2 x double> %block327, %splat.splat3416
  %2660 = fadd <2 x double> %2658, %2659
  %2661 = fmul <2 x double> %block330, %splat.splat3419
  %2662 = fadd <2 x double> %2660, %2661
  %2663 = fmul <2 x double> %block333, %splat.splat3422
  %2664 = fadd <2 x double> %2662, %2663
  %2665 = fmul <2 x double> %block336, %splat.splat3425
  %2666 = fadd <2 x double> %2664, %2665
  %2667 = fmul <2 x double> %block339, %splat.splat3428
  %2668 = fadd <2 x double> %2666, %2667
  %2669 = fmul <2 x double> %block342, %splat.splat3431
  %2670 = fadd <2 x double> %2668, %2669
  %2671 = fmul <2 x double> %block345, %splat.splat3434
  %2672 = fadd <2 x double> %2670, %2671
  %2673 = fmul <2 x double> %block348, %splat.splat3437
  %2674 = fadd <2 x double> %2672, %2673
  %2675 = shufflevector <2 x double> %2674, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2676 = shufflevector <10 x double> %2633, <10 x double> %2675, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2677 = fmul <2 x double> %block351, %splat.splat3377
  %2678 = fmul <2 x double> %block354, %splat.splat3380
  %2679 = fadd <2 x double> %2677, %2678
  %2680 = fmul <2 x double> %block357, %splat.splat3383
  %2681 = fadd <2 x double> %2679, %2680
  %2682 = fmul <2 x double> %block360, %splat.splat3386
  %2683 = fadd <2 x double> %2681, %2682
  %2684 = fmul <2 x double> %block363, %splat.splat3389
  %2685 = fadd <2 x double> %2683, %2684
  %2686 = fmul <2 x double> %block366, %splat.splat3392
  %2687 = fadd <2 x double> %2685, %2686
  %2688 = fmul <2 x double> %block369, %splat.splat3395
  %2689 = fadd <2 x double> %2687, %2688
  %2690 = fmul <2 x double> %block372, %splat.splat3398
  %2691 = fadd <2 x double> %2689, %2690
  %2692 = fmul <2 x double> %block375, %splat.splat3401
  %2693 = fadd <2 x double> %2691, %2692
  %2694 = fmul <2 x double> %block378, %splat.splat3404
  %2695 = fadd <2 x double> %2693, %2694
  %2696 = fmul <2 x double> %block381, %splat.splat3407
  %2697 = fadd <2 x double> %2695, %2696
  %2698 = fmul <2 x double> %block384, %splat.splat3410
  %2699 = fadd <2 x double> %2697, %2698
  %2700 = fmul <2 x double> %block387, %splat.splat3413
  %2701 = fadd <2 x double> %2699, %2700
  %2702 = fmul <2 x double> %block390, %splat.splat3416
  %2703 = fadd <2 x double> %2701, %2702
  %2704 = fmul <2 x double> %block393, %splat.splat3419
  %2705 = fadd <2 x double> %2703, %2704
  %2706 = fmul <2 x double> %block396, %splat.splat3422
  %2707 = fadd <2 x double> %2705, %2706
  %2708 = fmul <2 x double> %block399, %splat.splat3425
  %2709 = fadd <2 x double> %2707, %2708
  %2710 = fmul <2 x double> %block402, %splat.splat3428
  %2711 = fadd <2 x double> %2709, %2710
  %2712 = fmul <2 x double> %block405, %splat.splat3431
  %2713 = fadd <2 x double> %2711, %2712
  %2714 = fmul <2 x double> %block408, %splat.splat3434
  %2715 = fadd <2 x double> %2713, %2714
  %2716 = fmul <2 x double> %block411, %splat.splat3437
  %2717 = fadd <2 x double> %2715, %2716
  %2718 = shufflevector <2 x double> %2717, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2719 = shufflevector <10 x double> %2676, <10 x double> %2718, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %2720 = fmul <2 x double> %block414, %splat.splat3377
  %2721 = fmul <2 x double> %block417, %splat.splat3380
  %2722 = fadd <2 x double> %2720, %2721
  %2723 = fmul <2 x double> %block420, %splat.splat3383
  %2724 = fadd <2 x double> %2722, %2723
  %2725 = fmul <2 x double> %block423, %splat.splat3386
  %2726 = fadd <2 x double> %2724, %2725
  %2727 = fmul <2 x double> %block426, %splat.splat3389
  %2728 = fadd <2 x double> %2726, %2727
  %2729 = fmul <2 x double> %block429, %splat.splat3392
  %2730 = fadd <2 x double> %2728, %2729
  %2731 = fmul <2 x double> %block432, %splat.splat3395
  %2732 = fadd <2 x double> %2730, %2731
  %2733 = fmul <2 x double> %block435, %splat.splat3398
  %2734 = fadd <2 x double> %2732, %2733
  %2735 = fmul <2 x double> %block438, %splat.splat3401
  %2736 = fadd <2 x double> %2734, %2735
  %2737 = fmul <2 x double> %block441, %splat.splat3404
  %2738 = fadd <2 x double> %2736, %2737
  %2739 = fmul <2 x double> %block444, %splat.splat3407
  %2740 = fadd <2 x double> %2738, %2739
  %2741 = fmul <2 x double> %block447, %splat.splat3410
  %2742 = fadd <2 x double> %2740, %2741
  %2743 = fmul <2 x double> %block450, %splat.splat3413
  %2744 = fadd <2 x double> %2742, %2743
  %2745 = fmul <2 x double> %block453, %splat.splat3416
  %2746 = fadd <2 x double> %2744, %2745
  %2747 = fmul <2 x double> %block456, %splat.splat3419
  %2748 = fadd <2 x double> %2746, %2747
  %2749 = fmul <2 x double> %block459, %splat.splat3422
  %2750 = fadd <2 x double> %2748, %2749
  %2751 = fmul <2 x double> %block462, %splat.splat3425
  %2752 = fadd <2 x double> %2750, %2751
  %2753 = fmul <2 x double> %block465, %splat.splat3428
  %2754 = fadd <2 x double> %2752, %2753
  %2755 = fmul <2 x double> %block468, %splat.splat3431
  %2756 = fadd <2 x double> %2754, %2755
  %2757 = fmul <2 x double> %block471, %splat.splat3434
  %2758 = fadd <2 x double> %2756, %2757
  %2759 = fmul <2 x double> %block474, %splat.splat3437
  %2760 = fadd <2 x double> %2758, %2759
  %2761 = shufflevector <2 x double> %2760, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2762 = shufflevector <10 x double> %2719, <10 x double> %2761, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %2763 = fmul <2 x double> %block477, %splat.splat3377
  %2764 = fmul <2 x double> %block480, %splat.splat3380
  %2765 = fadd <2 x double> %2763, %2764
  %2766 = fmul <2 x double> %block483, %splat.splat3383
  %2767 = fadd <2 x double> %2765, %2766
  %2768 = fmul <2 x double> %block486, %splat.splat3386
  %2769 = fadd <2 x double> %2767, %2768
  %2770 = fmul <2 x double> %block489, %splat.splat3389
  %2771 = fadd <2 x double> %2769, %2770
  %2772 = fmul <2 x double> %block492, %splat.splat3392
  %2773 = fadd <2 x double> %2771, %2772
  %2774 = fmul <2 x double> %block495, %splat.splat3395
  %2775 = fadd <2 x double> %2773, %2774
  %2776 = fmul <2 x double> %block498, %splat.splat3398
  %2777 = fadd <2 x double> %2775, %2776
  %2778 = fmul <2 x double> %block501, %splat.splat3401
  %2779 = fadd <2 x double> %2777, %2778
  %2780 = fmul <2 x double> %block504, %splat.splat3404
  %2781 = fadd <2 x double> %2779, %2780
  %2782 = fmul <2 x double> %block507, %splat.splat3407
  %2783 = fadd <2 x double> %2781, %2782
  %2784 = fmul <2 x double> %block510, %splat.splat3410
  %2785 = fadd <2 x double> %2783, %2784
  %2786 = fmul <2 x double> %block513, %splat.splat3413
  %2787 = fadd <2 x double> %2785, %2786
  %2788 = fmul <2 x double> %block516, %splat.splat3416
  %2789 = fadd <2 x double> %2787, %2788
  %2790 = fmul <2 x double> %block519, %splat.splat3419
  %2791 = fadd <2 x double> %2789, %2790
  %2792 = fmul <2 x double> %block522, %splat.splat3422
  %2793 = fadd <2 x double> %2791, %2792
  %2794 = fmul <2 x double> %block525, %splat.splat3425
  %2795 = fadd <2 x double> %2793, %2794
  %2796 = fmul <2 x double> %block528, %splat.splat3428
  %2797 = fadd <2 x double> %2795, %2796
  %2798 = fmul <2 x double> %block531, %splat.splat3431
  %2799 = fadd <2 x double> %2797, %2798
  %2800 = fmul <2 x double> %block534, %splat.splat3434
  %2801 = fadd <2 x double> %2799, %2800
  %2802 = fmul <2 x double> %block537, %splat.splat3437
  %2803 = fadd <2 x double> %2801, %2802
  %2804 = shufflevector <2 x double> %2803, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2805 = shufflevector <10 x double> %2762, <10 x double> %2804, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat3692 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> zeroinitializer
  %2806 = fmul <2 x double> %block, %splat.splat3692
  %splat.splat3695 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %2807 = fmul <2 x double> %block228, %splat.splat3695
  %2808 = fadd <2 x double> %2806, %2807
  %splat.splat3698 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %2809 = fmul <2 x double> %block231, %splat.splat3698
  %2810 = fadd <2 x double> %2808, %2809
  %splat.splat3701 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %2811 = fmul <2 x double> %block234, %splat.splat3701
  %2812 = fadd <2 x double> %2810, %2811
  %splat.splat3704 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %2813 = fmul <2 x double> %block237, %splat.splat3704
  %2814 = fadd <2 x double> %2812, %2813
  %splat.splat3707 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %2815 = fmul <2 x double> %block240, %splat.splat3707
  %2816 = fadd <2 x double> %2814, %2815
  %splat.splat3710 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %2817 = fmul <2 x double> %block243, %splat.splat3710
  %2818 = fadd <2 x double> %2816, %2817
  %splat.splat3713 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %2819 = fmul <2 x double> %block246, %splat.splat3713
  %2820 = fadd <2 x double> %2818, %2819
  %splat.splat3716 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %2821 = fmul <2 x double> %block249, %splat.splat3716
  %2822 = fadd <2 x double> %2820, %2821
  %splat.splat3719 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %2823 = fmul <2 x double> %block252, %splat.splat3719
  %2824 = fadd <2 x double> %2822, %2823
  %splat.splat3722 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %2825 = fmul <2 x double> %block255, %splat.splat3722
  %2826 = fadd <2 x double> %2824, %2825
  %splat.splat3725 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %2827 = fmul <2 x double> %block258, %splat.splat3725
  %2828 = fadd <2 x double> %2826, %2827
  %splat.splat3728 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %2829 = fmul <2 x double> %block261, %splat.splat3728
  %2830 = fadd <2 x double> %2828, %2829
  %splat.splat3731 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %2831 = fmul <2 x double> %block264, %splat.splat3731
  %2832 = fadd <2 x double> %2830, %2831
  %splat.splat3734 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %2833 = fmul <2 x double> %block267, %splat.splat3734
  %2834 = fadd <2 x double> %2832, %2833
  %splat.splat3737 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %2835 = fmul <2 x double> %block270, %splat.splat3737
  %2836 = fadd <2 x double> %2834, %2835
  %splat.splat3740 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %2837 = fmul <2 x double> %block273, %splat.splat3740
  %2838 = fadd <2 x double> %2836, %2837
  %splat.splat3743 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %2839 = fmul <2 x double> %block276, %splat.splat3743
  %2840 = fadd <2 x double> %2838, %2839
  %splat.splat3746 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %2841 = fmul <2 x double> %block279, %splat.splat3746
  %2842 = fadd <2 x double> %2840, %2841
  %splat.splat3749 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %2843 = fmul <2 x double> %block282, %splat.splat3749
  %2844 = fadd <2 x double> %2842, %2843
  %splat.splat3752 = shufflevector <21 x double> %col.load205, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %2845 = fmul <2 x double> %block285, %splat.splat3752
  %2846 = fadd <2 x double> %2844, %2845
  %2847 = shufflevector <2 x double> %2846, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2848 = fmul <2 x double> %block288, %splat.splat3692
  %2849 = fmul <2 x double> %block291, %splat.splat3695
  %2850 = fadd <2 x double> %2848, %2849
  %2851 = fmul <2 x double> %block294, %splat.splat3698
  %2852 = fadd <2 x double> %2850, %2851
  %2853 = fmul <2 x double> %block297, %splat.splat3701
  %2854 = fadd <2 x double> %2852, %2853
  %2855 = fmul <2 x double> %block300, %splat.splat3704
  %2856 = fadd <2 x double> %2854, %2855
  %2857 = fmul <2 x double> %block303, %splat.splat3707
  %2858 = fadd <2 x double> %2856, %2857
  %2859 = fmul <2 x double> %block306, %splat.splat3710
  %2860 = fadd <2 x double> %2858, %2859
  %2861 = fmul <2 x double> %block309, %splat.splat3713
  %2862 = fadd <2 x double> %2860, %2861
  %2863 = fmul <2 x double> %block312, %splat.splat3716
  %2864 = fadd <2 x double> %2862, %2863
  %2865 = fmul <2 x double> %block315, %splat.splat3719
  %2866 = fadd <2 x double> %2864, %2865
  %2867 = fmul <2 x double> %block318, %splat.splat3722
  %2868 = fadd <2 x double> %2866, %2867
  %2869 = fmul <2 x double> %block321, %splat.splat3725
  %2870 = fadd <2 x double> %2868, %2869
  %2871 = fmul <2 x double> %block324, %splat.splat3728
  %2872 = fadd <2 x double> %2870, %2871
  %2873 = fmul <2 x double> %block327, %splat.splat3731
  %2874 = fadd <2 x double> %2872, %2873
  %2875 = fmul <2 x double> %block330, %splat.splat3734
  %2876 = fadd <2 x double> %2874, %2875
  %2877 = fmul <2 x double> %block333, %splat.splat3737
  %2878 = fadd <2 x double> %2876, %2877
  %2879 = fmul <2 x double> %block336, %splat.splat3740
  %2880 = fadd <2 x double> %2878, %2879
  %2881 = fmul <2 x double> %block339, %splat.splat3743
  %2882 = fadd <2 x double> %2880, %2881
  %2883 = fmul <2 x double> %block342, %splat.splat3746
  %2884 = fadd <2 x double> %2882, %2883
  %2885 = fmul <2 x double> %block345, %splat.splat3749
  %2886 = fadd <2 x double> %2884, %2885
  %2887 = fmul <2 x double> %block348, %splat.splat3752
  %2888 = fadd <2 x double> %2886, %2887
  %2889 = shufflevector <2 x double> %2888, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2890 = shufflevector <10 x double> %2847, <10 x double> %2889, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2891 = fmul <2 x double> %block351, %splat.splat3692
  %2892 = fmul <2 x double> %block354, %splat.splat3695
  %2893 = fadd <2 x double> %2891, %2892
  %2894 = fmul <2 x double> %block357, %splat.splat3698
  %2895 = fadd <2 x double> %2893, %2894
  %2896 = fmul <2 x double> %block360, %splat.splat3701
  %2897 = fadd <2 x double> %2895, %2896
  %2898 = fmul <2 x double> %block363, %splat.splat3704
  %2899 = fadd <2 x double> %2897, %2898
  %2900 = fmul <2 x double> %block366, %splat.splat3707
  %2901 = fadd <2 x double> %2899, %2900
  %2902 = fmul <2 x double> %block369, %splat.splat3710
  %2903 = fadd <2 x double> %2901, %2902
  %2904 = fmul <2 x double> %block372, %splat.splat3713
  %2905 = fadd <2 x double> %2903, %2904
  %2906 = fmul <2 x double> %block375, %splat.splat3716
  %2907 = fadd <2 x double> %2905, %2906
  %2908 = fmul <2 x double> %block378, %splat.splat3719
  %2909 = fadd <2 x double> %2907, %2908
  %2910 = fmul <2 x double> %block381, %splat.splat3722
  %2911 = fadd <2 x double> %2909, %2910
  %2912 = fmul <2 x double> %block384, %splat.splat3725
  %2913 = fadd <2 x double> %2911, %2912
  %2914 = fmul <2 x double> %block387, %splat.splat3728
  %2915 = fadd <2 x double> %2913, %2914
  %2916 = fmul <2 x double> %block390, %splat.splat3731
  %2917 = fadd <2 x double> %2915, %2916
  %2918 = fmul <2 x double> %block393, %splat.splat3734
  %2919 = fadd <2 x double> %2917, %2918
  %2920 = fmul <2 x double> %block396, %splat.splat3737
  %2921 = fadd <2 x double> %2919, %2920
  %2922 = fmul <2 x double> %block399, %splat.splat3740
  %2923 = fadd <2 x double> %2921, %2922
  %2924 = fmul <2 x double> %block402, %splat.splat3743
  %2925 = fadd <2 x double> %2923, %2924
  %2926 = fmul <2 x double> %block405, %splat.splat3746
  %2927 = fadd <2 x double> %2925, %2926
  %2928 = fmul <2 x double> %block408, %splat.splat3749
  %2929 = fadd <2 x double> %2927, %2928
  %2930 = fmul <2 x double> %block411, %splat.splat3752
  %2931 = fadd <2 x double> %2929, %2930
  %2932 = shufflevector <2 x double> %2931, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2933 = shufflevector <10 x double> %2890, <10 x double> %2932, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %2934 = fmul <2 x double> %block414, %splat.splat3692
  %2935 = fmul <2 x double> %block417, %splat.splat3695
  %2936 = fadd <2 x double> %2934, %2935
  %2937 = fmul <2 x double> %block420, %splat.splat3698
  %2938 = fadd <2 x double> %2936, %2937
  %2939 = fmul <2 x double> %block423, %splat.splat3701
  %2940 = fadd <2 x double> %2938, %2939
  %2941 = fmul <2 x double> %block426, %splat.splat3704
  %2942 = fadd <2 x double> %2940, %2941
  %2943 = fmul <2 x double> %block429, %splat.splat3707
  %2944 = fadd <2 x double> %2942, %2943
  %2945 = fmul <2 x double> %block432, %splat.splat3710
  %2946 = fadd <2 x double> %2944, %2945
  %2947 = fmul <2 x double> %block435, %splat.splat3713
  %2948 = fadd <2 x double> %2946, %2947
  %2949 = fmul <2 x double> %block438, %splat.splat3716
  %2950 = fadd <2 x double> %2948, %2949
  %2951 = fmul <2 x double> %block441, %splat.splat3719
  %2952 = fadd <2 x double> %2950, %2951
  %2953 = fmul <2 x double> %block444, %splat.splat3722
  %2954 = fadd <2 x double> %2952, %2953
  %2955 = fmul <2 x double> %block447, %splat.splat3725
  %2956 = fadd <2 x double> %2954, %2955
  %2957 = fmul <2 x double> %block450, %splat.splat3728
  %2958 = fadd <2 x double> %2956, %2957
  %2959 = fmul <2 x double> %block453, %splat.splat3731
  %2960 = fadd <2 x double> %2958, %2959
  %2961 = fmul <2 x double> %block456, %splat.splat3734
  %2962 = fadd <2 x double> %2960, %2961
  %2963 = fmul <2 x double> %block459, %splat.splat3737
  %2964 = fadd <2 x double> %2962, %2963
  %2965 = fmul <2 x double> %block462, %splat.splat3740
  %2966 = fadd <2 x double> %2964, %2965
  %2967 = fmul <2 x double> %block465, %splat.splat3743
  %2968 = fadd <2 x double> %2966, %2967
  %2969 = fmul <2 x double> %block468, %splat.splat3746
  %2970 = fadd <2 x double> %2968, %2969
  %2971 = fmul <2 x double> %block471, %splat.splat3749
  %2972 = fadd <2 x double> %2970, %2971
  %2973 = fmul <2 x double> %block474, %splat.splat3752
  %2974 = fadd <2 x double> %2972, %2973
  %2975 = shufflevector <2 x double> %2974, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2976 = shufflevector <10 x double> %2933, <10 x double> %2975, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %2977 = fmul <2 x double> %block477, %splat.splat3692
  %2978 = fmul <2 x double> %block480, %splat.splat3695
  %2979 = fadd <2 x double> %2977, %2978
  %2980 = fmul <2 x double> %block483, %splat.splat3698
  %2981 = fadd <2 x double> %2979, %2980
  %2982 = fmul <2 x double> %block486, %splat.splat3701
  %2983 = fadd <2 x double> %2981, %2982
  %2984 = fmul <2 x double> %block489, %splat.splat3704
  %2985 = fadd <2 x double> %2983, %2984
  %2986 = fmul <2 x double> %block492, %splat.splat3707
  %2987 = fadd <2 x double> %2985, %2986
  %2988 = fmul <2 x double> %block495, %splat.splat3710
  %2989 = fadd <2 x double> %2987, %2988
  %2990 = fmul <2 x double> %block498, %splat.splat3713
  %2991 = fadd <2 x double> %2989, %2990
  %2992 = fmul <2 x double> %block501, %splat.splat3716
  %2993 = fadd <2 x double> %2991, %2992
  %2994 = fmul <2 x double> %block504, %splat.splat3719
  %2995 = fadd <2 x double> %2993, %2994
  %2996 = fmul <2 x double> %block507, %splat.splat3722
  %2997 = fadd <2 x double> %2995, %2996
  %2998 = fmul <2 x double> %block510, %splat.splat3725
  %2999 = fadd <2 x double> %2997, %2998
  %3000 = fmul <2 x double> %block513, %splat.splat3728
  %3001 = fadd <2 x double> %2999, %3000
  %3002 = fmul <2 x double> %block516, %splat.splat3731
  %3003 = fadd <2 x double> %3001, %3002
  %3004 = fmul <2 x double> %block519, %splat.splat3734
  %3005 = fadd <2 x double> %3003, %3004
  %3006 = fmul <2 x double> %block522, %splat.splat3737
  %3007 = fadd <2 x double> %3005, %3006
  %3008 = fmul <2 x double> %block525, %splat.splat3740
  %3009 = fadd <2 x double> %3007, %3008
  %3010 = fmul <2 x double> %block528, %splat.splat3743
  %3011 = fadd <2 x double> %3009, %3010
  %3012 = fmul <2 x double> %block531, %splat.splat3746
  %3013 = fadd <2 x double> %3011, %3012
  %3014 = fmul <2 x double> %block534, %splat.splat3749
  %3015 = fadd <2 x double> %3013, %3014
  %3016 = fmul <2 x double> %block537, %splat.splat3752
  %3017 = fadd <2 x double> %3015, %3016
  %3018 = shufflevector <2 x double> %3017, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3019 = shufflevector <10 x double> %2976, <10 x double> %3018, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat4007 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> zeroinitializer
  %3020 = fmul <2 x double> %block, %splat.splat4007
  %splat.splat4010 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %3021 = fmul <2 x double> %block228, %splat.splat4010
  %3022 = fadd <2 x double> %3020, %3021
  %splat.splat4013 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %3023 = fmul <2 x double> %block231, %splat.splat4013
  %3024 = fadd <2 x double> %3022, %3023
  %splat.splat4016 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %3025 = fmul <2 x double> %block234, %splat.splat4016
  %3026 = fadd <2 x double> %3024, %3025
  %splat.splat4019 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %3027 = fmul <2 x double> %block237, %splat.splat4019
  %3028 = fadd <2 x double> %3026, %3027
  %splat.splat4022 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %3029 = fmul <2 x double> %block240, %splat.splat4022
  %3030 = fadd <2 x double> %3028, %3029
  %splat.splat4025 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %3031 = fmul <2 x double> %block243, %splat.splat4025
  %3032 = fadd <2 x double> %3030, %3031
  %splat.splat4028 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %3033 = fmul <2 x double> %block246, %splat.splat4028
  %3034 = fadd <2 x double> %3032, %3033
  %splat.splat4031 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %3035 = fmul <2 x double> %block249, %splat.splat4031
  %3036 = fadd <2 x double> %3034, %3035
  %splat.splat4034 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %3037 = fmul <2 x double> %block252, %splat.splat4034
  %3038 = fadd <2 x double> %3036, %3037
  %splat.splat4037 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %3039 = fmul <2 x double> %block255, %splat.splat4037
  %3040 = fadd <2 x double> %3038, %3039
  %splat.splat4040 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %3041 = fmul <2 x double> %block258, %splat.splat4040
  %3042 = fadd <2 x double> %3040, %3041
  %splat.splat4043 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %3043 = fmul <2 x double> %block261, %splat.splat4043
  %3044 = fadd <2 x double> %3042, %3043
  %splat.splat4046 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %3045 = fmul <2 x double> %block264, %splat.splat4046
  %3046 = fadd <2 x double> %3044, %3045
  %splat.splat4049 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %3047 = fmul <2 x double> %block267, %splat.splat4049
  %3048 = fadd <2 x double> %3046, %3047
  %splat.splat4052 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %3049 = fmul <2 x double> %block270, %splat.splat4052
  %3050 = fadd <2 x double> %3048, %3049
  %splat.splat4055 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %3051 = fmul <2 x double> %block273, %splat.splat4055
  %3052 = fadd <2 x double> %3050, %3051
  %splat.splat4058 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %3053 = fmul <2 x double> %block276, %splat.splat4058
  %3054 = fadd <2 x double> %3052, %3053
  %splat.splat4061 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %3055 = fmul <2 x double> %block279, %splat.splat4061
  %3056 = fadd <2 x double> %3054, %3055
  %splat.splat4064 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %3057 = fmul <2 x double> %block282, %splat.splat4064
  %3058 = fadd <2 x double> %3056, %3057
  %splat.splat4067 = shufflevector <21 x double> %col.load207, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %3059 = fmul <2 x double> %block285, %splat.splat4067
  %3060 = fadd <2 x double> %3058, %3059
  %3061 = shufflevector <2 x double> %3060, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3062 = fmul <2 x double> %block288, %splat.splat4007
  %3063 = fmul <2 x double> %block291, %splat.splat4010
  %3064 = fadd <2 x double> %3062, %3063
  %3065 = fmul <2 x double> %block294, %splat.splat4013
  %3066 = fadd <2 x double> %3064, %3065
  %3067 = fmul <2 x double> %block297, %splat.splat4016
  %3068 = fadd <2 x double> %3066, %3067
  %3069 = fmul <2 x double> %block300, %splat.splat4019
  %3070 = fadd <2 x double> %3068, %3069
  %3071 = fmul <2 x double> %block303, %splat.splat4022
  %3072 = fadd <2 x double> %3070, %3071
  %3073 = fmul <2 x double> %block306, %splat.splat4025
  %3074 = fadd <2 x double> %3072, %3073
  %3075 = fmul <2 x double> %block309, %splat.splat4028
  %3076 = fadd <2 x double> %3074, %3075
  %3077 = fmul <2 x double> %block312, %splat.splat4031
  %3078 = fadd <2 x double> %3076, %3077
  %3079 = fmul <2 x double> %block315, %splat.splat4034
  %3080 = fadd <2 x double> %3078, %3079
  %3081 = fmul <2 x double> %block318, %splat.splat4037
  %3082 = fadd <2 x double> %3080, %3081
  %3083 = fmul <2 x double> %block321, %splat.splat4040
  %3084 = fadd <2 x double> %3082, %3083
  %3085 = fmul <2 x double> %block324, %splat.splat4043
  %3086 = fadd <2 x double> %3084, %3085
  %3087 = fmul <2 x double> %block327, %splat.splat4046
  %3088 = fadd <2 x double> %3086, %3087
  %3089 = fmul <2 x double> %block330, %splat.splat4049
  %3090 = fadd <2 x double> %3088, %3089
  %3091 = fmul <2 x double> %block333, %splat.splat4052
  %3092 = fadd <2 x double> %3090, %3091
  %3093 = fmul <2 x double> %block336, %splat.splat4055
  %3094 = fadd <2 x double> %3092, %3093
  %3095 = fmul <2 x double> %block339, %splat.splat4058
  %3096 = fadd <2 x double> %3094, %3095
  %3097 = fmul <2 x double> %block342, %splat.splat4061
  %3098 = fadd <2 x double> %3096, %3097
  %3099 = fmul <2 x double> %block345, %splat.splat4064
  %3100 = fadd <2 x double> %3098, %3099
  %3101 = fmul <2 x double> %block348, %splat.splat4067
  %3102 = fadd <2 x double> %3100, %3101
  %3103 = shufflevector <2 x double> %3102, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3104 = shufflevector <10 x double> %3061, <10 x double> %3103, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3105 = fmul <2 x double> %block351, %splat.splat4007
  %3106 = fmul <2 x double> %block354, %splat.splat4010
  %3107 = fadd <2 x double> %3105, %3106
  %3108 = fmul <2 x double> %block357, %splat.splat4013
  %3109 = fadd <2 x double> %3107, %3108
  %3110 = fmul <2 x double> %block360, %splat.splat4016
  %3111 = fadd <2 x double> %3109, %3110
  %3112 = fmul <2 x double> %block363, %splat.splat4019
  %3113 = fadd <2 x double> %3111, %3112
  %3114 = fmul <2 x double> %block366, %splat.splat4022
  %3115 = fadd <2 x double> %3113, %3114
  %3116 = fmul <2 x double> %block369, %splat.splat4025
  %3117 = fadd <2 x double> %3115, %3116
  %3118 = fmul <2 x double> %block372, %splat.splat4028
  %3119 = fadd <2 x double> %3117, %3118
  %3120 = fmul <2 x double> %block375, %splat.splat4031
  %3121 = fadd <2 x double> %3119, %3120
  %3122 = fmul <2 x double> %block378, %splat.splat4034
  %3123 = fadd <2 x double> %3121, %3122
  %3124 = fmul <2 x double> %block381, %splat.splat4037
  %3125 = fadd <2 x double> %3123, %3124
  %3126 = fmul <2 x double> %block384, %splat.splat4040
  %3127 = fadd <2 x double> %3125, %3126
  %3128 = fmul <2 x double> %block387, %splat.splat4043
  %3129 = fadd <2 x double> %3127, %3128
  %3130 = fmul <2 x double> %block390, %splat.splat4046
  %3131 = fadd <2 x double> %3129, %3130
  %3132 = fmul <2 x double> %block393, %splat.splat4049
  %3133 = fadd <2 x double> %3131, %3132
  %3134 = fmul <2 x double> %block396, %splat.splat4052
  %3135 = fadd <2 x double> %3133, %3134
  %3136 = fmul <2 x double> %block399, %splat.splat4055
  %3137 = fadd <2 x double> %3135, %3136
  %3138 = fmul <2 x double> %block402, %splat.splat4058
  %3139 = fadd <2 x double> %3137, %3138
  %3140 = fmul <2 x double> %block405, %splat.splat4061
  %3141 = fadd <2 x double> %3139, %3140
  %3142 = fmul <2 x double> %block408, %splat.splat4064
  %3143 = fadd <2 x double> %3141, %3142
  %3144 = fmul <2 x double> %block411, %splat.splat4067
  %3145 = fadd <2 x double> %3143, %3144
  %3146 = shufflevector <2 x double> %3145, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3147 = shufflevector <10 x double> %3104, <10 x double> %3146, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %3148 = fmul <2 x double> %block414, %splat.splat4007
  %3149 = fmul <2 x double> %block417, %splat.splat4010
  %3150 = fadd <2 x double> %3148, %3149
  %3151 = fmul <2 x double> %block420, %splat.splat4013
  %3152 = fadd <2 x double> %3150, %3151
  %3153 = fmul <2 x double> %block423, %splat.splat4016
  %3154 = fadd <2 x double> %3152, %3153
  %3155 = fmul <2 x double> %block426, %splat.splat4019
  %3156 = fadd <2 x double> %3154, %3155
  %3157 = fmul <2 x double> %block429, %splat.splat4022
  %3158 = fadd <2 x double> %3156, %3157
  %3159 = fmul <2 x double> %block432, %splat.splat4025
  %3160 = fadd <2 x double> %3158, %3159
  %3161 = fmul <2 x double> %block435, %splat.splat4028
  %3162 = fadd <2 x double> %3160, %3161
  %3163 = fmul <2 x double> %block438, %splat.splat4031
  %3164 = fadd <2 x double> %3162, %3163
  %3165 = fmul <2 x double> %block441, %splat.splat4034
  %3166 = fadd <2 x double> %3164, %3165
  %3167 = fmul <2 x double> %block444, %splat.splat4037
  %3168 = fadd <2 x double> %3166, %3167
  %3169 = fmul <2 x double> %block447, %splat.splat4040
  %3170 = fadd <2 x double> %3168, %3169
  %3171 = fmul <2 x double> %block450, %splat.splat4043
  %3172 = fadd <2 x double> %3170, %3171
  %3173 = fmul <2 x double> %block453, %splat.splat4046
  %3174 = fadd <2 x double> %3172, %3173
  %3175 = fmul <2 x double> %block456, %splat.splat4049
  %3176 = fadd <2 x double> %3174, %3175
  %3177 = fmul <2 x double> %block459, %splat.splat4052
  %3178 = fadd <2 x double> %3176, %3177
  %3179 = fmul <2 x double> %block462, %splat.splat4055
  %3180 = fadd <2 x double> %3178, %3179
  %3181 = fmul <2 x double> %block465, %splat.splat4058
  %3182 = fadd <2 x double> %3180, %3181
  %3183 = fmul <2 x double> %block468, %splat.splat4061
  %3184 = fadd <2 x double> %3182, %3183
  %3185 = fmul <2 x double> %block471, %splat.splat4064
  %3186 = fadd <2 x double> %3184, %3185
  %3187 = fmul <2 x double> %block474, %splat.splat4067
  %3188 = fadd <2 x double> %3186, %3187
  %3189 = shufflevector <2 x double> %3188, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3190 = shufflevector <10 x double> %3147, <10 x double> %3189, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %3191 = fmul <2 x double> %block477, %splat.splat4007
  %3192 = fmul <2 x double> %block480, %splat.splat4010
  %3193 = fadd <2 x double> %3191, %3192
  %3194 = fmul <2 x double> %block483, %splat.splat4013
  %3195 = fadd <2 x double> %3193, %3194
  %3196 = fmul <2 x double> %block486, %splat.splat4016
  %3197 = fadd <2 x double> %3195, %3196
  %3198 = fmul <2 x double> %block489, %splat.splat4019
  %3199 = fadd <2 x double> %3197, %3198
  %3200 = fmul <2 x double> %block492, %splat.splat4022
  %3201 = fadd <2 x double> %3199, %3200
  %3202 = fmul <2 x double> %block495, %splat.splat4025
  %3203 = fadd <2 x double> %3201, %3202
  %3204 = fmul <2 x double> %block498, %splat.splat4028
  %3205 = fadd <2 x double> %3203, %3204
  %3206 = fmul <2 x double> %block501, %splat.splat4031
  %3207 = fadd <2 x double> %3205, %3206
  %3208 = fmul <2 x double> %block504, %splat.splat4034
  %3209 = fadd <2 x double> %3207, %3208
  %3210 = fmul <2 x double> %block507, %splat.splat4037
  %3211 = fadd <2 x double> %3209, %3210
  %3212 = fmul <2 x double> %block510, %splat.splat4040
  %3213 = fadd <2 x double> %3211, %3212
  %3214 = fmul <2 x double> %block513, %splat.splat4043
  %3215 = fadd <2 x double> %3213, %3214
  %3216 = fmul <2 x double> %block516, %splat.splat4046
  %3217 = fadd <2 x double> %3215, %3216
  %3218 = fmul <2 x double> %block519, %splat.splat4049
  %3219 = fadd <2 x double> %3217, %3218
  %3220 = fmul <2 x double> %block522, %splat.splat4052
  %3221 = fadd <2 x double> %3219, %3220
  %3222 = fmul <2 x double> %block525, %splat.splat4055
  %3223 = fadd <2 x double> %3221, %3222
  %3224 = fmul <2 x double> %block528, %splat.splat4058
  %3225 = fadd <2 x double> %3223, %3224
  %3226 = fmul <2 x double> %block531, %splat.splat4061
  %3227 = fadd <2 x double> %3225, %3226
  %3228 = fmul <2 x double> %block534, %splat.splat4064
  %3229 = fadd <2 x double> %3227, %3228
  %3230 = fmul <2 x double> %block537, %splat.splat4067
  %3231 = fadd <2 x double> %3229, %3230
  %3232 = shufflevector <2 x double> %3231, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3233 = shufflevector <10 x double> %3190, <10 x double> %3232, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat4322 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> zeroinitializer
  %3234 = fmul <2 x double> %block, %splat.splat4322
  %splat.splat4325 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %3235 = fmul <2 x double> %block228, %splat.splat4325
  %3236 = fadd <2 x double> %3234, %3235
  %splat.splat4328 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %3237 = fmul <2 x double> %block231, %splat.splat4328
  %3238 = fadd <2 x double> %3236, %3237
  %splat.splat4331 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %3239 = fmul <2 x double> %block234, %splat.splat4331
  %3240 = fadd <2 x double> %3238, %3239
  %splat.splat4334 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %3241 = fmul <2 x double> %block237, %splat.splat4334
  %3242 = fadd <2 x double> %3240, %3241
  %splat.splat4337 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %3243 = fmul <2 x double> %block240, %splat.splat4337
  %3244 = fadd <2 x double> %3242, %3243
  %splat.splat4340 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %3245 = fmul <2 x double> %block243, %splat.splat4340
  %3246 = fadd <2 x double> %3244, %3245
  %splat.splat4343 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %3247 = fmul <2 x double> %block246, %splat.splat4343
  %3248 = fadd <2 x double> %3246, %3247
  %splat.splat4346 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %3249 = fmul <2 x double> %block249, %splat.splat4346
  %3250 = fadd <2 x double> %3248, %3249
  %splat.splat4349 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %3251 = fmul <2 x double> %block252, %splat.splat4349
  %3252 = fadd <2 x double> %3250, %3251
  %splat.splat4352 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %3253 = fmul <2 x double> %block255, %splat.splat4352
  %3254 = fadd <2 x double> %3252, %3253
  %splat.splat4355 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %3255 = fmul <2 x double> %block258, %splat.splat4355
  %3256 = fadd <2 x double> %3254, %3255
  %splat.splat4358 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %3257 = fmul <2 x double> %block261, %splat.splat4358
  %3258 = fadd <2 x double> %3256, %3257
  %splat.splat4361 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %3259 = fmul <2 x double> %block264, %splat.splat4361
  %3260 = fadd <2 x double> %3258, %3259
  %splat.splat4364 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %3261 = fmul <2 x double> %block267, %splat.splat4364
  %3262 = fadd <2 x double> %3260, %3261
  %splat.splat4367 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %3263 = fmul <2 x double> %block270, %splat.splat4367
  %3264 = fadd <2 x double> %3262, %3263
  %splat.splat4370 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %3265 = fmul <2 x double> %block273, %splat.splat4370
  %3266 = fadd <2 x double> %3264, %3265
  %splat.splat4373 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %3267 = fmul <2 x double> %block276, %splat.splat4373
  %3268 = fadd <2 x double> %3266, %3267
  %splat.splat4376 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %3269 = fmul <2 x double> %block279, %splat.splat4376
  %3270 = fadd <2 x double> %3268, %3269
  %splat.splat4379 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %3271 = fmul <2 x double> %block282, %splat.splat4379
  %3272 = fadd <2 x double> %3270, %3271
  %splat.splat4382 = shufflevector <21 x double> %col.load209, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %3273 = fmul <2 x double> %block285, %splat.splat4382
  %3274 = fadd <2 x double> %3272, %3273
  %3275 = shufflevector <2 x double> %3274, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3276 = fmul <2 x double> %block288, %splat.splat4322
  %3277 = fmul <2 x double> %block291, %splat.splat4325
  %3278 = fadd <2 x double> %3276, %3277
  %3279 = fmul <2 x double> %block294, %splat.splat4328
  %3280 = fadd <2 x double> %3278, %3279
  %3281 = fmul <2 x double> %block297, %splat.splat4331
  %3282 = fadd <2 x double> %3280, %3281
  %3283 = fmul <2 x double> %block300, %splat.splat4334
  %3284 = fadd <2 x double> %3282, %3283
  %3285 = fmul <2 x double> %block303, %splat.splat4337
  %3286 = fadd <2 x double> %3284, %3285
  %3287 = fmul <2 x double> %block306, %splat.splat4340
  %3288 = fadd <2 x double> %3286, %3287
  %3289 = fmul <2 x double> %block309, %splat.splat4343
  %3290 = fadd <2 x double> %3288, %3289
  %3291 = fmul <2 x double> %block312, %splat.splat4346
  %3292 = fadd <2 x double> %3290, %3291
  %3293 = fmul <2 x double> %block315, %splat.splat4349
  %3294 = fadd <2 x double> %3292, %3293
  %3295 = fmul <2 x double> %block318, %splat.splat4352
  %3296 = fadd <2 x double> %3294, %3295
  %3297 = fmul <2 x double> %block321, %splat.splat4355
  %3298 = fadd <2 x double> %3296, %3297
  %3299 = fmul <2 x double> %block324, %splat.splat4358
  %3300 = fadd <2 x double> %3298, %3299
  %3301 = fmul <2 x double> %block327, %splat.splat4361
  %3302 = fadd <2 x double> %3300, %3301
  %3303 = fmul <2 x double> %block330, %splat.splat4364
  %3304 = fadd <2 x double> %3302, %3303
  %3305 = fmul <2 x double> %block333, %splat.splat4367
  %3306 = fadd <2 x double> %3304, %3305
  %3307 = fmul <2 x double> %block336, %splat.splat4370
  %3308 = fadd <2 x double> %3306, %3307
  %3309 = fmul <2 x double> %block339, %splat.splat4373
  %3310 = fadd <2 x double> %3308, %3309
  %3311 = fmul <2 x double> %block342, %splat.splat4376
  %3312 = fadd <2 x double> %3310, %3311
  %3313 = fmul <2 x double> %block345, %splat.splat4379
  %3314 = fadd <2 x double> %3312, %3313
  %3315 = fmul <2 x double> %block348, %splat.splat4382
  %3316 = fadd <2 x double> %3314, %3315
  %3317 = shufflevector <2 x double> %3316, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3318 = shufflevector <10 x double> %3275, <10 x double> %3317, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3319 = fmul <2 x double> %block351, %splat.splat4322
  %3320 = fmul <2 x double> %block354, %splat.splat4325
  %3321 = fadd <2 x double> %3319, %3320
  %3322 = fmul <2 x double> %block357, %splat.splat4328
  %3323 = fadd <2 x double> %3321, %3322
  %3324 = fmul <2 x double> %block360, %splat.splat4331
  %3325 = fadd <2 x double> %3323, %3324
  %3326 = fmul <2 x double> %block363, %splat.splat4334
  %3327 = fadd <2 x double> %3325, %3326
  %3328 = fmul <2 x double> %block366, %splat.splat4337
  %3329 = fadd <2 x double> %3327, %3328
  %3330 = fmul <2 x double> %block369, %splat.splat4340
  %3331 = fadd <2 x double> %3329, %3330
  %3332 = fmul <2 x double> %block372, %splat.splat4343
  %3333 = fadd <2 x double> %3331, %3332
  %3334 = fmul <2 x double> %block375, %splat.splat4346
  %3335 = fadd <2 x double> %3333, %3334
  %3336 = fmul <2 x double> %block378, %splat.splat4349
  %3337 = fadd <2 x double> %3335, %3336
  %3338 = fmul <2 x double> %block381, %splat.splat4352
  %3339 = fadd <2 x double> %3337, %3338
  %3340 = fmul <2 x double> %block384, %splat.splat4355
  %3341 = fadd <2 x double> %3339, %3340
  %3342 = fmul <2 x double> %block387, %splat.splat4358
  %3343 = fadd <2 x double> %3341, %3342
  %3344 = fmul <2 x double> %block390, %splat.splat4361
  %3345 = fadd <2 x double> %3343, %3344
  %3346 = fmul <2 x double> %block393, %splat.splat4364
  %3347 = fadd <2 x double> %3345, %3346
  %3348 = fmul <2 x double> %block396, %splat.splat4367
  %3349 = fadd <2 x double> %3347, %3348
  %3350 = fmul <2 x double> %block399, %splat.splat4370
  %3351 = fadd <2 x double> %3349, %3350
  %3352 = fmul <2 x double> %block402, %splat.splat4373
  %3353 = fadd <2 x double> %3351, %3352
  %3354 = fmul <2 x double> %block405, %splat.splat4376
  %3355 = fadd <2 x double> %3353, %3354
  %3356 = fmul <2 x double> %block408, %splat.splat4379
  %3357 = fadd <2 x double> %3355, %3356
  %3358 = fmul <2 x double> %block411, %splat.splat4382
  %3359 = fadd <2 x double> %3357, %3358
  %3360 = shufflevector <2 x double> %3359, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3361 = shufflevector <10 x double> %3318, <10 x double> %3360, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %3362 = fmul <2 x double> %block414, %splat.splat4322
  %3363 = fmul <2 x double> %block417, %splat.splat4325
  %3364 = fadd <2 x double> %3362, %3363
  %3365 = fmul <2 x double> %block420, %splat.splat4328
  %3366 = fadd <2 x double> %3364, %3365
  %3367 = fmul <2 x double> %block423, %splat.splat4331
  %3368 = fadd <2 x double> %3366, %3367
  %3369 = fmul <2 x double> %block426, %splat.splat4334
  %3370 = fadd <2 x double> %3368, %3369
  %3371 = fmul <2 x double> %block429, %splat.splat4337
  %3372 = fadd <2 x double> %3370, %3371
  %3373 = fmul <2 x double> %block432, %splat.splat4340
  %3374 = fadd <2 x double> %3372, %3373
  %3375 = fmul <2 x double> %block435, %splat.splat4343
  %3376 = fadd <2 x double> %3374, %3375
  %3377 = fmul <2 x double> %block438, %splat.splat4346
  %3378 = fadd <2 x double> %3376, %3377
  %3379 = fmul <2 x double> %block441, %splat.splat4349
  %3380 = fadd <2 x double> %3378, %3379
  %3381 = fmul <2 x double> %block444, %splat.splat4352
  %3382 = fadd <2 x double> %3380, %3381
  %3383 = fmul <2 x double> %block447, %splat.splat4355
  %3384 = fadd <2 x double> %3382, %3383
  %3385 = fmul <2 x double> %block450, %splat.splat4358
  %3386 = fadd <2 x double> %3384, %3385
  %3387 = fmul <2 x double> %block453, %splat.splat4361
  %3388 = fadd <2 x double> %3386, %3387
  %3389 = fmul <2 x double> %block456, %splat.splat4364
  %3390 = fadd <2 x double> %3388, %3389
  %3391 = fmul <2 x double> %block459, %splat.splat4367
  %3392 = fadd <2 x double> %3390, %3391
  %3393 = fmul <2 x double> %block462, %splat.splat4370
  %3394 = fadd <2 x double> %3392, %3393
  %3395 = fmul <2 x double> %block465, %splat.splat4373
  %3396 = fadd <2 x double> %3394, %3395
  %3397 = fmul <2 x double> %block468, %splat.splat4376
  %3398 = fadd <2 x double> %3396, %3397
  %3399 = fmul <2 x double> %block471, %splat.splat4379
  %3400 = fadd <2 x double> %3398, %3399
  %3401 = fmul <2 x double> %block474, %splat.splat4382
  %3402 = fadd <2 x double> %3400, %3401
  %3403 = shufflevector <2 x double> %3402, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3404 = shufflevector <10 x double> %3361, <10 x double> %3403, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %3405 = fmul <2 x double> %block477, %splat.splat4322
  %3406 = fmul <2 x double> %block480, %splat.splat4325
  %3407 = fadd <2 x double> %3405, %3406
  %3408 = fmul <2 x double> %block483, %splat.splat4328
  %3409 = fadd <2 x double> %3407, %3408
  %3410 = fmul <2 x double> %block486, %splat.splat4331
  %3411 = fadd <2 x double> %3409, %3410
  %3412 = fmul <2 x double> %block489, %splat.splat4334
  %3413 = fadd <2 x double> %3411, %3412
  %3414 = fmul <2 x double> %block492, %splat.splat4337
  %3415 = fadd <2 x double> %3413, %3414
  %3416 = fmul <2 x double> %block495, %splat.splat4340
  %3417 = fadd <2 x double> %3415, %3416
  %3418 = fmul <2 x double> %block498, %splat.splat4343
  %3419 = fadd <2 x double> %3417, %3418
  %3420 = fmul <2 x double> %block501, %splat.splat4346
  %3421 = fadd <2 x double> %3419, %3420
  %3422 = fmul <2 x double> %block504, %splat.splat4349
  %3423 = fadd <2 x double> %3421, %3422
  %3424 = fmul <2 x double> %block507, %splat.splat4352
  %3425 = fadd <2 x double> %3423, %3424
  %3426 = fmul <2 x double> %block510, %splat.splat4355
  %3427 = fadd <2 x double> %3425, %3426
  %3428 = fmul <2 x double> %block513, %splat.splat4358
  %3429 = fadd <2 x double> %3427, %3428
  %3430 = fmul <2 x double> %block516, %splat.splat4361
  %3431 = fadd <2 x double> %3429, %3430
  %3432 = fmul <2 x double> %block519, %splat.splat4364
  %3433 = fadd <2 x double> %3431, %3432
  %3434 = fmul <2 x double> %block522, %splat.splat4367
  %3435 = fadd <2 x double> %3433, %3434
  %3436 = fmul <2 x double> %block525, %splat.splat4370
  %3437 = fadd <2 x double> %3435, %3436
  %3438 = fmul <2 x double> %block528, %splat.splat4373
  %3439 = fadd <2 x double> %3437, %3438
  %3440 = fmul <2 x double> %block531, %splat.splat4376
  %3441 = fadd <2 x double> %3439, %3440
  %3442 = fmul <2 x double> %block534, %splat.splat4379
  %3443 = fadd <2 x double> %3441, %3442
  %3444 = fmul <2 x double> %block537, %splat.splat4382
  %3445 = fadd <2 x double> %3443, %3444
  %3446 = shufflevector <2 x double> %3445, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3447 = shufflevector <10 x double> %3404, <10 x double> %3446, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat4637 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> zeroinitializer
  %3448 = fmul <2 x double> %block, %splat.splat4637
  %splat.splat4640 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %3449 = fmul <2 x double> %block228, %splat.splat4640
  %3450 = fadd <2 x double> %3448, %3449
  %splat.splat4643 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %3451 = fmul <2 x double> %block231, %splat.splat4643
  %3452 = fadd <2 x double> %3450, %3451
  %splat.splat4646 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %3453 = fmul <2 x double> %block234, %splat.splat4646
  %3454 = fadd <2 x double> %3452, %3453
  %splat.splat4649 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %3455 = fmul <2 x double> %block237, %splat.splat4649
  %3456 = fadd <2 x double> %3454, %3455
  %splat.splat4652 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %3457 = fmul <2 x double> %block240, %splat.splat4652
  %3458 = fadd <2 x double> %3456, %3457
  %splat.splat4655 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %3459 = fmul <2 x double> %block243, %splat.splat4655
  %3460 = fadd <2 x double> %3458, %3459
  %splat.splat4658 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %3461 = fmul <2 x double> %block246, %splat.splat4658
  %3462 = fadd <2 x double> %3460, %3461
  %splat.splat4661 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %3463 = fmul <2 x double> %block249, %splat.splat4661
  %3464 = fadd <2 x double> %3462, %3463
  %splat.splat4664 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %3465 = fmul <2 x double> %block252, %splat.splat4664
  %3466 = fadd <2 x double> %3464, %3465
  %splat.splat4667 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %3467 = fmul <2 x double> %block255, %splat.splat4667
  %3468 = fadd <2 x double> %3466, %3467
  %splat.splat4670 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %3469 = fmul <2 x double> %block258, %splat.splat4670
  %3470 = fadd <2 x double> %3468, %3469
  %splat.splat4673 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %3471 = fmul <2 x double> %block261, %splat.splat4673
  %3472 = fadd <2 x double> %3470, %3471
  %splat.splat4676 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %3473 = fmul <2 x double> %block264, %splat.splat4676
  %3474 = fadd <2 x double> %3472, %3473
  %splat.splat4679 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %3475 = fmul <2 x double> %block267, %splat.splat4679
  %3476 = fadd <2 x double> %3474, %3475
  %splat.splat4682 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %3477 = fmul <2 x double> %block270, %splat.splat4682
  %3478 = fadd <2 x double> %3476, %3477
  %splat.splat4685 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %3479 = fmul <2 x double> %block273, %splat.splat4685
  %3480 = fadd <2 x double> %3478, %3479
  %splat.splat4688 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %3481 = fmul <2 x double> %block276, %splat.splat4688
  %3482 = fadd <2 x double> %3480, %3481
  %splat.splat4691 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %3483 = fmul <2 x double> %block279, %splat.splat4691
  %3484 = fadd <2 x double> %3482, %3483
  %splat.splat4694 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %3485 = fmul <2 x double> %block282, %splat.splat4694
  %3486 = fadd <2 x double> %3484, %3485
  %splat.splat4697 = shufflevector <21 x double> %col.load211, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %3487 = fmul <2 x double> %block285, %splat.splat4697
  %3488 = fadd <2 x double> %3486, %3487
  %3489 = shufflevector <2 x double> %3488, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3490 = fmul <2 x double> %block288, %splat.splat4637
  %3491 = fmul <2 x double> %block291, %splat.splat4640
  %3492 = fadd <2 x double> %3490, %3491
  %3493 = fmul <2 x double> %block294, %splat.splat4643
  %3494 = fadd <2 x double> %3492, %3493
  %3495 = fmul <2 x double> %block297, %splat.splat4646
  %3496 = fadd <2 x double> %3494, %3495
  %3497 = fmul <2 x double> %block300, %splat.splat4649
  %3498 = fadd <2 x double> %3496, %3497
  %3499 = fmul <2 x double> %block303, %splat.splat4652
  %3500 = fadd <2 x double> %3498, %3499
  %3501 = fmul <2 x double> %block306, %splat.splat4655
  %3502 = fadd <2 x double> %3500, %3501
  %3503 = fmul <2 x double> %block309, %splat.splat4658
  %3504 = fadd <2 x double> %3502, %3503
  %3505 = fmul <2 x double> %block312, %splat.splat4661
  %3506 = fadd <2 x double> %3504, %3505
  %3507 = fmul <2 x double> %block315, %splat.splat4664
  %3508 = fadd <2 x double> %3506, %3507
  %3509 = fmul <2 x double> %block318, %splat.splat4667
  %3510 = fadd <2 x double> %3508, %3509
  %3511 = fmul <2 x double> %block321, %splat.splat4670
  %3512 = fadd <2 x double> %3510, %3511
  %3513 = fmul <2 x double> %block324, %splat.splat4673
  %3514 = fadd <2 x double> %3512, %3513
  %3515 = fmul <2 x double> %block327, %splat.splat4676
  %3516 = fadd <2 x double> %3514, %3515
  %3517 = fmul <2 x double> %block330, %splat.splat4679
  %3518 = fadd <2 x double> %3516, %3517
  %3519 = fmul <2 x double> %block333, %splat.splat4682
  %3520 = fadd <2 x double> %3518, %3519
  %3521 = fmul <2 x double> %block336, %splat.splat4685
  %3522 = fadd <2 x double> %3520, %3521
  %3523 = fmul <2 x double> %block339, %splat.splat4688
  %3524 = fadd <2 x double> %3522, %3523
  %3525 = fmul <2 x double> %block342, %splat.splat4691
  %3526 = fadd <2 x double> %3524, %3525
  %3527 = fmul <2 x double> %block345, %splat.splat4694
  %3528 = fadd <2 x double> %3526, %3527
  %3529 = fmul <2 x double> %block348, %splat.splat4697
  %3530 = fadd <2 x double> %3528, %3529
  %3531 = shufflevector <2 x double> %3530, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3532 = shufflevector <10 x double> %3489, <10 x double> %3531, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3533 = fmul <2 x double> %block351, %splat.splat4637
  %3534 = fmul <2 x double> %block354, %splat.splat4640
  %3535 = fadd <2 x double> %3533, %3534
  %3536 = fmul <2 x double> %block357, %splat.splat4643
  %3537 = fadd <2 x double> %3535, %3536
  %3538 = fmul <2 x double> %block360, %splat.splat4646
  %3539 = fadd <2 x double> %3537, %3538
  %3540 = fmul <2 x double> %block363, %splat.splat4649
  %3541 = fadd <2 x double> %3539, %3540
  %3542 = fmul <2 x double> %block366, %splat.splat4652
  %3543 = fadd <2 x double> %3541, %3542
  %3544 = fmul <2 x double> %block369, %splat.splat4655
  %3545 = fadd <2 x double> %3543, %3544
  %3546 = fmul <2 x double> %block372, %splat.splat4658
  %3547 = fadd <2 x double> %3545, %3546
  %3548 = fmul <2 x double> %block375, %splat.splat4661
  %3549 = fadd <2 x double> %3547, %3548
  %3550 = fmul <2 x double> %block378, %splat.splat4664
  %3551 = fadd <2 x double> %3549, %3550
  %3552 = fmul <2 x double> %block381, %splat.splat4667
  %3553 = fadd <2 x double> %3551, %3552
  %3554 = fmul <2 x double> %block384, %splat.splat4670
  %3555 = fadd <2 x double> %3553, %3554
  %3556 = fmul <2 x double> %block387, %splat.splat4673
  %3557 = fadd <2 x double> %3555, %3556
  %3558 = fmul <2 x double> %block390, %splat.splat4676
  %3559 = fadd <2 x double> %3557, %3558
  %3560 = fmul <2 x double> %block393, %splat.splat4679
  %3561 = fadd <2 x double> %3559, %3560
  %3562 = fmul <2 x double> %block396, %splat.splat4682
  %3563 = fadd <2 x double> %3561, %3562
  %3564 = fmul <2 x double> %block399, %splat.splat4685
  %3565 = fadd <2 x double> %3563, %3564
  %3566 = fmul <2 x double> %block402, %splat.splat4688
  %3567 = fadd <2 x double> %3565, %3566
  %3568 = fmul <2 x double> %block405, %splat.splat4691
  %3569 = fadd <2 x double> %3567, %3568
  %3570 = fmul <2 x double> %block408, %splat.splat4694
  %3571 = fadd <2 x double> %3569, %3570
  %3572 = fmul <2 x double> %block411, %splat.splat4697
  %3573 = fadd <2 x double> %3571, %3572
  %3574 = shufflevector <2 x double> %3573, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3575 = shufflevector <10 x double> %3532, <10 x double> %3574, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %3576 = fmul <2 x double> %block414, %splat.splat4637
  %3577 = fmul <2 x double> %block417, %splat.splat4640
  %3578 = fadd <2 x double> %3576, %3577
  %3579 = fmul <2 x double> %block420, %splat.splat4643
  %3580 = fadd <2 x double> %3578, %3579
  %3581 = fmul <2 x double> %block423, %splat.splat4646
  %3582 = fadd <2 x double> %3580, %3581
  %3583 = fmul <2 x double> %block426, %splat.splat4649
  %3584 = fadd <2 x double> %3582, %3583
  %3585 = fmul <2 x double> %block429, %splat.splat4652
  %3586 = fadd <2 x double> %3584, %3585
  %3587 = fmul <2 x double> %block432, %splat.splat4655
  %3588 = fadd <2 x double> %3586, %3587
  %3589 = fmul <2 x double> %block435, %splat.splat4658
  %3590 = fadd <2 x double> %3588, %3589
  %3591 = fmul <2 x double> %block438, %splat.splat4661
  %3592 = fadd <2 x double> %3590, %3591
  %3593 = fmul <2 x double> %block441, %splat.splat4664
  %3594 = fadd <2 x double> %3592, %3593
  %3595 = fmul <2 x double> %block444, %splat.splat4667
  %3596 = fadd <2 x double> %3594, %3595
  %3597 = fmul <2 x double> %block447, %splat.splat4670
  %3598 = fadd <2 x double> %3596, %3597
  %3599 = fmul <2 x double> %block450, %splat.splat4673
  %3600 = fadd <2 x double> %3598, %3599
  %3601 = fmul <2 x double> %block453, %splat.splat4676
  %3602 = fadd <2 x double> %3600, %3601
  %3603 = fmul <2 x double> %block456, %splat.splat4679
  %3604 = fadd <2 x double> %3602, %3603
  %3605 = fmul <2 x double> %block459, %splat.splat4682
  %3606 = fadd <2 x double> %3604, %3605
  %3607 = fmul <2 x double> %block462, %splat.splat4685
  %3608 = fadd <2 x double> %3606, %3607
  %3609 = fmul <2 x double> %block465, %splat.splat4688
  %3610 = fadd <2 x double> %3608, %3609
  %3611 = fmul <2 x double> %block468, %splat.splat4691
  %3612 = fadd <2 x double> %3610, %3611
  %3613 = fmul <2 x double> %block471, %splat.splat4694
  %3614 = fadd <2 x double> %3612, %3613
  %3615 = fmul <2 x double> %block474, %splat.splat4697
  %3616 = fadd <2 x double> %3614, %3615
  %3617 = shufflevector <2 x double> %3616, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3618 = shufflevector <10 x double> %3575, <10 x double> %3617, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %3619 = fmul <2 x double> %block477, %splat.splat4637
  %3620 = fmul <2 x double> %block480, %splat.splat4640
  %3621 = fadd <2 x double> %3619, %3620
  %3622 = fmul <2 x double> %block483, %splat.splat4643
  %3623 = fadd <2 x double> %3621, %3622
  %3624 = fmul <2 x double> %block486, %splat.splat4646
  %3625 = fadd <2 x double> %3623, %3624
  %3626 = fmul <2 x double> %block489, %splat.splat4649
  %3627 = fadd <2 x double> %3625, %3626
  %3628 = fmul <2 x double> %block492, %splat.splat4652
  %3629 = fadd <2 x double> %3627, %3628
  %3630 = fmul <2 x double> %block495, %splat.splat4655
  %3631 = fadd <2 x double> %3629, %3630
  %3632 = fmul <2 x double> %block498, %splat.splat4658
  %3633 = fadd <2 x double> %3631, %3632
  %3634 = fmul <2 x double> %block501, %splat.splat4661
  %3635 = fadd <2 x double> %3633, %3634
  %3636 = fmul <2 x double> %block504, %splat.splat4664
  %3637 = fadd <2 x double> %3635, %3636
  %3638 = fmul <2 x double> %block507, %splat.splat4667
  %3639 = fadd <2 x double> %3637, %3638
  %3640 = fmul <2 x double> %block510, %splat.splat4670
  %3641 = fadd <2 x double> %3639, %3640
  %3642 = fmul <2 x double> %block513, %splat.splat4673
  %3643 = fadd <2 x double> %3641, %3642
  %3644 = fmul <2 x double> %block516, %splat.splat4676
  %3645 = fadd <2 x double> %3643, %3644
  %3646 = fmul <2 x double> %block519, %splat.splat4679
  %3647 = fadd <2 x double> %3645, %3646
  %3648 = fmul <2 x double> %block522, %splat.splat4682
  %3649 = fadd <2 x double> %3647, %3648
  %3650 = fmul <2 x double> %block525, %splat.splat4685
  %3651 = fadd <2 x double> %3649, %3650
  %3652 = fmul <2 x double> %block528, %splat.splat4688
  %3653 = fadd <2 x double> %3651, %3652
  %3654 = fmul <2 x double> %block531, %splat.splat4691
  %3655 = fadd <2 x double> %3653, %3654
  %3656 = fmul <2 x double> %block534, %splat.splat4694
  %3657 = fadd <2 x double> %3655, %3656
  %3658 = fmul <2 x double> %block537, %splat.splat4697
  %3659 = fadd <2 x double> %3657, %3658
  %3660 = shufflevector <2 x double> %3659, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3661 = shufflevector <10 x double> %3618, <10 x double> %3660, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat4952 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> zeroinitializer
  %3662 = fmul <2 x double> %block, %splat.splat4952
  %splat.splat4955 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %3663 = fmul <2 x double> %block228, %splat.splat4955
  %3664 = fadd <2 x double> %3662, %3663
  %splat.splat4958 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %3665 = fmul <2 x double> %block231, %splat.splat4958
  %3666 = fadd <2 x double> %3664, %3665
  %splat.splat4961 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %3667 = fmul <2 x double> %block234, %splat.splat4961
  %3668 = fadd <2 x double> %3666, %3667
  %splat.splat4964 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %3669 = fmul <2 x double> %block237, %splat.splat4964
  %3670 = fadd <2 x double> %3668, %3669
  %splat.splat4967 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %3671 = fmul <2 x double> %block240, %splat.splat4967
  %3672 = fadd <2 x double> %3670, %3671
  %splat.splat4970 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %3673 = fmul <2 x double> %block243, %splat.splat4970
  %3674 = fadd <2 x double> %3672, %3673
  %splat.splat4973 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %3675 = fmul <2 x double> %block246, %splat.splat4973
  %3676 = fadd <2 x double> %3674, %3675
  %splat.splat4976 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %3677 = fmul <2 x double> %block249, %splat.splat4976
  %3678 = fadd <2 x double> %3676, %3677
  %splat.splat4979 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %3679 = fmul <2 x double> %block252, %splat.splat4979
  %3680 = fadd <2 x double> %3678, %3679
  %splat.splat4982 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %3681 = fmul <2 x double> %block255, %splat.splat4982
  %3682 = fadd <2 x double> %3680, %3681
  %splat.splat4985 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %3683 = fmul <2 x double> %block258, %splat.splat4985
  %3684 = fadd <2 x double> %3682, %3683
  %splat.splat4988 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %3685 = fmul <2 x double> %block261, %splat.splat4988
  %3686 = fadd <2 x double> %3684, %3685
  %splat.splat4991 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %3687 = fmul <2 x double> %block264, %splat.splat4991
  %3688 = fadd <2 x double> %3686, %3687
  %splat.splat4994 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %3689 = fmul <2 x double> %block267, %splat.splat4994
  %3690 = fadd <2 x double> %3688, %3689
  %splat.splat4997 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %3691 = fmul <2 x double> %block270, %splat.splat4997
  %3692 = fadd <2 x double> %3690, %3691
  %splat.splat5000 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %3693 = fmul <2 x double> %block273, %splat.splat5000
  %3694 = fadd <2 x double> %3692, %3693
  %splat.splat5003 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %3695 = fmul <2 x double> %block276, %splat.splat5003
  %3696 = fadd <2 x double> %3694, %3695
  %splat.splat5006 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %3697 = fmul <2 x double> %block279, %splat.splat5006
  %3698 = fadd <2 x double> %3696, %3697
  %splat.splat5009 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %3699 = fmul <2 x double> %block282, %splat.splat5009
  %3700 = fadd <2 x double> %3698, %3699
  %splat.splat5012 = shufflevector <21 x double> %col.load213, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %3701 = fmul <2 x double> %block285, %splat.splat5012
  %3702 = fadd <2 x double> %3700, %3701
  %3703 = shufflevector <2 x double> %3702, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3704 = fmul <2 x double> %block288, %splat.splat4952
  %3705 = fmul <2 x double> %block291, %splat.splat4955
  %3706 = fadd <2 x double> %3704, %3705
  %3707 = fmul <2 x double> %block294, %splat.splat4958
  %3708 = fadd <2 x double> %3706, %3707
  %3709 = fmul <2 x double> %block297, %splat.splat4961
  %3710 = fadd <2 x double> %3708, %3709
  %3711 = fmul <2 x double> %block300, %splat.splat4964
  %3712 = fadd <2 x double> %3710, %3711
  %3713 = fmul <2 x double> %block303, %splat.splat4967
  %3714 = fadd <2 x double> %3712, %3713
  %3715 = fmul <2 x double> %block306, %splat.splat4970
  %3716 = fadd <2 x double> %3714, %3715
  %3717 = fmul <2 x double> %block309, %splat.splat4973
  %3718 = fadd <2 x double> %3716, %3717
  %3719 = fmul <2 x double> %block312, %splat.splat4976
  %3720 = fadd <2 x double> %3718, %3719
  %3721 = fmul <2 x double> %block315, %splat.splat4979
  %3722 = fadd <2 x double> %3720, %3721
  %3723 = fmul <2 x double> %block318, %splat.splat4982
  %3724 = fadd <2 x double> %3722, %3723
  %3725 = fmul <2 x double> %block321, %splat.splat4985
  %3726 = fadd <2 x double> %3724, %3725
  %3727 = fmul <2 x double> %block324, %splat.splat4988
  %3728 = fadd <2 x double> %3726, %3727
  %3729 = fmul <2 x double> %block327, %splat.splat4991
  %3730 = fadd <2 x double> %3728, %3729
  %3731 = fmul <2 x double> %block330, %splat.splat4994
  %3732 = fadd <2 x double> %3730, %3731
  %3733 = fmul <2 x double> %block333, %splat.splat4997
  %3734 = fadd <2 x double> %3732, %3733
  %3735 = fmul <2 x double> %block336, %splat.splat5000
  %3736 = fadd <2 x double> %3734, %3735
  %3737 = fmul <2 x double> %block339, %splat.splat5003
  %3738 = fadd <2 x double> %3736, %3737
  %3739 = fmul <2 x double> %block342, %splat.splat5006
  %3740 = fadd <2 x double> %3738, %3739
  %3741 = fmul <2 x double> %block345, %splat.splat5009
  %3742 = fadd <2 x double> %3740, %3741
  %3743 = fmul <2 x double> %block348, %splat.splat5012
  %3744 = fadd <2 x double> %3742, %3743
  %3745 = shufflevector <2 x double> %3744, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3746 = shufflevector <10 x double> %3703, <10 x double> %3745, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3747 = fmul <2 x double> %block351, %splat.splat4952
  %3748 = fmul <2 x double> %block354, %splat.splat4955
  %3749 = fadd <2 x double> %3747, %3748
  %3750 = fmul <2 x double> %block357, %splat.splat4958
  %3751 = fadd <2 x double> %3749, %3750
  %3752 = fmul <2 x double> %block360, %splat.splat4961
  %3753 = fadd <2 x double> %3751, %3752
  %3754 = fmul <2 x double> %block363, %splat.splat4964
  %3755 = fadd <2 x double> %3753, %3754
  %3756 = fmul <2 x double> %block366, %splat.splat4967
  %3757 = fadd <2 x double> %3755, %3756
  %3758 = fmul <2 x double> %block369, %splat.splat4970
  %3759 = fadd <2 x double> %3757, %3758
  %3760 = fmul <2 x double> %block372, %splat.splat4973
  %3761 = fadd <2 x double> %3759, %3760
  %3762 = fmul <2 x double> %block375, %splat.splat4976
  %3763 = fadd <2 x double> %3761, %3762
  %3764 = fmul <2 x double> %block378, %splat.splat4979
  %3765 = fadd <2 x double> %3763, %3764
  %3766 = fmul <2 x double> %block381, %splat.splat4982
  %3767 = fadd <2 x double> %3765, %3766
  %3768 = fmul <2 x double> %block384, %splat.splat4985
  %3769 = fadd <2 x double> %3767, %3768
  %3770 = fmul <2 x double> %block387, %splat.splat4988
  %3771 = fadd <2 x double> %3769, %3770
  %3772 = fmul <2 x double> %block390, %splat.splat4991
  %3773 = fadd <2 x double> %3771, %3772
  %3774 = fmul <2 x double> %block393, %splat.splat4994
  %3775 = fadd <2 x double> %3773, %3774
  %3776 = fmul <2 x double> %block396, %splat.splat4997
  %3777 = fadd <2 x double> %3775, %3776
  %3778 = fmul <2 x double> %block399, %splat.splat5000
  %3779 = fadd <2 x double> %3777, %3778
  %3780 = fmul <2 x double> %block402, %splat.splat5003
  %3781 = fadd <2 x double> %3779, %3780
  %3782 = fmul <2 x double> %block405, %splat.splat5006
  %3783 = fadd <2 x double> %3781, %3782
  %3784 = fmul <2 x double> %block408, %splat.splat5009
  %3785 = fadd <2 x double> %3783, %3784
  %3786 = fmul <2 x double> %block411, %splat.splat5012
  %3787 = fadd <2 x double> %3785, %3786
  %3788 = shufflevector <2 x double> %3787, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3789 = shufflevector <10 x double> %3746, <10 x double> %3788, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %3790 = fmul <2 x double> %block414, %splat.splat4952
  %3791 = fmul <2 x double> %block417, %splat.splat4955
  %3792 = fadd <2 x double> %3790, %3791
  %3793 = fmul <2 x double> %block420, %splat.splat4958
  %3794 = fadd <2 x double> %3792, %3793
  %3795 = fmul <2 x double> %block423, %splat.splat4961
  %3796 = fadd <2 x double> %3794, %3795
  %3797 = fmul <2 x double> %block426, %splat.splat4964
  %3798 = fadd <2 x double> %3796, %3797
  %3799 = fmul <2 x double> %block429, %splat.splat4967
  %3800 = fadd <2 x double> %3798, %3799
  %3801 = fmul <2 x double> %block432, %splat.splat4970
  %3802 = fadd <2 x double> %3800, %3801
  %3803 = fmul <2 x double> %block435, %splat.splat4973
  %3804 = fadd <2 x double> %3802, %3803
  %3805 = fmul <2 x double> %block438, %splat.splat4976
  %3806 = fadd <2 x double> %3804, %3805
  %3807 = fmul <2 x double> %block441, %splat.splat4979
  %3808 = fadd <2 x double> %3806, %3807
  %3809 = fmul <2 x double> %block444, %splat.splat4982
  %3810 = fadd <2 x double> %3808, %3809
  %3811 = fmul <2 x double> %block447, %splat.splat4985
  %3812 = fadd <2 x double> %3810, %3811
  %3813 = fmul <2 x double> %block450, %splat.splat4988
  %3814 = fadd <2 x double> %3812, %3813
  %3815 = fmul <2 x double> %block453, %splat.splat4991
  %3816 = fadd <2 x double> %3814, %3815
  %3817 = fmul <2 x double> %block456, %splat.splat4994
  %3818 = fadd <2 x double> %3816, %3817
  %3819 = fmul <2 x double> %block459, %splat.splat4997
  %3820 = fadd <2 x double> %3818, %3819
  %3821 = fmul <2 x double> %block462, %splat.splat5000
  %3822 = fadd <2 x double> %3820, %3821
  %3823 = fmul <2 x double> %block465, %splat.splat5003
  %3824 = fadd <2 x double> %3822, %3823
  %3825 = fmul <2 x double> %block468, %splat.splat5006
  %3826 = fadd <2 x double> %3824, %3825
  %3827 = fmul <2 x double> %block471, %splat.splat5009
  %3828 = fadd <2 x double> %3826, %3827
  %3829 = fmul <2 x double> %block474, %splat.splat5012
  %3830 = fadd <2 x double> %3828, %3829
  %3831 = shufflevector <2 x double> %3830, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3832 = shufflevector <10 x double> %3789, <10 x double> %3831, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %3833 = fmul <2 x double> %block477, %splat.splat4952
  %3834 = fmul <2 x double> %block480, %splat.splat4955
  %3835 = fadd <2 x double> %3833, %3834
  %3836 = fmul <2 x double> %block483, %splat.splat4958
  %3837 = fadd <2 x double> %3835, %3836
  %3838 = fmul <2 x double> %block486, %splat.splat4961
  %3839 = fadd <2 x double> %3837, %3838
  %3840 = fmul <2 x double> %block489, %splat.splat4964
  %3841 = fadd <2 x double> %3839, %3840
  %3842 = fmul <2 x double> %block492, %splat.splat4967
  %3843 = fadd <2 x double> %3841, %3842
  %3844 = fmul <2 x double> %block495, %splat.splat4970
  %3845 = fadd <2 x double> %3843, %3844
  %3846 = fmul <2 x double> %block498, %splat.splat4973
  %3847 = fadd <2 x double> %3845, %3846
  %3848 = fmul <2 x double> %block501, %splat.splat4976
  %3849 = fadd <2 x double> %3847, %3848
  %3850 = fmul <2 x double> %block504, %splat.splat4979
  %3851 = fadd <2 x double> %3849, %3850
  %3852 = fmul <2 x double> %block507, %splat.splat4982
  %3853 = fadd <2 x double> %3851, %3852
  %3854 = fmul <2 x double> %block510, %splat.splat4985
  %3855 = fadd <2 x double> %3853, %3854
  %3856 = fmul <2 x double> %block513, %splat.splat4988
  %3857 = fadd <2 x double> %3855, %3856
  %3858 = fmul <2 x double> %block516, %splat.splat4991
  %3859 = fadd <2 x double> %3857, %3858
  %3860 = fmul <2 x double> %block519, %splat.splat4994
  %3861 = fadd <2 x double> %3859, %3860
  %3862 = fmul <2 x double> %block522, %splat.splat4997
  %3863 = fadd <2 x double> %3861, %3862
  %3864 = fmul <2 x double> %block525, %splat.splat5000
  %3865 = fadd <2 x double> %3863, %3864
  %3866 = fmul <2 x double> %block528, %splat.splat5003
  %3867 = fadd <2 x double> %3865, %3866
  %3868 = fmul <2 x double> %block531, %splat.splat5006
  %3869 = fadd <2 x double> %3867, %3868
  %3870 = fmul <2 x double> %block534, %splat.splat5009
  %3871 = fadd <2 x double> %3869, %3870
  %3872 = fmul <2 x double> %block537, %splat.splat5012
  %3873 = fadd <2 x double> %3871, %3872
  %3874 = shufflevector <2 x double> %3873, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3875 = shufflevector <10 x double> %3832, <10 x double> %3874, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat5267 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> zeroinitializer
  %3876 = fmul <2 x double> %block, %splat.splat5267
  %splat.splat5270 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %3877 = fmul <2 x double> %block228, %splat.splat5270
  %3878 = fadd <2 x double> %3876, %3877
  %splat.splat5273 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %3879 = fmul <2 x double> %block231, %splat.splat5273
  %3880 = fadd <2 x double> %3878, %3879
  %splat.splat5276 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %3881 = fmul <2 x double> %block234, %splat.splat5276
  %3882 = fadd <2 x double> %3880, %3881
  %splat.splat5279 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %3883 = fmul <2 x double> %block237, %splat.splat5279
  %3884 = fadd <2 x double> %3882, %3883
  %splat.splat5282 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %3885 = fmul <2 x double> %block240, %splat.splat5282
  %3886 = fadd <2 x double> %3884, %3885
  %splat.splat5285 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %3887 = fmul <2 x double> %block243, %splat.splat5285
  %3888 = fadd <2 x double> %3886, %3887
  %splat.splat5288 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %3889 = fmul <2 x double> %block246, %splat.splat5288
  %3890 = fadd <2 x double> %3888, %3889
  %splat.splat5291 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %3891 = fmul <2 x double> %block249, %splat.splat5291
  %3892 = fadd <2 x double> %3890, %3891
  %splat.splat5294 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %3893 = fmul <2 x double> %block252, %splat.splat5294
  %3894 = fadd <2 x double> %3892, %3893
  %splat.splat5297 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %3895 = fmul <2 x double> %block255, %splat.splat5297
  %3896 = fadd <2 x double> %3894, %3895
  %splat.splat5300 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %3897 = fmul <2 x double> %block258, %splat.splat5300
  %3898 = fadd <2 x double> %3896, %3897
  %splat.splat5303 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %3899 = fmul <2 x double> %block261, %splat.splat5303
  %3900 = fadd <2 x double> %3898, %3899
  %splat.splat5306 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %3901 = fmul <2 x double> %block264, %splat.splat5306
  %3902 = fadd <2 x double> %3900, %3901
  %splat.splat5309 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %3903 = fmul <2 x double> %block267, %splat.splat5309
  %3904 = fadd <2 x double> %3902, %3903
  %splat.splat5312 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %3905 = fmul <2 x double> %block270, %splat.splat5312
  %3906 = fadd <2 x double> %3904, %3905
  %splat.splat5315 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %3907 = fmul <2 x double> %block273, %splat.splat5315
  %3908 = fadd <2 x double> %3906, %3907
  %splat.splat5318 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %3909 = fmul <2 x double> %block276, %splat.splat5318
  %3910 = fadd <2 x double> %3908, %3909
  %splat.splat5321 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %3911 = fmul <2 x double> %block279, %splat.splat5321
  %3912 = fadd <2 x double> %3910, %3911
  %splat.splat5324 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %3913 = fmul <2 x double> %block282, %splat.splat5324
  %3914 = fadd <2 x double> %3912, %3913
  %splat.splat5327 = shufflevector <21 x double> %col.load215, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %3915 = fmul <2 x double> %block285, %splat.splat5327
  %3916 = fadd <2 x double> %3914, %3915
  %3917 = shufflevector <2 x double> %3916, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3918 = fmul <2 x double> %block288, %splat.splat5267
  %3919 = fmul <2 x double> %block291, %splat.splat5270
  %3920 = fadd <2 x double> %3918, %3919
  %3921 = fmul <2 x double> %block294, %splat.splat5273
  %3922 = fadd <2 x double> %3920, %3921
  %3923 = fmul <2 x double> %block297, %splat.splat5276
  %3924 = fadd <2 x double> %3922, %3923
  %3925 = fmul <2 x double> %block300, %splat.splat5279
  %3926 = fadd <2 x double> %3924, %3925
  %3927 = fmul <2 x double> %block303, %splat.splat5282
  %3928 = fadd <2 x double> %3926, %3927
  %3929 = fmul <2 x double> %block306, %splat.splat5285
  %3930 = fadd <2 x double> %3928, %3929
  %3931 = fmul <2 x double> %block309, %splat.splat5288
  %3932 = fadd <2 x double> %3930, %3931
  %3933 = fmul <2 x double> %block312, %splat.splat5291
  %3934 = fadd <2 x double> %3932, %3933
  %3935 = fmul <2 x double> %block315, %splat.splat5294
  %3936 = fadd <2 x double> %3934, %3935
  %3937 = fmul <2 x double> %block318, %splat.splat5297
  %3938 = fadd <2 x double> %3936, %3937
  %3939 = fmul <2 x double> %block321, %splat.splat5300
  %3940 = fadd <2 x double> %3938, %3939
  %3941 = fmul <2 x double> %block324, %splat.splat5303
  %3942 = fadd <2 x double> %3940, %3941
  %3943 = fmul <2 x double> %block327, %splat.splat5306
  %3944 = fadd <2 x double> %3942, %3943
  %3945 = fmul <2 x double> %block330, %splat.splat5309
  %3946 = fadd <2 x double> %3944, %3945
  %3947 = fmul <2 x double> %block333, %splat.splat5312
  %3948 = fadd <2 x double> %3946, %3947
  %3949 = fmul <2 x double> %block336, %splat.splat5315
  %3950 = fadd <2 x double> %3948, %3949
  %3951 = fmul <2 x double> %block339, %splat.splat5318
  %3952 = fadd <2 x double> %3950, %3951
  %3953 = fmul <2 x double> %block342, %splat.splat5321
  %3954 = fadd <2 x double> %3952, %3953
  %3955 = fmul <2 x double> %block345, %splat.splat5324
  %3956 = fadd <2 x double> %3954, %3955
  %3957 = fmul <2 x double> %block348, %splat.splat5327
  %3958 = fadd <2 x double> %3956, %3957
  %3959 = shufflevector <2 x double> %3958, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3960 = shufflevector <10 x double> %3917, <10 x double> %3959, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3961 = fmul <2 x double> %block351, %splat.splat5267
  %3962 = fmul <2 x double> %block354, %splat.splat5270
  %3963 = fadd <2 x double> %3961, %3962
  %3964 = fmul <2 x double> %block357, %splat.splat5273
  %3965 = fadd <2 x double> %3963, %3964
  %3966 = fmul <2 x double> %block360, %splat.splat5276
  %3967 = fadd <2 x double> %3965, %3966
  %3968 = fmul <2 x double> %block363, %splat.splat5279
  %3969 = fadd <2 x double> %3967, %3968
  %3970 = fmul <2 x double> %block366, %splat.splat5282
  %3971 = fadd <2 x double> %3969, %3970
  %3972 = fmul <2 x double> %block369, %splat.splat5285
  %3973 = fadd <2 x double> %3971, %3972
  %3974 = fmul <2 x double> %block372, %splat.splat5288
  %3975 = fadd <2 x double> %3973, %3974
  %3976 = fmul <2 x double> %block375, %splat.splat5291
  %3977 = fadd <2 x double> %3975, %3976
  %3978 = fmul <2 x double> %block378, %splat.splat5294
  %3979 = fadd <2 x double> %3977, %3978
  %3980 = fmul <2 x double> %block381, %splat.splat5297
  %3981 = fadd <2 x double> %3979, %3980
  %3982 = fmul <2 x double> %block384, %splat.splat5300
  %3983 = fadd <2 x double> %3981, %3982
  %3984 = fmul <2 x double> %block387, %splat.splat5303
  %3985 = fadd <2 x double> %3983, %3984
  %3986 = fmul <2 x double> %block390, %splat.splat5306
  %3987 = fadd <2 x double> %3985, %3986
  %3988 = fmul <2 x double> %block393, %splat.splat5309
  %3989 = fadd <2 x double> %3987, %3988
  %3990 = fmul <2 x double> %block396, %splat.splat5312
  %3991 = fadd <2 x double> %3989, %3990
  %3992 = fmul <2 x double> %block399, %splat.splat5315
  %3993 = fadd <2 x double> %3991, %3992
  %3994 = fmul <2 x double> %block402, %splat.splat5318
  %3995 = fadd <2 x double> %3993, %3994
  %3996 = fmul <2 x double> %block405, %splat.splat5321
  %3997 = fadd <2 x double> %3995, %3996
  %3998 = fmul <2 x double> %block408, %splat.splat5324
  %3999 = fadd <2 x double> %3997, %3998
  %4000 = fmul <2 x double> %block411, %splat.splat5327
  %4001 = fadd <2 x double> %3999, %4000
  %4002 = shufflevector <2 x double> %4001, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4003 = shufflevector <10 x double> %3960, <10 x double> %4002, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %4004 = fmul <2 x double> %block414, %splat.splat5267
  %4005 = fmul <2 x double> %block417, %splat.splat5270
  %4006 = fadd <2 x double> %4004, %4005
  %4007 = fmul <2 x double> %block420, %splat.splat5273
  %4008 = fadd <2 x double> %4006, %4007
  %4009 = fmul <2 x double> %block423, %splat.splat5276
  %4010 = fadd <2 x double> %4008, %4009
  %4011 = fmul <2 x double> %block426, %splat.splat5279
  %4012 = fadd <2 x double> %4010, %4011
  %4013 = fmul <2 x double> %block429, %splat.splat5282
  %4014 = fadd <2 x double> %4012, %4013
  %4015 = fmul <2 x double> %block432, %splat.splat5285
  %4016 = fadd <2 x double> %4014, %4015
  %4017 = fmul <2 x double> %block435, %splat.splat5288
  %4018 = fadd <2 x double> %4016, %4017
  %4019 = fmul <2 x double> %block438, %splat.splat5291
  %4020 = fadd <2 x double> %4018, %4019
  %4021 = fmul <2 x double> %block441, %splat.splat5294
  %4022 = fadd <2 x double> %4020, %4021
  %4023 = fmul <2 x double> %block444, %splat.splat5297
  %4024 = fadd <2 x double> %4022, %4023
  %4025 = fmul <2 x double> %block447, %splat.splat5300
  %4026 = fadd <2 x double> %4024, %4025
  %4027 = fmul <2 x double> %block450, %splat.splat5303
  %4028 = fadd <2 x double> %4026, %4027
  %4029 = fmul <2 x double> %block453, %splat.splat5306
  %4030 = fadd <2 x double> %4028, %4029
  %4031 = fmul <2 x double> %block456, %splat.splat5309
  %4032 = fadd <2 x double> %4030, %4031
  %4033 = fmul <2 x double> %block459, %splat.splat5312
  %4034 = fadd <2 x double> %4032, %4033
  %4035 = fmul <2 x double> %block462, %splat.splat5315
  %4036 = fadd <2 x double> %4034, %4035
  %4037 = fmul <2 x double> %block465, %splat.splat5318
  %4038 = fadd <2 x double> %4036, %4037
  %4039 = fmul <2 x double> %block468, %splat.splat5321
  %4040 = fadd <2 x double> %4038, %4039
  %4041 = fmul <2 x double> %block471, %splat.splat5324
  %4042 = fadd <2 x double> %4040, %4041
  %4043 = fmul <2 x double> %block474, %splat.splat5327
  %4044 = fadd <2 x double> %4042, %4043
  %4045 = shufflevector <2 x double> %4044, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4046 = shufflevector <10 x double> %4003, <10 x double> %4045, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %4047 = fmul <2 x double> %block477, %splat.splat5267
  %4048 = fmul <2 x double> %block480, %splat.splat5270
  %4049 = fadd <2 x double> %4047, %4048
  %4050 = fmul <2 x double> %block483, %splat.splat5273
  %4051 = fadd <2 x double> %4049, %4050
  %4052 = fmul <2 x double> %block486, %splat.splat5276
  %4053 = fadd <2 x double> %4051, %4052
  %4054 = fmul <2 x double> %block489, %splat.splat5279
  %4055 = fadd <2 x double> %4053, %4054
  %4056 = fmul <2 x double> %block492, %splat.splat5282
  %4057 = fadd <2 x double> %4055, %4056
  %4058 = fmul <2 x double> %block495, %splat.splat5285
  %4059 = fadd <2 x double> %4057, %4058
  %4060 = fmul <2 x double> %block498, %splat.splat5288
  %4061 = fadd <2 x double> %4059, %4060
  %4062 = fmul <2 x double> %block501, %splat.splat5291
  %4063 = fadd <2 x double> %4061, %4062
  %4064 = fmul <2 x double> %block504, %splat.splat5294
  %4065 = fadd <2 x double> %4063, %4064
  %4066 = fmul <2 x double> %block507, %splat.splat5297
  %4067 = fadd <2 x double> %4065, %4066
  %4068 = fmul <2 x double> %block510, %splat.splat5300
  %4069 = fadd <2 x double> %4067, %4068
  %4070 = fmul <2 x double> %block513, %splat.splat5303
  %4071 = fadd <2 x double> %4069, %4070
  %4072 = fmul <2 x double> %block516, %splat.splat5306
  %4073 = fadd <2 x double> %4071, %4072
  %4074 = fmul <2 x double> %block519, %splat.splat5309
  %4075 = fadd <2 x double> %4073, %4074
  %4076 = fmul <2 x double> %block522, %splat.splat5312
  %4077 = fadd <2 x double> %4075, %4076
  %4078 = fmul <2 x double> %block525, %splat.splat5315
  %4079 = fadd <2 x double> %4077, %4078
  %4080 = fmul <2 x double> %block528, %splat.splat5318
  %4081 = fadd <2 x double> %4079, %4080
  %4082 = fmul <2 x double> %block531, %splat.splat5321
  %4083 = fadd <2 x double> %4081, %4082
  %4084 = fmul <2 x double> %block534, %splat.splat5324
  %4085 = fadd <2 x double> %4083, %4084
  %4086 = fmul <2 x double> %block537, %splat.splat5327
  %4087 = fadd <2 x double> %4085, %4086
  %4088 = shufflevector <2 x double> %4087, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4089 = shufflevector <10 x double> %4046, <10 x double> %4088, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat5582 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> zeroinitializer
  %4090 = fmul <2 x double> %block, %splat.splat5582
  %splat.splat5585 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %4091 = fmul <2 x double> %block228, %splat.splat5585
  %4092 = fadd <2 x double> %4090, %4091
  %splat.splat5588 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %4093 = fmul <2 x double> %block231, %splat.splat5588
  %4094 = fadd <2 x double> %4092, %4093
  %splat.splat5591 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %4095 = fmul <2 x double> %block234, %splat.splat5591
  %4096 = fadd <2 x double> %4094, %4095
  %splat.splat5594 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %4097 = fmul <2 x double> %block237, %splat.splat5594
  %4098 = fadd <2 x double> %4096, %4097
  %splat.splat5597 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %4099 = fmul <2 x double> %block240, %splat.splat5597
  %4100 = fadd <2 x double> %4098, %4099
  %splat.splat5600 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %4101 = fmul <2 x double> %block243, %splat.splat5600
  %4102 = fadd <2 x double> %4100, %4101
  %splat.splat5603 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %4103 = fmul <2 x double> %block246, %splat.splat5603
  %4104 = fadd <2 x double> %4102, %4103
  %splat.splat5606 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %4105 = fmul <2 x double> %block249, %splat.splat5606
  %4106 = fadd <2 x double> %4104, %4105
  %splat.splat5609 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %4107 = fmul <2 x double> %block252, %splat.splat5609
  %4108 = fadd <2 x double> %4106, %4107
  %splat.splat5612 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %4109 = fmul <2 x double> %block255, %splat.splat5612
  %4110 = fadd <2 x double> %4108, %4109
  %splat.splat5615 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %4111 = fmul <2 x double> %block258, %splat.splat5615
  %4112 = fadd <2 x double> %4110, %4111
  %splat.splat5618 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %4113 = fmul <2 x double> %block261, %splat.splat5618
  %4114 = fadd <2 x double> %4112, %4113
  %splat.splat5621 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %4115 = fmul <2 x double> %block264, %splat.splat5621
  %4116 = fadd <2 x double> %4114, %4115
  %splat.splat5624 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %4117 = fmul <2 x double> %block267, %splat.splat5624
  %4118 = fadd <2 x double> %4116, %4117
  %splat.splat5627 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %4119 = fmul <2 x double> %block270, %splat.splat5627
  %4120 = fadd <2 x double> %4118, %4119
  %splat.splat5630 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %4121 = fmul <2 x double> %block273, %splat.splat5630
  %4122 = fadd <2 x double> %4120, %4121
  %splat.splat5633 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %4123 = fmul <2 x double> %block276, %splat.splat5633
  %4124 = fadd <2 x double> %4122, %4123
  %splat.splat5636 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %4125 = fmul <2 x double> %block279, %splat.splat5636
  %4126 = fadd <2 x double> %4124, %4125
  %splat.splat5639 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %4127 = fmul <2 x double> %block282, %splat.splat5639
  %4128 = fadd <2 x double> %4126, %4127
  %splat.splat5642 = shufflevector <21 x double> %col.load217, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %4129 = fmul <2 x double> %block285, %splat.splat5642
  %4130 = fadd <2 x double> %4128, %4129
  %4131 = shufflevector <2 x double> %4130, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4132 = fmul <2 x double> %block288, %splat.splat5582
  %4133 = fmul <2 x double> %block291, %splat.splat5585
  %4134 = fadd <2 x double> %4132, %4133
  %4135 = fmul <2 x double> %block294, %splat.splat5588
  %4136 = fadd <2 x double> %4134, %4135
  %4137 = fmul <2 x double> %block297, %splat.splat5591
  %4138 = fadd <2 x double> %4136, %4137
  %4139 = fmul <2 x double> %block300, %splat.splat5594
  %4140 = fadd <2 x double> %4138, %4139
  %4141 = fmul <2 x double> %block303, %splat.splat5597
  %4142 = fadd <2 x double> %4140, %4141
  %4143 = fmul <2 x double> %block306, %splat.splat5600
  %4144 = fadd <2 x double> %4142, %4143
  %4145 = fmul <2 x double> %block309, %splat.splat5603
  %4146 = fadd <2 x double> %4144, %4145
  %4147 = fmul <2 x double> %block312, %splat.splat5606
  %4148 = fadd <2 x double> %4146, %4147
  %4149 = fmul <2 x double> %block315, %splat.splat5609
  %4150 = fadd <2 x double> %4148, %4149
  %4151 = fmul <2 x double> %block318, %splat.splat5612
  %4152 = fadd <2 x double> %4150, %4151
  %4153 = fmul <2 x double> %block321, %splat.splat5615
  %4154 = fadd <2 x double> %4152, %4153
  %4155 = fmul <2 x double> %block324, %splat.splat5618
  %4156 = fadd <2 x double> %4154, %4155
  %4157 = fmul <2 x double> %block327, %splat.splat5621
  %4158 = fadd <2 x double> %4156, %4157
  %4159 = fmul <2 x double> %block330, %splat.splat5624
  %4160 = fadd <2 x double> %4158, %4159
  %4161 = fmul <2 x double> %block333, %splat.splat5627
  %4162 = fadd <2 x double> %4160, %4161
  %4163 = fmul <2 x double> %block336, %splat.splat5630
  %4164 = fadd <2 x double> %4162, %4163
  %4165 = fmul <2 x double> %block339, %splat.splat5633
  %4166 = fadd <2 x double> %4164, %4165
  %4167 = fmul <2 x double> %block342, %splat.splat5636
  %4168 = fadd <2 x double> %4166, %4167
  %4169 = fmul <2 x double> %block345, %splat.splat5639
  %4170 = fadd <2 x double> %4168, %4169
  %4171 = fmul <2 x double> %block348, %splat.splat5642
  %4172 = fadd <2 x double> %4170, %4171
  %4173 = shufflevector <2 x double> %4172, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4174 = shufflevector <10 x double> %4131, <10 x double> %4173, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4175 = fmul <2 x double> %block351, %splat.splat5582
  %4176 = fmul <2 x double> %block354, %splat.splat5585
  %4177 = fadd <2 x double> %4175, %4176
  %4178 = fmul <2 x double> %block357, %splat.splat5588
  %4179 = fadd <2 x double> %4177, %4178
  %4180 = fmul <2 x double> %block360, %splat.splat5591
  %4181 = fadd <2 x double> %4179, %4180
  %4182 = fmul <2 x double> %block363, %splat.splat5594
  %4183 = fadd <2 x double> %4181, %4182
  %4184 = fmul <2 x double> %block366, %splat.splat5597
  %4185 = fadd <2 x double> %4183, %4184
  %4186 = fmul <2 x double> %block369, %splat.splat5600
  %4187 = fadd <2 x double> %4185, %4186
  %4188 = fmul <2 x double> %block372, %splat.splat5603
  %4189 = fadd <2 x double> %4187, %4188
  %4190 = fmul <2 x double> %block375, %splat.splat5606
  %4191 = fadd <2 x double> %4189, %4190
  %4192 = fmul <2 x double> %block378, %splat.splat5609
  %4193 = fadd <2 x double> %4191, %4192
  %4194 = fmul <2 x double> %block381, %splat.splat5612
  %4195 = fadd <2 x double> %4193, %4194
  %4196 = fmul <2 x double> %block384, %splat.splat5615
  %4197 = fadd <2 x double> %4195, %4196
  %4198 = fmul <2 x double> %block387, %splat.splat5618
  %4199 = fadd <2 x double> %4197, %4198
  %4200 = fmul <2 x double> %block390, %splat.splat5621
  %4201 = fadd <2 x double> %4199, %4200
  %4202 = fmul <2 x double> %block393, %splat.splat5624
  %4203 = fadd <2 x double> %4201, %4202
  %4204 = fmul <2 x double> %block396, %splat.splat5627
  %4205 = fadd <2 x double> %4203, %4204
  %4206 = fmul <2 x double> %block399, %splat.splat5630
  %4207 = fadd <2 x double> %4205, %4206
  %4208 = fmul <2 x double> %block402, %splat.splat5633
  %4209 = fadd <2 x double> %4207, %4208
  %4210 = fmul <2 x double> %block405, %splat.splat5636
  %4211 = fadd <2 x double> %4209, %4210
  %4212 = fmul <2 x double> %block408, %splat.splat5639
  %4213 = fadd <2 x double> %4211, %4212
  %4214 = fmul <2 x double> %block411, %splat.splat5642
  %4215 = fadd <2 x double> %4213, %4214
  %4216 = shufflevector <2 x double> %4215, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4217 = shufflevector <10 x double> %4174, <10 x double> %4216, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %4218 = fmul <2 x double> %block414, %splat.splat5582
  %4219 = fmul <2 x double> %block417, %splat.splat5585
  %4220 = fadd <2 x double> %4218, %4219
  %4221 = fmul <2 x double> %block420, %splat.splat5588
  %4222 = fadd <2 x double> %4220, %4221
  %4223 = fmul <2 x double> %block423, %splat.splat5591
  %4224 = fadd <2 x double> %4222, %4223
  %4225 = fmul <2 x double> %block426, %splat.splat5594
  %4226 = fadd <2 x double> %4224, %4225
  %4227 = fmul <2 x double> %block429, %splat.splat5597
  %4228 = fadd <2 x double> %4226, %4227
  %4229 = fmul <2 x double> %block432, %splat.splat5600
  %4230 = fadd <2 x double> %4228, %4229
  %4231 = fmul <2 x double> %block435, %splat.splat5603
  %4232 = fadd <2 x double> %4230, %4231
  %4233 = fmul <2 x double> %block438, %splat.splat5606
  %4234 = fadd <2 x double> %4232, %4233
  %4235 = fmul <2 x double> %block441, %splat.splat5609
  %4236 = fadd <2 x double> %4234, %4235
  %4237 = fmul <2 x double> %block444, %splat.splat5612
  %4238 = fadd <2 x double> %4236, %4237
  %4239 = fmul <2 x double> %block447, %splat.splat5615
  %4240 = fadd <2 x double> %4238, %4239
  %4241 = fmul <2 x double> %block450, %splat.splat5618
  %4242 = fadd <2 x double> %4240, %4241
  %4243 = fmul <2 x double> %block453, %splat.splat5621
  %4244 = fadd <2 x double> %4242, %4243
  %4245 = fmul <2 x double> %block456, %splat.splat5624
  %4246 = fadd <2 x double> %4244, %4245
  %4247 = fmul <2 x double> %block459, %splat.splat5627
  %4248 = fadd <2 x double> %4246, %4247
  %4249 = fmul <2 x double> %block462, %splat.splat5630
  %4250 = fadd <2 x double> %4248, %4249
  %4251 = fmul <2 x double> %block465, %splat.splat5633
  %4252 = fadd <2 x double> %4250, %4251
  %4253 = fmul <2 x double> %block468, %splat.splat5636
  %4254 = fadd <2 x double> %4252, %4253
  %4255 = fmul <2 x double> %block471, %splat.splat5639
  %4256 = fadd <2 x double> %4254, %4255
  %4257 = fmul <2 x double> %block474, %splat.splat5642
  %4258 = fadd <2 x double> %4256, %4257
  %4259 = shufflevector <2 x double> %4258, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4260 = shufflevector <10 x double> %4217, <10 x double> %4259, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %4261 = fmul <2 x double> %block477, %splat.splat5582
  %4262 = fmul <2 x double> %block480, %splat.splat5585
  %4263 = fadd <2 x double> %4261, %4262
  %4264 = fmul <2 x double> %block483, %splat.splat5588
  %4265 = fadd <2 x double> %4263, %4264
  %4266 = fmul <2 x double> %block486, %splat.splat5591
  %4267 = fadd <2 x double> %4265, %4266
  %4268 = fmul <2 x double> %block489, %splat.splat5594
  %4269 = fadd <2 x double> %4267, %4268
  %4270 = fmul <2 x double> %block492, %splat.splat5597
  %4271 = fadd <2 x double> %4269, %4270
  %4272 = fmul <2 x double> %block495, %splat.splat5600
  %4273 = fadd <2 x double> %4271, %4272
  %4274 = fmul <2 x double> %block498, %splat.splat5603
  %4275 = fadd <2 x double> %4273, %4274
  %4276 = fmul <2 x double> %block501, %splat.splat5606
  %4277 = fadd <2 x double> %4275, %4276
  %4278 = fmul <2 x double> %block504, %splat.splat5609
  %4279 = fadd <2 x double> %4277, %4278
  %4280 = fmul <2 x double> %block507, %splat.splat5612
  %4281 = fadd <2 x double> %4279, %4280
  %4282 = fmul <2 x double> %block510, %splat.splat5615
  %4283 = fadd <2 x double> %4281, %4282
  %4284 = fmul <2 x double> %block513, %splat.splat5618
  %4285 = fadd <2 x double> %4283, %4284
  %4286 = fmul <2 x double> %block516, %splat.splat5621
  %4287 = fadd <2 x double> %4285, %4286
  %4288 = fmul <2 x double> %block519, %splat.splat5624
  %4289 = fadd <2 x double> %4287, %4288
  %4290 = fmul <2 x double> %block522, %splat.splat5627
  %4291 = fadd <2 x double> %4289, %4290
  %4292 = fmul <2 x double> %block525, %splat.splat5630
  %4293 = fadd <2 x double> %4291, %4292
  %4294 = fmul <2 x double> %block528, %splat.splat5633
  %4295 = fadd <2 x double> %4293, %4294
  %4296 = fmul <2 x double> %block531, %splat.splat5636
  %4297 = fadd <2 x double> %4295, %4296
  %4298 = fmul <2 x double> %block534, %splat.splat5639
  %4299 = fadd <2 x double> %4297, %4298
  %4300 = fmul <2 x double> %block537, %splat.splat5642
  %4301 = fadd <2 x double> %4299, %4300
  %4302 = shufflevector <2 x double> %4301, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4303 = shufflevector <10 x double> %4260, <10 x double> %4302, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat5897 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> zeroinitializer
  %4304 = fmul <2 x double> %block, %splat.splat5897
  %splat.splat5900 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %4305 = fmul <2 x double> %block228, %splat.splat5900
  %4306 = fadd <2 x double> %4304, %4305
  %splat.splat5903 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %4307 = fmul <2 x double> %block231, %splat.splat5903
  %4308 = fadd <2 x double> %4306, %4307
  %splat.splat5906 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %4309 = fmul <2 x double> %block234, %splat.splat5906
  %4310 = fadd <2 x double> %4308, %4309
  %splat.splat5909 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %4311 = fmul <2 x double> %block237, %splat.splat5909
  %4312 = fadd <2 x double> %4310, %4311
  %splat.splat5912 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %4313 = fmul <2 x double> %block240, %splat.splat5912
  %4314 = fadd <2 x double> %4312, %4313
  %splat.splat5915 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %4315 = fmul <2 x double> %block243, %splat.splat5915
  %4316 = fadd <2 x double> %4314, %4315
  %splat.splat5918 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %4317 = fmul <2 x double> %block246, %splat.splat5918
  %4318 = fadd <2 x double> %4316, %4317
  %splat.splat5921 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %4319 = fmul <2 x double> %block249, %splat.splat5921
  %4320 = fadd <2 x double> %4318, %4319
  %splat.splat5924 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %4321 = fmul <2 x double> %block252, %splat.splat5924
  %4322 = fadd <2 x double> %4320, %4321
  %splat.splat5927 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %4323 = fmul <2 x double> %block255, %splat.splat5927
  %4324 = fadd <2 x double> %4322, %4323
  %splat.splat5930 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %4325 = fmul <2 x double> %block258, %splat.splat5930
  %4326 = fadd <2 x double> %4324, %4325
  %splat.splat5933 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %4327 = fmul <2 x double> %block261, %splat.splat5933
  %4328 = fadd <2 x double> %4326, %4327
  %splat.splat5936 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %4329 = fmul <2 x double> %block264, %splat.splat5936
  %4330 = fadd <2 x double> %4328, %4329
  %splat.splat5939 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %4331 = fmul <2 x double> %block267, %splat.splat5939
  %4332 = fadd <2 x double> %4330, %4331
  %splat.splat5942 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %4333 = fmul <2 x double> %block270, %splat.splat5942
  %4334 = fadd <2 x double> %4332, %4333
  %splat.splat5945 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %4335 = fmul <2 x double> %block273, %splat.splat5945
  %4336 = fadd <2 x double> %4334, %4335
  %splat.splat5948 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %4337 = fmul <2 x double> %block276, %splat.splat5948
  %4338 = fadd <2 x double> %4336, %4337
  %splat.splat5951 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %4339 = fmul <2 x double> %block279, %splat.splat5951
  %4340 = fadd <2 x double> %4338, %4339
  %splat.splat5954 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %4341 = fmul <2 x double> %block282, %splat.splat5954
  %4342 = fadd <2 x double> %4340, %4341
  %splat.splat5957 = shufflevector <21 x double> %col.load219, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %4343 = fmul <2 x double> %block285, %splat.splat5957
  %4344 = fadd <2 x double> %4342, %4343
  %4345 = shufflevector <2 x double> %4344, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4346 = fmul <2 x double> %block288, %splat.splat5897
  %4347 = fmul <2 x double> %block291, %splat.splat5900
  %4348 = fadd <2 x double> %4346, %4347
  %4349 = fmul <2 x double> %block294, %splat.splat5903
  %4350 = fadd <2 x double> %4348, %4349
  %4351 = fmul <2 x double> %block297, %splat.splat5906
  %4352 = fadd <2 x double> %4350, %4351
  %4353 = fmul <2 x double> %block300, %splat.splat5909
  %4354 = fadd <2 x double> %4352, %4353
  %4355 = fmul <2 x double> %block303, %splat.splat5912
  %4356 = fadd <2 x double> %4354, %4355
  %4357 = fmul <2 x double> %block306, %splat.splat5915
  %4358 = fadd <2 x double> %4356, %4357
  %4359 = fmul <2 x double> %block309, %splat.splat5918
  %4360 = fadd <2 x double> %4358, %4359
  %4361 = fmul <2 x double> %block312, %splat.splat5921
  %4362 = fadd <2 x double> %4360, %4361
  %4363 = fmul <2 x double> %block315, %splat.splat5924
  %4364 = fadd <2 x double> %4362, %4363
  %4365 = fmul <2 x double> %block318, %splat.splat5927
  %4366 = fadd <2 x double> %4364, %4365
  %4367 = fmul <2 x double> %block321, %splat.splat5930
  %4368 = fadd <2 x double> %4366, %4367
  %4369 = fmul <2 x double> %block324, %splat.splat5933
  %4370 = fadd <2 x double> %4368, %4369
  %4371 = fmul <2 x double> %block327, %splat.splat5936
  %4372 = fadd <2 x double> %4370, %4371
  %4373 = fmul <2 x double> %block330, %splat.splat5939
  %4374 = fadd <2 x double> %4372, %4373
  %4375 = fmul <2 x double> %block333, %splat.splat5942
  %4376 = fadd <2 x double> %4374, %4375
  %4377 = fmul <2 x double> %block336, %splat.splat5945
  %4378 = fadd <2 x double> %4376, %4377
  %4379 = fmul <2 x double> %block339, %splat.splat5948
  %4380 = fadd <2 x double> %4378, %4379
  %4381 = fmul <2 x double> %block342, %splat.splat5951
  %4382 = fadd <2 x double> %4380, %4381
  %4383 = fmul <2 x double> %block345, %splat.splat5954
  %4384 = fadd <2 x double> %4382, %4383
  %4385 = fmul <2 x double> %block348, %splat.splat5957
  %4386 = fadd <2 x double> %4384, %4385
  %4387 = shufflevector <2 x double> %4386, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4388 = shufflevector <10 x double> %4345, <10 x double> %4387, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4389 = fmul <2 x double> %block351, %splat.splat5897
  %4390 = fmul <2 x double> %block354, %splat.splat5900
  %4391 = fadd <2 x double> %4389, %4390
  %4392 = fmul <2 x double> %block357, %splat.splat5903
  %4393 = fadd <2 x double> %4391, %4392
  %4394 = fmul <2 x double> %block360, %splat.splat5906
  %4395 = fadd <2 x double> %4393, %4394
  %4396 = fmul <2 x double> %block363, %splat.splat5909
  %4397 = fadd <2 x double> %4395, %4396
  %4398 = fmul <2 x double> %block366, %splat.splat5912
  %4399 = fadd <2 x double> %4397, %4398
  %4400 = fmul <2 x double> %block369, %splat.splat5915
  %4401 = fadd <2 x double> %4399, %4400
  %4402 = fmul <2 x double> %block372, %splat.splat5918
  %4403 = fadd <2 x double> %4401, %4402
  %4404 = fmul <2 x double> %block375, %splat.splat5921
  %4405 = fadd <2 x double> %4403, %4404
  %4406 = fmul <2 x double> %block378, %splat.splat5924
  %4407 = fadd <2 x double> %4405, %4406
  %4408 = fmul <2 x double> %block381, %splat.splat5927
  %4409 = fadd <2 x double> %4407, %4408
  %4410 = fmul <2 x double> %block384, %splat.splat5930
  %4411 = fadd <2 x double> %4409, %4410
  %4412 = fmul <2 x double> %block387, %splat.splat5933
  %4413 = fadd <2 x double> %4411, %4412
  %4414 = fmul <2 x double> %block390, %splat.splat5936
  %4415 = fadd <2 x double> %4413, %4414
  %4416 = fmul <2 x double> %block393, %splat.splat5939
  %4417 = fadd <2 x double> %4415, %4416
  %4418 = fmul <2 x double> %block396, %splat.splat5942
  %4419 = fadd <2 x double> %4417, %4418
  %4420 = fmul <2 x double> %block399, %splat.splat5945
  %4421 = fadd <2 x double> %4419, %4420
  %4422 = fmul <2 x double> %block402, %splat.splat5948
  %4423 = fadd <2 x double> %4421, %4422
  %4424 = fmul <2 x double> %block405, %splat.splat5951
  %4425 = fadd <2 x double> %4423, %4424
  %4426 = fmul <2 x double> %block408, %splat.splat5954
  %4427 = fadd <2 x double> %4425, %4426
  %4428 = fmul <2 x double> %block411, %splat.splat5957
  %4429 = fadd <2 x double> %4427, %4428
  %4430 = shufflevector <2 x double> %4429, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4431 = shufflevector <10 x double> %4388, <10 x double> %4430, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %4432 = fmul <2 x double> %block414, %splat.splat5897
  %4433 = fmul <2 x double> %block417, %splat.splat5900
  %4434 = fadd <2 x double> %4432, %4433
  %4435 = fmul <2 x double> %block420, %splat.splat5903
  %4436 = fadd <2 x double> %4434, %4435
  %4437 = fmul <2 x double> %block423, %splat.splat5906
  %4438 = fadd <2 x double> %4436, %4437
  %4439 = fmul <2 x double> %block426, %splat.splat5909
  %4440 = fadd <2 x double> %4438, %4439
  %4441 = fmul <2 x double> %block429, %splat.splat5912
  %4442 = fadd <2 x double> %4440, %4441
  %4443 = fmul <2 x double> %block432, %splat.splat5915
  %4444 = fadd <2 x double> %4442, %4443
  %4445 = fmul <2 x double> %block435, %splat.splat5918
  %4446 = fadd <2 x double> %4444, %4445
  %4447 = fmul <2 x double> %block438, %splat.splat5921
  %4448 = fadd <2 x double> %4446, %4447
  %4449 = fmul <2 x double> %block441, %splat.splat5924
  %4450 = fadd <2 x double> %4448, %4449
  %4451 = fmul <2 x double> %block444, %splat.splat5927
  %4452 = fadd <2 x double> %4450, %4451
  %4453 = fmul <2 x double> %block447, %splat.splat5930
  %4454 = fadd <2 x double> %4452, %4453
  %4455 = fmul <2 x double> %block450, %splat.splat5933
  %4456 = fadd <2 x double> %4454, %4455
  %4457 = fmul <2 x double> %block453, %splat.splat5936
  %4458 = fadd <2 x double> %4456, %4457
  %4459 = fmul <2 x double> %block456, %splat.splat5939
  %4460 = fadd <2 x double> %4458, %4459
  %4461 = fmul <2 x double> %block459, %splat.splat5942
  %4462 = fadd <2 x double> %4460, %4461
  %4463 = fmul <2 x double> %block462, %splat.splat5945
  %4464 = fadd <2 x double> %4462, %4463
  %4465 = fmul <2 x double> %block465, %splat.splat5948
  %4466 = fadd <2 x double> %4464, %4465
  %4467 = fmul <2 x double> %block468, %splat.splat5951
  %4468 = fadd <2 x double> %4466, %4467
  %4469 = fmul <2 x double> %block471, %splat.splat5954
  %4470 = fadd <2 x double> %4468, %4469
  %4471 = fmul <2 x double> %block474, %splat.splat5957
  %4472 = fadd <2 x double> %4470, %4471
  %4473 = shufflevector <2 x double> %4472, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4474 = shufflevector <10 x double> %4431, <10 x double> %4473, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %4475 = fmul <2 x double> %block477, %splat.splat5897
  %4476 = fmul <2 x double> %block480, %splat.splat5900
  %4477 = fadd <2 x double> %4475, %4476
  %4478 = fmul <2 x double> %block483, %splat.splat5903
  %4479 = fadd <2 x double> %4477, %4478
  %4480 = fmul <2 x double> %block486, %splat.splat5906
  %4481 = fadd <2 x double> %4479, %4480
  %4482 = fmul <2 x double> %block489, %splat.splat5909
  %4483 = fadd <2 x double> %4481, %4482
  %4484 = fmul <2 x double> %block492, %splat.splat5912
  %4485 = fadd <2 x double> %4483, %4484
  %4486 = fmul <2 x double> %block495, %splat.splat5915
  %4487 = fadd <2 x double> %4485, %4486
  %4488 = fmul <2 x double> %block498, %splat.splat5918
  %4489 = fadd <2 x double> %4487, %4488
  %4490 = fmul <2 x double> %block501, %splat.splat5921
  %4491 = fadd <2 x double> %4489, %4490
  %4492 = fmul <2 x double> %block504, %splat.splat5924
  %4493 = fadd <2 x double> %4491, %4492
  %4494 = fmul <2 x double> %block507, %splat.splat5927
  %4495 = fadd <2 x double> %4493, %4494
  %4496 = fmul <2 x double> %block510, %splat.splat5930
  %4497 = fadd <2 x double> %4495, %4496
  %4498 = fmul <2 x double> %block513, %splat.splat5933
  %4499 = fadd <2 x double> %4497, %4498
  %4500 = fmul <2 x double> %block516, %splat.splat5936
  %4501 = fadd <2 x double> %4499, %4500
  %4502 = fmul <2 x double> %block519, %splat.splat5939
  %4503 = fadd <2 x double> %4501, %4502
  %4504 = fmul <2 x double> %block522, %splat.splat5942
  %4505 = fadd <2 x double> %4503, %4504
  %4506 = fmul <2 x double> %block525, %splat.splat5945
  %4507 = fadd <2 x double> %4505, %4506
  %4508 = fmul <2 x double> %block528, %splat.splat5948
  %4509 = fadd <2 x double> %4507, %4508
  %4510 = fmul <2 x double> %block531, %splat.splat5951
  %4511 = fadd <2 x double> %4509, %4510
  %4512 = fmul <2 x double> %block534, %splat.splat5954
  %4513 = fadd <2 x double> %4511, %4512
  %4514 = fmul <2 x double> %block537, %splat.splat5957
  %4515 = fadd <2 x double> %4513, %4514
  %4516 = shufflevector <2 x double> %4515, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4517 = shufflevector <10 x double> %4474, <10 x double> %4516, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat6212 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> zeroinitializer
  %4518 = fmul <2 x double> %block, %splat.splat6212
  %splat.splat6215 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %4519 = fmul <2 x double> %block228, %splat.splat6215
  %4520 = fadd <2 x double> %4518, %4519
  %splat.splat6218 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %4521 = fmul <2 x double> %block231, %splat.splat6218
  %4522 = fadd <2 x double> %4520, %4521
  %splat.splat6221 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %4523 = fmul <2 x double> %block234, %splat.splat6221
  %4524 = fadd <2 x double> %4522, %4523
  %splat.splat6224 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %4525 = fmul <2 x double> %block237, %splat.splat6224
  %4526 = fadd <2 x double> %4524, %4525
  %splat.splat6227 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %4527 = fmul <2 x double> %block240, %splat.splat6227
  %4528 = fadd <2 x double> %4526, %4527
  %splat.splat6230 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %4529 = fmul <2 x double> %block243, %splat.splat6230
  %4530 = fadd <2 x double> %4528, %4529
  %splat.splat6233 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %4531 = fmul <2 x double> %block246, %splat.splat6233
  %4532 = fadd <2 x double> %4530, %4531
  %splat.splat6236 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %4533 = fmul <2 x double> %block249, %splat.splat6236
  %4534 = fadd <2 x double> %4532, %4533
  %splat.splat6239 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %4535 = fmul <2 x double> %block252, %splat.splat6239
  %4536 = fadd <2 x double> %4534, %4535
  %splat.splat6242 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %4537 = fmul <2 x double> %block255, %splat.splat6242
  %4538 = fadd <2 x double> %4536, %4537
  %splat.splat6245 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %4539 = fmul <2 x double> %block258, %splat.splat6245
  %4540 = fadd <2 x double> %4538, %4539
  %splat.splat6248 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %4541 = fmul <2 x double> %block261, %splat.splat6248
  %4542 = fadd <2 x double> %4540, %4541
  %splat.splat6251 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %4543 = fmul <2 x double> %block264, %splat.splat6251
  %4544 = fadd <2 x double> %4542, %4543
  %splat.splat6254 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %4545 = fmul <2 x double> %block267, %splat.splat6254
  %4546 = fadd <2 x double> %4544, %4545
  %splat.splat6257 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %4547 = fmul <2 x double> %block270, %splat.splat6257
  %4548 = fadd <2 x double> %4546, %4547
  %splat.splat6260 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %4549 = fmul <2 x double> %block273, %splat.splat6260
  %4550 = fadd <2 x double> %4548, %4549
  %splat.splat6263 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %4551 = fmul <2 x double> %block276, %splat.splat6263
  %4552 = fadd <2 x double> %4550, %4551
  %splat.splat6266 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %4553 = fmul <2 x double> %block279, %splat.splat6266
  %4554 = fadd <2 x double> %4552, %4553
  %splat.splat6269 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %4555 = fmul <2 x double> %block282, %splat.splat6269
  %4556 = fadd <2 x double> %4554, %4555
  %splat.splat6272 = shufflevector <21 x double> %col.load221, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %4557 = fmul <2 x double> %block285, %splat.splat6272
  %4558 = fadd <2 x double> %4556, %4557
  %4559 = shufflevector <2 x double> %4558, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4560 = fmul <2 x double> %block288, %splat.splat6212
  %4561 = fmul <2 x double> %block291, %splat.splat6215
  %4562 = fadd <2 x double> %4560, %4561
  %4563 = fmul <2 x double> %block294, %splat.splat6218
  %4564 = fadd <2 x double> %4562, %4563
  %4565 = fmul <2 x double> %block297, %splat.splat6221
  %4566 = fadd <2 x double> %4564, %4565
  %4567 = fmul <2 x double> %block300, %splat.splat6224
  %4568 = fadd <2 x double> %4566, %4567
  %4569 = fmul <2 x double> %block303, %splat.splat6227
  %4570 = fadd <2 x double> %4568, %4569
  %4571 = fmul <2 x double> %block306, %splat.splat6230
  %4572 = fadd <2 x double> %4570, %4571
  %4573 = fmul <2 x double> %block309, %splat.splat6233
  %4574 = fadd <2 x double> %4572, %4573
  %4575 = fmul <2 x double> %block312, %splat.splat6236
  %4576 = fadd <2 x double> %4574, %4575
  %4577 = fmul <2 x double> %block315, %splat.splat6239
  %4578 = fadd <2 x double> %4576, %4577
  %4579 = fmul <2 x double> %block318, %splat.splat6242
  %4580 = fadd <2 x double> %4578, %4579
  %4581 = fmul <2 x double> %block321, %splat.splat6245
  %4582 = fadd <2 x double> %4580, %4581
  %4583 = fmul <2 x double> %block324, %splat.splat6248
  %4584 = fadd <2 x double> %4582, %4583
  %4585 = fmul <2 x double> %block327, %splat.splat6251
  %4586 = fadd <2 x double> %4584, %4585
  %4587 = fmul <2 x double> %block330, %splat.splat6254
  %4588 = fadd <2 x double> %4586, %4587
  %4589 = fmul <2 x double> %block333, %splat.splat6257
  %4590 = fadd <2 x double> %4588, %4589
  %4591 = fmul <2 x double> %block336, %splat.splat6260
  %4592 = fadd <2 x double> %4590, %4591
  %4593 = fmul <2 x double> %block339, %splat.splat6263
  %4594 = fadd <2 x double> %4592, %4593
  %4595 = fmul <2 x double> %block342, %splat.splat6266
  %4596 = fadd <2 x double> %4594, %4595
  %4597 = fmul <2 x double> %block345, %splat.splat6269
  %4598 = fadd <2 x double> %4596, %4597
  %4599 = fmul <2 x double> %block348, %splat.splat6272
  %4600 = fadd <2 x double> %4598, %4599
  %4601 = shufflevector <2 x double> %4600, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4602 = shufflevector <10 x double> %4559, <10 x double> %4601, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4603 = fmul <2 x double> %block351, %splat.splat6212
  %4604 = fmul <2 x double> %block354, %splat.splat6215
  %4605 = fadd <2 x double> %4603, %4604
  %4606 = fmul <2 x double> %block357, %splat.splat6218
  %4607 = fadd <2 x double> %4605, %4606
  %4608 = fmul <2 x double> %block360, %splat.splat6221
  %4609 = fadd <2 x double> %4607, %4608
  %4610 = fmul <2 x double> %block363, %splat.splat6224
  %4611 = fadd <2 x double> %4609, %4610
  %4612 = fmul <2 x double> %block366, %splat.splat6227
  %4613 = fadd <2 x double> %4611, %4612
  %4614 = fmul <2 x double> %block369, %splat.splat6230
  %4615 = fadd <2 x double> %4613, %4614
  %4616 = fmul <2 x double> %block372, %splat.splat6233
  %4617 = fadd <2 x double> %4615, %4616
  %4618 = fmul <2 x double> %block375, %splat.splat6236
  %4619 = fadd <2 x double> %4617, %4618
  %4620 = fmul <2 x double> %block378, %splat.splat6239
  %4621 = fadd <2 x double> %4619, %4620
  %4622 = fmul <2 x double> %block381, %splat.splat6242
  %4623 = fadd <2 x double> %4621, %4622
  %4624 = fmul <2 x double> %block384, %splat.splat6245
  %4625 = fadd <2 x double> %4623, %4624
  %4626 = fmul <2 x double> %block387, %splat.splat6248
  %4627 = fadd <2 x double> %4625, %4626
  %4628 = fmul <2 x double> %block390, %splat.splat6251
  %4629 = fadd <2 x double> %4627, %4628
  %4630 = fmul <2 x double> %block393, %splat.splat6254
  %4631 = fadd <2 x double> %4629, %4630
  %4632 = fmul <2 x double> %block396, %splat.splat6257
  %4633 = fadd <2 x double> %4631, %4632
  %4634 = fmul <2 x double> %block399, %splat.splat6260
  %4635 = fadd <2 x double> %4633, %4634
  %4636 = fmul <2 x double> %block402, %splat.splat6263
  %4637 = fadd <2 x double> %4635, %4636
  %4638 = fmul <2 x double> %block405, %splat.splat6266
  %4639 = fadd <2 x double> %4637, %4638
  %4640 = fmul <2 x double> %block408, %splat.splat6269
  %4641 = fadd <2 x double> %4639, %4640
  %4642 = fmul <2 x double> %block411, %splat.splat6272
  %4643 = fadd <2 x double> %4641, %4642
  %4644 = shufflevector <2 x double> %4643, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4645 = shufflevector <10 x double> %4602, <10 x double> %4644, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %4646 = fmul <2 x double> %block414, %splat.splat6212
  %4647 = fmul <2 x double> %block417, %splat.splat6215
  %4648 = fadd <2 x double> %4646, %4647
  %4649 = fmul <2 x double> %block420, %splat.splat6218
  %4650 = fadd <2 x double> %4648, %4649
  %4651 = fmul <2 x double> %block423, %splat.splat6221
  %4652 = fadd <2 x double> %4650, %4651
  %4653 = fmul <2 x double> %block426, %splat.splat6224
  %4654 = fadd <2 x double> %4652, %4653
  %4655 = fmul <2 x double> %block429, %splat.splat6227
  %4656 = fadd <2 x double> %4654, %4655
  %4657 = fmul <2 x double> %block432, %splat.splat6230
  %4658 = fadd <2 x double> %4656, %4657
  %4659 = fmul <2 x double> %block435, %splat.splat6233
  %4660 = fadd <2 x double> %4658, %4659
  %4661 = fmul <2 x double> %block438, %splat.splat6236
  %4662 = fadd <2 x double> %4660, %4661
  %4663 = fmul <2 x double> %block441, %splat.splat6239
  %4664 = fadd <2 x double> %4662, %4663
  %4665 = fmul <2 x double> %block444, %splat.splat6242
  %4666 = fadd <2 x double> %4664, %4665
  %4667 = fmul <2 x double> %block447, %splat.splat6245
  %4668 = fadd <2 x double> %4666, %4667
  %4669 = fmul <2 x double> %block450, %splat.splat6248
  %4670 = fadd <2 x double> %4668, %4669
  %4671 = fmul <2 x double> %block453, %splat.splat6251
  %4672 = fadd <2 x double> %4670, %4671
  %4673 = fmul <2 x double> %block456, %splat.splat6254
  %4674 = fadd <2 x double> %4672, %4673
  %4675 = fmul <2 x double> %block459, %splat.splat6257
  %4676 = fadd <2 x double> %4674, %4675
  %4677 = fmul <2 x double> %block462, %splat.splat6260
  %4678 = fadd <2 x double> %4676, %4677
  %4679 = fmul <2 x double> %block465, %splat.splat6263
  %4680 = fadd <2 x double> %4678, %4679
  %4681 = fmul <2 x double> %block468, %splat.splat6266
  %4682 = fadd <2 x double> %4680, %4681
  %4683 = fmul <2 x double> %block471, %splat.splat6269
  %4684 = fadd <2 x double> %4682, %4683
  %4685 = fmul <2 x double> %block474, %splat.splat6272
  %4686 = fadd <2 x double> %4684, %4685
  %4687 = shufflevector <2 x double> %4686, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4688 = shufflevector <10 x double> %4645, <10 x double> %4687, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %4689 = fmul <2 x double> %block477, %splat.splat6212
  %4690 = fmul <2 x double> %block480, %splat.splat6215
  %4691 = fadd <2 x double> %4689, %4690
  %4692 = fmul <2 x double> %block483, %splat.splat6218
  %4693 = fadd <2 x double> %4691, %4692
  %4694 = fmul <2 x double> %block486, %splat.splat6221
  %4695 = fadd <2 x double> %4693, %4694
  %4696 = fmul <2 x double> %block489, %splat.splat6224
  %4697 = fadd <2 x double> %4695, %4696
  %4698 = fmul <2 x double> %block492, %splat.splat6227
  %4699 = fadd <2 x double> %4697, %4698
  %4700 = fmul <2 x double> %block495, %splat.splat6230
  %4701 = fadd <2 x double> %4699, %4700
  %4702 = fmul <2 x double> %block498, %splat.splat6233
  %4703 = fadd <2 x double> %4701, %4702
  %4704 = fmul <2 x double> %block501, %splat.splat6236
  %4705 = fadd <2 x double> %4703, %4704
  %4706 = fmul <2 x double> %block504, %splat.splat6239
  %4707 = fadd <2 x double> %4705, %4706
  %4708 = fmul <2 x double> %block507, %splat.splat6242
  %4709 = fadd <2 x double> %4707, %4708
  %4710 = fmul <2 x double> %block510, %splat.splat6245
  %4711 = fadd <2 x double> %4709, %4710
  %4712 = fmul <2 x double> %block513, %splat.splat6248
  %4713 = fadd <2 x double> %4711, %4712
  %4714 = fmul <2 x double> %block516, %splat.splat6251
  %4715 = fadd <2 x double> %4713, %4714
  %4716 = fmul <2 x double> %block519, %splat.splat6254
  %4717 = fadd <2 x double> %4715, %4716
  %4718 = fmul <2 x double> %block522, %splat.splat6257
  %4719 = fadd <2 x double> %4717, %4718
  %4720 = fmul <2 x double> %block525, %splat.splat6260
  %4721 = fadd <2 x double> %4719, %4720
  %4722 = fmul <2 x double> %block528, %splat.splat6263
  %4723 = fadd <2 x double> %4721, %4722
  %4724 = fmul <2 x double> %block531, %splat.splat6266
  %4725 = fadd <2 x double> %4723, %4724
  %4726 = fmul <2 x double> %block534, %splat.splat6269
  %4727 = fadd <2 x double> %4725, %4726
  %4728 = fmul <2 x double> %block537, %splat.splat6272
  %4729 = fadd <2 x double> %4727, %4728
  %4730 = shufflevector <2 x double> %4729, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4731 = shufflevector <10 x double> %4688, <10 x double> %4730, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat6527 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> zeroinitializer
  %4732 = fmul <2 x double> %block, %splat.splat6527
  %splat.splat6530 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %4733 = fmul <2 x double> %block228, %splat.splat6530
  %4734 = fadd <2 x double> %4732, %4733
  %splat.splat6533 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %4735 = fmul <2 x double> %block231, %splat.splat6533
  %4736 = fadd <2 x double> %4734, %4735
  %splat.splat6536 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %4737 = fmul <2 x double> %block234, %splat.splat6536
  %4738 = fadd <2 x double> %4736, %4737
  %splat.splat6539 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %4739 = fmul <2 x double> %block237, %splat.splat6539
  %4740 = fadd <2 x double> %4738, %4739
  %splat.splat6542 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %4741 = fmul <2 x double> %block240, %splat.splat6542
  %4742 = fadd <2 x double> %4740, %4741
  %splat.splat6545 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %4743 = fmul <2 x double> %block243, %splat.splat6545
  %4744 = fadd <2 x double> %4742, %4743
  %splat.splat6548 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %4745 = fmul <2 x double> %block246, %splat.splat6548
  %4746 = fadd <2 x double> %4744, %4745
  %splat.splat6551 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %4747 = fmul <2 x double> %block249, %splat.splat6551
  %4748 = fadd <2 x double> %4746, %4747
  %splat.splat6554 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %4749 = fmul <2 x double> %block252, %splat.splat6554
  %4750 = fadd <2 x double> %4748, %4749
  %splat.splat6557 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %4751 = fmul <2 x double> %block255, %splat.splat6557
  %4752 = fadd <2 x double> %4750, %4751
  %splat.splat6560 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %4753 = fmul <2 x double> %block258, %splat.splat6560
  %4754 = fadd <2 x double> %4752, %4753
  %splat.splat6563 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %4755 = fmul <2 x double> %block261, %splat.splat6563
  %4756 = fadd <2 x double> %4754, %4755
  %splat.splat6566 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %4757 = fmul <2 x double> %block264, %splat.splat6566
  %4758 = fadd <2 x double> %4756, %4757
  %splat.splat6569 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %4759 = fmul <2 x double> %block267, %splat.splat6569
  %4760 = fadd <2 x double> %4758, %4759
  %splat.splat6572 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %4761 = fmul <2 x double> %block270, %splat.splat6572
  %4762 = fadd <2 x double> %4760, %4761
  %splat.splat6575 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %4763 = fmul <2 x double> %block273, %splat.splat6575
  %4764 = fadd <2 x double> %4762, %4763
  %splat.splat6578 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %4765 = fmul <2 x double> %block276, %splat.splat6578
  %4766 = fadd <2 x double> %4764, %4765
  %splat.splat6581 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %4767 = fmul <2 x double> %block279, %splat.splat6581
  %4768 = fadd <2 x double> %4766, %4767
  %splat.splat6584 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %4769 = fmul <2 x double> %block282, %splat.splat6584
  %4770 = fadd <2 x double> %4768, %4769
  %splat.splat6587 = shufflevector <21 x double> %col.load223, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %4771 = fmul <2 x double> %block285, %splat.splat6587
  %4772 = fadd <2 x double> %4770, %4771
  %4773 = shufflevector <2 x double> %4772, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4774 = fmul <2 x double> %block288, %splat.splat6527
  %4775 = fmul <2 x double> %block291, %splat.splat6530
  %4776 = fadd <2 x double> %4774, %4775
  %4777 = fmul <2 x double> %block294, %splat.splat6533
  %4778 = fadd <2 x double> %4776, %4777
  %4779 = fmul <2 x double> %block297, %splat.splat6536
  %4780 = fadd <2 x double> %4778, %4779
  %4781 = fmul <2 x double> %block300, %splat.splat6539
  %4782 = fadd <2 x double> %4780, %4781
  %4783 = fmul <2 x double> %block303, %splat.splat6542
  %4784 = fadd <2 x double> %4782, %4783
  %4785 = fmul <2 x double> %block306, %splat.splat6545
  %4786 = fadd <2 x double> %4784, %4785
  %4787 = fmul <2 x double> %block309, %splat.splat6548
  %4788 = fadd <2 x double> %4786, %4787
  %4789 = fmul <2 x double> %block312, %splat.splat6551
  %4790 = fadd <2 x double> %4788, %4789
  %4791 = fmul <2 x double> %block315, %splat.splat6554
  %4792 = fadd <2 x double> %4790, %4791
  %4793 = fmul <2 x double> %block318, %splat.splat6557
  %4794 = fadd <2 x double> %4792, %4793
  %4795 = fmul <2 x double> %block321, %splat.splat6560
  %4796 = fadd <2 x double> %4794, %4795
  %4797 = fmul <2 x double> %block324, %splat.splat6563
  %4798 = fadd <2 x double> %4796, %4797
  %4799 = fmul <2 x double> %block327, %splat.splat6566
  %4800 = fadd <2 x double> %4798, %4799
  %4801 = fmul <2 x double> %block330, %splat.splat6569
  %4802 = fadd <2 x double> %4800, %4801
  %4803 = fmul <2 x double> %block333, %splat.splat6572
  %4804 = fadd <2 x double> %4802, %4803
  %4805 = fmul <2 x double> %block336, %splat.splat6575
  %4806 = fadd <2 x double> %4804, %4805
  %4807 = fmul <2 x double> %block339, %splat.splat6578
  %4808 = fadd <2 x double> %4806, %4807
  %4809 = fmul <2 x double> %block342, %splat.splat6581
  %4810 = fadd <2 x double> %4808, %4809
  %4811 = fmul <2 x double> %block345, %splat.splat6584
  %4812 = fadd <2 x double> %4810, %4811
  %4813 = fmul <2 x double> %block348, %splat.splat6587
  %4814 = fadd <2 x double> %4812, %4813
  %4815 = shufflevector <2 x double> %4814, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4816 = shufflevector <10 x double> %4773, <10 x double> %4815, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4817 = fmul <2 x double> %block351, %splat.splat6527
  %4818 = fmul <2 x double> %block354, %splat.splat6530
  %4819 = fadd <2 x double> %4817, %4818
  %4820 = fmul <2 x double> %block357, %splat.splat6533
  %4821 = fadd <2 x double> %4819, %4820
  %4822 = fmul <2 x double> %block360, %splat.splat6536
  %4823 = fadd <2 x double> %4821, %4822
  %4824 = fmul <2 x double> %block363, %splat.splat6539
  %4825 = fadd <2 x double> %4823, %4824
  %4826 = fmul <2 x double> %block366, %splat.splat6542
  %4827 = fadd <2 x double> %4825, %4826
  %4828 = fmul <2 x double> %block369, %splat.splat6545
  %4829 = fadd <2 x double> %4827, %4828
  %4830 = fmul <2 x double> %block372, %splat.splat6548
  %4831 = fadd <2 x double> %4829, %4830
  %4832 = fmul <2 x double> %block375, %splat.splat6551
  %4833 = fadd <2 x double> %4831, %4832
  %4834 = fmul <2 x double> %block378, %splat.splat6554
  %4835 = fadd <2 x double> %4833, %4834
  %4836 = fmul <2 x double> %block381, %splat.splat6557
  %4837 = fadd <2 x double> %4835, %4836
  %4838 = fmul <2 x double> %block384, %splat.splat6560
  %4839 = fadd <2 x double> %4837, %4838
  %4840 = fmul <2 x double> %block387, %splat.splat6563
  %4841 = fadd <2 x double> %4839, %4840
  %4842 = fmul <2 x double> %block390, %splat.splat6566
  %4843 = fadd <2 x double> %4841, %4842
  %4844 = fmul <2 x double> %block393, %splat.splat6569
  %4845 = fadd <2 x double> %4843, %4844
  %4846 = fmul <2 x double> %block396, %splat.splat6572
  %4847 = fadd <2 x double> %4845, %4846
  %4848 = fmul <2 x double> %block399, %splat.splat6575
  %4849 = fadd <2 x double> %4847, %4848
  %4850 = fmul <2 x double> %block402, %splat.splat6578
  %4851 = fadd <2 x double> %4849, %4850
  %4852 = fmul <2 x double> %block405, %splat.splat6581
  %4853 = fadd <2 x double> %4851, %4852
  %4854 = fmul <2 x double> %block408, %splat.splat6584
  %4855 = fadd <2 x double> %4853, %4854
  %4856 = fmul <2 x double> %block411, %splat.splat6587
  %4857 = fadd <2 x double> %4855, %4856
  %4858 = shufflevector <2 x double> %4857, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4859 = shufflevector <10 x double> %4816, <10 x double> %4858, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %4860 = fmul <2 x double> %block414, %splat.splat6527
  %4861 = fmul <2 x double> %block417, %splat.splat6530
  %4862 = fadd <2 x double> %4860, %4861
  %4863 = fmul <2 x double> %block420, %splat.splat6533
  %4864 = fadd <2 x double> %4862, %4863
  %4865 = fmul <2 x double> %block423, %splat.splat6536
  %4866 = fadd <2 x double> %4864, %4865
  %4867 = fmul <2 x double> %block426, %splat.splat6539
  %4868 = fadd <2 x double> %4866, %4867
  %4869 = fmul <2 x double> %block429, %splat.splat6542
  %4870 = fadd <2 x double> %4868, %4869
  %4871 = fmul <2 x double> %block432, %splat.splat6545
  %4872 = fadd <2 x double> %4870, %4871
  %4873 = fmul <2 x double> %block435, %splat.splat6548
  %4874 = fadd <2 x double> %4872, %4873
  %4875 = fmul <2 x double> %block438, %splat.splat6551
  %4876 = fadd <2 x double> %4874, %4875
  %4877 = fmul <2 x double> %block441, %splat.splat6554
  %4878 = fadd <2 x double> %4876, %4877
  %4879 = fmul <2 x double> %block444, %splat.splat6557
  %4880 = fadd <2 x double> %4878, %4879
  %4881 = fmul <2 x double> %block447, %splat.splat6560
  %4882 = fadd <2 x double> %4880, %4881
  %4883 = fmul <2 x double> %block450, %splat.splat6563
  %4884 = fadd <2 x double> %4882, %4883
  %4885 = fmul <2 x double> %block453, %splat.splat6566
  %4886 = fadd <2 x double> %4884, %4885
  %4887 = fmul <2 x double> %block456, %splat.splat6569
  %4888 = fadd <2 x double> %4886, %4887
  %4889 = fmul <2 x double> %block459, %splat.splat6572
  %4890 = fadd <2 x double> %4888, %4889
  %4891 = fmul <2 x double> %block462, %splat.splat6575
  %4892 = fadd <2 x double> %4890, %4891
  %4893 = fmul <2 x double> %block465, %splat.splat6578
  %4894 = fadd <2 x double> %4892, %4893
  %4895 = fmul <2 x double> %block468, %splat.splat6581
  %4896 = fadd <2 x double> %4894, %4895
  %4897 = fmul <2 x double> %block471, %splat.splat6584
  %4898 = fadd <2 x double> %4896, %4897
  %4899 = fmul <2 x double> %block474, %splat.splat6587
  %4900 = fadd <2 x double> %4898, %4899
  %4901 = shufflevector <2 x double> %4900, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4902 = shufflevector <10 x double> %4859, <10 x double> %4901, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %4903 = fmul <2 x double> %block477, %splat.splat6527
  %4904 = fmul <2 x double> %block480, %splat.splat6530
  %4905 = fadd <2 x double> %4903, %4904
  %4906 = fmul <2 x double> %block483, %splat.splat6533
  %4907 = fadd <2 x double> %4905, %4906
  %4908 = fmul <2 x double> %block486, %splat.splat6536
  %4909 = fadd <2 x double> %4907, %4908
  %4910 = fmul <2 x double> %block489, %splat.splat6539
  %4911 = fadd <2 x double> %4909, %4910
  %4912 = fmul <2 x double> %block492, %splat.splat6542
  %4913 = fadd <2 x double> %4911, %4912
  %4914 = fmul <2 x double> %block495, %splat.splat6545
  %4915 = fadd <2 x double> %4913, %4914
  %4916 = fmul <2 x double> %block498, %splat.splat6548
  %4917 = fadd <2 x double> %4915, %4916
  %4918 = fmul <2 x double> %block501, %splat.splat6551
  %4919 = fadd <2 x double> %4917, %4918
  %4920 = fmul <2 x double> %block504, %splat.splat6554
  %4921 = fadd <2 x double> %4919, %4920
  %4922 = fmul <2 x double> %block507, %splat.splat6557
  %4923 = fadd <2 x double> %4921, %4922
  %4924 = fmul <2 x double> %block510, %splat.splat6560
  %4925 = fadd <2 x double> %4923, %4924
  %4926 = fmul <2 x double> %block513, %splat.splat6563
  %4927 = fadd <2 x double> %4925, %4926
  %4928 = fmul <2 x double> %block516, %splat.splat6566
  %4929 = fadd <2 x double> %4927, %4928
  %4930 = fmul <2 x double> %block519, %splat.splat6569
  %4931 = fadd <2 x double> %4929, %4930
  %4932 = fmul <2 x double> %block522, %splat.splat6572
  %4933 = fadd <2 x double> %4931, %4932
  %4934 = fmul <2 x double> %block525, %splat.splat6575
  %4935 = fadd <2 x double> %4933, %4934
  %4936 = fmul <2 x double> %block528, %splat.splat6578
  %4937 = fadd <2 x double> %4935, %4936
  %4938 = fmul <2 x double> %block531, %splat.splat6581
  %4939 = fadd <2 x double> %4937, %4938
  %4940 = fmul <2 x double> %block534, %splat.splat6584
  %4941 = fadd <2 x double> %4939, %4940
  %4942 = fmul <2 x double> %block537, %splat.splat6587
  %4943 = fadd <2 x double> %4941, %4942
  %4944 = shufflevector <2 x double> %4943, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4945 = shufflevector <10 x double> %4902, <10 x double> %4944, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat6842 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> zeroinitializer
  %4946 = fmul <2 x double> %block, %splat.splat6842
  %splat.splat6845 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %4947 = fmul <2 x double> %block228, %splat.splat6845
  %4948 = fadd <2 x double> %4946, %4947
  %splat.splat6848 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %4949 = fmul <2 x double> %block231, %splat.splat6848
  %4950 = fadd <2 x double> %4948, %4949
  %splat.splat6851 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %4951 = fmul <2 x double> %block234, %splat.splat6851
  %4952 = fadd <2 x double> %4950, %4951
  %splat.splat6854 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %4953 = fmul <2 x double> %block237, %splat.splat6854
  %4954 = fadd <2 x double> %4952, %4953
  %splat.splat6857 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %4955 = fmul <2 x double> %block240, %splat.splat6857
  %4956 = fadd <2 x double> %4954, %4955
  %splat.splat6860 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %4957 = fmul <2 x double> %block243, %splat.splat6860
  %4958 = fadd <2 x double> %4956, %4957
  %splat.splat6863 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %4959 = fmul <2 x double> %block246, %splat.splat6863
  %4960 = fadd <2 x double> %4958, %4959
  %splat.splat6866 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %4961 = fmul <2 x double> %block249, %splat.splat6866
  %4962 = fadd <2 x double> %4960, %4961
  %splat.splat6869 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %4963 = fmul <2 x double> %block252, %splat.splat6869
  %4964 = fadd <2 x double> %4962, %4963
  %splat.splat6872 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %4965 = fmul <2 x double> %block255, %splat.splat6872
  %4966 = fadd <2 x double> %4964, %4965
  %splat.splat6875 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %4967 = fmul <2 x double> %block258, %splat.splat6875
  %4968 = fadd <2 x double> %4966, %4967
  %splat.splat6878 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %4969 = fmul <2 x double> %block261, %splat.splat6878
  %4970 = fadd <2 x double> %4968, %4969
  %splat.splat6881 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %4971 = fmul <2 x double> %block264, %splat.splat6881
  %4972 = fadd <2 x double> %4970, %4971
  %splat.splat6884 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %4973 = fmul <2 x double> %block267, %splat.splat6884
  %4974 = fadd <2 x double> %4972, %4973
  %splat.splat6887 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %4975 = fmul <2 x double> %block270, %splat.splat6887
  %4976 = fadd <2 x double> %4974, %4975
  %splat.splat6890 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %4977 = fmul <2 x double> %block273, %splat.splat6890
  %4978 = fadd <2 x double> %4976, %4977
  %splat.splat6893 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %4979 = fmul <2 x double> %block276, %splat.splat6893
  %4980 = fadd <2 x double> %4978, %4979
  %splat.splat6896 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %4981 = fmul <2 x double> %block279, %splat.splat6896
  %4982 = fadd <2 x double> %4980, %4981
  %splat.splat6899 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %4983 = fmul <2 x double> %block282, %splat.splat6899
  %4984 = fadd <2 x double> %4982, %4983
  %splat.splat6902 = shufflevector <21 x double> %col.load225, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %4985 = fmul <2 x double> %block285, %splat.splat6902
  %4986 = fadd <2 x double> %4984, %4985
  %4987 = shufflevector <2 x double> %4986, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4988 = fmul <2 x double> %block288, %splat.splat6842
  %4989 = fmul <2 x double> %block291, %splat.splat6845
  %4990 = fadd <2 x double> %4988, %4989
  %4991 = fmul <2 x double> %block294, %splat.splat6848
  %4992 = fadd <2 x double> %4990, %4991
  %4993 = fmul <2 x double> %block297, %splat.splat6851
  %4994 = fadd <2 x double> %4992, %4993
  %4995 = fmul <2 x double> %block300, %splat.splat6854
  %4996 = fadd <2 x double> %4994, %4995
  %4997 = fmul <2 x double> %block303, %splat.splat6857
  %4998 = fadd <2 x double> %4996, %4997
  %4999 = fmul <2 x double> %block306, %splat.splat6860
  %5000 = fadd <2 x double> %4998, %4999
  %5001 = fmul <2 x double> %block309, %splat.splat6863
  %5002 = fadd <2 x double> %5000, %5001
  %5003 = fmul <2 x double> %block312, %splat.splat6866
  %5004 = fadd <2 x double> %5002, %5003
  %5005 = fmul <2 x double> %block315, %splat.splat6869
  %5006 = fadd <2 x double> %5004, %5005
  %5007 = fmul <2 x double> %block318, %splat.splat6872
  %5008 = fadd <2 x double> %5006, %5007
  %5009 = fmul <2 x double> %block321, %splat.splat6875
  %5010 = fadd <2 x double> %5008, %5009
  %5011 = fmul <2 x double> %block324, %splat.splat6878
  %5012 = fadd <2 x double> %5010, %5011
  %5013 = fmul <2 x double> %block327, %splat.splat6881
  %5014 = fadd <2 x double> %5012, %5013
  %5015 = fmul <2 x double> %block330, %splat.splat6884
  %5016 = fadd <2 x double> %5014, %5015
  %5017 = fmul <2 x double> %block333, %splat.splat6887
  %5018 = fadd <2 x double> %5016, %5017
  %5019 = fmul <2 x double> %block336, %splat.splat6890
  %5020 = fadd <2 x double> %5018, %5019
  %5021 = fmul <2 x double> %block339, %splat.splat6893
  %5022 = fadd <2 x double> %5020, %5021
  %5023 = fmul <2 x double> %block342, %splat.splat6896
  %5024 = fadd <2 x double> %5022, %5023
  %5025 = fmul <2 x double> %block345, %splat.splat6899
  %5026 = fadd <2 x double> %5024, %5025
  %5027 = fmul <2 x double> %block348, %splat.splat6902
  %5028 = fadd <2 x double> %5026, %5027
  %5029 = shufflevector <2 x double> %5028, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5030 = shufflevector <10 x double> %4987, <10 x double> %5029, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5031 = fmul <2 x double> %block351, %splat.splat6842
  %5032 = fmul <2 x double> %block354, %splat.splat6845
  %5033 = fadd <2 x double> %5031, %5032
  %5034 = fmul <2 x double> %block357, %splat.splat6848
  %5035 = fadd <2 x double> %5033, %5034
  %5036 = fmul <2 x double> %block360, %splat.splat6851
  %5037 = fadd <2 x double> %5035, %5036
  %5038 = fmul <2 x double> %block363, %splat.splat6854
  %5039 = fadd <2 x double> %5037, %5038
  %5040 = fmul <2 x double> %block366, %splat.splat6857
  %5041 = fadd <2 x double> %5039, %5040
  %5042 = fmul <2 x double> %block369, %splat.splat6860
  %5043 = fadd <2 x double> %5041, %5042
  %5044 = fmul <2 x double> %block372, %splat.splat6863
  %5045 = fadd <2 x double> %5043, %5044
  %5046 = fmul <2 x double> %block375, %splat.splat6866
  %5047 = fadd <2 x double> %5045, %5046
  %5048 = fmul <2 x double> %block378, %splat.splat6869
  %5049 = fadd <2 x double> %5047, %5048
  %5050 = fmul <2 x double> %block381, %splat.splat6872
  %5051 = fadd <2 x double> %5049, %5050
  %5052 = fmul <2 x double> %block384, %splat.splat6875
  %5053 = fadd <2 x double> %5051, %5052
  %5054 = fmul <2 x double> %block387, %splat.splat6878
  %5055 = fadd <2 x double> %5053, %5054
  %5056 = fmul <2 x double> %block390, %splat.splat6881
  %5057 = fadd <2 x double> %5055, %5056
  %5058 = fmul <2 x double> %block393, %splat.splat6884
  %5059 = fadd <2 x double> %5057, %5058
  %5060 = fmul <2 x double> %block396, %splat.splat6887
  %5061 = fadd <2 x double> %5059, %5060
  %5062 = fmul <2 x double> %block399, %splat.splat6890
  %5063 = fadd <2 x double> %5061, %5062
  %5064 = fmul <2 x double> %block402, %splat.splat6893
  %5065 = fadd <2 x double> %5063, %5064
  %5066 = fmul <2 x double> %block405, %splat.splat6896
  %5067 = fadd <2 x double> %5065, %5066
  %5068 = fmul <2 x double> %block408, %splat.splat6899
  %5069 = fadd <2 x double> %5067, %5068
  %5070 = fmul <2 x double> %block411, %splat.splat6902
  %5071 = fadd <2 x double> %5069, %5070
  %5072 = shufflevector <2 x double> %5071, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5073 = shufflevector <10 x double> %5030, <10 x double> %5072, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %5074 = fmul <2 x double> %block414, %splat.splat6842
  %5075 = fmul <2 x double> %block417, %splat.splat6845
  %5076 = fadd <2 x double> %5074, %5075
  %5077 = fmul <2 x double> %block420, %splat.splat6848
  %5078 = fadd <2 x double> %5076, %5077
  %5079 = fmul <2 x double> %block423, %splat.splat6851
  %5080 = fadd <2 x double> %5078, %5079
  %5081 = fmul <2 x double> %block426, %splat.splat6854
  %5082 = fadd <2 x double> %5080, %5081
  %5083 = fmul <2 x double> %block429, %splat.splat6857
  %5084 = fadd <2 x double> %5082, %5083
  %5085 = fmul <2 x double> %block432, %splat.splat6860
  %5086 = fadd <2 x double> %5084, %5085
  %5087 = fmul <2 x double> %block435, %splat.splat6863
  %5088 = fadd <2 x double> %5086, %5087
  %5089 = fmul <2 x double> %block438, %splat.splat6866
  %5090 = fadd <2 x double> %5088, %5089
  %5091 = fmul <2 x double> %block441, %splat.splat6869
  %5092 = fadd <2 x double> %5090, %5091
  %5093 = fmul <2 x double> %block444, %splat.splat6872
  %5094 = fadd <2 x double> %5092, %5093
  %5095 = fmul <2 x double> %block447, %splat.splat6875
  %5096 = fadd <2 x double> %5094, %5095
  %5097 = fmul <2 x double> %block450, %splat.splat6878
  %5098 = fadd <2 x double> %5096, %5097
  %5099 = fmul <2 x double> %block453, %splat.splat6881
  %5100 = fadd <2 x double> %5098, %5099
  %5101 = fmul <2 x double> %block456, %splat.splat6884
  %5102 = fadd <2 x double> %5100, %5101
  %5103 = fmul <2 x double> %block459, %splat.splat6887
  %5104 = fadd <2 x double> %5102, %5103
  %5105 = fmul <2 x double> %block462, %splat.splat6890
  %5106 = fadd <2 x double> %5104, %5105
  %5107 = fmul <2 x double> %block465, %splat.splat6893
  %5108 = fadd <2 x double> %5106, %5107
  %5109 = fmul <2 x double> %block468, %splat.splat6896
  %5110 = fadd <2 x double> %5108, %5109
  %5111 = fmul <2 x double> %block471, %splat.splat6899
  %5112 = fadd <2 x double> %5110, %5111
  %5113 = fmul <2 x double> %block474, %splat.splat6902
  %5114 = fadd <2 x double> %5112, %5113
  %5115 = shufflevector <2 x double> %5114, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5116 = shufflevector <10 x double> %5073, <10 x double> %5115, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %5117 = fmul <2 x double> %block477, %splat.splat6842
  %5118 = fmul <2 x double> %block480, %splat.splat6845
  %5119 = fadd <2 x double> %5117, %5118
  %5120 = fmul <2 x double> %block483, %splat.splat6848
  %5121 = fadd <2 x double> %5119, %5120
  %5122 = fmul <2 x double> %block486, %splat.splat6851
  %5123 = fadd <2 x double> %5121, %5122
  %5124 = fmul <2 x double> %block489, %splat.splat6854
  %5125 = fadd <2 x double> %5123, %5124
  %5126 = fmul <2 x double> %block492, %splat.splat6857
  %5127 = fadd <2 x double> %5125, %5126
  %5128 = fmul <2 x double> %block495, %splat.splat6860
  %5129 = fadd <2 x double> %5127, %5128
  %5130 = fmul <2 x double> %block498, %splat.splat6863
  %5131 = fadd <2 x double> %5129, %5130
  %5132 = fmul <2 x double> %block501, %splat.splat6866
  %5133 = fadd <2 x double> %5131, %5132
  %5134 = fmul <2 x double> %block504, %splat.splat6869
  %5135 = fadd <2 x double> %5133, %5134
  %5136 = fmul <2 x double> %block507, %splat.splat6872
  %5137 = fadd <2 x double> %5135, %5136
  %5138 = fmul <2 x double> %block510, %splat.splat6875
  %5139 = fadd <2 x double> %5137, %5138
  %5140 = fmul <2 x double> %block513, %splat.splat6878
  %5141 = fadd <2 x double> %5139, %5140
  %5142 = fmul <2 x double> %block516, %splat.splat6881
  %5143 = fadd <2 x double> %5141, %5142
  %5144 = fmul <2 x double> %block519, %splat.splat6884
  %5145 = fadd <2 x double> %5143, %5144
  %5146 = fmul <2 x double> %block522, %splat.splat6887
  %5147 = fadd <2 x double> %5145, %5146
  %5148 = fmul <2 x double> %block525, %splat.splat6890
  %5149 = fadd <2 x double> %5147, %5148
  %5150 = fmul <2 x double> %block528, %splat.splat6893
  %5151 = fadd <2 x double> %5149, %5150
  %5152 = fmul <2 x double> %block531, %splat.splat6896
  %5153 = fadd <2 x double> %5151, %5152
  %5154 = fmul <2 x double> %block534, %splat.splat6899
  %5155 = fadd <2 x double> %5153, %5154
  %5156 = fmul <2 x double> %block537, %splat.splat6902
  %5157 = fadd <2 x double> %5155, %5156
  %5158 = shufflevector <2 x double> %5157, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5159 = shufflevector <10 x double> %5116, <10 x double> %5158, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  %splat.splat7157 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> zeroinitializer
  %5160 = fmul <2 x double> %block, %splat.splat7157
  %splat.splat7160 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 1, i32 1>
  %5161 = fmul <2 x double> %block228, %splat.splat7160
  %5162 = fadd <2 x double> %5160, %5161
  %splat.splat7163 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 2, i32 2>
  %5163 = fmul <2 x double> %block231, %splat.splat7163
  %5164 = fadd <2 x double> %5162, %5163
  %splat.splat7166 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 3, i32 3>
  %5165 = fmul <2 x double> %block234, %splat.splat7166
  %5166 = fadd <2 x double> %5164, %5165
  %splat.splat7169 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 4, i32 4>
  %5167 = fmul <2 x double> %block237, %splat.splat7169
  %5168 = fadd <2 x double> %5166, %5167
  %splat.splat7172 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 5, i32 5>
  %5169 = fmul <2 x double> %block240, %splat.splat7172
  %5170 = fadd <2 x double> %5168, %5169
  %splat.splat7175 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 6, i32 6>
  %5171 = fmul <2 x double> %block243, %splat.splat7175
  %5172 = fadd <2 x double> %5170, %5171
  %splat.splat7178 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 7, i32 7>
  %5173 = fmul <2 x double> %block246, %splat.splat7178
  %5174 = fadd <2 x double> %5172, %5173
  %splat.splat7181 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 8, i32 8>
  %5175 = fmul <2 x double> %block249, %splat.splat7181
  %5176 = fadd <2 x double> %5174, %5175
  %splat.splat7184 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 9, i32 9>
  %5177 = fmul <2 x double> %block252, %splat.splat7184
  %5178 = fadd <2 x double> %5176, %5177
  %splat.splat7187 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 10, i32 10>
  %5179 = fmul <2 x double> %block255, %splat.splat7187
  %5180 = fadd <2 x double> %5178, %5179
  %splat.splat7190 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 11, i32 11>
  %5181 = fmul <2 x double> %block258, %splat.splat7190
  %5182 = fadd <2 x double> %5180, %5181
  %splat.splat7193 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 12, i32 12>
  %5183 = fmul <2 x double> %block261, %splat.splat7193
  %5184 = fadd <2 x double> %5182, %5183
  %splat.splat7196 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 13, i32 13>
  %5185 = fmul <2 x double> %block264, %splat.splat7196
  %5186 = fadd <2 x double> %5184, %5185
  %splat.splat7199 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 14, i32 14>
  %5187 = fmul <2 x double> %block267, %splat.splat7199
  %5188 = fadd <2 x double> %5186, %5187
  %splat.splat7202 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 15, i32 15>
  %5189 = fmul <2 x double> %block270, %splat.splat7202
  %5190 = fadd <2 x double> %5188, %5189
  %splat.splat7205 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 16, i32 16>
  %5191 = fmul <2 x double> %block273, %splat.splat7205
  %5192 = fadd <2 x double> %5190, %5191
  %splat.splat7208 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 17, i32 17>
  %5193 = fmul <2 x double> %block276, %splat.splat7208
  %5194 = fadd <2 x double> %5192, %5193
  %splat.splat7211 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 18, i32 18>
  %5195 = fmul <2 x double> %block279, %splat.splat7211
  %5196 = fadd <2 x double> %5194, %5195
  %splat.splat7214 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 19, i32 19>
  %5197 = fmul <2 x double> %block282, %splat.splat7214
  %5198 = fadd <2 x double> %5196, %5197
  %splat.splat7217 = shufflevector <21 x double> %col.load227, <21 x double> undef, <2 x i32> <i32 20, i32 20>
  %5199 = fmul <2 x double> %block285, %splat.splat7217
  %5200 = fadd <2 x double> %5198, %5199
  %5201 = shufflevector <2 x double> %5200, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5202 = fmul <2 x double> %block288, %splat.splat7157
  %5203 = fmul <2 x double> %block291, %splat.splat7160
  %5204 = fadd <2 x double> %5202, %5203
  %5205 = fmul <2 x double> %block294, %splat.splat7163
  %5206 = fadd <2 x double> %5204, %5205
  %5207 = fmul <2 x double> %block297, %splat.splat7166
  %5208 = fadd <2 x double> %5206, %5207
  %5209 = fmul <2 x double> %block300, %splat.splat7169
  %5210 = fadd <2 x double> %5208, %5209
  %5211 = fmul <2 x double> %block303, %splat.splat7172
  %5212 = fadd <2 x double> %5210, %5211
  %5213 = fmul <2 x double> %block306, %splat.splat7175
  %5214 = fadd <2 x double> %5212, %5213
  %5215 = fmul <2 x double> %block309, %splat.splat7178
  %5216 = fadd <2 x double> %5214, %5215
  %5217 = fmul <2 x double> %block312, %splat.splat7181
  %5218 = fadd <2 x double> %5216, %5217
  %5219 = fmul <2 x double> %block315, %splat.splat7184
  %5220 = fadd <2 x double> %5218, %5219
  %5221 = fmul <2 x double> %block318, %splat.splat7187
  %5222 = fadd <2 x double> %5220, %5221
  %5223 = fmul <2 x double> %block321, %splat.splat7190
  %5224 = fadd <2 x double> %5222, %5223
  %5225 = fmul <2 x double> %block324, %splat.splat7193
  %5226 = fadd <2 x double> %5224, %5225
  %5227 = fmul <2 x double> %block327, %splat.splat7196
  %5228 = fadd <2 x double> %5226, %5227
  %5229 = fmul <2 x double> %block330, %splat.splat7199
  %5230 = fadd <2 x double> %5228, %5229
  %5231 = fmul <2 x double> %block333, %splat.splat7202
  %5232 = fadd <2 x double> %5230, %5231
  %5233 = fmul <2 x double> %block336, %splat.splat7205
  %5234 = fadd <2 x double> %5232, %5233
  %5235 = fmul <2 x double> %block339, %splat.splat7208
  %5236 = fadd <2 x double> %5234, %5235
  %5237 = fmul <2 x double> %block342, %splat.splat7211
  %5238 = fadd <2 x double> %5236, %5237
  %5239 = fmul <2 x double> %block345, %splat.splat7214
  %5240 = fadd <2 x double> %5238, %5239
  %5241 = fmul <2 x double> %block348, %splat.splat7217
  %5242 = fadd <2 x double> %5240, %5241
  %5243 = shufflevector <2 x double> %5242, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5244 = shufflevector <10 x double> %5201, <10 x double> %5243, <10 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5245 = fmul <2 x double> %block351, %splat.splat7157
  %5246 = fmul <2 x double> %block354, %splat.splat7160
  %5247 = fadd <2 x double> %5245, %5246
  %5248 = fmul <2 x double> %block357, %splat.splat7163
  %5249 = fadd <2 x double> %5247, %5248
  %5250 = fmul <2 x double> %block360, %splat.splat7166
  %5251 = fadd <2 x double> %5249, %5250
  %5252 = fmul <2 x double> %block363, %splat.splat7169
  %5253 = fadd <2 x double> %5251, %5252
  %5254 = fmul <2 x double> %block366, %splat.splat7172
  %5255 = fadd <2 x double> %5253, %5254
  %5256 = fmul <2 x double> %block369, %splat.splat7175
  %5257 = fadd <2 x double> %5255, %5256
  %5258 = fmul <2 x double> %block372, %splat.splat7178
  %5259 = fadd <2 x double> %5257, %5258
  %5260 = fmul <2 x double> %block375, %splat.splat7181
  %5261 = fadd <2 x double> %5259, %5260
  %5262 = fmul <2 x double> %block378, %splat.splat7184
  %5263 = fadd <2 x double> %5261, %5262
  %5264 = fmul <2 x double> %block381, %splat.splat7187
  %5265 = fadd <2 x double> %5263, %5264
  %5266 = fmul <2 x double> %block384, %splat.splat7190
  %5267 = fadd <2 x double> %5265, %5266
  %5268 = fmul <2 x double> %block387, %splat.splat7193
  %5269 = fadd <2 x double> %5267, %5268
  %5270 = fmul <2 x double> %block390, %splat.splat7196
  %5271 = fadd <2 x double> %5269, %5270
  %5272 = fmul <2 x double> %block393, %splat.splat7199
  %5273 = fadd <2 x double> %5271, %5272
  %5274 = fmul <2 x double> %block396, %splat.splat7202
  %5275 = fadd <2 x double> %5273, %5274
  %5276 = fmul <2 x double> %block399, %splat.splat7205
  %5277 = fadd <2 x double> %5275, %5276
  %5278 = fmul <2 x double> %block402, %splat.splat7208
  %5279 = fadd <2 x double> %5277, %5278
  %5280 = fmul <2 x double> %block405, %splat.splat7211
  %5281 = fadd <2 x double> %5279, %5280
  %5282 = fmul <2 x double> %block408, %splat.splat7214
  %5283 = fadd <2 x double> %5281, %5282
  %5284 = fmul <2 x double> %block411, %splat.splat7217
  %5285 = fadd <2 x double> %5283, %5284
  %5286 = shufflevector <2 x double> %5285, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5287 = shufflevector <10 x double> %5244, <10 x double> %5286, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %5288 = fmul <2 x double> %block414, %splat.splat7157
  %5289 = fmul <2 x double> %block417, %splat.splat7160
  %5290 = fadd <2 x double> %5288, %5289
  %5291 = fmul <2 x double> %block420, %splat.splat7163
  %5292 = fadd <2 x double> %5290, %5291
  %5293 = fmul <2 x double> %block423, %splat.splat7166
  %5294 = fadd <2 x double> %5292, %5293
  %5295 = fmul <2 x double> %block426, %splat.splat7169
  %5296 = fadd <2 x double> %5294, %5295
  %5297 = fmul <2 x double> %block429, %splat.splat7172
  %5298 = fadd <2 x double> %5296, %5297
  %5299 = fmul <2 x double> %block432, %splat.splat7175
  %5300 = fadd <2 x double> %5298, %5299
  %5301 = fmul <2 x double> %block435, %splat.splat7178
  %5302 = fadd <2 x double> %5300, %5301
  %5303 = fmul <2 x double> %block438, %splat.splat7181
  %5304 = fadd <2 x double> %5302, %5303
  %5305 = fmul <2 x double> %block441, %splat.splat7184
  %5306 = fadd <2 x double> %5304, %5305
  %5307 = fmul <2 x double> %block444, %splat.splat7187
  %5308 = fadd <2 x double> %5306, %5307
  %5309 = fmul <2 x double> %block447, %splat.splat7190
  %5310 = fadd <2 x double> %5308, %5309
  %5311 = fmul <2 x double> %block450, %splat.splat7193
  %5312 = fadd <2 x double> %5310, %5311
  %5313 = fmul <2 x double> %block453, %splat.splat7196
  %5314 = fadd <2 x double> %5312, %5313
  %5315 = fmul <2 x double> %block456, %splat.splat7199
  %5316 = fadd <2 x double> %5314, %5315
  %5317 = fmul <2 x double> %block459, %splat.splat7202
  %5318 = fadd <2 x double> %5316, %5317
  %5319 = fmul <2 x double> %block462, %splat.splat7205
  %5320 = fadd <2 x double> %5318, %5319
  %5321 = fmul <2 x double> %block465, %splat.splat7208
  %5322 = fadd <2 x double> %5320, %5321
  %5323 = fmul <2 x double> %block468, %splat.splat7211
  %5324 = fadd <2 x double> %5322, %5323
  %5325 = fmul <2 x double> %block471, %splat.splat7214
  %5326 = fadd <2 x double> %5324, %5325
  %5327 = fmul <2 x double> %block474, %splat.splat7217
  %5328 = fadd <2 x double> %5326, %5327
  %5329 = shufflevector <2 x double> %5328, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5330 = shufflevector <10 x double> %5287, <10 x double> %5329, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 10, i32 11, i32 undef, i32 undef>
  %5331 = fmul <2 x double> %block477, %splat.splat7157
  %5332 = fmul <2 x double> %block480, %splat.splat7160
  %5333 = fadd <2 x double> %5331, %5332
  %5334 = fmul <2 x double> %block483, %splat.splat7163
  %5335 = fadd <2 x double> %5333, %5334
  %5336 = fmul <2 x double> %block486, %splat.splat7166
  %5337 = fadd <2 x double> %5335, %5336
  %5338 = fmul <2 x double> %block489, %splat.splat7169
  %5339 = fadd <2 x double> %5337, %5338
  %5340 = fmul <2 x double> %block492, %splat.splat7172
  %5341 = fadd <2 x double> %5339, %5340
  %5342 = fmul <2 x double> %block495, %splat.splat7175
  %5343 = fadd <2 x double> %5341, %5342
  %5344 = fmul <2 x double> %block498, %splat.splat7178
  %5345 = fadd <2 x double> %5343, %5344
  %5346 = fmul <2 x double> %block501, %splat.splat7181
  %5347 = fadd <2 x double> %5345, %5346
  %5348 = fmul <2 x double> %block504, %splat.splat7184
  %5349 = fadd <2 x double> %5347, %5348
  %5350 = fmul <2 x double> %block507, %splat.splat7187
  %5351 = fadd <2 x double> %5349, %5350
  %5352 = fmul <2 x double> %block510, %splat.splat7190
  %5353 = fadd <2 x double> %5351, %5352
  %5354 = fmul <2 x double> %block513, %splat.splat7193
  %5355 = fadd <2 x double> %5353, %5354
  %5356 = fmul <2 x double> %block516, %splat.splat7196
  %5357 = fadd <2 x double> %5355, %5356
  %5358 = fmul <2 x double> %block519, %splat.splat7199
  %5359 = fadd <2 x double> %5357, %5358
  %5360 = fmul <2 x double> %block522, %splat.splat7202
  %5361 = fadd <2 x double> %5359, %5360
  %5362 = fmul <2 x double> %block525, %splat.splat7205
  %5363 = fadd <2 x double> %5361, %5362
  %5364 = fmul <2 x double> %block528, %splat.splat7208
  %5365 = fadd <2 x double> %5363, %5364
  %5366 = fmul <2 x double> %block531, %splat.splat7211
  %5367 = fadd <2 x double> %5365, %5366
  %5368 = fmul <2 x double> %block534, %splat.splat7214
  %5369 = fadd <2 x double> %5367, %5368
  %5370 = fmul <2 x double> %block537, %splat.splat7217
  %5371 = fadd <2 x double> %5369, %5370
  %5372 = shufflevector <2 x double> %5371, <2 x double> poison, <10 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5373 = shufflevector <10 x double> %5330, <10 x double> %5372, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11>
  store <10 x double> %665, ptr %ResBuiltin, align 16
  %vec.gep7470 = getelementptr inbounds double, ptr %ResBuiltin, i64 10
  store <10 x double> %879, ptr %vec.gep7470, align 16
  %vec.gep7471 = getelementptr inbounds double, ptr %ResBuiltin, i64 20
  store <10 x double> %1093, ptr %vec.gep7471, align 16
  %vec.gep7472 = getelementptr inbounds double, ptr %ResBuiltin, i64 30
  store <10 x double> %1307, ptr %vec.gep7472, align 16
  %vec.gep7473 = getelementptr inbounds double, ptr %ResBuiltin, i64 40
  store <10 x double> %1521, ptr %vec.gep7473, align 16
  %vec.gep7474 = getelementptr inbounds double, ptr %ResBuiltin, i64 50
  store <10 x double> %1735, ptr %vec.gep7474, align 16
  %vec.gep7475 = getelementptr inbounds double, ptr %ResBuiltin, i64 60
  store <10 x double> %1949, ptr %vec.gep7475, align 16
  %vec.gep7476 = getelementptr inbounds double, ptr %ResBuiltin, i64 70
  store <10 x double> %2163, ptr %vec.gep7476, align 16
  %vec.gep7477 = getelementptr inbounds double, ptr %ResBuiltin, i64 80
  store <10 x double> %2377, ptr %vec.gep7477, align 16
  %vec.gep7478 = getelementptr inbounds double, ptr %ResBuiltin, i64 90
  store <10 x double> %2591, ptr %vec.gep7478, align 16
  %vec.gep7479 = getelementptr inbounds double, ptr %ResBuiltin, i64 100
  store <10 x double> %2805, ptr %vec.gep7479, align 16
  %vec.gep7480 = getelementptr inbounds double, ptr %ResBuiltin, i64 110
  store <10 x double> %3019, ptr %vec.gep7480, align 16
  %vec.gep7481 = getelementptr inbounds double, ptr %ResBuiltin, i64 120
  store <10 x double> %3233, ptr %vec.gep7481, align 16
  %vec.gep7482 = getelementptr inbounds double, ptr %ResBuiltin, i64 130
  store <10 x double> %3447, ptr %vec.gep7482, align 16
  %vec.gep7483 = getelementptr inbounds double, ptr %ResBuiltin, i64 140
  store <10 x double> %3661, ptr %vec.gep7483, align 16
  %vec.gep7484 = getelementptr inbounds double, ptr %ResBuiltin, i64 150
  store <10 x double> %3875, ptr %vec.gep7484, align 16
  %vec.gep7485 = getelementptr inbounds double, ptr %ResBuiltin, i64 160
  store <10 x double> %4089, ptr %vec.gep7485, align 16
  %vec.gep7486 = getelementptr inbounds double, ptr %ResBuiltin, i64 170
  store <10 x double> %4303, ptr %vec.gep7486, align 16
  %vec.gep7487 = getelementptr inbounds double, ptr %ResBuiltin, i64 180
  store <10 x double> %4517, ptr %vec.gep7487, align 16
  %vec.gep7488 = getelementptr inbounds double, ptr %ResBuiltin, i64 190
  store <10 x double> %4731, ptr %vec.gep7488, align 16
  %vec.gep7489 = getelementptr inbounds double, ptr %ResBuiltin, i64 200
  store <10 x double> %4945, ptr %vec.gep7489, align 16
  %vec.gep7490 = getelementptr inbounds double, ptr %ResBuiltin, i64 210
  store <10 x double> %5159, ptr %vec.gep7490, align 16
  %vec.gep7491 = getelementptr inbounds double, ptr %ResBuiltin, i64 220
  store <10 x double> %5373, ptr %vec.gep7491, align 16
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResSpec, ptr noundef nonnull %ResBuiltin, i32 noundef 10, i32 noundef 23)
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase, ptr noundef nonnull %ResBuiltin, i32 noundef 10, i32 noundef 23)
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase, ptr noundef nonnull %ResSpec, i32 noundef 10, i32 noundef 23)
  call void @llvm.lifetime.end.p0(i64 1840, ptr nonnull %ResBuiltin) #16
  call void @llvm.lifetime.end.p0(i64 1840, ptr nonnull %ResSpec) #16
  call void @llvm.lifetime.end.p0(i64 1840, ptr nonnull %ResBase) #16
  call void @llvm.lifetime.end.p0(i64 3864, ptr nonnull %Y) #16
  call void @llvm.lifetime.end.p0(i64 1680, ptr nonnull %X) #16
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_Z12testMultiplyIdLj25ELj19ELj11EEvv() local_unnamed_addr #4 comdat {
entry:
  %X = alloca [475 x double], align 16
  %Y = alloca [209 x double], align 16
  %ResBase = alloca [275 x double], align 16
  %ResSpec = alloca [275 x double], align 16
  %ResBuiltin = alloca [275 x double], align 16
  call void @llvm.lifetime.start.p0(i64 3800, ptr nonnull %X) #16
  call void @llvm.lifetime.start.p0(i64 1672, ptr nonnull %Y) #16
  call void @llvm.lifetime.start.p0(i64 2200, ptr nonnull %ResBase) #16
  call void @llvm.lifetime.start.p0(i64 2200, ptr nonnull %ResSpec) #16
  call void @llvm.lifetime.start.p0(i64 2200, ptr nonnull %ResBuiltin) #16
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %generator.sroa.0.04.i = phi i64 [ 1, %entry ], [ %rem.i.i16.i.i.i.i, %for.body.i ]
  %mul.i.i.i.i.i.i = mul nuw nsw i64 %generator.sroa.0.04.i, 48271
  %rem.i.i.i.i.i.i = urem i64 %mul.i.i.i.i.i.i, 2147483647
  %sub4.i.i.i.i = add nsw i64 %rem.i.i.i.i.i.i, -1
  %conv5.i.i.i.i = uitofp i64 %sub4.i.i.i.i to double
  %mul.i.i15.i.i.i.i = mul nuw nsw i64 %rem.i.i.i.i.i.i, 48271
  %rem.i.i16.i.i.i.i = urem i64 %mul.i.i15.i.i.i.i, 2147483647
  %sub8.i.i.i.i = add nsw i64 %rem.i.i16.i.i.i.i, -1
  %conv9.i.i.i.i = uitofp i64 %sub8.i.i.i.i to double
  %0 = tail call double @llvm.fmuladd.f64(double %conv9.i.i.i.i, double 0x41DFFFFFFF800000, double %conv5.i.i.i.i)
  %div.i.i.i.i = fdiv double %0, 0x43CFFFFFFF000000
  %1 = tail call double @llvm.fmuladd.f64(double %div.i.i.i.i, double 2.000000e+01, double -1.000000e+01)
  %arrayidx.i = getelementptr inbounds double, ptr %X, i64 %indvars.iv.i
  store double %1, ptr %arrayidx.i, align 8, !tbaa !5
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 475
  br i1 %exitcond.not.i, label %for.body.i34, label %for.body.i, !llvm.loop !9

for.body.i34:                                     ; preds = %for.body.i, %for.body.i34
  %indvars.iv.i20 = phi i64 [ %indvars.iv.next.i32, %for.body.i34 ], [ 0, %for.body.i ]
  %generator.sroa.0.04.i21 = phi i64 [ %rem.i.i16.i.i.i.i27, %for.body.i34 ], [ 1, %for.body.i ]
  %mul.i.i.i.i.i.i22 = mul nuw nsw i64 %generator.sroa.0.04.i21, 48271
  %rem.i.i.i.i.i.i23 = urem i64 %mul.i.i.i.i.i.i22, 2147483647
  %sub4.i.i.i.i24 = add nsw i64 %rem.i.i.i.i.i.i23, -1
  %conv5.i.i.i.i25 = uitofp i64 %sub4.i.i.i.i24 to double
  %mul.i.i15.i.i.i.i26 = mul nuw nsw i64 %rem.i.i.i.i.i.i23, 48271
  %rem.i.i16.i.i.i.i27 = urem i64 %mul.i.i15.i.i.i.i26, 2147483647
  %sub8.i.i.i.i28 = add nsw i64 %rem.i.i16.i.i.i.i27, -1
  %conv9.i.i.i.i29 = uitofp i64 %sub8.i.i.i.i28 to double
  %2 = tail call double @llvm.fmuladd.f64(double %conv9.i.i.i.i29, double 0x41DFFFFFFF800000, double %conv5.i.i.i.i25)
  %div.i.i.i.i30 = fdiv double %2, 0x43CFFFFFFF000000
  %3 = tail call double @llvm.fmuladd.f64(double %div.i.i.i.i30, double 2.000000e+01, double -1.000000e+01)
  %arrayidx.i31 = getelementptr inbounds double, ptr %Y, i64 %indvars.iv.i20
  store double %3, ptr %arrayidx.i31, align 8, !tbaa !5
  %indvars.iv.next.i32 = add nuw nsw i64 %indvars.iv.i20, 1
  %exitcond.not.i33 = icmp eq i64 %indvars.iv.next.i32, 209
  br i1 %exitcond.not.i33, label %vector.body, label %for.body.i34, !llvm.loop !9

vector.body:                                      ; preds = %for.body.i34, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.body.i34 ]
  %4 = getelementptr inbounds double, ptr %ResBase, i64 %index
  store <2 x double> zeroinitializer, ptr %4, align 16, !tbaa !5
  %5 = add nuw nsw i64 %index, 25
  %6 = getelementptr inbounds double, ptr %ResBase, i64 %5
  store <2 x double> zeroinitializer, ptr %6, align 8, !tbaa !5
  %7 = add nuw nsw i64 %index, 50
  %8 = getelementptr inbounds double, ptr %ResBase, i64 %7
  store <2 x double> zeroinitializer, ptr %8, align 16, !tbaa !5
  %9 = add nuw nsw i64 %index, 75
  %10 = getelementptr inbounds double, ptr %ResBase, i64 %9
  store <2 x double> zeroinitializer, ptr %10, align 8, !tbaa !5
  %11 = add nuw nsw i64 %index, 100
  %12 = getelementptr inbounds double, ptr %ResBase, i64 %11
  store <2 x double> zeroinitializer, ptr %12, align 16, !tbaa !5
  %13 = add nuw nsw i64 %index, 125
  %14 = getelementptr inbounds double, ptr %ResBase, i64 %13
  store <2 x double> zeroinitializer, ptr %14, align 8, !tbaa !5
  %15 = add nuw nsw i64 %index, 150
  %16 = getelementptr inbounds double, ptr %ResBase, i64 %15
  store <2 x double> zeroinitializer, ptr %16, align 16, !tbaa !5
  %17 = add nuw nsw i64 %index, 175
  %18 = getelementptr inbounds double, ptr %ResBase, i64 %17
  store <2 x double> zeroinitializer, ptr %18, align 8, !tbaa !5
  %19 = add nuw nsw i64 %index, 200
  %20 = getelementptr inbounds double, ptr %ResBase, i64 %19
  store <2 x double> zeroinitializer, ptr %20, align 16, !tbaa !5
  %21 = add nuw nsw i64 %index, 225
  %22 = getelementptr inbounds double, ptr %ResBase, i64 %21
  store <2 x double> zeroinitializer, ptr %22, align 8, !tbaa !5
  %23 = add nuw nsw i64 %index, 250
  %24 = getelementptr inbounds double, ptr %ResBase, i64 %23
  store <2 x double> zeroinitializer, ptr %24, align 16, !tbaa !5
  %index.next = add nuw i64 %index, 2
  %25 = icmp eq i64 %index.next, 24
  br i1 %25, label %for.cond1.preheader.us.i, label %vector.body, !llvm.loop !26

for.cond1.preheader.us.i:                         ; preds = %vector.body
  %arrayidx.us.i = getelementptr inbounds double, ptr %ResBase, i64 24
  store double 0.000000e+00, ptr %arrayidx.us.i, align 16, !tbaa !5
  %arrayidx.us.i.1 = getelementptr inbounds double, ptr %ResBase, i64 49
  store double 0.000000e+00, ptr %arrayidx.us.i.1, align 8, !tbaa !5
  %arrayidx.us.i.2 = getelementptr inbounds double, ptr %ResBase, i64 74
  store double 0.000000e+00, ptr %arrayidx.us.i.2, align 16, !tbaa !5
  %arrayidx.us.i.3 = getelementptr inbounds double, ptr %ResBase, i64 99
  store double 0.000000e+00, ptr %arrayidx.us.i.3, align 8, !tbaa !5
  %arrayidx.us.i.4 = getelementptr inbounds double, ptr %ResBase, i64 124
  store double 0.000000e+00, ptr %arrayidx.us.i.4, align 16, !tbaa !5
  %arrayidx.us.i.5 = getelementptr inbounds double, ptr %ResBase, i64 149
  store double 0.000000e+00, ptr %arrayidx.us.i.5, align 8, !tbaa !5
  %arrayidx.us.i.6 = getelementptr inbounds double, ptr %ResBase, i64 174
  store double 0.000000e+00, ptr %arrayidx.us.i.6, align 16, !tbaa !5
  %arrayidx.us.i.7 = getelementptr inbounds double, ptr %ResBase, i64 199
  store double 0.000000e+00, ptr %arrayidx.us.i.7, align 8, !tbaa !5
  %arrayidx.us.i.8 = getelementptr inbounds double, ptr %ResBase, i64 224
  store double 0.000000e+00, ptr %arrayidx.us.i.8, align 16, !tbaa !5
  %arrayidx.us.i.9 = getelementptr inbounds double, ptr %ResBase, i64 249
  store double 0.000000e+00, ptr %arrayidx.us.i.9, align 8, !tbaa !5
  %arrayidx.us.i.10 = getelementptr inbounds double, ptr %ResBase, i64 274
  store double 0.000000e+00, ptr %arrayidx.us.i.10, align 16, !tbaa !5
  br label %vector.body8327

vector.body8327:                                  ; preds = %for.cond1.preheader.us.i, %vector.body8327
  %index8328 = phi i64 [ %index.next8329, %vector.body8327 ], [ 0, %for.cond1.preheader.us.i ]
  %26 = getelementptr inbounds double, ptr %ResSpec, i64 %index8328
  store <2 x double> zeroinitializer, ptr %26, align 16, !tbaa !5
  %27 = add nuw nsw i64 %index8328, 25
  %28 = getelementptr inbounds double, ptr %ResSpec, i64 %27
  store <2 x double> zeroinitializer, ptr %28, align 8, !tbaa !5
  %29 = add nuw nsw i64 %index8328, 50
  %30 = getelementptr inbounds double, ptr %ResSpec, i64 %29
  store <2 x double> zeroinitializer, ptr %30, align 16, !tbaa !5
  %31 = add nuw nsw i64 %index8328, 75
  %32 = getelementptr inbounds double, ptr %ResSpec, i64 %31
  store <2 x double> zeroinitializer, ptr %32, align 8, !tbaa !5
  %33 = add nuw nsw i64 %index8328, 100
  %34 = getelementptr inbounds double, ptr %ResSpec, i64 %33
  store <2 x double> zeroinitializer, ptr %34, align 16, !tbaa !5
  %35 = add nuw nsw i64 %index8328, 125
  %36 = getelementptr inbounds double, ptr %ResSpec, i64 %35
  store <2 x double> zeroinitializer, ptr %36, align 8, !tbaa !5
  %37 = add nuw nsw i64 %index8328, 150
  %38 = getelementptr inbounds double, ptr %ResSpec, i64 %37
  store <2 x double> zeroinitializer, ptr %38, align 16, !tbaa !5
  %39 = add nuw nsw i64 %index8328, 175
  %40 = getelementptr inbounds double, ptr %ResSpec, i64 %39
  store <2 x double> zeroinitializer, ptr %40, align 8, !tbaa !5
  %41 = add nuw nsw i64 %index8328, 200
  %42 = getelementptr inbounds double, ptr %ResSpec, i64 %41
  store <2 x double> zeroinitializer, ptr %42, align 16, !tbaa !5
  %43 = add nuw nsw i64 %index8328, 225
  %44 = getelementptr inbounds double, ptr %ResSpec, i64 %43
  store <2 x double> zeroinitializer, ptr %44, align 8, !tbaa !5
  %45 = add nuw nsw i64 %index8328, 250
  %46 = getelementptr inbounds double, ptr %ResSpec, i64 %45
  store <2 x double> zeroinitializer, ptr %46, align 16, !tbaa !5
  %index.next8329 = add nuw i64 %index8328, 2
  %47 = icmp eq i64 %index.next8329, 24
  br i1 %47, label %for.cond1.preheader.us.i40, label %vector.body8327, !llvm.loop !29

for.cond1.preheader.us.i40:                       ; preds = %vector.body8327
  %arrayidx.us.i45 = getelementptr inbounds double, ptr %ResSpec, i64 24
  store double 0.000000e+00, ptr %arrayidx.us.i45, align 16, !tbaa !5
  %arrayidx.us.i45.1 = getelementptr inbounds double, ptr %ResSpec, i64 49
  store double 0.000000e+00, ptr %arrayidx.us.i45.1, align 8, !tbaa !5
  %arrayidx.us.i45.2 = getelementptr inbounds double, ptr %ResSpec, i64 74
  store double 0.000000e+00, ptr %arrayidx.us.i45.2, align 16, !tbaa !5
  %arrayidx.us.i45.3 = getelementptr inbounds double, ptr %ResSpec, i64 99
  store double 0.000000e+00, ptr %arrayidx.us.i45.3, align 8, !tbaa !5
  %arrayidx.us.i45.4 = getelementptr inbounds double, ptr %ResSpec, i64 124
  store double 0.000000e+00, ptr %arrayidx.us.i45.4, align 16, !tbaa !5
  %arrayidx.us.i45.5 = getelementptr inbounds double, ptr %ResSpec, i64 149
  store double 0.000000e+00, ptr %arrayidx.us.i45.5, align 8, !tbaa !5
  %arrayidx.us.i45.6 = getelementptr inbounds double, ptr %ResSpec, i64 174
  store double 0.000000e+00, ptr %arrayidx.us.i45.6, align 16, !tbaa !5
  %arrayidx.us.i45.7 = getelementptr inbounds double, ptr %ResSpec, i64 199
  store double 0.000000e+00, ptr %arrayidx.us.i45.7, align 8, !tbaa !5
  %arrayidx.us.i45.8 = getelementptr inbounds double, ptr %ResSpec, i64 224
  store double 0.000000e+00, ptr %arrayidx.us.i45.8, align 16, !tbaa !5
  %arrayidx.us.i45.9 = getelementptr inbounds double, ptr %ResSpec, i64 249
  store double 0.000000e+00, ptr %arrayidx.us.i45.9, align 8, !tbaa !5
  %arrayidx.us.i45.10 = getelementptr inbounds double, ptr %ResSpec, i64 274
  store double 0.000000e+00, ptr %arrayidx.us.i45.10, align 16, !tbaa !5
  br label %vector.body8335

vector.body8335:                                  ; preds = %for.cond1.preheader.us.i40, %vector.body8335
  %index8336 = phi i64 [ %index.next8337, %vector.body8335 ], [ 0, %for.cond1.preheader.us.i40 ]
  %48 = getelementptr inbounds double, ptr %ResBuiltin, i64 %index8336
  store <2 x double> zeroinitializer, ptr %48, align 16, !tbaa !5
  %49 = add nuw nsw i64 %index8336, 25
  %50 = getelementptr inbounds double, ptr %ResBuiltin, i64 %49
  store <2 x double> zeroinitializer, ptr %50, align 8, !tbaa !5
  %51 = add nuw nsw i64 %index8336, 50
  %52 = getelementptr inbounds double, ptr %ResBuiltin, i64 %51
  store <2 x double> zeroinitializer, ptr %52, align 16, !tbaa !5
  %53 = add nuw nsw i64 %index8336, 75
  %54 = getelementptr inbounds double, ptr %ResBuiltin, i64 %53
  store <2 x double> zeroinitializer, ptr %54, align 8, !tbaa !5
  %55 = add nuw nsw i64 %index8336, 100
  %56 = getelementptr inbounds double, ptr %ResBuiltin, i64 %55
  store <2 x double> zeroinitializer, ptr %56, align 16, !tbaa !5
  %57 = add nuw nsw i64 %index8336, 125
  %58 = getelementptr inbounds double, ptr %ResBuiltin, i64 %57
  store <2 x double> zeroinitializer, ptr %58, align 8, !tbaa !5
  %59 = add nuw nsw i64 %index8336, 150
  %60 = getelementptr inbounds double, ptr %ResBuiltin, i64 %59
  store <2 x double> zeroinitializer, ptr %60, align 16, !tbaa !5
  %61 = add nuw nsw i64 %index8336, 175
  %62 = getelementptr inbounds double, ptr %ResBuiltin, i64 %61
  store <2 x double> zeroinitializer, ptr %62, align 8, !tbaa !5
  %63 = add nuw nsw i64 %index8336, 200
  %64 = getelementptr inbounds double, ptr %ResBuiltin, i64 %63
  store <2 x double> zeroinitializer, ptr %64, align 16, !tbaa !5
  %65 = add nuw nsw i64 %index8336, 225
  %66 = getelementptr inbounds double, ptr %ResBuiltin, i64 %65
  store <2 x double> zeroinitializer, ptr %66, align 8, !tbaa !5
  %67 = add nuw nsw i64 %index8336, 250
  %68 = getelementptr inbounds double, ptr %ResBuiltin, i64 %67
  store <2 x double> zeroinitializer, ptr %68, align 16, !tbaa !5
  %index.next8337 = add nuw i64 %index8336, 2
  %69 = icmp eq i64 %index.next8337, 24
  br i1 %69, label %for.cond1.preheader.us.i54, label %vector.body8335, !llvm.loop !30

for.cond1.preheader.us.i54:                       ; preds = %vector.body8335
  %arrayidx.us.i59 = getelementptr inbounds double, ptr %ResBuiltin, i64 24
  store double 0.000000e+00, ptr %arrayidx.us.i59, align 16, !tbaa !5
  %arrayidx.us.i59.1 = getelementptr inbounds double, ptr %ResBuiltin, i64 49
  store double 0.000000e+00, ptr %arrayidx.us.i59.1, align 8, !tbaa !5
  %arrayidx.us.i59.2 = getelementptr inbounds double, ptr %ResBuiltin, i64 74
  store double 0.000000e+00, ptr %arrayidx.us.i59.2, align 16, !tbaa !5
  %arrayidx.us.i59.3 = getelementptr inbounds double, ptr %ResBuiltin, i64 99
  store double 0.000000e+00, ptr %arrayidx.us.i59.3, align 8, !tbaa !5
  %arrayidx.us.i59.4 = getelementptr inbounds double, ptr %ResBuiltin, i64 124
  store double 0.000000e+00, ptr %arrayidx.us.i59.4, align 16, !tbaa !5
  %arrayidx.us.i59.5 = getelementptr inbounds double, ptr %ResBuiltin, i64 149
  store double 0.000000e+00, ptr %arrayidx.us.i59.5, align 8, !tbaa !5
  %arrayidx.us.i59.6 = getelementptr inbounds double, ptr %ResBuiltin, i64 174
  store double 0.000000e+00, ptr %arrayidx.us.i59.6, align 16, !tbaa !5
  %arrayidx.us.i59.7 = getelementptr inbounds double, ptr %ResBuiltin, i64 199
  store double 0.000000e+00, ptr %arrayidx.us.i59.7, align 8, !tbaa !5
  %arrayidx.us.i59.8 = getelementptr inbounds double, ptr %ResBuiltin, i64 224
  store double 0.000000e+00, ptr %arrayidx.us.i59.8, align 16, !tbaa !5
  %arrayidx.us.i59.9 = getelementptr inbounds double, ptr %ResBuiltin, i64 249
  store double 0.000000e+00, ptr %arrayidx.us.i59.9, align 8, !tbaa !5
  %arrayidx.us.i59.10 = getelementptr inbounds double, ptr %ResBuiltin, i64 274
  store double 0.000000e+00, ptr %arrayidx.us.i59.10, align 16, !tbaa !5
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %for.cond1.preheader.us.i54, %for.cond.cleanup3.i
  %indvars.iv44.i = phi i64 [ %indvars.iv.next45.i, %for.cond.cleanup3.i ], [ 0, %for.cond1.preheader.us.i54 ]
  %arrayidx.i67 = getelementptr inbounds double, ptr %X, i64 %indvars.iv44.i
  %70 = add nuw nsw i64 %indvars.iv44.i, 25
  %arrayidx.1.i = getelementptr inbounds double, ptr %X, i64 %70
  %71 = add nuw nsw i64 %indvars.iv44.i, 50
  %arrayidx.2.i = getelementptr inbounds double, ptr %X, i64 %71
  %72 = add nuw nsw i64 %indvars.iv44.i, 75
  %arrayidx.3.i = getelementptr inbounds double, ptr %X, i64 %72
  %73 = add nuw nsw i64 %indvars.iv44.i, 100
  %arrayidx.4.i = getelementptr inbounds double, ptr %X, i64 %73
  %74 = add nuw nsw i64 %indvars.iv44.i, 125
  %arrayidx.5.i = getelementptr inbounds double, ptr %X, i64 %74
  %75 = add nuw nsw i64 %indvars.iv44.i, 150
  %arrayidx.6.i = getelementptr inbounds double, ptr %X, i64 %75
  %76 = add nuw nsw i64 %indvars.iv44.i, 175
  %arrayidx.7.i = getelementptr inbounds double, ptr %X, i64 %76
  %77 = add nuw nsw i64 %indvars.iv44.i, 200
  %arrayidx.8.i = getelementptr inbounds double, ptr %X, i64 %77
  %78 = add nuw nsw i64 %indvars.iv44.i, 225
  %arrayidx.9.i = getelementptr inbounds double, ptr %X, i64 %78
  %79 = add nuw nsw i64 %indvars.iv44.i, 250
  %arrayidx.10.i = getelementptr inbounds double, ptr %X, i64 %79
  %80 = add nuw nsw i64 %indvars.iv44.i, 275
  %arrayidx.11.i = getelementptr inbounds double, ptr %X, i64 %80
  %81 = add nuw nsw i64 %indvars.iv44.i, 300
  %arrayidx.12.i = getelementptr inbounds double, ptr %X, i64 %81
  %82 = add nuw nsw i64 %indvars.iv44.i, 325
  %arrayidx.13.i = getelementptr inbounds double, ptr %X, i64 %82
  %83 = add nuw nsw i64 %indvars.iv44.i, 350
  %arrayidx.14.i = getelementptr inbounds double, ptr %X, i64 %83
  %84 = add nuw nsw i64 %indvars.iv44.i, 375
  %arrayidx.15.i = getelementptr inbounds double, ptr %X, i64 %84
  %85 = add nuw nsw i64 %indvars.iv44.i, 400
  %arrayidx.16.i = getelementptr inbounds double, ptr %X, i64 %85
  %86 = add nuw nsw i64 %indvars.iv44.i, 425
  %arrayidx.17.i = getelementptr inbounds double, ptr %X, i64 %86
  %87 = add nuw nsw i64 %indvars.iv44.i, 450
  %arrayidx.18.i = getelementptr inbounds double, ptr %X, i64 %87
  %88 = load double, ptr %arrayidx.i67, align 8, !tbaa !5
  %89 = load double, ptr %arrayidx.1.i, align 8, !tbaa !5
  %90 = load double, ptr %arrayidx.2.i, align 8, !tbaa !5
  %91 = load double, ptr %arrayidx.3.i, align 8, !tbaa !5
  %92 = load double, ptr %arrayidx.4.i, align 8, !tbaa !5
  %93 = load double, ptr %arrayidx.5.i, align 8, !tbaa !5
  %94 = load double, ptr %arrayidx.6.i, align 8, !tbaa !5
  %95 = load double, ptr %arrayidx.7.i, align 8, !tbaa !5
  %96 = load double, ptr %arrayidx.8.i, align 8, !tbaa !5
  %97 = load double, ptr %arrayidx.9.i, align 8, !tbaa !5
  %98 = load double, ptr %arrayidx.10.i, align 8, !tbaa !5
  %99 = load double, ptr %arrayidx.11.i, align 8, !tbaa !5
  %100 = load double, ptr %arrayidx.12.i, align 8, !tbaa !5
  %101 = load double, ptr %arrayidx.13.i, align 8, !tbaa !5
  %102 = load double, ptr %arrayidx.14.i, align 8, !tbaa !5
  %103 = load double, ptr %arrayidx.15.i, align 8, !tbaa !5
  %104 = load double, ptr %arrayidx.16.i, align 8, !tbaa !5
  %105 = load double, ptr %arrayidx.17.i, align 8, !tbaa !5
  %106 = load double, ptr %arrayidx.18.i, align 8, !tbaa !5
  br label %for.cond5.preheader.i

for.cond5.preheader.i:                            ; preds = %for.cond5.preheader.i, %for.cond1.preheader.i
  %indvars.iv.i68 = phi i64 [ 0, %for.cond1.preheader.i ], [ %indvars.iv.next.i69, %for.cond5.preheader.i ]
  %107 = mul nuw nsw i64 %indvars.iv.i68, 19
  %108 = mul nuw nsw i64 %indvars.iv.i68, 25
  %109 = add nuw nsw i64 %108, %indvars.iv44.i
  %arrayidx17.i = getelementptr inbounds double, ptr %ResBase, i64 %109
  %arrayidx17.promoted.i = load double, ptr %arrayidx17.i, align 8, !tbaa !5
  %arrayidx12.i = getelementptr inbounds double, ptr %Y, i64 %107
  %110 = load double, ptr %arrayidx12.i, align 8, !tbaa !5
  %111 = tail call double @llvm.fmuladd.f64(double %88, double %110, double %arrayidx17.promoted.i)
  %112 = add nuw nsw i64 %107, 1
  %arrayidx12.1.i = getelementptr inbounds double, ptr %Y, i64 %112
  %113 = load double, ptr %arrayidx12.1.i, align 8, !tbaa !5
  %114 = tail call double @llvm.fmuladd.f64(double %89, double %113, double %111)
  %115 = add nuw nsw i64 %107, 2
  %arrayidx12.2.i = getelementptr inbounds double, ptr %Y, i64 %115
  %116 = load double, ptr %arrayidx12.2.i, align 8, !tbaa !5
  %117 = tail call double @llvm.fmuladd.f64(double %90, double %116, double %114)
  %118 = add nuw nsw i64 %107, 3
  %arrayidx12.3.i = getelementptr inbounds double, ptr %Y, i64 %118
  %119 = load double, ptr %arrayidx12.3.i, align 8, !tbaa !5
  %120 = tail call double @llvm.fmuladd.f64(double %91, double %119, double %117)
  %121 = add nuw nsw i64 %107, 4
  %arrayidx12.4.i = getelementptr inbounds double, ptr %Y, i64 %121
  %122 = load double, ptr %arrayidx12.4.i, align 8, !tbaa !5
  %123 = tail call double @llvm.fmuladd.f64(double %92, double %122, double %120)
  %124 = add nuw nsw i64 %107, 5
  %arrayidx12.5.i = getelementptr inbounds double, ptr %Y, i64 %124
  %125 = load double, ptr %arrayidx12.5.i, align 8, !tbaa !5
  %126 = tail call double @llvm.fmuladd.f64(double %93, double %125, double %123)
  %127 = add nuw nsw i64 %107, 6
  %arrayidx12.6.i = getelementptr inbounds double, ptr %Y, i64 %127
  %128 = load double, ptr %arrayidx12.6.i, align 8, !tbaa !5
  %129 = tail call double @llvm.fmuladd.f64(double %94, double %128, double %126)
  %130 = add nuw nsw i64 %107, 7
  %arrayidx12.7.i = getelementptr inbounds double, ptr %Y, i64 %130
  %131 = load double, ptr %arrayidx12.7.i, align 8, !tbaa !5
  %132 = tail call double @llvm.fmuladd.f64(double %95, double %131, double %129)
  %133 = add nuw nsw i64 %107, 8
  %arrayidx12.8.i = getelementptr inbounds double, ptr %Y, i64 %133
  %134 = load double, ptr %arrayidx12.8.i, align 8, !tbaa !5
  %135 = tail call double @llvm.fmuladd.f64(double %96, double %134, double %132)
  %136 = add nuw nsw i64 %107, 9
  %arrayidx12.9.i = getelementptr inbounds double, ptr %Y, i64 %136
  %137 = load double, ptr %arrayidx12.9.i, align 8, !tbaa !5
  %138 = tail call double @llvm.fmuladd.f64(double %97, double %137, double %135)
  %139 = add nuw nsw i64 %107, 10
  %arrayidx12.10.i = getelementptr inbounds double, ptr %Y, i64 %139
  %140 = load double, ptr %arrayidx12.10.i, align 8, !tbaa !5
  %141 = tail call double @llvm.fmuladd.f64(double %98, double %140, double %138)
  %142 = add nuw nsw i64 %107, 11
  %arrayidx12.11.i = getelementptr inbounds double, ptr %Y, i64 %142
  %143 = load double, ptr %arrayidx12.11.i, align 8, !tbaa !5
  %144 = tail call double @llvm.fmuladd.f64(double %99, double %143, double %141)
  %145 = add nuw nsw i64 %107, 12
  %arrayidx12.12.i = getelementptr inbounds double, ptr %Y, i64 %145
  %146 = load double, ptr %arrayidx12.12.i, align 8, !tbaa !5
  %147 = tail call double @llvm.fmuladd.f64(double %100, double %146, double %144)
  %148 = add nuw nsw i64 %107, 13
  %arrayidx12.13.i = getelementptr inbounds double, ptr %Y, i64 %148
  %149 = load double, ptr %arrayidx12.13.i, align 8, !tbaa !5
  %150 = tail call double @llvm.fmuladd.f64(double %101, double %149, double %147)
  %151 = add nuw nsw i64 %107, 14
  %arrayidx12.14.i = getelementptr inbounds double, ptr %Y, i64 %151
  %152 = load double, ptr %arrayidx12.14.i, align 8, !tbaa !5
  %153 = tail call double @llvm.fmuladd.f64(double %102, double %152, double %150)
  %154 = add nuw nsw i64 %107, 15
  %arrayidx12.15.i = getelementptr inbounds double, ptr %Y, i64 %154
  %155 = load double, ptr %arrayidx12.15.i, align 8, !tbaa !5
  %156 = tail call double @llvm.fmuladd.f64(double %103, double %155, double %153)
  %157 = add nuw nsw i64 %107, 16
  %arrayidx12.16.i = getelementptr inbounds double, ptr %Y, i64 %157
  %158 = load double, ptr %arrayidx12.16.i, align 8, !tbaa !5
  %159 = tail call double @llvm.fmuladd.f64(double %104, double %158, double %156)
  %160 = add nuw nsw i64 %107, 17
  %arrayidx12.17.i = getelementptr inbounds double, ptr %Y, i64 %160
  %161 = load double, ptr %arrayidx12.17.i, align 8, !tbaa !5
  %162 = tail call double @llvm.fmuladd.f64(double %105, double %161, double %159)
  %163 = add nuw nsw i64 %107, 18
  %arrayidx12.18.i = getelementptr inbounds double, ptr %Y, i64 %163
  %164 = load double, ptr %arrayidx12.18.i, align 8, !tbaa !5
  %165 = tail call double @llvm.fmuladd.f64(double %106, double %164, double %162)
  store double %165, ptr %arrayidx17.i, align 8, !tbaa !5
  %indvars.iv.next.i69 = add nuw nsw i64 %indvars.iv.i68, 1
  %exitcond.not.i70 = icmp eq i64 %indvars.iv.next.i69, 11
  br i1 %exitcond.not.i70, label %for.cond.cleanup3.i, label %for.cond5.preheader.i, !llvm.loop !31

for.cond.cleanup3.i:                              ; preds = %for.cond5.preheader.i
  %indvars.iv.next45.i = add nuw nsw i64 %indvars.iv44.i, 1
  %exitcond47.not.i = icmp eq i64 %indvars.iv.next45.i, 25
  br i1 %exitcond47.not.i, label %_ZL12multiplyBaseIdLj25ELj19ELj11EEvPT_S1_S1_.exit, label %for.cond1.preheader.i, !llvm.loop !32

_ZL12multiplyBaseIdLj25ELj19ELj11EEvPT_S1_S1_.exit: ; preds = %for.cond.cleanup3.i
  call void @_Z12multiplySpecIdLj25ELj19ELj11EEvPT_S1_S1_(ptr noundef nonnull %ResSpec, ptr noundef nonnull %X, ptr noundef nonnull %Y)
  %col.load = load <25 x double>, ptr %X, align 16
  %vec.gep = getelementptr inbounds double, ptr %X, i64 25
  %col.load108 = load <25 x double>, ptr %vec.gep, align 8
  %vec.gep109 = getelementptr inbounds double, ptr %X, i64 50
  %col.load110 = load <25 x double>, ptr %vec.gep109, align 16
  %vec.gep111 = getelementptr inbounds double, ptr %X, i64 75
  %col.load112 = load <25 x double>, ptr %vec.gep111, align 8
  %vec.gep113 = getelementptr inbounds double, ptr %X, i64 100
  %col.load114 = load <25 x double>, ptr %vec.gep113, align 16
  %vec.gep115 = getelementptr inbounds double, ptr %X, i64 125
  %col.load116 = load <25 x double>, ptr %vec.gep115, align 8
  %vec.gep117 = getelementptr inbounds double, ptr %X, i64 150
  %col.load118 = load <25 x double>, ptr %vec.gep117, align 16
  %vec.gep119 = getelementptr inbounds double, ptr %X, i64 175
  %col.load120 = load <25 x double>, ptr %vec.gep119, align 8
  %vec.gep121 = getelementptr inbounds double, ptr %X, i64 200
  %col.load122 = load <25 x double>, ptr %vec.gep121, align 16
  %vec.gep123 = getelementptr inbounds double, ptr %X, i64 225
  %col.load124 = load <25 x double>, ptr %vec.gep123, align 8
  %vec.gep125 = getelementptr inbounds double, ptr %X, i64 250
  %col.load126 = load <25 x double>, ptr %vec.gep125, align 16
  %vec.gep127 = getelementptr inbounds double, ptr %X, i64 275
  %col.load128 = load <25 x double>, ptr %vec.gep127, align 8
  %vec.gep129 = getelementptr inbounds double, ptr %X, i64 300
  %col.load130 = load <25 x double>, ptr %vec.gep129, align 16
  %vec.gep131 = getelementptr inbounds double, ptr %X, i64 325
  %col.load132 = load <25 x double>, ptr %vec.gep131, align 8
  %vec.gep133 = getelementptr inbounds double, ptr %X, i64 350
  %col.load134 = load <25 x double>, ptr %vec.gep133, align 16
  %vec.gep135 = getelementptr inbounds double, ptr %X, i64 375
  %col.load136 = load <25 x double>, ptr %vec.gep135, align 8
  %vec.gep137 = getelementptr inbounds double, ptr %X, i64 400
  %col.load138 = load <25 x double>, ptr %vec.gep137, align 16
  %vec.gep139 = getelementptr inbounds double, ptr %X, i64 425
  %col.load140 = load <25 x double>, ptr %vec.gep139, align 8
  %vec.gep141 = getelementptr inbounds double, ptr %X, i64 450
  %col.load142 = load <25 x double>, ptr %vec.gep141, align 16
  %col.load143 = load <19 x double>, ptr %Y, align 16
  %vec.gep144 = getelementptr inbounds double, ptr %Y, i64 19
  %col.load145 = load <19 x double>, ptr %vec.gep144, align 8
  %vec.gep146 = getelementptr inbounds double, ptr %Y, i64 38
  %col.load147 = load <19 x double>, ptr %vec.gep146, align 16
  %vec.gep148 = getelementptr inbounds double, ptr %Y, i64 57
  %col.load149 = load <19 x double>, ptr %vec.gep148, align 8
  %vec.gep150 = getelementptr inbounds double, ptr %Y, i64 76
  %col.load151 = load <19 x double>, ptr %vec.gep150, align 16
  %vec.gep152 = getelementptr inbounds double, ptr %Y, i64 95
  %col.load153 = load <19 x double>, ptr %vec.gep152, align 8
  %vec.gep154 = getelementptr inbounds double, ptr %Y, i64 114
  %col.load155 = load <19 x double>, ptr %vec.gep154, align 16
  %vec.gep156 = getelementptr inbounds double, ptr %Y, i64 133
  %col.load157 = load <19 x double>, ptr %vec.gep156, align 8
  %vec.gep158 = getelementptr inbounds double, ptr %Y, i64 152
  %col.load159 = load <19 x double>, ptr %vec.gep158, align 16
  %vec.gep160 = getelementptr inbounds double, ptr %Y, i64 171
  %col.load161 = load <19 x double>, ptr %vec.gep160, align 8
  %vec.gep162 = getelementptr inbounds double, ptr %Y, i64 190
  %col.load163 = load <19 x double>, ptr %vec.gep162, align 16
  %block = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> zeroinitializer
  %166 = fmul <2 x double> %block, %splat.splat
  %block164 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat166 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %167 = fmul <2 x double> %block164, %splat.splat166
  %168 = fadd <2 x double> %166, %167
  %block167 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat169 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %169 = fmul <2 x double> %block167, %splat.splat169
  %170 = fadd <2 x double> %168, %169
  %block170 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat172 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %171 = fmul <2 x double> %block170, %splat.splat172
  %172 = fadd <2 x double> %170, %171
  %block173 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat175 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %173 = fmul <2 x double> %block173, %splat.splat175
  %174 = fadd <2 x double> %172, %173
  %block176 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat178 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %175 = fmul <2 x double> %block176, %splat.splat178
  %176 = fadd <2 x double> %174, %175
  %block179 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat181 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %177 = fmul <2 x double> %block179, %splat.splat181
  %178 = fadd <2 x double> %176, %177
  %block182 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat184 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %179 = fmul <2 x double> %block182, %splat.splat184
  %180 = fadd <2 x double> %178, %179
  %block185 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat187 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %181 = fmul <2 x double> %block185, %splat.splat187
  %182 = fadd <2 x double> %180, %181
  %block188 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat190 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %183 = fmul <2 x double> %block188, %splat.splat190
  %184 = fadd <2 x double> %182, %183
  %block191 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat193 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %185 = fmul <2 x double> %block191, %splat.splat193
  %186 = fadd <2 x double> %184, %185
  %block194 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat196 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %187 = fmul <2 x double> %block194, %splat.splat196
  %188 = fadd <2 x double> %186, %187
  %block197 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat199 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %189 = fmul <2 x double> %block197, %splat.splat199
  %190 = fadd <2 x double> %188, %189
  %block200 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat202 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %191 = fmul <2 x double> %block200, %splat.splat202
  %192 = fadd <2 x double> %190, %191
  %block203 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat205 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %193 = fmul <2 x double> %block203, %splat.splat205
  %194 = fadd <2 x double> %192, %193
  %block206 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat208 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %195 = fmul <2 x double> %block206, %splat.splat208
  %196 = fadd <2 x double> %194, %195
  %block209 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat211 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %197 = fmul <2 x double> %block209, %splat.splat211
  %198 = fadd <2 x double> %196, %197
  %block212 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat214 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %199 = fmul <2 x double> %block212, %splat.splat214
  %200 = fadd <2 x double> %198, %199
  %block215 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 0, i32 1>
  %splat.splat217 = shufflevector <19 x double> %col.load143, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %201 = fmul <2 x double> %block215, %splat.splat217
  %202 = fadd <2 x double> %200, %201
  %203 = shufflevector <2 x double> %202, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block218 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %204 = fmul <2 x double> %block218, %splat.splat
  %block221 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %205 = fmul <2 x double> %block221, %splat.splat166
  %206 = fadd <2 x double> %204, %205
  %block224 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %207 = fmul <2 x double> %block224, %splat.splat169
  %208 = fadd <2 x double> %206, %207
  %block227 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %209 = fmul <2 x double> %block227, %splat.splat172
  %210 = fadd <2 x double> %208, %209
  %block230 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %211 = fmul <2 x double> %block230, %splat.splat175
  %212 = fadd <2 x double> %210, %211
  %block233 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %213 = fmul <2 x double> %block233, %splat.splat178
  %214 = fadd <2 x double> %212, %213
  %block236 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %215 = fmul <2 x double> %block236, %splat.splat181
  %216 = fadd <2 x double> %214, %215
  %block239 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %217 = fmul <2 x double> %block239, %splat.splat184
  %218 = fadd <2 x double> %216, %217
  %block242 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %219 = fmul <2 x double> %block242, %splat.splat187
  %220 = fadd <2 x double> %218, %219
  %block245 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %221 = fmul <2 x double> %block245, %splat.splat190
  %222 = fadd <2 x double> %220, %221
  %block248 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %223 = fmul <2 x double> %block248, %splat.splat193
  %224 = fadd <2 x double> %222, %223
  %block251 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %225 = fmul <2 x double> %block251, %splat.splat196
  %226 = fadd <2 x double> %224, %225
  %block254 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %227 = fmul <2 x double> %block254, %splat.splat199
  %228 = fadd <2 x double> %226, %227
  %block257 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %229 = fmul <2 x double> %block257, %splat.splat202
  %230 = fadd <2 x double> %228, %229
  %block260 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %231 = fmul <2 x double> %block260, %splat.splat205
  %232 = fadd <2 x double> %230, %231
  %block263 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %233 = fmul <2 x double> %block263, %splat.splat208
  %234 = fadd <2 x double> %232, %233
  %block266 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %235 = fmul <2 x double> %block266, %splat.splat211
  %236 = fadd <2 x double> %234, %235
  %block269 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %237 = fmul <2 x double> %block269, %splat.splat214
  %238 = fadd <2 x double> %236, %237
  %block272 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 2, i32 3>
  %239 = fmul <2 x double> %block272, %splat.splat217
  %240 = fadd <2 x double> %238, %239
  %241 = shufflevector <2 x double> %240, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %242 = shufflevector <25 x double> %203, <25 x double> %241, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block275 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %243 = fmul <2 x double> %block275, %splat.splat
  %block278 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %244 = fmul <2 x double> %block278, %splat.splat166
  %245 = fadd <2 x double> %243, %244
  %block281 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %246 = fmul <2 x double> %block281, %splat.splat169
  %247 = fadd <2 x double> %245, %246
  %block284 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %248 = fmul <2 x double> %block284, %splat.splat172
  %249 = fadd <2 x double> %247, %248
  %block287 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %250 = fmul <2 x double> %block287, %splat.splat175
  %251 = fadd <2 x double> %249, %250
  %block290 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %252 = fmul <2 x double> %block290, %splat.splat178
  %253 = fadd <2 x double> %251, %252
  %block293 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %254 = fmul <2 x double> %block293, %splat.splat181
  %255 = fadd <2 x double> %253, %254
  %block296 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %256 = fmul <2 x double> %block296, %splat.splat184
  %257 = fadd <2 x double> %255, %256
  %block299 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %258 = fmul <2 x double> %block299, %splat.splat187
  %259 = fadd <2 x double> %257, %258
  %block302 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %260 = fmul <2 x double> %block302, %splat.splat190
  %261 = fadd <2 x double> %259, %260
  %block305 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %262 = fmul <2 x double> %block305, %splat.splat193
  %263 = fadd <2 x double> %261, %262
  %block308 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %264 = fmul <2 x double> %block308, %splat.splat196
  %265 = fadd <2 x double> %263, %264
  %block311 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %266 = fmul <2 x double> %block311, %splat.splat199
  %267 = fadd <2 x double> %265, %266
  %block314 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %268 = fmul <2 x double> %block314, %splat.splat202
  %269 = fadd <2 x double> %267, %268
  %block317 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %270 = fmul <2 x double> %block317, %splat.splat205
  %271 = fadd <2 x double> %269, %270
  %block320 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %272 = fmul <2 x double> %block320, %splat.splat208
  %273 = fadd <2 x double> %271, %272
  %block323 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %274 = fmul <2 x double> %block323, %splat.splat211
  %275 = fadd <2 x double> %273, %274
  %block326 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %276 = fmul <2 x double> %block326, %splat.splat214
  %277 = fadd <2 x double> %275, %276
  %block329 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 4, i32 5>
  %278 = fmul <2 x double> %block329, %splat.splat217
  %279 = fadd <2 x double> %277, %278
  %280 = shufflevector <2 x double> %279, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = shufflevector <25 x double> %242, <25 x double> %280, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block332 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %282 = fmul <2 x double> %block332, %splat.splat
  %block335 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %283 = fmul <2 x double> %block335, %splat.splat166
  %284 = fadd <2 x double> %282, %283
  %block338 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %285 = fmul <2 x double> %block338, %splat.splat169
  %286 = fadd <2 x double> %284, %285
  %block341 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %287 = fmul <2 x double> %block341, %splat.splat172
  %288 = fadd <2 x double> %286, %287
  %block344 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %289 = fmul <2 x double> %block344, %splat.splat175
  %290 = fadd <2 x double> %288, %289
  %block347 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %291 = fmul <2 x double> %block347, %splat.splat178
  %292 = fadd <2 x double> %290, %291
  %block350 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %293 = fmul <2 x double> %block350, %splat.splat181
  %294 = fadd <2 x double> %292, %293
  %block353 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %295 = fmul <2 x double> %block353, %splat.splat184
  %296 = fadd <2 x double> %294, %295
  %block356 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %297 = fmul <2 x double> %block356, %splat.splat187
  %298 = fadd <2 x double> %296, %297
  %block359 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %299 = fmul <2 x double> %block359, %splat.splat190
  %300 = fadd <2 x double> %298, %299
  %block362 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %301 = fmul <2 x double> %block362, %splat.splat193
  %302 = fadd <2 x double> %300, %301
  %block365 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %303 = fmul <2 x double> %block365, %splat.splat196
  %304 = fadd <2 x double> %302, %303
  %block368 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %305 = fmul <2 x double> %block368, %splat.splat199
  %306 = fadd <2 x double> %304, %305
  %block371 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %307 = fmul <2 x double> %block371, %splat.splat202
  %308 = fadd <2 x double> %306, %307
  %block374 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %309 = fmul <2 x double> %block374, %splat.splat205
  %310 = fadd <2 x double> %308, %309
  %block377 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %311 = fmul <2 x double> %block377, %splat.splat208
  %312 = fadd <2 x double> %310, %311
  %block380 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %313 = fmul <2 x double> %block380, %splat.splat211
  %314 = fadd <2 x double> %312, %313
  %block383 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %315 = fmul <2 x double> %block383, %splat.splat214
  %316 = fadd <2 x double> %314, %315
  %block386 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 6, i32 7>
  %317 = fmul <2 x double> %block386, %splat.splat217
  %318 = fadd <2 x double> %316, %317
  %319 = shufflevector <2 x double> %318, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %320 = shufflevector <25 x double> %281, <25 x double> %319, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block389 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %321 = fmul <2 x double> %block389, %splat.splat
  %block392 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %322 = fmul <2 x double> %block392, %splat.splat166
  %323 = fadd <2 x double> %321, %322
  %block395 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %324 = fmul <2 x double> %block395, %splat.splat169
  %325 = fadd <2 x double> %323, %324
  %block398 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %326 = fmul <2 x double> %block398, %splat.splat172
  %327 = fadd <2 x double> %325, %326
  %block401 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %328 = fmul <2 x double> %block401, %splat.splat175
  %329 = fadd <2 x double> %327, %328
  %block404 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %330 = fmul <2 x double> %block404, %splat.splat178
  %331 = fadd <2 x double> %329, %330
  %block407 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %332 = fmul <2 x double> %block407, %splat.splat181
  %333 = fadd <2 x double> %331, %332
  %block410 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %334 = fmul <2 x double> %block410, %splat.splat184
  %335 = fadd <2 x double> %333, %334
  %block413 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %336 = fmul <2 x double> %block413, %splat.splat187
  %337 = fadd <2 x double> %335, %336
  %block416 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %338 = fmul <2 x double> %block416, %splat.splat190
  %339 = fadd <2 x double> %337, %338
  %block419 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %340 = fmul <2 x double> %block419, %splat.splat193
  %341 = fadd <2 x double> %339, %340
  %block422 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %342 = fmul <2 x double> %block422, %splat.splat196
  %343 = fadd <2 x double> %341, %342
  %block425 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %344 = fmul <2 x double> %block425, %splat.splat199
  %345 = fadd <2 x double> %343, %344
  %block428 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %346 = fmul <2 x double> %block428, %splat.splat202
  %347 = fadd <2 x double> %345, %346
  %block431 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %348 = fmul <2 x double> %block431, %splat.splat205
  %349 = fadd <2 x double> %347, %348
  %block434 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %350 = fmul <2 x double> %block434, %splat.splat208
  %351 = fadd <2 x double> %349, %350
  %block437 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %352 = fmul <2 x double> %block437, %splat.splat211
  %353 = fadd <2 x double> %351, %352
  %block440 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %354 = fmul <2 x double> %block440, %splat.splat214
  %355 = fadd <2 x double> %353, %354
  %block443 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 8, i32 9>
  %356 = fmul <2 x double> %block443, %splat.splat217
  %357 = fadd <2 x double> %355, %356
  %358 = shufflevector <2 x double> %357, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %359 = shufflevector <25 x double> %320, <25 x double> %358, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block446 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %360 = fmul <2 x double> %block446, %splat.splat
  %block449 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %361 = fmul <2 x double> %block449, %splat.splat166
  %362 = fadd <2 x double> %360, %361
  %block452 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %363 = fmul <2 x double> %block452, %splat.splat169
  %364 = fadd <2 x double> %362, %363
  %block455 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %365 = fmul <2 x double> %block455, %splat.splat172
  %366 = fadd <2 x double> %364, %365
  %block458 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %367 = fmul <2 x double> %block458, %splat.splat175
  %368 = fadd <2 x double> %366, %367
  %block461 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %369 = fmul <2 x double> %block461, %splat.splat178
  %370 = fadd <2 x double> %368, %369
  %block464 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %371 = fmul <2 x double> %block464, %splat.splat181
  %372 = fadd <2 x double> %370, %371
  %block467 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %373 = fmul <2 x double> %block467, %splat.splat184
  %374 = fadd <2 x double> %372, %373
  %block470 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %375 = fmul <2 x double> %block470, %splat.splat187
  %376 = fadd <2 x double> %374, %375
  %block473 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %377 = fmul <2 x double> %block473, %splat.splat190
  %378 = fadd <2 x double> %376, %377
  %block476 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %379 = fmul <2 x double> %block476, %splat.splat193
  %380 = fadd <2 x double> %378, %379
  %block479 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %381 = fmul <2 x double> %block479, %splat.splat196
  %382 = fadd <2 x double> %380, %381
  %block482 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %383 = fmul <2 x double> %block482, %splat.splat199
  %384 = fadd <2 x double> %382, %383
  %block485 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %385 = fmul <2 x double> %block485, %splat.splat202
  %386 = fadd <2 x double> %384, %385
  %block488 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %387 = fmul <2 x double> %block488, %splat.splat205
  %388 = fadd <2 x double> %386, %387
  %block491 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %389 = fmul <2 x double> %block491, %splat.splat208
  %390 = fadd <2 x double> %388, %389
  %block494 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %391 = fmul <2 x double> %block494, %splat.splat211
  %392 = fadd <2 x double> %390, %391
  %block497 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %393 = fmul <2 x double> %block497, %splat.splat214
  %394 = fadd <2 x double> %392, %393
  %block500 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 10, i32 11>
  %395 = fmul <2 x double> %block500, %splat.splat217
  %396 = fadd <2 x double> %394, %395
  %397 = shufflevector <2 x double> %396, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %398 = shufflevector <25 x double> %359, <25 x double> %397, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block503 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %399 = fmul <2 x double> %block503, %splat.splat
  %block506 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %400 = fmul <2 x double> %block506, %splat.splat166
  %401 = fadd <2 x double> %399, %400
  %block509 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %402 = fmul <2 x double> %block509, %splat.splat169
  %403 = fadd <2 x double> %401, %402
  %block512 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %404 = fmul <2 x double> %block512, %splat.splat172
  %405 = fadd <2 x double> %403, %404
  %block515 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %406 = fmul <2 x double> %block515, %splat.splat175
  %407 = fadd <2 x double> %405, %406
  %block518 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %408 = fmul <2 x double> %block518, %splat.splat178
  %409 = fadd <2 x double> %407, %408
  %block521 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %410 = fmul <2 x double> %block521, %splat.splat181
  %411 = fadd <2 x double> %409, %410
  %block524 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %412 = fmul <2 x double> %block524, %splat.splat184
  %413 = fadd <2 x double> %411, %412
  %block527 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %414 = fmul <2 x double> %block527, %splat.splat187
  %415 = fadd <2 x double> %413, %414
  %block530 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %416 = fmul <2 x double> %block530, %splat.splat190
  %417 = fadd <2 x double> %415, %416
  %block533 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %418 = fmul <2 x double> %block533, %splat.splat193
  %419 = fadd <2 x double> %417, %418
  %block536 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %420 = fmul <2 x double> %block536, %splat.splat196
  %421 = fadd <2 x double> %419, %420
  %block539 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %422 = fmul <2 x double> %block539, %splat.splat199
  %423 = fadd <2 x double> %421, %422
  %block542 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %424 = fmul <2 x double> %block542, %splat.splat202
  %425 = fadd <2 x double> %423, %424
  %block545 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %426 = fmul <2 x double> %block545, %splat.splat205
  %427 = fadd <2 x double> %425, %426
  %block548 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %428 = fmul <2 x double> %block548, %splat.splat208
  %429 = fadd <2 x double> %427, %428
  %block551 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %430 = fmul <2 x double> %block551, %splat.splat211
  %431 = fadd <2 x double> %429, %430
  %block554 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %432 = fmul <2 x double> %block554, %splat.splat214
  %433 = fadd <2 x double> %431, %432
  %block557 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 12, i32 13>
  %434 = fmul <2 x double> %block557, %splat.splat217
  %435 = fadd <2 x double> %433, %434
  %436 = shufflevector <2 x double> %435, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %437 = shufflevector <25 x double> %398, <25 x double> %436, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block560 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %438 = fmul <2 x double> %block560, %splat.splat
  %block563 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %439 = fmul <2 x double> %block563, %splat.splat166
  %440 = fadd <2 x double> %438, %439
  %block566 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %441 = fmul <2 x double> %block566, %splat.splat169
  %442 = fadd <2 x double> %440, %441
  %block569 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %443 = fmul <2 x double> %block569, %splat.splat172
  %444 = fadd <2 x double> %442, %443
  %block572 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %445 = fmul <2 x double> %block572, %splat.splat175
  %446 = fadd <2 x double> %444, %445
  %block575 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %447 = fmul <2 x double> %block575, %splat.splat178
  %448 = fadd <2 x double> %446, %447
  %block578 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %449 = fmul <2 x double> %block578, %splat.splat181
  %450 = fadd <2 x double> %448, %449
  %block581 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %451 = fmul <2 x double> %block581, %splat.splat184
  %452 = fadd <2 x double> %450, %451
  %block584 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %453 = fmul <2 x double> %block584, %splat.splat187
  %454 = fadd <2 x double> %452, %453
  %block587 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %455 = fmul <2 x double> %block587, %splat.splat190
  %456 = fadd <2 x double> %454, %455
  %block590 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %457 = fmul <2 x double> %block590, %splat.splat193
  %458 = fadd <2 x double> %456, %457
  %block593 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %459 = fmul <2 x double> %block593, %splat.splat196
  %460 = fadd <2 x double> %458, %459
  %block596 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %461 = fmul <2 x double> %block596, %splat.splat199
  %462 = fadd <2 x double> %460, %461
  %block599 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %463 = fmul <2 x double> %block599, %splat.splat202
  %464 = fadd <2 x double> %462, %463
  %block602 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %465 = fmul <2 x double> %block602, %splat.splat205
  %466 = fadd <2 x double> %464, %465
  %block605 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %467 = fmul <2 x double> %block605, %splat.splat208
  %468 = fadd <2 x double> %466, %467
  %block608 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %469 = fmul <2 x double> %block608, %splat.splat211
  %470 = fadd <2 x double> %468, %469
  %block611 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %471 = fmul <2 x double> %block611, %splat.splat214
  %472 = fadd <2 x double> %470, %471
  %block614 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 14, i32 15>
  %473 = fmul <2 x double> %block614, %splat.splat217
  %474 = fadd <2 x double> %472, %473
  %475 = shufflevector <2 x double> %474, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %476 = shufflevector <25 x double> %437, <25 x double> %475, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block617 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %477 = fmul <2 x double> %block617, %splat.splat
  %block620 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %478 = fmul <2 x double> %block620, %splat.splat166
  %479 = fadd <2 x double> %477, %478
  %block623 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %480 = fmul <2 x double> %block623, %splat.splat169
  %481 = fadd <2 x double> %479, %480
  %block626 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %482 = fmul <2 x double> %block626, %splat.splat172
  %483 = fadd <2 x double> %481, %482
  %block629 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %484 = fmul <2 x double> %block629, %splat.splat175
  %485 = fadd <2 x double> %483, %484
  %block632 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %486 = fmul <2 x double> %block632, %splat.splat178
  %487 = fadd <2 x double> %485, %486
  %block635 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %488 = fmul <2 x double> %block635, %splat.splat181
  %489 = fadd <2 x double> %487, %488
  %block638 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %490 = fmul <2 x double> %block638, %splat.splat184
  %491 = fadd <2 x double> %489, %490
  %block641 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %492 = fmul <2 x double> %block641, %splat.splat187
  %493 = fadd <2 x double> %491, %492
  %block644 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %494 = fmul <2 x double> %block644, %splat.splat190
  %495 = fadd <2 x double> %493, %494
  %block647 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %496 = fmul <2 x double> %block647, %splat.splat193
  %497 = fadd <2 x double> %495, %496
  %block650 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %498 = fmul <2 x double> %block650, %splat.splat196
  %499 = fadd <2 x double> %497, %498
  %block653 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %500 = fmul <2 x double> %block653, %splat.splat199
  %501 = fadd <2 x double> %499, %500
  %block656 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %502 = fmul <2 x double> %block656, %splat.splat202
  %503 = fadd <2 x double> %501, %502
  %block659 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %504 = fmul <2 x double> %block659, %splat.splat205
  %505 = fadd <2 x double> %503, %504
  %block662 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %506 = fmul <2 x double> %block662, %splat.splat208
  %507 = fadd <2 x double> %505, %506
  %block665 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %508 = fmul <2 x double> %block665, %splat.splat211
  %509 = fadd <2 x double> %507, %508
  %block668 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %510 = fmul <2 x double> %block668, %splat.splat214
  %511 = fadd <2 x double> %509, %510
  %block671 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 16, i32 17>
  %512 = fmul <2 x double> %block671, %splat.splat217
  %513 = fadd <2 x double> %511, %512
  %514 = shufflevector <2 x double> %513, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %515 = shufflevector <25 x double> %476, <25 x double> %514, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block674 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %516 = fmul <2 x double> %block674, %splat.splat
  %block677 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %517 = fmul <2 x double> %block677, %splat.splat166
  %518 = fadd <2 x double> %516, %517
  %block680 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %519 = fmul <2 x double> %block680, %splat.splat169
  %520 = fadd <2 x double> %518, %519
  %block683 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %521 = fmul <2 x double> %block683, %splat.splat172
  %522 = fadd <2 x double> %520, %521
  %block686 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %523 = fmul <2 x double> %block686, %splat.splat175
  %524 = fadd <2 x double> %522, %523
  %block689 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %525 = fmul <2 x double> %block689, %splat.splat178
  %526 = fadd <2 x double> %524, %525
  %block692 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %527 = fmul <2 x double> %block692, %splat.splat181
  %528 = fadd <2 x double> %526, %527
  %block695 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %529 = fmul <2 x double> %block695, %splat.splat184
  %530 = fadd <2 x double> %528, %529
  %block698 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %531 = fmul <2 x double> %block698, %splat.splat187
  %532 = fadd <2 x double> %530, %531
  %block701 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %533 = fmul <2 x double> %block701, %splat.splat190
  %534 = fadd <2 x double> %532, %533
  %block704 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %535 = fmul <2 x double> %block704, %splat.splat193
  %536 = fadd <2 x double> %534, %535
  %block707 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %537 = fmul <2 x double> %block707, %splat.splat196
  %538 = fadd <2 x double> %536, %537
  %block710 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %539 = fmul <2 x double> %block710, %splat.splat199
  %540 = fadd <2 x double> %538, %539
  %block713 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %541 = fmul <2 x double> %block713, %splat.splat202
  %542 = fadd <2 x double> %540, %541
  %block716 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %543 = fmul <2 x double> %block716, %splat.splat205
  %544 = fadd <2 x double> %542, %543
  %block719 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %545 = fmul <2 x double> %block719, %splat.splat208
  %546 = fadd <2 x double> %544, %545
  %block722 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %547 = fmul <2 x double> %block722, %splat.splat211
  %548 = fadd <2 x double> %546, %547
  %block725 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %549 = fmul <2 x double> %block725, %splat.splat214
  %550 = fadd <2 x double> %548, %549
  %block728 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 18, i32 19>
  %551 = fmul <2 x double> %block728, %splat.splat217
  %552 = fadd <2 x double> %550, %551
  %553 = shufflevector <2 x double> %552, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %554 = shufflevector <25 x double> %515, <25 x double> %553, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %block731 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %555 = fmul <2 x double> %block731, %splat.splat
  %block734 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %556 = fmul <2 x double> %block734, %splat.splat166
  %557 = fadd <2 x double> %555, %556
  %block737 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %558 = fmul <2 x double> %block737, %splat.splat169
  %559 = fadd <2 x double> %557, %558
  %block740 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %560 = fmul <2 x double> %block740, %splat.splat172
  %561 = fadd <2 x double> %559, %560
  %block743 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %562 = fmul <2 x double> %block743, %splat.splat175
  %563 = fadd <2 x double> %561, %562
  %block746 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %564 = fmul <2 x double> %block746, %splat.splat178
  %565 = fadd <2 x double> %563, %564
  %block749 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %566 = fmul <2 x double> %block749, %splat.splat181
  %567 = fadd <2 x double> %565, %566
  %block752 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %568 = fmul <2 x double> %block752, %splat.splat184
  %569 = fadd <2 x double> %567, %568
  %block755 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %570 = fmul <2 x double> %block755, %splat.splat187
  %571 = fadd <2 x double> %569, %570
  %block758 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %572 = fmul <2 x double> %block758, %splat.splat190
  %573 = fadd <2 x double> %571, %572
  %block761 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %574 = fmul <2 x double> %block761, %splat.splat193
  %575 = fadd <2 x double> %573, %574
  %block764 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %576 = fmul <2 x double> %block764, %splat.splat196
  %577 = fadd <2 x double> %575, %576
  %block767 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %578 = fmul <2 x double> %block767, %splat.splat199
  %579 = fadd <2 x double> %577, %578
  %block770 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %580 = fmul <2 x double> %block770, %splat.splat202
  %581 = fadd <2 x double> %579, %580
  %block773 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %582 = fmul <2 x double> %block773, %splat.splat205
  %583 = fadd <2 x double> %581, %582
  %block776 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %584 = fmul <2 x double> %block776, %splat.splat208
  %585 = fadd <2 x double> %583, %584
  %block779 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %586 = fmul <2 x double> %block779, %splat.splat211
  %587 = fadd <2 x double> %585, %586
  %block782 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %588 = fmul <2 x double> %block782, %splat.splat214
  %589 = fadd <2 x double> %587, %588
  %block785 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 20, i32 21>
  %590 = fmul <2 x double> %block785, %splat.splat217
  %591 = fadd <2 x double> %589, %590
  %592 = shufflevector <2 x double> %591, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %593 = shufflevector <25 x double> %554, <25 x double> %592, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %block788 = shufflevector <25 x double> %col.load, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %594 = fmul <2 x double> %block788, %splat.splat
  %block791 = shufflevector <25 x double> %col.load108, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %595 = fmul <2 x double> %block791, %splat.splat166
  %596 = fadd <2 x double> %594, %595
  %block794 = shufflevector <25 x double> %col.load110, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %597 = fmul <2 x double> %block794, %splat.splat169
  %598 = fadd <2 x double> %596, %597
  %block797 = shufflevector <25 x double> %col.load112, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %599 = fmul <2 x double> %block797, %splat.splat172
  %600 = fadd <2 x double> %598, %599
  %block800 = shufflevector <25 x double> %col.load114, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %601 = fmul <2 x double> %block800, %splat.splat175
  %602 = fadd <2 x double> %600, %601
  %block803 = shufflevector <25 x double> %col.load116, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %603 = fmul <2 x double> %block803, %splat.splat178
  %604 = fadd <2 x double> %602, %603
  %block806 = shufflevector <25 x double> %col.load118, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %605 = fmul <2 x double> %block806, %splat.splat181
  %606 = fadd <2 x double> %604, %605
  %block809 = shufflevector <25 x double> %col.load120, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %607 = fmul <2 x double> %block809, %splat.splat184
  %608 = fadd <2 x double> %606, %607
  %block812 = shufflevector <25 x double> %col.load122, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %609 = fmul <2 x double> %block812, %splat.splat187
  %610 = fadd <2 x double> %608, %609
  %block815 = shufflevector <25 x double> %col.load124, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %611 = fmul <2 x double> %block815, %splat.splat190
  %612 = fadd <2 x double> %610, %611
  %block818 = shufflevector <25 x double> %col.load126, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %613 = fmul <2 x double> %block818, %splat.splat193
  %614 = fadd <2 x double> %612, %613
  %block821 = shufflevector <25 x double> %col.load128, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %615 = fmul <2 x double> %block821, %splat.splat196
  %616 = fadd <2 x double> %614, %615
  %block824 = shufflevector <25 x double> %col.load130, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %617 = fmul <2 x double> %block824, %splat.splat199
  %618 = fadd <2 x double> %616, %617
  %block827 = shufflevector <25 x double> %col.load132, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %619 = fmul <2 x double> %block827, %splat.splat202
  %620 = fadd <2 x double> %618, %619
  %block830 = shufflevector <25 x double> %col.load134, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %621 = fmul <2 x double> %block830, %splat.splat205
  %622 = fadd <2 x double> %620, %621
  %block833 = shufflevector <25 x double> %col.load136, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %623 = fmul <2 x double> %block833, %splat.splat208
  %624 = fadd <2 x double> %622, %623
  %block836 = shufflevector <25 x double> %col.load138, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %625 = fmul <2 x double> %block836, %splat.splat211
  %626 = fadd <2 x double> %624, %625
  %block839 = shufflevector <25 x double> %col.load140, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %627 = fmul <2 x double> %block839, %splat.splat214
  %628 = fadd <2 x double> %626, %627
  %block842 = shufflevector <25 x double> %col.load142, <25 x double> poison, <2 x i32> <i32 22, i32 23>
  %629 = fmul <2 x double> %block842, %splat.splat217
  %630 = fadd <2 x double> %628, %629
  %631 = shufflevector <2 x double> %630, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %632 = shufflevector <25 x double> %593, <25 x double> %631, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %block845 = shufflevector <25 x double> %col.load, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert846 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> zeroinitializer
  %633 = fmul <1 x double> %block845, %splat.splatinsert846
  %block848 = shufflevector <25 x double> %col.load108, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert849 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 1>
  %634 = fmul <1 x double> %block848, %splat.splatinsert849
  %635 = fadd <1 x double> %633, %634
  %block851 = shufflevector <25 x double> %col.load110, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert852 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 2>
  %636 = fmul <1 x double> %block851, %splat.splatinsert852
  %637 = fadd <1 x double> %635, %636
  %block854 = shufflevector <25 x double> %col.load112, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert855 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 3>
  %638 = fmul <1 x double> %block854, %splat.splatinsert855
  %639 = fadd <1 x double> %637, %638
  %block857 = shufflevector <25 x double> %col.load114, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert858 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 4>
  %640 = fmul <1 x double> %block857, %splat.splatinsert858
  %641 = fadd <1 x double> %639, %640
  %block860 = shufflevector <25 x double> %col.load116, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert861 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 5>
  %642 = fmul <1 x double> %block860, %splat.splatinsert861
  %643 = fadd <1 x double> %641, %642
  %block863 = shufflevector <25 x double> %col.load118, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert864 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 6>
  %644 = fmul <1 x double> %block863, %splat.splatinsert864
  %645 = fadd <1 x double> %643, %644
  %block866 = shufflevector <25 x double> %col.load120, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert867 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 7>
  %646 = fmul <1 x double> %block866, %splat.splatinsert867
  %647 = fadd <1 x double> %645, %646
  %block869 = shufflevector <25 x double> %col.load122, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert870 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 8>
  %648 = fmul <1 x double> %block869, %splat.splatinsert870
  %649 = fadd <1 x double> %647, %648
  %block872 = shufflevector <25 x double> %col.load124, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert873 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 9>
  %650 = fmul <1 x double> %block872, %splat.splatinsert873
  %651 = fadd <1 x double> %649, %650
  %block875 = shufflevector <25 x double> %col.load126, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert876 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 10>
  %652 = fmul <1 x double> %block875, %splat.splatinsert876
  %653 = fadd <1 x double> %651, %652
  %block878 = shufflevector <25 x double> %col.load128, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert879 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 11>
  %654 = fmul <1 x double> %block878, %splat.splatinsert879
  %655 = fadd <1 x double> %653, %654
  %block881 = shufflevector <25 x double> %col.load130, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert882 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 12>
  %656 = fmul <1 x double> %block881, %splat.splatinsert882
  %657 = fadd <1 x double> %655, %656
  %block884 = shufflevector <25 x double> %col.load132, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert885 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 13>
  %658 = fmul <1 x double> %block884, %splat.splatinsert885
  %659 = fadd <1 x double> %657, %658
  %block887 = shufflevector <25 x double> %col.load134, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert888 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 14>
  %660 = fmul <1 x double> %block887, %splat.splatinsert888
  %661 = fadd <1 x double> %659, %660
  %block890 = shufflevector <25 x double> %col.load136, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert891 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 15>
  %662 = fmul <1 x double> %block890, %splat.splatinsert891
  %663 = fadd <1 x double> %661, %662
  %block893 = shufflevector <25 x double> %col.load138, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert894 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 16>
  %664 = fmul <1 x double> %block893, %splat.splatinsert894
  %665 = fadd <1 x double> %663, %664
  %block896 = shufflevector <25 x double> %col.load140, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert897 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 17>
  %666 = fmul <1 x double> %block896, %splat.splatinsert897
  %667 = fadd <1 x double> %665, %666
  %block899 = shufflevector <25 x double> %col.load142, <25 x double> poison, <1 x i32> <i32 24>
  %splat.splatinsert900 = shufflevector <19 x double> %col.load143, <19 x double> undef, <1 x i32> <i32 18>
  %668 = fmul <1 x double> %block899, %splat.splatinsert900
  %669 = fadd <1 x double> %667, %668
  %670 = shufflevector <1 x double> %669, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %671 = shufflevector <25 x double> %632, <25 x double> %670, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  %splat.splat904 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> zeroinitializer
  %672 = fmul <2 x double> %block, %splat.splat904
  %splat.splat907 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %673 = fmul <2 x double> %block164, %splat.splat907
  %674 = fadd <2 x double> %672, %673
  %splat.splat910 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %675 = fmul <2 x double> %block167, %splat.splat910
  %676 = fadd <2 x double> %674, %675
  %splat.splat913 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %677 = fmul <2 x double> %block170, %splat.splat913
  %678 = fadd <2 x double> %676, %677
  %splat.splat916 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %679 = fmul <2 x double> %block173, %splat.splat916
  %680 = fadd <2 x double> %678, %679
  %splat.splat919 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %681 = fmul <2 x double> %block176, %splat.splat919
  %682 = fadd <2 x double> %680, %681
  %splat.splat922 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %683 = fmul <2 x double> %block179, %splat.splat922
  %684 = fadd <2 x double> %682, %683
  %splat.splat925 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %685 = fmul <2 x double> %block182, %splat.splat925
  %686 = fadd <2 x double> %684, %685
  %splat.splat928 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %687 = fmul <2 x double> %block185, %splat.splat928
  %688 = fadd <2 x double> %686, %687
  %splat.splat931 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %689 = fmul <2 x double> %block188, %splat.splat931
  %690 = fadd <2 x double> %688, %689
  %splat.splat934 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %691 = fmul <2 x double> %block191, %splat.splat934
  %692 = fadd <2 x double> %690, %691
  %splat.splat937 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %693 = fmul <2 x double> %block194, %splat.splat937
  %694 = fadd <2 x double> %692, %693
  %splat.splat940 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %695 = fmul <2 x double> %block197, %splat.splat940
  %696 = fadd <2 x double> %694, %695
  %splat.splat943 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %697 = fmul <2 x double> %block200, %splat.splat943
  %698 = fadd <2 x double> %696, %697
  %splat.splat946 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %699 = fmul <2 x double> %block203, %splat.splat946
  %700 = fadd <2 x double> %698, %699
  %splat.splat949 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %701 = fmul <2 x double> %block206, %splat.splat949
  %702 = fadd <2 x double> %700, %701
  %splat.splat952 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %703 = fmul <2 x double> %block209, %splat.splat952
  %704 = fadd <2 x double> %702, %703
  %splat.splat955 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %705 = fmul <2 x double> %block212, %splat.splat955
  %706 = fadd <2 x double> %704, %705
  %splat.splat958 = shufflevector <19 x double> %col.load145, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %707 = fmul <2 x double> %block215, %splat.splat958
  %708 = fadd <2 x double> %706, %707
  %709 = shufflevector <2 x double> %708, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %710 = fmul <2 x double> %block218, %splat.splat904
  %711 = fmul <2 x double> %block221, %splat.splat907
  %712 = fadd <2 x double> %710, %711
  %713 = fmul <2 x double> %block224, %splat.splat910
  %714 = fadd <2 x double> %712, %713
  %715 = fmul <2 x double> %block227, %splat.splat913
  %716 = fadd <2 x double> %714, %715
  %717 = fmul <2 x double> %block230, %splat.splat916
  %718 = fadd <2 x double> %716, %717
  %719 = fmul <2 x double> %block233, %splat.splat919
  %720 = fadd <2 x double> %718, %719
  %721 = fmul <2 x double> %block236, %splat.splat922
  %722 = fadd <2 x double> %720, %721
  %723 = fmul <2 x double> %block239, %splat.splat925
  %724 = fadd <2 x double> %722, %723
  %725 = fmul <2 x double> %block242, %splat.splat928
  %726 = fadd <2 x double> %724, %725
  %727 = fmul <2 x double> %block245, %splat.splat931
  %728 = fadd <2 x double> %726, %727
  %729 = fmul <2 x double> %block248, %splat.splat934
  %730 = fadd <2 x double> %728, %729
  %731 = fmul <2 x double> %block251, %splat.splat937
  %732 = fadd <2 x double> %730, %731
  %733 = fmul <2 x double> %block254, %splat.splat940
  %734 = fadd <2 x double> %732, %733
  %735 = fmul <2 x double> %block257, %splat.splat943
  %736 = fadd <2 x double> %734, %735
  %737 = fmul <2 x double> %block260, %splat.splat946
  %738 = fadd <2 x double> %736, %737
  %739 = fmul <2 x double> %block263, %splat.splat949
  %740 = fadd <2 x double> %738, %739
  %741 = fmul <2 x double> %block266, %splat.splat952
  %742 = fadd <2 x double> %740, %741
  %743 = fmul <2 x double> %block269, %splat.splat955
  %744 = fadd <2 x double> %742, %743
  %745 = fmul <2 x double> %block272, %splat.splat958
  %746 = fadd <2 x double> %744, %745
  %747 = shufflevector <2 x double> %746, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %748 = shufflevector <25 x double> %709, <25 x double> %747, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %749 = fmul <2 x double> %block275, %splat.splat904
  %750 = fmul <2 x double> %block278, %splat.splat907
  %751 = fadd <2 x double> %749, %750
  %752 = fmul <2 x double> %block281, %splat.splat910
  %753 = fadd <2 x double> %751, %752
  %754 = fmul <2 x double> %block284, %splat.splat913
  %755 = fadd <2 x double> %753, %754
  %756 = fmul <2 x double> %block287, %splat.splat916
  %757 = fadd <2 x double> %755, %756
  %758 = fmul <2 x double> %block290, %splat.splat919
  %759 = fadd <2 x double> %757, %758
  %760 = fmul <2 x double> %block293, %splat.splat922
  %761 = fadd <2 x double> %759, %760
  %762 = fmul <2 x double> %block296, %splat.splat925
  %763 = fadd <2 x double> %761, %762
  %764 = fmul <2 x double> %block299, %splat.splat928
  %765 = fadd <2 x double> %763, %764
  %766 = fmul <2 x double> %block302, %splat.splat931
  %767 = fadd <2 x double> %765, %766
  %768 = fmul <2 x double> %block305, %splat.splat934
  %769 = fadd <2 x double> %767, %768
  %770 = fmul <2 x double> %block308, %splat.splat937
  %771 = fadd <2 x double> %769, %770
  %772 = fmul <2 x double> %block311, %splat.splat940
  %773 = fadd <2 x double> %771, %772
  %774 = fmul <2 x double> %block314, %splat.splat943
  %775 = fadd <2 x double> %773, %774
  %776 = fmul <2 x double> %block317, %splat.splat946
  %777 = fadd <2 x double> %775, %776
  %778 = fmul <2 x double> %block320, %splat.splat949
  %779 = fadd <2 x double> %777, %778
  %780 = fmul <2 x double> %block323, %splat.splat952
  %781 = fadd <2 x double> %779, %780
  %782 = fmul <2 x double> %block326, %splat.splat955
  %783 = fadd <2 x double> %781, %782
  %784 = fmul <2 x double> %block329, %splat.splat958
  %785 = fadd <2 x double> %783, %784
  %786 = shufflevector <2 x double> %785, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %787 = shufflevector <25 x double> %748, <25 x double> %786, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %788 = fmul <2 x double> %block332, %splat.splat904
  %789 = fmul <2 x double> %block335, %splat.splat907
  %790 = fadd <2 x double> %788, %789
  %791 = fmul <2 x double> %block338, %splat.splat910
  %792 = fadd <2 x double> %790, %791
  %793 = fmul <2 x double> %block341, %splat.splat913
  %794 = fadd <2 x double> %792, %793
  %795 = fmul <2 x double> %block344, %splat.splat916
  %796 = fadd <2 x double> %794, %795
  %797 = fmul <2 x double> %block347, %splat.splat919
  %798 = fadd <2 x double> %796, %797
  %799 = fmul <2 x double> %block350, %splat.splat922
  %800 = fadd <2 x double> %798, %799
  %801 = fmul <2 x double> %block353, %splat.splat925
  %802 = fadd <2 x double> %800, %801
  %803 = fmul <2 x double> %block356, %splat.splat928
  %804 = fadd <2 x double> %802, %803
  %805 = fmul <2 x double> %block359, %splat.splat931
  %806 = fadd <2 x double> %804, %805
  %807 = fmul <2 x double> %block362, %splat.splat934
  %808 = fadd <2 x double> %806, %807
  %809 = fmul <2 x double> %block365, %splat.splat937
  %810 = fadd <2 x double> %808, %809
  %811 = fmul <2 x double> %block368, %splat.splat940
  %812 = fadd <2 x double> %810, %811
  %813 = fmul <2 x double> %block371, %splat.splat943
  %814 = fadd <2 x double> %812, %813
  %815 = fmul <2 x double> %block374, %splat.splat946
  %816 = fadd <2 x double> %814, %815
  %817 = fmul <2 x double> %block377, %splat.splat949
  %818 = fadd <2 x double> %816, %817
  %819 = fmul <2 x double> %block380, %splat.splat952
  %820 = fadd <2 x double> %818, %819
  %821 = fmul <2 x double> %block383, %splat.splat955
  %822 = fadd <2 x double> %820, %821
  %823 = fmul <2 x double> %block386, %splat.splat958
  %824 = fadd <2 x double> %822, %823
  %825 = shufflevector <2 x double> %824, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %826 = shufflevector <25 x double> %787, <25 x double> %825, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %827 = fmul <2 x double> %block389, %splat.splat904
  %828 = fmul <2 x double> %block392, %splat.splat907
  %829 = fadd <2 x double> %827, %828
  %830 = fmul <2 x double> %block395, %splat.splat910
  %831 = fadd <2 x double> %829, %830
  %832 = fmul <2 x double> %block398, %splat.splat913
  %833 = fadd <2 x double> %831, %832
  %834 = fmul <2 x double> %block401, %splat.splat916
  %835 = fadd <2 x double> %833, %834
  %836 = fmul <2 x double> %block404, %splat.splat919
  %837 = fadd <2 x double> %835, %836
  %838 = fmul <2 x double> %block407, %splat.splat922
  %839 = fadd <2 x double> %837, %838
  %840 = fmul <2 x double> %block410, %splat.splat925
  %841 = fadd <2 x double> %839, %840
  %842 = fmul <2 x double> %block413, %splat.splat928
  %843 = fadd <2 x double> %841, %842
  %844 = fmul <2 x double> %block416, %splat.splat931
  %845 = fadd <2 x double> %843, %844
  %846 = fmul <2 x double> %block419, %splat.splat934
  %847 = fadd <2 x double> %845, %846
  %848 = fmul <2 x double> %block422, %splat.splat937
  %849 = fadd <2 x double> %847, %848
  %850 = fmul <2 x double> %block425, %splat.splat940
  %851 = fadd <2 x double> %849, %850
  %852 = fmul <2 x double> %block428, %splat.splat943
  %853 = fadd <2 x double> %851, %852
  %854 = fmul <2 x double> %block431, %splat.splat946
  %855 = fadd <2 x double> %853, %854
  %856 = fmul <2 x double> %block434, %splat.splat949
  %857 = fadd <2 x double> %855, %856
  %858 = fmul <2 x double> %block437, %splat.splat952
  %859 = fadd <2 x double> %857, %858
  %860 = fmul <2 x double> %block440, %splat.splat955
  %861 = fadd <2 x double> %859, %860
  %862 = fmul <2 x double> %block443, %splat.splat958
  %863 = fadd <2 x double> %861, %862
  %864 = shufflevector <2 x double> %863, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %865 = shufflevector <25 x double> %826, <25 x double> %864, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %866 = fmul <2 x double> %block446, %splat.splat904
  %867 = fmul <2 x double> %block449, %splat.splat907
  %868 = fadd <2 x double> %866, %867
  %869 = fmul <2 x double> %block452, %splat.splat910
  %870 = fadd <2 x double> %868, %869
  %871 = fmul <2 x double> %block455, %splat.splat913
  %872 = fadd <2 x double> %870, %871
  %873 = fmul <2 x double> %block458, %splat.splat916
  %874 = fadd <2 x double> %872, %873
  %875 = fmul <2 x double> %block461, %splat.splat919
  %876 = fadd <2 x double> %874, %875
  %877 = fmul <2 x double> %block464, %splat.splat922
  %878 = fadd <2 x double> %876, %877
  %879 = fmul <2 x double> %block467, %splat.splat925
  %880 = fadd <2 x double> %878, %879
  %881 = fmul <2 x double> %block470, %splat.splat928
  %882 = fadd <2 x double> %880, %881
  %883 = fmul <2 x double> %block473, %splat.splat931
  %884 = fadd <2 x double> %882, %883
  %885 = fmul <2 x double> %block476, %splat.splat934
  %886 = fadd <2 x double> %884, %885
  %887 = fmul <2 x double> %block479, %splat.splat937
  %888 = fadd <2 x double> %886, %887
  %889 = fmul <2 x double> %block482, %splat.splat940
  %890 = fadd <2 x double> %888, %889
  %891 = fmul <2 x double> %block485, %splat.splat943
  %892 = fadd <2 x double> %890, %891
  %893 = fmul <2 x double> %block488, %splat.splat946
  %894 = fadd <2 x double> %892, %893
  %895 = fmul <2 x double> %block491, %splat.splat949
  %896 = fadd <2 x double> %894, %895
  %897 = fmul <2 x double> %block494, %splat.splat952
  %898 = fadd <2 x double> %896, %897
  %899 = fmul <2 x double> %block497, %splat.splat955
  %900 = fadd <2 x double> %898, %899
  %901 = fmul <2 x double> %block500, %splat.splat958
  %902 = fadd <2 x double> %900, %901
  %903 = shufflevector <2 x double> %902, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %904 = shufflevector <25 x double> %865, <25 x double> %903, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %905 = fmul <2 x double> %block503, %splat.splat904
  %906 = fmul <2 x double> %block506, %splat.splat907
  %907 = fadd <2 x double> %905, %906
  %908 = fmul <2 x double> %block509, %splat.splat910
  %909 = fadd <2 x double> %907, %908
  %910 = fmul <2 x double> %block512, %splat.splat913
  %911 = fadd <2 x double> %909, %910
  %912 = fmul <2 x double> %block515, %splat.splat916
  %913 = fadd <2 x double> %911, %912
  %914 = fmul <2 x double> %block518, %splat.splat919
  %915 = fadd <2 x double> %913, %914
  %916 = fmul <2 x double> %block521, %splat.splat922
  %917 = fadd <2 x double> %915, %916
  %918 = fmul <2 x double> %block524, %splat.splat925
  %919 = fadd <2 x double> %917, %918
  %920 = fmul <2 x double> %block527, %splat.splat928
  %921 = fadd <2 x double> %919, %920
  %922 = fmul <2 x double> %block530, %splat.splat931
  %923 = fadd <2 x double> %921, %922
  %924 = fmul <2 x double> %block533, %splat.splat934
  %925 = fadd <2 x double> %923, %924
  %926 = fmul <2 x double> %block536, %splat.splat937
  %927 = fadd <2 x double> %925, %926
  %928 = fmul <2 x double> %block539, %splat.splat940
  %929 = fadd <2 x double> %927, %928
  %930 = fmul <2 x double> %block542, %splat.splat943
  %931 = fadd <2 x double> %929, %930
  %932 = fmul <2 x double> %block545, %splat.splat946
  %933 = fadd <2 x double> %931, %932
  %934 = fmul <2 x double> %block548, %splat.splat949
  %935 = fadd <2 x double> %933, %934
  %936 = fmul <2 x double> %block551, %splat.splat952
  %937 = fadd <2 x double> %935, %936
  %938 = fmul <2 x double> %block554, %splat.splat955
  %939 = fadd <2 x double> %937, %938
  %940 = fmul <2 x double> %block557, %splat.splat958
  %941 = fadd <2 x double> %939, %940
  %942 = shufflevector <2 x double> %941, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %943 = shufflevector <25 x double> %904, <25 x double> %942, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %944 = fmul <2 x double> %block560, %splat.splat904
  %945 = fmul <2 x double> %block563, %splat.splat907
  %946 = fadd <2 x double> %944, %945
  %947 = fmul <2 x double> %block566, %splat.splat910
  %948 = fadd <2 x double> %946, %947
  %949 = fmul <2 x double> %block569, %splat.splat913
  %950 = fadd <2 x double> %948, %949
  %951 = fmul <2 x double> %block572, %splat.splat916
  %952 = fadd <2 x double> %950, %951
  %953 = fmul <2 x double> %block575, %splat.splat919
  %954 = fadd <2 x double> %952, %953
  %955 = fmul <2 x double> %block578, %splat.splat922
  %956 = fadd <2 x double> %954, %955
  %957 = fmul <2 x double> %block581, %splat.splat925
  %958 = fadd <2 x double> %956, %957
  %959 = fmul <2 x double> %block584, %splat.splat928
  %960 = fadd <2 x double> %958, %959
  %961 = fmul <2 x double> %block587, %splat.splat931
  %962 = fadd <2 x double> %960, %961
  %963 = fmul <2 x double> %block590, %splat.splat934
  %964 = fadd <2 x double> %962, %963
  %965 = fmul <2 x double> %block593, %splat.splat937
  %966 = fadd <2 x double> %964, %965
  %967 = fmul <2 x double> %block596, %splat.splat940
  %968 = fadd <2 x double> %966, %967
  %969 = fmul <2 x double> %block599, %splat.splat943
  %970 = fadd <2 x double> %968, %969
  %971 = fmul <2 x double> %block602, %splat.splat946
  %972 = fadd <2 x double> %970, %971
  %973 = fmul <2 x double> %block605, %splat.splat949
  %974 = fadd <2 x double> %972, %973
  %975 = fmul <2 x double> %block608, %splat.splat952
  %976 = fadd <2 x double> %974, %975
  %977 = fmul <2 x double> %block611, %splat.splat955
  %978 = fadd <2 x double> %976, %977
  %979 = fmul <2 x double> %block614, %splat.splat958
  %980 = fadd <2 x double> %978, %979
  %981 = shufflevector <2 x double> %980, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %982 = shufflevector <25 x double> %943, <25 x double> %981, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %983 = fmul <2 x double> %block617, %splat.splat904
  %984 = fmul <2 x double> %block620, %splat.splat907
  %985 = fadd <2 x double> %983, %984
  %986 = fmul <2 x double> %block623, %splat.splat910
  %987 = fadd <2 x double> %985, %986
  %988 = fmul <2 x double> %block626, %splat.splat913
  %989 = fadd <2 x double> %987, %988
  %990 = fmul <2 x double> %block629, %splat.splat916
  %991 = fadd <2 x double> %989, %990
  %992 = fmul <2 x double> %block632, %splat.splat919
  %993 = fadd <2 x double> %991, %992
  %994 = fmul <2 x double> %block635, %splat.splat922
  %995 = fadd <2 x double> %993, %994
  %996 = fmul <2 x double> %block638, %splat.splat925
  %997 = fadd <2 x double> %995, %996
  %998 = fmul <2 x double> %block641, %splat.splat928
  %999 = fadd <2 x double> %997, %998
  %1000 = fmul <2 x double> %block644, %splat.splat931
  %1001 = fadd <2 x double> %999, %1000
  %1002 = fmul <2 x double> %block647, %splat.splat934
  %1003 = fadd <2 x double> %1001, %1002
  %1004 = fmul <2 x double> %block650, %splat.splat937
  %1005 = fadd <2 x double> %1003, %1004
  %1006 = fmul <2 x double> %block653, %splat.splat940
  %1007 = fadd <2 x double> %1005, %1006
  %1008 = fmul <2 x double> %block656, %splat.splat943
  %1009 = fadd <2 x double> %1007, %1008
  %1010 = fmul <2 x double> %block659, %splat.splat946
  %1011 = fadd <2 x double> %1009, %1010
  %1012 = fmul <2 x double> %block662, %splat.splat949
  %1013 = fadd <2 x double> %1011, %1012
  %1014 = fmul <2 x double> %block665, %splat.splat952
  %1015 = fadd <2 x double> %1013, %1014
  %1016 = fmul <2 x double> %block668, %splat.splat955
  %1017 = fadd <2 x double> %1015, %1016
  %1018 = fmul <2 x double> %block671, %splat.splat958
  %1019 = fadd <2 x double> %1017, %1018
  %1020 = shufflevector <2 x double> %1019, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1021 = shufflevector <25 x double> %982, <25 x double> %1020, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1022 = fmul <2 x double> %block674, %splat.splat904
  %1023 = fmul <2 x double> %block677, %splat.splat907
  %1024 = fadd <2 x double> %1022, %1023
  %1025 = fmul <2 x double> %block680, %splat.splat910
  %1026 = fadd <2 x double> %1024, %1025
  %1027 = fmul <2 x double> %block683, %splat.splat913
  %1028 = fadd <2 x double> %1026, %1027
  %1029 = fmul <2 x double> %block686, %splat.splat916
  %1030 = fadd <2 x double> %1028, %1029
  %1031 = fmul <2 x double> %block689, %splat.splat919
  %1032 = fadd <2 x double> %1030, %1031
  %1033 = fmul <2 x double> %block692, %splat.splat922
  %1034 = fadd <2 x double> %1032, %1033
  %1035 = fmul <2 x double> %block695, %splat.splat925
  %1036 = fadd <2 x double> %1034, %1035
  %1037 = fmul <2 x double> %block698, %splat.splat928
  %1038 = fadd <2 x double> %1036, %1037
  %1039 = fmul <2 x double> %block701, %splat.splat931
  %1040 = fadd <2 x double> %1038, %1039
  %1041 = fmul <2 x double> %block704, %splat.splat934
  %1042 = fadd <2 x double> %1040, %1041
  %1043 = fmul <2 x double> %block707, %splat.splat937
  %1044 = fadd <2 x double> %1042, %1043
  %1045 = fmul <2 x double> %block710, %splat.splat940
  %1046 = fadd <2 x double> %1044, %1045
  %1047 = fmul <2 x double> %block713, %splat.splat943
  %1048 = fadd <2 x double> %1046, %1047
  %1049 = fmul <2 x double> %block716, %splat.splat946
  %1050 = fadd <2 x double> %1048, %1049
  %1051 = fmul <2 x double> %block719, %splat.splat949
  %1052 = fadd <2 x double> %1050, %1051
  %1053 = fmul <2 x double> %block722, %splat.splat952
  %1054 = fadd <2 x double> %1052, %1053
  %1055 = fmul <2 x double> %block725, %splat.splat955
  %1056 = fadd <2 x double> %1054, %1055
  %1057 = fmul <2 x double> %block728, %splat.splat958
  %1058 = fadd <2 x double> %1056, %1057
  %1059 = shufflevector <2 x double> %1058, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1060 = shufflevector <25 x double> %1021, <25 x double> %1059, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1061 = fmul <2 x double> %block731, %splat.splat904
  %1062 = fmul <2 x double> %block734, %splat.splat907
  %1063 = fadd <2 x double> %1061, %1062
  %1064 = fmul <2 x double> %block737, %splat.splat910
  %1065 = fadd <2 x double> %1063, %1064
  %1066 = fmul <2 x double> %block740, %splat.splat913
  %1067 = fadd <2 x double> %1065, %1066
  %1068 = fmul <2 x double> %block743, %splat.splat916
  %1069 = fadd <2 x double> %1067, %1068
  %1070 = fmul <2 x double> %block746, %splat.splat919
  %1071 = fadd <2 x double> %1069, %1070
  %1072 = fmul <2 x double> %block749, %splat.splat922
  %1073 = fadd <2 x double> %1071, %1072
  %1074 = fmul <2 x double> %block752, %splat.splat925
  %1075 = fadd <2 x double> %1073, %1074
  %1076 = fmul <2 x double> %block755, %splat.splat928
  %1077 = fadd <2 x double> %1075, %1076
  %1078 = fmul <2 x double> %block758, %splat.splat931
  %1079 = fadd <2 x double> %1077, %1078
  %1080 = fmul <2 x double> %block761, %splat.splat934
  %1081 = fadd <2 x double> %1079, %1080
  %1082 = fmul <2 x double> %block764, %splat.splat937
  %1083 = fadd <2 x double> %1081, %1082
  %1084 = fmul <2 x double> %block767, %splat.splat940
  %1085 = fadd <2 x double> %1083, %1084
  %1086 = fmul <2 x double> %block770, %splat.splat943
  %1087 = fadd <2 x double> %1085, %1086
  %1088 = fmul <2 x double> %block773, %splat.splat946
  %1089 = fadd <2 x double> %1087, %1088
  %1090 = fmul <2 x double> %block776, %splat.splat949
  %1091 = fadd <2 x double> %1089, %1090
  %1092 = fmul <2 x double> %block779, %splat.splat952
  %1093 = fadd <2 x double> %1091, %1092
  %1094 = fmul <2 x double> %block782, %splat.splat955
  %1095 = fadd <2 x double> %1093, %1094
  %1096 = fmul <2 x double> %block785, %splat.splat958
  %1097 = fadd <2 x double> %1095, %1096
  %1098 = shufflevector <2 x double> %1097, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1099 = shufflevector <25 x double> %1060, <25 x double> %1098, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %1100 = fmul <2 x double> %block788, %splat.splat904
  %1101 = fmul <2 x double> %block791, %splat.splat907
  %1102 = fadd <2 x double> %1100, %1101
  %1103 = fmul <2 x double> %block794, %splat.splat910
  %1104 = fadd <2 x double> %1102, %1103
  %1105 = fmul <2 x double> %block797, %splat.splat913
  %1106 = fadd <2 x double> %1104, %1105
  %1107 = fmul <2 x double> %block800, %splat.splat916
  %1108 = fadd <2 x double> %1106, %1107
  %1109 = fmul <2 x double> %block803, %splat.splat919
  %1110 = fadd <2 x double> %1108, %1109
  %1111 = fmul <2 x double> %block806, %splat.splat922
  %1112 = fadd <2 x double> %1110, %1111
  %1113 = fmul <2 x double> %block809, %splat.splat925
  %1114 = fadd <2 x double> %1112, %1113
  %1115 = fmul <2 x double> %block812, %splat.splat928
  %1116 = fadd <2 x double> %1114, %1115
  %1117 = fmul <2 x double> %block815, %splat.splat931
  %1118 = fadd <2 x double> %1116, %1117
  %1119 = fmul <2 x double> %block818, %splat.splat934
  %1120 = fadd <2 x double> %1118, %1119
  %1121 = fmul <2 x double> %block821, %splat.splat937
  %1122 = fadd <2 x double> %1120, %1121
  %1123 = fmul <2 x double> %block824, %splat.splat940
  %1124 = fadd <2 x double> %1122, %1123
  %1125 = fmul <2 x double> %block827, %splat.splat943
  %1126 = fadd <2 x double> %1124, %1125
  %1127 = fmul <2 x double> %block830, %splat.splat946
  %1128 = fadd <2 x double> %1126, %1127
  %1129 = fmul <2 x double> %block833, %splat.splat949
  %1130 = fadd <2 x double> %1128, %1129
  %1131 = fmul <2 x double> %block836, %splat.splat952
  %1132 = fadd <2 x double> %1130, %1131
  %1133 = fmul <2 x double> %block839, %splat.splat955
  %1134 = fadd <2 x double> %1132, %1133
  %1135 = fmul <2 x double> %block842, %splat.splat958
  %1136 = fadd <2 x double> %1134, %1135
  %1137 = shufflevector <2 x double> %1136, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1138 = shufflevector <25 x double> %1099, <25 x double> %1137, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %splat.splatinsert1587 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> zeroinitializer
  %1139 = fmul <1 x double> %block845, %splat.splatinsert1587
  %splat.splatinsert1590 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 1>
  %1140 = fmul <1 x double> %block848, %splat.splatinsert1590
  %1141 = fadd <1 x double> %1139, %1140
  %splat.splatinsert1593 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 2>
  %1142 = fmul <1 x double> %block851, %splat.splatinsert1593
  %1143 = fadd <1 x double> %1141, %1142
  %splat.splatinsert1596 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 3>
  %1144 = fmul <1 x double> %block854, %splat.splatinsert1596
  %1145 = fadd <1 x double> %1143, %1144
  %splat.splatinsert1599 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 4>
  %1146 = fmul <1 x double> %block857, %splat.splatinsert1599
  %1147 = fadd <1 x double> %1145, %1146
  %splat.splatinsert1602 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 5>
  %1148 = fmul <1 x double> %block860, %splat.splatinsert1602
  %1149 = fadd <1 x double> %1147, %1148
  %splat.splatinsert1605 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 6>
  %1150 = fmul <1 x double> %block863, %splat.splatinsert1605
  %1151 = fadd <1 x double> %1149, %1150
  %splat.splatinsert1608 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 7>
  %1152 = fmul <1 x double> %block866, %splat.splatinsert1608
  %1153 = fadd <1 x double> %1151, %1152
  %splat.splatinsert1611 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 8>
  %1154 = fmul <1 x double> %block869, %splat.splatinsert1611
  %1155 = fadd <1 x double> %1153, %1154
  %splat.splatinsert1614 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 9>
  %1156 = fmul <1 x double> %block872, %splat.splatinsert1614
  %1157 = fadd <1 x double> %1155, %1156
  %splat.splatinsert1617 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 10>
  %1158 = fmul <1 x double> %block875, %splat.splatinsert1617
  %1159 = fadd <1 x double> %1157, %1158
  %splat.splatinsert1620 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 11>
  %1160 = fmul <1 x double> %block878, %splat.splatinsert1620
  %1161 = fadd <1 x double> %1159, %1160
  %splat.splatinsert1623 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 12>
  %1162 = fmul <1 x double> %block881, %splat.splatinsert1623
  %1163 = fadd <1 x double> %1161, %1162
  %splat.splatinsert1626 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 13>
  %1164 = fmul <1 x double> %block884, %splat.splatinsert1626
  %1165 = fadd <1 x double> %1163, %1164
  %splat.splatinsert1629 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 14>
  %1166 = fmul <1 x double> %block887, %splat.splatinsert1629
  %1167 = fadd <1 x double> %1165, %1166
  %splat.splatinsert1632 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 15>
  %1168 = fmul <1 x double> %block890, %splat.splatinsert1632
  %1169 = fadd <1 x double> %1167, %1168
  %splat.splatinsert1635 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 16>
  %1170 = fmul <1 x double> %block893, %splat.splatinsert1635
  %1171 = fadd <1 x double> %1169, %1170
  %splat.splatinsert1638 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 17>
  %1172 = fmul <1 x double> %block896, %splat.splatinsert1638
  %1173 = fadd <1 x double> %1171, %1172
  %splat.splatinsert1641 = shufflevector <19 x double> %col.load145, <19 x double> undef, <1 x i32> <i32 18>
  %1174 = fmul <1 x double> %block899, %splat.splatinsert1641
  %1175 = fadd <1 x double> %1173, %1174
  %1176 = shufflevector <1 x double> %1175, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1177 = shufflevector <25 x double> %1138, <25 x double> %1176, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  %splat.splat1645 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> zeroinitializer
  %1178 = fmul <2 x double> %block, %splat.splat1645
  %splat.splat1648 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %1179 = fmul <2 x double> %block164, %splat.splat1648
  %1180 = fadd <2 x double> %1178, %1179
  %splat.splat1651 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %1181 = fmul <2 x double> %block167, %splat.splat1651
  %1182 = fadd <2 x double> %1180, %1181
  %splat.splat1654 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %1183 = fmul <2 x double> %block170, %splat.splat1654
  %1184 = fadd <2 x double> %1182, %1183
  %splat.splat1657 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %1185 = fmul <2 x double> %block173, %splat.splat1657
  %1186 = fadd <2 x double> %1184, %1185
  %splat.splat1660 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %1187 = fmul <2 x double> %block176, %splat.splat1660
  %1188 = fadd <2 x double> %1186, %1187
  %splat.splat1663 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %1189 = fmul <2 x double> %block179, %splat.splat1663
  %1190 = fadd <2 x double> %1188, %1189
  %splat.splat1666 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %1191 = fmul <2 x double> %block182, %splat.splat1666
  %1192 = fadd <2 x double> %1190, %1191
  %splat.splat1669 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %1193 = fmul <2 x double> %block185, %splat.splat1669
  %1194 = fadd <2 x double> %1192, %1193
  %splat.splat1672 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %1195 = fmul <2 x double> %block188, %splat.splat1672
  %1196 = fadd <2 x double> %1194, %1195
  %splat.splat1675 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %1197 = fmul <2 x double> %block191, %splat.splat1675
  %1198 = fadd <2 x double> %1196, %1197
  %splat.splat1678 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %1199 = fmul <2 x double> %block194, %splat.splat1678
  %1200 = fadd <2 x double> %1198, %1199
  %splat.splat1681 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %1201 = fmul <2 x double> %block197, %splat.splat1681
  %1202 = fadd <2 x double> %1200, %1201
  %splat.splat1684 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %1203 = fmul <2 x double> %block200, %splat.splat1684
  %1204 = fadd <2 x double> %1202, %1203
  %splat.splat1687 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %1205 = fmul <2 x double> %block203, %splat.splat1687
  %1206 = fadd <2 x double> %1204, %1205
  %splat.splat1690 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %1207 = fmul <2 x double> %block206, %splat.splat1690
  %1208 = fadd <2 x double> %1206, %1207
  %splat.splat1693 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %1209 = fmul <2 x double> %block209, %splat.splat1693
  %1210 = fadd <2 x double> %1208, %1209
  %splat.splat1696 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %1211 = fmul <2 x double> %block212, %splat.splat1696
  %1212 = fadd <2 x double> %1210, %1211
  %splat.splat1699 = shufflevector <19 x double> %col.load147, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %1213 = fmul <2 x double> %block215, %splat.splat1699
  %1214 = fadd <2 x double> %1212, %1213
  %1215 = shufflevector <2 x double> %1214, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1216 = fmul <2 x double> %block218, %splat.splat1645
  %1217 = fmul <2 x double> %block221, %splat.splat1648
  %1218 = fadd <2 x double> %1216, %1217
  %1219 = fmul <2 x double> %block224, %splat.splat1651
  %1220 = fadd <2 x double> %1218, %1219
  %1221 = fmul <2 x double> %block227, %splat.splat1654
  %1222 = fadd <2 x double> %1220, %1221
  %1223 = fmul <2 x double> %block230, %splat.splat1657
  %1224 = fadd <2 x double> %1222, %1223
  %1225 = fmul <2 x double> %block233, %splat.splat1660
  %1226 = fadd <2 x double> %1224, %1225
  %1227 = fmul <2 x double> %block236, %splat.splat1663
  %1228 = fadd <2 x double> %1226, %1227
  %1229 = fmul <2 x double> %block239, %splat.splat1666
  %1230 = fadd <2 x double> %1228, %1229
  %1231 = fmul <2 x double> %block242, %splat.splat1669
  %1232 = fadd <2 x double> %1230, %1231
  %1233 = fmul <2 x double> %block245, %splat.splat1672
  %1234 = fadd <2 x double> %1232, %1233
  %1235 = fmul <2 x double> %block248, %splat.splat1675
  %1236 = fadd <2 x double> %1234, %1235
  %1237 = fmul <2 x double> %block251, %splat.splat1678
  %1238 = fadd <2 x double> %1236, %1237
  %1239 = fmul <2 x double> %block254, %splat.splat1681
  %1240 = fadd <2 x double> %1238, %1239
  %1241 = fmul <2 x double> %block257, %splat.splat1684
  %1242 = fadd <2 x double> %1240, %1241
  %1243 = fmul <2 x double> %block260, %splat.splat1687
  %1244 = fadd <2 x double> %1242, %1243
  %1245 = fmul <2 x double> %block263, %splat.splat1690
  %1246 = fadd <2 x double> %1244, %1245
  %1247 = fmul <2 x double> %block266, %splat.splat1693
  %1248 = fadd <2 x double> %1246, %1247
  %1249 = fmul <2 x double> %block269, %splat.splat1696
  %1250 = fadd <2 x double> %1248, %1249
  %1251 = fmul <2 x double> %block272, %splat.splat1699
  %1252 = fadd <2 x double> %1250, %1251
  %1253 = shufflevector <2 x double> %1252, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1254 = shufflevector <25 x double> %1215, <25 x double> %1253, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1255 = fmul <2 x double> %block275, %splat.splat1645
  %1256 = fmul <2 x double> %block278, %splat.splat1648
  %1257 = fadd <2 x double> %1255, %1256
  %1258 = fmul <2 x double> %block281, %splat.splat1651
  %1259 = fadd <2 x double> %1257, %1258
  %1260 = fmul <2 x double> %block284, %splat.splat1654
  %1261 = fadd <2 x double> %1259, %1260
  %1262 = fmul <2 x double> %block287, %splat.splat1657
  %1263 = fadd <2 x double> %1261, %1262
  %1264 = fmul <2 x double> %block290, %splat.splat1660
  %1265 = fadd <2 x double> %1263, %1264
  %1266 = fmul <2 x double> %block293, %splat.splat1663
  %1267 = fadd <2 x double> %1265, %1266
  %1268 = fmul <2 x double> %block296, %splat.splat1666
  %1269 = fadd <2 x double> %1267, %1268
  %1270 = fmul <2 x double> %block299, %splat.splat1669
  %1271 = fadd <2 x double> %1269, %1270
  %1272 = fmul <2 x double> %block302, %splat.splat1672
  %1273 = fadd <2 x double> %1271, %1272
  %1274 = fmul <2 x double> %block305, %splat.splat1675
  %1275 = fadd <2 x double> %1273, %1274
  %1276 = fmul <2 x double> %block308, %splat.splat1678
  %1277 = fadd <2 x double> %1275, %1276
  %1278 = fmul <2 x double> %block311, %splat.splat1681
  %1279 = fadd <2 x double> %1277, %1278
  %1280 = fmul <2 x double> %block314, %splat.splat1684
  %1281 = fadd <2 x double> %1279, %1280
  %1282 = fmul <2 x double> %block317, %splat.splat1687
  %1283 = fadd <2 x double> %1281, %1282
  %1284 = fmul <2 x double> %block320, %splat.splat1690
  %1285 = fadd <2 x double> %1283, %1284
  %1286 = fmul <2 x double> %block323, %splat.splat1693
  %1287 = fadd <2 x double> %1285, %1286
  %1288 = fmul <2 x double> %block326, %splat.splat1696
  %1289 = fadd <2 x double> %1287, %1288
  %1290 = fmul <2 x double> %block329, %splat.splat1699
  %1291 = fadd <2 x double> %1289, %1290
  %1292 = shufflevector <2 x double> %1291, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1293 = shufflevector <25 x double> %1254, <25 x double> %1292, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1294 = fmul <2 x double> %block332, %splat.splat1645
  %1295 = fmul <2 x double> %block335, %splat.splat1648
  %1296 = fadd <2 x double> %1294, %1295
  %1297 = fmul <2 x double> %block338, %splat.splat1651
  %1298 = fadd <2 x double> %1296, %1297
  %1299 = fmul <2 x double> %block341, %splat.splat1654
  %1300 = fadd <2 x double> %1298, %1299
  %1301 = fmul <2 x double> %block344, %splat.splat1657
  %1302 = fadd <2 x double> %1300, %1301
  %1303 = fmul <2 x double> %block347, %splat.splat1660
  %1304 = fadd <2 x double> %1302, %1303
  %1305 = fmul <2 x double> %block350, %splat.splat1663
  %1306 = fadd <2 x double> %1304, %1305
  %1307 = fmul <2 x double> %block353, %splat.splat1666
  %1308 = fadd <2 x double> %1306, %1307
  %1309 = fmul <2 x double> %block356, %splat.splat1669
  %1310 = fadd <2 x double> %1308, %1309
  %1311 = fmul <2 x double> %block359, %splat.splat1672
  %1312 = fadd <2 x double> %1310, %1311
  %1313 = fmul <2 x double> %block362, %splat.splat1675
  %1314 = fadd <2 x double> %1312, %1313
  %1315 = fmul <2 x double> %block365, %splat.splat1678
  %1316 = fadd <2 x double> %1314, %1315
  %1317 = fmul <2 x double> %block368, %splat.splat1681
  %1318 = fadd <2 x double> %1316, %1317
  %1319 = fmul <2 x double> %block371, %splat.splat1684
  %1320 = fadd <2 x double> %1318, %1319
  %1321 = fmul <2 x double> %block374, %splat.splat1687
  %1322 = fadd <2 x double> %1320, %1321
  %1323 = fmul <2 x double> %block377, %splat.splat1690
  %1324 = fadd <2 x double> %1322, %1323
  %1325 = fmul <2 x double> %block380, %splat.splat1693
  %1326 = fadd <2 x double> %1324, %1325
  %1327 = fmul <2 x double> %block383, %splat.splat1696
  %1328 = fadd <2 x double> %1326, %1327
  %1329 = fmul <2 x double> %block386, %splat.splat1699
  %1330 = fadd <2 x double> %1328, %1329
  %1331 = shufflevector <2 x double> %1330, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1332 = shufflevector <25 x double> %1293, <25 x double> %1331, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1333 = fmul <2 x double> %block389, %splat.splat1645
  %1334 = fmul <2 x double> %block392, %splat.splat1648
  %1335 = fadd <2 x double> %1333, %1334
  %1336 = fmul <2 x double> %block395, %splat.splat1651
  %1337 = fadd <2 x double> %1335, %1336
  %1338 = fmul <2 x double> %block398, %splat.splat1654
  %1339 = fadd <2 x double> %1337, %1338
  %1340 = fmul <2 x double> %block401, %splat.splat1657
  %1341 = fadd <2 x double> %1339, %1340
  %1342 = fmul <2 x double> %block404, %splat.splat1660
  %1343 = fadd <2 x double> %1341, %1342
  %1344 = fmul <2 x double> %block407, %splat.splat1663
  %1345 = fadd <2 x double> %1343, %1344
  %1346 = fmul <2 x double> %block410, %splat.splat1666
  %1347 = fadd <2 x double> %1345, %1346
  %1348 = fmul <2 x double> %block413, %splat.splat1669
  %1349 = fadd <2 x double> %1347, %1348
  %1350 = fmul <2 x double> %block416, %splat.splat1672
  %1351 = fadd <2 x double> %1349, %1350
  %1352 = fmul <2 x double> %block419, %splat.splat1675
  %1353 = fadd <2 x double> %1351, %1352
  %1354 = fmul <2 x double> %block422, %splat.splat1678
  %1355 = fadd <2 x double> %1353, %1354
  %1356 = fmul <2 x double> %block425, %splat.splat1681
  %1357 = fadd <2 x double> %1355, %1356
  %1358 = fmul <2 x double> %block428, %splat.splat1684
  %1359 = fadd <2 x double> %1357, %1358
  %1360 = fmul <2 x double> %block431, %splat.splat1687
  %1361 = fadd <2 x double> %1359, %1360
  %1362 = fmul <2 x double> %block434, %splat.splat1690
  %1363 = fadd <2 x double> %1361, %1362
  %1364 = fmul <2 x double> %block437, %splat.splat1693
  %1365 = fadd <2 x double> %1363, %1364
  %1366 = fmul <2 x double> %block440, %splat.splat1696
  %1367 = fadd <2 x double> %1365, %1366
  %1368 = fmul <2 x double> %block443, %splat.splat1699
  %1369 = fadd <2 x double> %1367, %1368
  %1370 = shufflevector <2 x double> %1369, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1371 = shufflevector <25 x double> %1332, <25 x double> %1370, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1372 = fmul <2 x double> %block446, %splat.splat1645
  %1373 = fmul <2 x double> %block449, %splat.splat1648
  %1374 = fadd <2 x double> %1372, %1373
  %1375 = fmul <2 x double> %block452, %splat.splat1651
  %1376 = fadd <2 x double> %1374, %1375
  %1377 = fmul <2 x double> %block455, %splat.splat1654
  %1378 = fadd <2 x double> %1376, %1377
  %1379 = fmul <2 x double> %block458, %splat.splat1657
  %1380 = fadd <2 x double> %1378, %1379
  %1381 = fmul <2 x double> %block461, %splat.splat1660
  %1382 = fadd <2 x double> %1380, %1381
  %1383 = fmul <2 x double> %block464, %splat.splat1663
  %1384 = fadd <2 x double> %1382, %1383
  %1385 = fmul <2 x double> %block467, %splat.splat1666
  %1386 = fadd <2 x double> %1384, %1385
  %1387 = fmul <2 x double> %block470, %splat.splat1669
  %1388 = fadd <2 x double> %1386, %1387
  %1389 = fmul <2 x double> %block473, %splat.splat1672
  %1390 = fadd <2 x double> %1388, %1389
  %1391 = fmul <2 x double> %block476, %splat.splat1675
  %1392 = fadd <2 x double> %1390, %1391
  %1393 = fmul <2 x double> %block479, %splat.splat1678
  %1394 = fadd <2 x double> %1392, %1393
  %1395 = fmul <2 x double> %block482, %splat.splat1681
  %1396 = fadd <2 x double> %1394, %1395
  %1397 = fmul <2 x double> %block485, %splat.splat1684
  %1398 = fadd <2 x double> %1396, %1397
  %1399 = fmul <2 x double> %block488, %splat.splat1687
  %1400 = fadd <2 x double> %1398, %1399
  %1401 = fmul <2 x double> %block491, %splat.splat1690
  %1402 = fadd <2 x double> %1400, %1401
  %1403 = fmul <2 x double> %block494, %splat.splat1693
  %1404 = fadd <2 x double> %1402, %1403
  %1405 = fmul <2 x double> %block497, %splat.splat1696
  %1406 = fadd <2 x double> %1404, %1405
  %1407 = fmul <2 x double> %block500, %splat.splat1699
  %1408 = fadd <2 x double> %1406, %1407
  %1409 = shufflevector <2 x double> %1408, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1410 = shufflevector <25 x double> %1371, <25 x double> %1409, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1411 = fmul <2 x double> %block503, %splat.splat1645
  %1412 = fmul <2 x double> %block506, %splat.splat1648
  %1413 = fadd <2 x double> %1411, %1412
  %1414 = fmul <2 x double> %block509, %splat.splat1651
  %1415 = fadd <2 x double> %1413, %1414
  %1416 = fmul <2 x double> %block512, %splat.splat1654
  %1417 = fadd <2 x double> %1415, %1416
  %1418 = fmul <2 x double> %block515, %splat.splat1657
  %1419 = fadd <2 x double> %1417, %1418
  %1420 = fmul <2 x double> %block518, %splat.splat1660
  %1421 = fadd <2 x double> %1419, %1420
  %1422 = fmul <2 x double> %block521, %splat.splat1663
  %1423 = fadd <2 x double> %1421, %1422
  %1424 = fmul <2 x double> %block524, %splat.splat1666
  %1425 = fadd <2 x double> %1423, %1424
  %1426 = fmul <2 x double> %block527, %splat.splat1669
  %1427 = fadd <2 x double> %1425, %1426
  %1428 = fmul <2 x double> %block530, %splat.splat1672
  %1429 = fadd <2 x double> %1427, %1428
  %1430 = fmul <2 x double> %block533, %splat.splat1675
  %1431 = fadd <2 x double> %1429, %1430
  %1432 = fmul <2 x double> %block536, %splat.splat1678
  %1433 = fadd <2 x double> %1431, %1432
  %1434 = fmul <2 x double> %block539, %splat.splat1681
  %1435 = fadd <2 x double> %1433, %1434
  %1436 = fmul <2 x double> %block542, %splat.splat1684
  %1437 = fadd <2 x double> %1435, %1436
  %1438 = fmul <2 x double> %block545, %splat.splat1687
  %1439 = fadd <2 x double> %1437, %1438
  %1440 = fmul <2 x double> %block548, %splat.splat1690
  %1441 = fadd <2 x double> %1439, %1440
  %1442 = fmul <2 x double> %block551, %splat.splat1693
  %1443 = fadd <2 x double> %1441, %1442
  %1444 = fmul <2 x double> %block554, %splat.splat1696
  %1445 = fadd <2 x double> %1443, %1444
  %1446 = fmul <2 x double> %block557, %splat.splat1699
  %1447 = fadd <2 x double> %1445, %1446
  %1448 = shufflevector <2 x double> %1447, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1449 = shufflevector <25 x double> %1410, <25 x double> %1448, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1450 = fmul <2 x double> %block560, %splat.splat1645
  %1451 = fmul <2 x double> %block563, %splat.splat1648
  %1452 = fadd <2 x double> %1450, %1451
  %1453 = fmul <2 x double> %block566, %splat.splat1651
  %1454 = fadd <2 x double> %1452, %1453
  %1455 = fmul <2 x double> %block569, %splat.splat1654
  %1456 = fadd <2 x double> %1454, %1455
  %1457 = fmul <2 x double> %block572, %splat.splat1657
  %1458 = fadd <2 x double> %1456, %1457
  %1459 = fmul <2 x double> %block575, %splat.splat1660
  %1460 = fadd <2 x double> %1458, %1459
  %1461 = fmul <2 x double> %block578, %splat.splat1663
  %1462 = fadd <2 x double> %1460, %1461
  %1463 = fmul <2 x double> %block581, %splat.splat1666
  %1464 = fadd <2 x double> %1462, %1463
  %1465 = fmul <2 x double> %block584, %splat.splat1669
  %1466 = fadd <2 x double> %1464, %1465
  %1467 = fmul <2 x double> %block587, %splat.splat1672
  %1468 = fadd <2 x double> %1466, %1467
  %1469 = fmul <2 x double> %block590, %splat.splat1675
  %1470 = fadd <2 x double> %1468, %1469
  %1471 = fmul <2 x double> %block593, %splat.splat1678
  %1472 = fadd <2 x double> %1470, %1471
  %1473 = fmul <2 x double> %block596, %splat.splat1681
  %1474 = fadd <2 x double> %1472, %1473
  %1475 = fmul <2 x double> %block599, %splat.splat1684
  %1476 = fadd <2 x double> %1474, %1475
  %1477 = fmul <2 x double> %block602, %splat.splat1687
  %1478 = fadd <2 x double> %1476, %1477
  %1479 = fmul <2 x double> %block605, %splat.splat1690
  %1480 = fadd <2 x double> %1478, %1479
  %1481 = fmul <2 x double> %block608, %splat.splat1693
  %1482 = fadd <2 x double> %1480, %1481
  %1483 = fmul <2 x double> %block611, %splat.splat1696
  %1484 = fadd <2 x double> %1482, %1483
  %1485 = fmul <2 x double> %block614, %splat.splat1699
  %1486 = fadd <2 x double> %1484, %1485
  %1487 = shufflevector <2 x double> %1486, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1488 = shufflevector <25 x double> %1449, <25 x double> %1487, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1489 = fmul <2 x double> %block617, %splat.splat1645
  %1490 = fmul <2 x double> %block620, %splat.splat1648
  %1491 = fadd <2 x double> %1489, %1490
  %1492 = fmul <2 x double> %block623, %splat.splat1651
  %1493 = fadd <2 x double> %1491, %1492
  %1494 = fmul <2 x double> %block626, %splat.splat1654
  %1495 = fadd <2 x double> %1493, %1494
  %1496 = fmul <2 x double> %block629, %splat.splat1657
  %1497 = fadd <2 x double> %1495, %1496
  %1498 = fmul <2 x double> %block632, %splat.splat1660
  %1499 = fadd <2 x double> %1497, %1498
  %1500 = fmul <2 x double> %block635, %splat.splat1663
  %1501 = fadd <2 x double> %1499, %1500
  %1502 = fmul <2 x double> %block638, %splat.splat1666
  %1503 = fadd <2 x double> %1501, %1502
  %1504 = fmul <2 x double> %block641, %splat.splat1669
  %1505 = fadd <2 x double> %1503, %1504
  %1506 = fmul <2 x double> %block644, %splat.splat1672
  %1507 = fadd <2 x double> %1505, %1506
  %1508 = fmul <2 x double> %block647, %splat.splat1675
  %1509 = fadd <2 x double> %1507, %1508
  %1510 = fmul <2 x double> %block650, %splat.splat1678
  %1511 = fadd <2 x double> %1509, %1510
  %1512 = fmul <2 x double> %block653, %splat.splat1681
  %1513 = fadd <2 x double> %1511, %1512
  %1514 = fmul <2 x double> %block656, %splat.splat1684
  %1515 = fadd <2 x double> %1513, %1514
  %1516 = fmul <2 x double> %block659, %splat.splat1687
  %1517 = fadd <2 x double> %1515, %1516
  %1518 = fmul <2 x double> %block662, %splat.splat1690
  %1519 = fadd <2 x double> %1517, %1518
  %1520 = fmul <2 x double> %block665, %splat.splat1693
  %1521 = fadd <2 x double> %1519, %1520
  %1522 = fmul <2 x double> %block668, %splat.splat1696
  %1523 = fadd <2 x double> %1521, %1522
  %1524 = fmul <2 x double> %block671, %splat.splat1699
  %1525 = fadd <2 x double> %1523, %1524
  %1526 = shufflevector <2 x double> %1525, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1527 = shufflevector <25 x double> %1488, <25 x double> %1526, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1528 = fmul <2 x double> %block674, %splat.splat1645
  %1529 = fmul <2 x double> %block677, %splat.splat1648
  %1530 = fadd <2 x double> %1528, %1529
  %1531 = fmul <2 x double> %block680, %splat.splat1651
  %1532 = fadd <2 x double> %1530, %1531
  %1533 = fmul <2 x double> %block683, %splat.splat1654
  %1534 = fadd <2 x double> %1532, %1533
  %1535 = fmul <2 x double> %block686, %splat.splat1657
  %1536 = fadd <2 x double> %1534, %1535
  %1537 = fmul <2 x double> %block689, %splat.splat1660
  %1538 = fadd <2 x double> %1536, %1537
  %1539 = fmul <2 x double> %block692, %splat.splat1663
  %1540 = fadd <2 x double> %1538, %1539
  %1541 = fmul <2 x double> %block695, %splat.splat1666
  %1542 = fadd <2 x double> %1540, %1541
  %1543 = fmul <2 x double> %block698, %splat.splat1669
  %1544 = fadd <2 x double> %1542, %1543
  %1545 = fmul <2 x double> %block701, %splat.splat1672
  %1546 = fadd <2 x double> %1544, %1545
  %1547 = fmul <2 x double> %block704, %splat.splat1675
  %1548 = fadd <2 x double> %1546, %1547
  %1549 = fmul <2 x double> %block707, %splat.splat1678
  %1550 = fadd <2 x double> %1548, %1549
  %1551 = fmul <2 x double> %block710, %splat.splat1681
  %1552 = fadd <2 x double> %1550, %1551
  %1553 = fmul <2 x double> %block713, %splat.splat1684
  %1554 = fadd <2 x double> %1552, %1553
  %1555 = fmul <2 x double> %block716, %splat.splat1687
  %1556 = fadd <2 x double> %1554, %1555
  %1557 = fmul <2 x double> %block719, %splat.splat1690
  %1558 = fadd <2 x double> %1556, %1557
  %1559 = fmul <2 x double> %block722, %splat.splat1693
  %1560 = fadd <2 x double> %1558, %1559
  %1561 = fmul <2 x double> %block725, %splat.splat1696
  %1562 = fadd <2 x double> %1560, %1561
  %1563 = fmul <2 x double> %block728, %splat.splat1699
  %1564 = fadd <2 x double> %1562, %1563
  %1565 = shufflevector <2 x double> %1564, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1566 = shufflevector <25 x double> %1527, <25 x double> %1565, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1567 = fmul <2 x double> %block731, %splat.splat1645
  %1568 = fmul <2 x double> %block734, %splat.splat1648
  %1569 = fadd <2 x double> %1567, %1568
  %1570 = fmul <2 x double> %block737, %splat.splat1651
  %1571 = fadd <2 x double> %1569, %1570
  %1572 = fmul <2 x double> %block740, %splat.splat1654
  %1573 = fadd <2 x double> %1571, %1572
  %1574 = fmul <2 x double> %block743, %splat.splat1657
  %1575 = fadd <2 x double> %1573, %1574
  %1576 = fmul <2 x double> %block746, %splat.splat1660
  %1577 = fadd <2 x double> %1575, %1576
  %1578 = fmul <2 x double> %block749, %splat.splat1663
  %1579 = fadd <2 x double> %1577, %1578
  %1580 = fmul <2 x double> %block752, %splat.splat1666
  %1581 = fadd <2 x double> %1579, %1580
  %1582 = fmul <2 x double> %block755, %splat.splat1669
  %1583 = fadd <2 x double> %1581, %1582
  %1584 = fmul <2 x double> %block758, %splat.splat1672
  %1585 = fadd <2 x double> %1583, %1584
  %1586 = fmul <2 x double> %block761, %splat.splat1675
  %1587 = fadd <2 x double> %1585, %1586
  %1588 = fmul <2 x double> %block764, %splat.splat1678
  %1589 = fadd <2 x double> %1587, %1588
  %1590 = fmul <2 x double> %block767, %splat.splat1681
  %1591 = fadd <2 x double> %1589, %1590
  %1592 = fmul <2 x double> %block770, %splat.splat1684
  %1593 = fadd <2 x double> %1591, %1592
  %1594 = fmul <2 x double> %block773, %splat.splat1687
  %1595 = fadd <2 x double> %1593, %1594
  %1596 = fmul <2 x double> %block776, %splat.splat1690
  %1597 = fadd <2 x double> %1595, %1596
  %1598 = fmul <2 x double> %block779, %splat.splat1693
  %1599 = fadd <2 x double> %1597, %1598
  %1600 = fmul <2 x double> %block782, %splat.splat1696
  %1601 = fadd <2 x double> %1599, %1600
  %1602 = fmul <2 x double> %block785, %splat.splat1699
  %1603 = fadd <2 x double> %1601, %1602
  %1604 = shufflevector <2 x double> %1603, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1605 = shufflevector <25 x double> %1566, <25 x double> %1604, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %1606 = fmul <2 x double> %block788, %splat.splat1645
  %1607 = fmul <2 x double> %block791, %splat.splat1648
  %1608 = fadd <2 x double> %1606, %1607
  %1609 = fmul <2 x double> %block794, %splat.splat1651
  %1610 = fadd <2 x double> %1608, %1609
  %1611 = fmul <2 x double> %block797, %splat.splat1654
  %1612 = fadd <2 x double> %1610, %1611
  %1613 = fmul <2 x double> %block800, %splat.splat1657
  %1614 = fadd <2 x double> %1612, %1613
  %1615 = fmul <2 x double> %block803, %splat.splat1660
  %1616 = fadd <2 x double> %1614, %1615
  %1617 = fmul <2 x double> %block806, %splat.splat1663
  %1618 = fadd <2 x double> %1616, %1617
  %1619 = fmul <2 x double> %block809, %splat.splat1666
  %1620 = fadd <2 x double> %1618, %1619
  %1621 = fmul <2 x double> %block812, %splat.splat1669
  %1622 = fadd <2 x double> %1620, %1621
  %1623 = fmul <2 x double> %block815, %splat.splat1672
  %1624 = fadd <2 x double> %1622, %1623
  %1625 = fmul <2 x double> %block818, %splat.splat1675
  %1626 = fadd <2 x double> %1624, %1625
  %1627 = fmul <2 x double> %block821, %splat.splat1678
  %1628 = fadd <2 x double> %1626, %1627
  %1629 = fmul <2 x double> %block824, %splat.splat1681
  %1630 = fadd <2 x double> %1628, %1629
  %1631 = fmul <2 x double> %block827, %splat.splat1684
  %1632 = fadd <2 x double> %1630, %1631
  %1633 = fmul <2 x double> %block830, %splat.splat1687
  %1634 = fadd <2 x double> %1632, %1633
  %1635 = fmul <2 x double> %block833, %splat.splat1690
  %1636 = fadd <2 x double> %1634, %1635
  %1637 = fmul <2 x double> %block836, %splat.splat1693
  %1638 = fadd <2 x double> %1636, %1637
  %1639 = fmul <2 x double> %block839, %splat.splat1696
  %1640 = fadd <2 x double> %1638, %1639
  %1641 = fmul <2 x double> %block842, %splat.splat1699
  %1642 = fadd <2 x double> %1640, %1641
  %1643 = shufflevector <2 x double> %1642, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1644 = shufflevector <25 x double> %1605, <25 x double> %1643, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %splat.splatinsert2328 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> zeroinitializer
  %1645 = fmul <1 x double> %block845, %splat.splatinsert2328
  %splat.splatinsert2331 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 1>
  %1646 = fmul <1 x double> %block848, %splat.splatinsert2331
  %1647 = fadd <1 x double> %1645, %1646
  %splat.splatinsert2334 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 2>
  %1648 = fmul <1 x double> %block851, %splat.splatinsert2334
  %1649 = fadd <1 x double> %1647, %1648
  %splat.splatinsert2337 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 3>
  %1650 = fmul <1 x double> %block854, %splat.splatinsert2337
  %1651 = fadd <1 x double> %1649, %1650
  %splat.splatinsert2340 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 4>
  %1652 = fmul <1 x double> %block857, %splat.splatinsert2340
  %1653 = fadd <1 x double> %1651, %1652
  %splat.splatinsert2343 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 5>
  %1654 = fmul <1 x double> %block860, %splat.splatinsert2343
  %1655 = fadd <1 x double> %1653, %1654
  %splat.splatinsert2346 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 6>
  %1656 = fmul <1 x double> %block863, %splat.splatinsert2346
  %1657 = fadd <1 x double> %1655, %1656
  %splat.splatinsert2349 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 7>
  %1658 = fmul <1 x double> %block866, %splat.splatinsert2349
  %1659 = fadd <1 x double> %1657, %1658
  %splat.splatinsert2352 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 8>
  %1660 = fmul <1 x double> %block869, %splat.splatinsert2352
  %1661 = fadd <1 x double> %1659, %1660
  %splat.splatinsert2355 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 9>
  %1662 = fmul <1 x double> %block872, %splat.splatinsert2355
  %1663 = fadd <1 x double> %1661, %1662
  %splat.splatinsert2358 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 10>
  %1664 = fmul <1 x double> %block875, %splat.splatinsert2358
  %1665 = fadd <1 x double> %1663, %1664
  %splat.splatinsert2361 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 11>
  %1666 = fmul <1 x double> %block878, %splat.splatinsert2361
  %1667 = fadd <1 x double> %1665, %1666
  %splat.splatinsert2364 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 12>
  %1668 = fmul <1 x double> %block881, %splat.splatinsert2364
  %1669 = fadd <1 x double> %1667, %1668
  %splat.splatinsert2367 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 13>
  %1670 = fmul <1 x double> %block884, %splat.splatinsert2367
  %1671 = fadd <1 x double> %1669, %1670
  %splat.splatinsert2370 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 14>
  %1672 = fmul <1 x double> %block887, %splat.splatinsert2370
  %1673 = fadd <1 x double> %1671, %1672
  %splat.splatinsert2373 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 15>
  %1674 = fmul <1 x double> %block890, %splat.splatinsert2373
  %1675 = fadd <1 x double> %1673, %1674
  %splat.splatinsert2376 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 16>
  %1676 = fmul <1 x double> %block893, %splat.splatinsert2376
  %1677 = fadd <1 x double> %1675, %1676
  %splat.splatinsert2379 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 17>
  %1678 = fmul <1 x double> %block896, %splat.splatinsert2379
  %1679 = fadd <1 x double> %1677, %1678
  %splat.splatinsert2382 = shufflevector <19 x double> %col.load147, <19 x double> undef, <1 x i32> <i32 18>
  %1680 = fmul <1 x double> %block899, %splat.splatinsert2382
  %1681 = fadd <1 x double> %1679, %1680
  %1682 = shufflevector <1 x double> %1681, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1683 = shufflevector <25 x double> %1644, <25 x double> %1682, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  %splat.splat2386 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> zeroinitializer
  %1684 = fmul <2 x double> %block, %splat.splat2386
  %splat.splat2389 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %1685 = fmul <2 x double> %block164, %splat.splat2389
  %1686 = fadd <2 x double> %1684, %1685
  %splat.splat2392 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %1687 = fmul <2 x double> %block167, %splat.splat2392
  %1688 = fadd <2 x double> %1686, %1687
  %splat.splat2395 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %1689 = fmul <2 x double> %block170, %splat.splat2395
  %1690 = fadd <2 x double> %1688, %1689
  %splat.splat2398 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %1691 = fmul <2 x double> %block173, %splat.splat2398
  %1692 = fadd <2 x double> %1690, %1691
  %splat.splat2401 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %1693 = fmul <2 x double> %block176, %splat.splat2401
  %1694 = fadd <2 x double> %1692, %1693
  %splat.splat2404 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %1695 = fmul <2 x double> %block179, %splat.splat2404
  %1696 = fadd <2 x double> %1694, %1695
  %splat.splat2407 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %1697 = fmul <2 x double> %block182, %splat.splat2407
  %1698 = fadd <2 x double> %1696, %1697
  %splat.splat2410 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %1699 = fmul <2 x double> %block185, %splat.splat2410
  %1700 = fadd <2 x double> %1698, %1699
  %splat.splat2413 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %1701 = fmul <2 x double> %block188, %splat.splat2413
  %1702 = fadd <2 x double> %1700, %1701
  %splat.splat2416 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %1703 = fmul <2 x double> %block191, %splat.splat2416
  %1704 = fadd <2 x double> %1702, %1703
  %splat.splat2419 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %1705 = fmul <2 x double> %block194, %splat.splat2419
  %1706 = fadd <2 x double> %1704, %1705
  %splat.splat2422 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %1707 = fmul <2 x double> %block197, %splat.splat2422
  %1708 = fadd <2 x double> %1706, %1707
  %splat.splat2425 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %1709 = fmul <2 x double> %block200, %splat.splat2425
  %1710 = fadd <2 x double> %1708, %1709
  %splat.splat2428 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %1711 = fmul <2 x double> %block203, %splat.splat2428
  %1712 = fadd <2 x double> %1710, %1711
  %splat.splat2431 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %1713 = fmul <2 x double> %block206, %splat.splat2431
  %1714 = fadd <2 x double> %1712, %1713
  %splat.splat2434 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %1715 = fmul <2 x double> %block209, %splat.splat2434
  %1716 = fadd <2 x double> %1714, %1715
  %splat.splat2437 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %1717 = fmul <2 x double> %block212, %splat.splat2437
  %1718 = fadd <2 x double> %1716, %1717
  %splat.splat2440 = shufflevector <19 x double> %col.load149, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %1719 = fmul <2 x double> %block215, %splat.splat2440
  %1720 = fadd <2 x double> %1718, %1719
  %1721 = shufflevector <2 x double> %1720, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1722 = fmul <2 x double> %block218, %splat.splat2386
  %1723 = fmul <2 x double> %block221, %splat.splat2389
  %1724 = fadd <2 x double> %1722, %1723
  %1725 = fmul <2 x double> %block224, %splat.splat2392
  %1726 = fadd <2 x double> %1724, %1725
  %1727 = fmul <2 x double> %block227, %splat.splat2395
  %1728 = fadd <2 x double> %1726, %1727
  %1729 = fmul <2 x double> %block230, %splat.splat2398
  %1730 = fadd <2 x double> %1728, %1729
  %1731 = fmul <2 x double> %block233, %splat.splat2401
  %1732 = fadd <2 x double> %1730, %1731
  %1733 = fmul <2 x double> %block236, %splat.splat2404
  %1734 = fadd <2 x double> %1732, %1733
  %1735 = fmul <2 x double> %block239, %splat.splat2407
  %1736 = fadd <2 x double> %1734, %1735
  %1737 = fmul <2 x double> %block242, %splat.splat2410
  %1738 = fadd <2 x double> %1736, %1737
  %1739 = fmul <2 x double> %block245, %splat.splat2413
  %1740 = fadd <2 x double> %1738, %1739
  %1741 = fmul <2 x double> %block248, %splat.splat2416
  %1742 = fadd <2 x double> %1740, %1741
  %1743 = fmul <2 x double> %block251, %splat.splat2419
  %1744 = fadd <2 x double> %1742, %1743
  %1745 = fmul <2 x double> %block254, %splat.splat2422
  %1746 = fadd <2 x double> %1744, %1745
  %1747 = fmul <2 x double> %block257, %splat.splat2425
  %1748 = fadd <2 x double> %1746, %1747
  %1749 = fmul <2 x double> %block260, %splat.splat2428
  %1750 = fadd <2 x double> %1748, %1749
  %1751 = fmul <2 x double> %block263, %splat.splat2431
  %1752 = fadd <2 x double> %1750, %1751
  %1753 = fmul <2 x double> %block266, %splat.splat2434
  %1754 = fadd <2 x double> %1752, %1753
  %1755 = fmul <2 x double> %block269, %splat.splat2437
  %1756 = fadd <2 x double> %1754, %1755
  %1757 = fmul <2 x double> %block272, %splat.splat2440
  %1758 = fadd <2 x double> %1756, %1757
  %1759 = shufflevector <2 x double> %1758, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1760 = shufflevector <25 x double> %1721, <25 x double> %1759, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1761 = fmul <2 x double> %block275, %splat.splat2386
  %1762 = fmul <2 x double> %block278, %splat.splat2389
  %1763 = fadd <2 x double> %1761, %1762
  %1764 = fmul <2 x double> %block281, %splat.splat2392
  %1765 = fadd <2 x double> %1763, %1764
  %1766 = fmul <2 x double> %block284, %splat.splat2395
  %1767 = fadd <2 x double> %1765, %1766
  %1768 = fmul <2 x double> %block287, %splat.splat2398
  %1769 = fadd <2 x double> %1767, %1768
  %1770 = fmul <2 x double> %block290, %splat.splat2401
  %1771 = fadd <2 x double> %1769, %1770
  %1772 = fmul <2 x double> %block293, %splat.splat2404
  %1773 = fadd <2 x double> %1771, %1772
  %1774 = fmul <2 x double> %block296, %splat.splat2407
  %1775 = fadd <2 x double> %1773, %1774
  %1776 = fmul <2 x double> %block299, %splat.splat2410
  %1777 = fadd <2 x double> %1775, %1776
  %1778 = fmul <2 x double> %block302, %splat.splat2413
  %1779 = fadd <2 x double> %1777, %1778
  %1780 = fmul <2 x double> %block305, %splat.splat2416
  %1781 = fadd <2 x double> %1779, %1780
  %1782 = fmul <2 x double> %block308, %splat.splat2419
  %1783 = fadd <2 x double> %1781, %1782
  %1784 = fmul <2 x double> %block311, %splat.splat2422
  %1785 = fadd <2 x double> %1783, %1784
  %1786 = fmul <2 x double> %block314, %splat.splat2425
  %1787 = fadd <2 x double> %1785, %1786
  %1788 = fmul <2 x double> %block317, %splat.splat2428
  %1789 = fadd <2 x double> %1787, %1788
  %1790 = fmul <2 x double> %block320, %splat.splat2431
  %1791 = fadd <2 x double> %1789, %1790
  %1792 = fmul <2 x double> %block323, %splat.splat2434
  %1793 = fadd <2 x double> %1791, %1792
  %1794 = fmul <2 x double> %block326, %splat.splat2437
  %1795 = fadd <2 x double> %1793, %1794
  %1796 = fmul <2 x double> %block329, %splat.splat2440
  %1797 = fadd <2 x double> %1795, %1796
  %1798 = shufflevector <2 x double> %1797, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1799 = shufflevector <25 x double> %1760, <25 x double> %1798, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1800 = fmul <2 x double> %block332, %splat.splat2386
  %1801 = fmul <2 x double> %block335, %splat.splat2389
  %1802 = fadd <2 x double> %1800, %1801
  %1803 = fmul <2 x double> %block338, %splat.splat2392
  %1804 = fadd <2 x double> %1802, %1803
  %1805 = fmul <2 x double> %block341, %splat.splat2395
  %1806 = fadd <2 x double> %1804, %1805
  %1807 = fmul <2 x double> %block344, %splat.splat2398
  %1808 = fadd <2 x double> %1806, %1807
  %1809 = fmul <2 x double> %block347, %splat.splat2401
  %1810 = fadd <2 x double> %1808, %1809
  %1811 = fmul <2 x double> %block350, %splat.splat2404
  %1812 = fadd <2 x double> %1810, %1811
  %1813 = fmul <2 x double> %block353, %splat.splat2407
  %1814 = fadd <2 x double> %1812, %1813
  %1815 = fmul <2 x double> %block356, %splat.splat2410
  %1816 = fadd <2 x double> %1814, %1815
  %1817 = fmul <2 x double> %block359, %splat.splat2413
  %1818 = fadd <2 x double> %1816, %1817
  %1819 = fmul <2 x double> %block362, %splat.splat2416
  %1820 = fadd <2 x double> %1818, %1819
  %1821 = fmul <2 x double> %block365, %splat.splat2419
  %1822 = fadd <2 x double> %1820, %1821
  %1823 = fmul <2 x double> %block368, %splat.splat2422
  %1824 = fadd <2 x double> %1822, %1823
  %1825 = fmul <2 x double> %block371, %splat.splat2425
  %1826 = fadd <2 x double> %1824, %1825
  %1827 = fmul <2 x double> %block374, %splat.splat2428
  %1828 = fadd <2 x double> %1826, %1827
  %1829 = fmul <2 x double> %block377, %splat.splat2431
  %1830 = fadd <2 x double> %1828, %1829
  %1831 = fmul <2 x double> %block380, %splat.splat2434
  %1832 = fadd <2 x double> %1830, %1831
  %1833 = fmul <2 x double> %block383, %splat.splat2437
  %1834 = fadd <2 x double> %1832, %1833
  %1835 = fmul <2 x double> %block386, %splat.splat2440
  %1836 = fadd <2 x double> %1834, %1835
  %1837 = shufflevector <2 x double> %1836, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1838 = shufflevector <25 x double> %1799, <25 x double> %1837, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1839 = fmul <2 x double> %block389, %splat.splat2386
  %1840 = fmul <2 x double> %block392, %splat.splat2389
  %1841 = fadd <2 x double> %1839, %1840
  %1842 = fmul <2 x double> %block395, %splat.splat2392
  %1843 = fadd <2 x double> %1841, %1842
  %1844 = fmul <2 x double> %block398, %splat.splat2395
  %1845 = fadd <2 x double> %1843, %1844
  %1846 = fmul <2 x double> %block401, %splat.splat2398
  %1847 = fadd <2 x double> %1845, %1846
  %1848 = fmul <2 x double> %block404, %splat.splat2401
  %1849 = fadd <2 x double> %1847, %1848
  %1850 = fmul <2 x double> %block407, %splat.splat2404
  %1851 = fadd <2 x double> %1849, %1850
  %1852 = fmul <2 x double> %block410, %splat.splat2407
  %1853 = fadd <2 x double> %1851, %1852
  %1854 = fmul <2 x double> %block413, %splat.splat2410
  %1855 = fadd <2 x double> %1853, %1854
  %1856 = fmul <2 x double> %block416, %splat.splat2413
  %1857 = fadd <2 x double> %1855, %1856
  %1858 = fmul <2 x double> %block419, %splat.splat2416
  %1859 = fadd <2 x double> %1857, %1858
  %1860 = fmul <2 x double> %block422, %splat.splat2419
  %1861 = fadd <2 x double> %1859, %1860
  %1862 = fmul <2 x double> %block425, %splat.splat2422
  %1863 = fadd <2 x double> %1861, %1862
  %1864 = fmul <2 x double> %block428, %splat.splat2425
  %1865 = fadd <2 x double> %1863, %1864
  %1866 = fmul <2 x double> %block431, %splat.splat2428
  %1867 = fadd <2 x double> %1865, %1866
  %1868 = fmul <2 x double> %block434, %splat.splat2431
  %1869 = fadd <2 x double> %1867, %1868
  %1870 = fmul <2 x double> %block437, %splat.splat2434
  %1871 = fadd <2 x double> %1869, %1870
  %1872 = fmul <2 x double> %block440, %splat.splat2437
  %1873 = fadd <2 x double> %1871, %1872
  %1874 = fmul <2 x double> %block443, %splat.splat2440
  %1875 = fadd <2 x double> %1873, %1874
  %1876 = shufflevector <2 x double> %1875, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1877 = shufflevector <25 x double> %1838, <25 x double> %1876, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1878 = fmul <2 x double> %block446, %splat.splat2386
  %1879 = fmul <2 x double> %block449, %splat.splat2389
  %1880 = fadd <2 x double> %1878, %1879
  %1881 = fmul <2 x double> %block452, %splat.splat2392
  %1882 = fadd <2 x double> %1880, %1881
  %1883 = fmul <2 x double> %block455, %splat.splat2395
  %1884 = fadd <2 x double> %1882, %1883
  %1885 = fmul <2 x double> %block458, %splat.splat2398
  %1886 = fadd <2 x double> %1884, %1885
  %1887 = fmul <2 x double> %block461, %splat.splat2401
  %1888 = fadd <2 x double> %1886, %1887
  %1889 = fmul <2 x double> %block464, %splat.splat2404
  %1890 = fadd <2 x double> %1888, %1889
  %1891 = fmul <2 x double> %block467, %splat.splat2407
  %1892 = fadd <2 x double> %1890, %1891
  %1893 = fmul <2 x double> %block470, %splat.splat2410
  %1894 = fadd <2 x double> %1892, %1893
  %1895 = fmul <2 x double> %block473, %splat.splat2413
  %1896 = fadd <2 x double> %1894, %1895
  %1897 = fmul <2 x double> %block476, %splat.splat2416
  %1898 = fadd <2 x double> %1896, %1897
  %1899 = fmul <2 x double> %block479, %splat.splat2419
  %1900 = fadd <2 x double> %1898, %1899
  %1901 = fmul <2 x double> %block482, %splat.splat2422
  %1902 = fadd <2 x double> %1900, %1901
  %1903 = fmul <2 x double> %block485, %splat.splat2425
  %1904 = fadd <2 x double> %1902, %1903
  %1905 = fmul <2 x double> %block488, %splat.splat2428
  %1906 = fadd <2 x double> %1904, %1905
  %1907 = fmul <2 x double> %block491, %splat.splat2431
  %1908 = fadd <2 x double> %1906, %1907
  %1909 = fmul <2 x double> %block494, %splat.splat2434
  %1910 = fadd <2 x double> %1908, %1909
  %1911 = fmul <2 x double> %block497, %splat.splat2437
  %1912 = fadd <2 x double> %1910, %1911
  %1913 = fmul <2 x double> %block500, %splat.splat2440
  %1914 = fadd <2 x double> %1912, %1913
  %1915 = shufflevector <2 x double> %1914, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1916 = shufflevector <25 x double> %1877, <25 x double> %1915, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1917 = fmul <2 x double> %block503, %splat.splat2386
  %1918 = fmul <2 x double> %block506, %splat.splat2389
  %1919 = fadd <2 x double> %1917, %1918
  %1920 = fmul <2 x double> %block509, %splat.splat2392
  %1921 = fadd <2 x double> %1919, %1920
  %1922 = fmul <2 x double> %block512, %splat.splat2395
  %1923 = fadd <2 x double> %1921, %1922
  %1924 = fmul <2 x double> %block515, %splat.splat2398
  %1925 = fadd <2 x double> %1923, %1924
  %1926 = fmul <2 x double> %block518, %splat.splat2401
  %1927 = fadd <2 x double> %1925, %1926
  %1928 = fmul <2 x double> %block521, %splat.splat2404
  %1929 = fadd <2 x double> %1927, %1928
  %1930 = fmul <2 x double> %block524, %splat.splat2407
  %1931 = fadd <2 x double> %1929, %1930
  %1932 = fmul <2 x double> %block527, %splat.splat2410
  %1933 = fadd <2 x double> %1931, %1932
  %1934 = fmul <2 x double> %block530, %splat.splat2413
  %1935 = fadd <2 x double> %1933, %1934
  %1936 = fmul <2 x double> %block533, %splat.splat2416
  %1937 = fadd <2 x double> %1935, %1936
  %1938 = fmul <2 x double> %block536, %splat.splat2419
  %1939 = fadd <2 x double> %1937, %1938
  %1940 = fmul <2 x double> %block539, %splat.splat2422
  %1941 = fadd <2 x double> %1939, %1940
  %1942 = fmul <2 x double> %block542, %splat.splat2425
  %1943 = fadd <2 x double> %1941, %1942
  %1944 = fmul <2 x double> %block545, %splat.splat2428
  %1945 = fadd <2 x double> %1943, %1944
  %1946 = fmul <2 x double> %block548, %splat.splat2431
  %1947 = fadd <2 x double> %1945, %1946
  %1948 = fmul <2 x double> %block551, %splat.splat2434
  %1949 = fadd <2 x double> %1947, %1948
  %1950 = fmul <2 x double> %block554, %splat.splat2437
  %1951 = fadd <2 x double> %1949, %1950
  %1952 = fmul <2 x double> %block557, %splat.splat2440
  %1953 = fadd <2 x double> %1951, %1952
  %1954 = shufflevector <2 x double> %1953, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1955 = shufflevector <25 x double> %1916, <25 x double> %1954, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1956 = fmul <2 x double> %block560, %splat.splat2386
  %1957 = fmul <2 x double> %block563, %splat.splat2389
  %1958 = fadd <2 x double> %1956, %1957
  %1959 = fmul <2 x double> %block566, %splat.splat2392
  %1960 = fadd <2 x double> %1958, %1959
  %1961 = fmul <2 x double> %block569, %splat.splat2395
  %1962 = fadd <2 x double> %1960, %1961
  %1963 = fmul <2 x double> %block572, %splat.splat2398
  %1964 = fadd <2 x double> %1962, %1963
  %1965 = fmul <2 x double> %block575, %splat.splat2401
  %1966 = fadd <2 x double> %1964, %1965
  %1967 = fmul <2 x double> %block578, %splat.splat2404
  %1968 = fadd <2 x double> %1966, %1967
  %1969 = fmul <2 x double> %block581, %splat.splat2407
  %1970 = fadd <2 x double> %1968, %1969
  %1971 = fmul <2 x double> %block584, %splat.splat2410
  %1972 = fadd <2 x double> %1970, %1971
  %1973 = fmul <2 x double> %block587, %splat.splat2413
  %1974 = fadd <2 x double> %1972, %1973
  %1975 = fmul <2 x double> %block590, %splat.splat2416
  %1976 = fadd <2 x double> %1974, %1975
  %1977 = fmul <2 x double> %block593, %splat.splat2419
  %1978 = fadd <2 x double> %1976, %1977
  %1979 = fmul <2 x double> %block596, %splat.splat2422
  %1980 = fadd <2 x double> %1978, %1979
  %1981 = fmul <2 x double> %block599, %splat.splat2425
  %1982 = fadd <2 x double> %1980, %1981
  %1983 = fmul <2 x double> %block602, %splat.splat2428
  %1984 = fadd <2 x double> %1982, %1983
  %1985 = fmul <2 x double> %block605, %splat.splat2431
  %1986 = fadd <2 x double> %1984, %1985
  %1987 = fmul <2 x double> %block608, %splat.splat2434
  %1988 = fadd <2 x double> %1986, %1987
  %1989 = fmul <2 x double> %block611, %splat.splat2437
  %1990 = fadd <2 x double> %1988, %1989
  %1991 = fmul <2 x double> %block614, %splat.splat2440
  %1992 = fadd <2 x double> %1990, %1991
  %1993 = shufflevector <2 x double> %1992, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1994 = shufflevector <25 x double> %1955, <25 x double> %1993, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1995 = fmul <2 x double> %block617, %splat.splat2386
  %1996 = fmul <2 x double> %block620, %splat.splat2389
  %1997 = fadd <2 x double> %1995, %1996
  %1998 = fmul <2 x double> %block623, %splat.splat2392
  %1999 = fadd <2 x double> %1997, %1998
  %2000 = fmul <2 x double> %block626, %splat.splat2395
  %2001 = fadd <2 x double> %1999, %2000
  %2002 = fmul <2 x double> %block629, %splat.splat2398
  %2003 = fadd <2 x double> %2001, %2002
  %2004 = fmul <2 x double> %block632, %splat.splat2401
  %2005 = fadd <2 x double> %2003, %2004
  %2006 = fmul <2 x double> %block635, %splat.splat2404
  %2007 = fadd <2 x double> %2005, %2006
  %2008 = fmul <2 x double> %block638, %splat.splat2407
  %2009 = fadd <2 x double> %2007, %2008
  %2010 = fmul <2 x double> %block641, %splat.splat2410
  %2011 = fadd <2 x double> %2009, %2010
  %2012 = fmul <2 x double> %block644, %splat.splat2413
  %2013 = fadd <2 x double> %2011, %2012
  %2014 = fmul <2 x double> %block647, %splat.splat2416
  %2015 = fadd <2 x double> %2013, %2014
  %2016 = fmul <2 x double> %block650, %splat.splat2419
  %2017 = fadd <2 x double> %2015, %2016
  %2018 = fmul <2 x double> %block653, %splat.splat2422
  %2019 = fadd <2 x double> %2017, %2018
  %2020 = fmul <2 x double> %block656, %splat.splat2425
  %2021 = fadd <2 x double> %2019, %2020
  %2022 = fmul <2 x double> %block659, %splat.splat2428
  %2023 = fadd <2 x double> %2021, %2022
  %2024 = fmul <2 x double> %block662, %splat.splat2431
  %2025 = fadd <2 x double> %2023, %2024
  %2026 = fmul <2 x double> %block665, %splat.splat2434
  %2027 = fadd <2 x double> %2025, %2026
  %2028 = fmul <2 x double> %block668, %splat.splat2437
  %2029 = fadd <2 x double> %2027, %2028
  %2030 = fmul <2 x double> %block671, %splat.splat2440
  %2031 = fadd <2 x double> %2029, %2030
  %2032 = shufflevector <2 x double> %2031, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2033 = shufflevector <25 x double> %1994, <25 x double> %2032, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2034 = fmul <2 x double> %block674, %splat.splat2386
  %2035 = fmul <2 x double> %block677, %splat.splat2389
  %2036 = fadd <2 x double> %2034, %2035
  %2037 = fmul <2 x double> %block680, %splat.splat2392
  %2038 = fadd <2 x double> %2036, %2037
  %2039 = fmul <2 x double> %block683, %splat.splat2395
  %2040 = fadd <2 x double> %2038, %2039
  %2041 = fmul <2 x double> %block686, %splat.splat2398
  %2042 = fadd <2 x double> %2040, %2041
  %2043 = fmul <2 x double> %block689, %splat.splat2401
  %2044 = fadd <2 x double> %2042, %2043
  %2045 = fmul <2 x double> %block692, %splat.splat2404
  %2046 = fadd <2 x double> %2044, %2045
  %2047 = fmul <2 x double> %block695, %splat.splat2407
  %2048 = fadd <2 x double> %2046, %2047
  %2049 = fmul <2 x double> %block698, %splat.splat2410
  %2050 = fadd <2 x double> %2048, %2049
  %2051 = fmul <2 x double> %block701, %splat.splat2413
  %2052 = fadd <2 x double> %2050, %2051
  %2053 = fmul <2 x double> %block704, %splat.splat2416
  %2054 = fadd <2 x double> %2052, %2053
  %2055 = fmul <2 x double> %block707, %splat.splat2419
  %2056 = fadd <2 x double> %2054, %2055
  %2057 = fmul <2 x double> %block710, %splat.splat2422
  %2058 = fadd <2 x double> %2056, %2057
  %2059 = fmul <2 x double> %block713, %splat.splat2425
  %2060 = fadd <2 x double> %2058, %2059
  %2061 = fmul <2 x double> %block716, %splat.splat2428
  %2062 = fadd <2 x double> %2060, %2061
  %2063 = fmul <2 x double> %block719, %splat.splat2431
  %2064 = fadd <2 x double> %2062, %2063
  %2065 = fmul <2 x double> %block722, %splat.splat2434
  %2066 = fadd <2 x double> %2064, %2065
  %2067 = fmul <2 x double> %block725, %splat.splat2437
  %2068 = fadd <2 x double> %2066, %2067
  %2069 = fmul <2 x double> %block728, %splat.splat2440
  %2070 = fadd <2 x double> %2068, %2069
  %2071 = shufflevector <2 x double> %2070, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2072 = shufflevector <25 x double> %2033, <25 x double> %2071, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2073 = fmul <2 x double> %block731, %splat.splat2386
  %2074 = fmul <2 x double> %block734, %splat.splat2389
  %2075 = fadd <2 x double> %2073, %2074
  %2076 = fmul <2 x double> %block737, %splat.splat2392
  %2077 = fadd <2 x double> %2075, %2076
  %2078 = fmul <2 x double> %block740, %splat.splat2395
  %2079 = fadd <2 x double> %2077, %2078
  %2080 = fmul <2 x double> %block743, %splat.splat2398
  %2081 = fadd <2 x double> %2079, %2080
  %2082 = fmul <2 x double> %block746, %splat.splat2401
  %2083 = fadd <2 x double> %2081, %2082
  %2084 = fmul <2 x double> %block749, %splat.splat2404
  %2085 = fadd <2 x double> %2083, %2084
  %2086 = fmul <2 x double> %block752, %splat.splat2407
  %2087 = fadd <2 x double> %2085, %2086
  %2088 = fmul <2 x double> %block755, %splat.splat2410
  %2089 = fadd <2 x double> %2087, %2088
  %2090 = fmul <2 x double> %block758, %splat.splat2413
  %2091 = fadd <2 x double> %2089, %2090
  %2092 = fmul <2 x double> %block761, %splat.splat2416
  %2093 = fadd <2 x double> %2091, %2092
  %2094 = fmul <2 x double> %block764, %splat.splat2419
  %2095 = fadd <2 x double> %2093, %2094
  %2096 = fmul <2 x double> %block767, %splat.splat2422
  %2097 = fadd <2 x double> %2095, %2096
  %2098 = fmul <2 x double> %block770, %splat.splat2425
  %2099 = fadd <2 x double> %2097, %2098
  %2100 = fmul <2 x double> %block773, %splat.splat2428
  %2101 = fadd <2 x double> %2099, %2100
  %2102 = fmul <2 x double> %block776, %splat.splat2431
  %2103 = fadd <2 x double> %2101, %2102
  %2104 = fmul <2 x double> %block779, %splat.splat2434
  %2105 = fadd <2 x double> %2103, %2104
  %2106 = fmul <2 x double> %block782, %splat.splat2437
  %2107 = fadd <2 x double> %2105, %2106
  %2108 = fmul <2 x double> %block785, %splat.splat2440
  %2109 = fadd <2 x double> %2107, %2108
  %2110 = shufflevector <2 x double> %2109, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2111 = shufflevector <25 x double> %2072, <25 x double> %2110, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %2112 = fmul <2 x double> %block788, %splat.splat2386
  %2113 = fmul <2 x double> %block791, %splat.splat2389
  %2114 = fadd <2 x double> %2112, %2113
  %2115 = fmul <2 x double> %block794, %splat.splat2392
  %2116 = fadd <2 x double> %2114, %2115
  %2117 = fmul <2 x double> %block797, %splat.splat2395
  %2118 = fadd <2 x double> %2116, %2117
  %2119 = fmul <2 x double> %block800, %splat.splat2398
  %2120 = fadd <2 x double> %2118, %2119
  %2121 = fmul <2 x double> %block803, %splat.splat2401
  %2122 = fadd <2 x double> %2120, %2121
  %2123 = fmul <2 x double> %block806, %splat.splat2404
  %2124 = fadd <2 x double> %2122, %2123
  %2125 = fmul <2 x double> %block809, %splat.splat2407
  %2126 = fadd <2 x double> %2124, %2125
  %2127 = fmul <2 x double> %block812, %splat.splat2410
  %2128 = fadd <2 x double> %2126, %2127
  %2129 = fmul <2 x double> %block815, %splat.splat2413
  %2130 = fadd <2 x double> %2128, %2129
  %2131 = fmul <2 x double> %block818, %splat.splat2416
  %2132 = fadd <2 x double> %2130, %2131
  %2133 = fmul <2 x double> %block821, %splat.splat2419
  %2134 = fadd <2 x double> %2132, %2133
  %2135 = fmul <2 x double> %block824, %splat.splat2422
  %2136 = fadd <2 x double> %2134, %2135
  %2137 = fmul <2 x double> %block827, %splat.splat2425
  %2138 = fadd <2 x double> %2136, %2137
  %2139 = fmul <2 x double> %block830, %splat.splat2428
  %2140 = fadd <2 x double> %2138, %2139
  %2141 = fmul <2 x double> %block833, %splat.splat2431
  %2142 = fadd <2 x double> %2140, %2141
  %2143 = fmul <2 x double> %block836, %splat.splat2434
  %2144 = fadd <2 x double> %2142, %2143
  %2145 = fmul <2 x double> %block839, %splat.splat2437
  %2146 = fadd <2 x double> %2144, %2145
  %2147 = fmul <2 x double> %block842, %splat.splat2440
  %2148 = fadd <2 x double> %2146, %2147
  %2149 = shufflevector <2 x double> %2148, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2150 = shufflevector <25 x double> %2111, <25 x double> %2149, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %splat.splatinsert3069 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> zeroinitializer
  %2151 = fmul <1 x double> %block845, %splat.splatinsert3069
  %splat.splatinsert3072 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 1>
  %2152 = fmul <1 x double> %block848, %splat.splatinsert3072
  %2153 = fadd <1 x double> %2151, %2152
  %splat.splatinsert3075 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 2>
  %2154 = fmul <1 x double> %block851, %splat.splatinsert3075
  %2155 = fadd <1 x double> %2153, %2154
  %splat.splatinsert3078 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 3>
  %2156 = fmul <1 x double> %block854, %splat.splatinsert3078
  %2157 = fadd <1 x double> %2155, %2156
  %splat.splatinsert3081 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 4>
  %2158 = fmul <1 x double> %block857, %splat.splatinsert3081
  %2159 = fadd <1 x double> %2157, %2158
  %splat.splatinsert3084 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 5>
  %2160 = fmul <1 x double> %block860, %splat.splatinsert3084
  %2161 = fadd <1 x double> %2159, %2160
  %splat.splatinsert3087 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 6>
  %2162 = fmul <1 x double> %block863, %splat.splatinsert3087
  %2163 = fadd <1 x double> %2161, %2162
  %splat.splatinsert3090 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 7>
  %2164 = fmul <1 x double> %block866, %splat.splatinsert3090
  %2165 = fadd <1 x double> %2163, %2164
  %splat.splatinsert3093 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 8>
  %2166 = fmul <1 x double> %block869, %splat.splatinsert3093
  %2167 = fadd <1 x double> %2165, %2166
  %splat.splatinsert3096 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 9>
  %2168 = fmul <1 x double> %block872, %splat.splatinsert3096
  %2169 = fadd <1 x double> %2167, %2168
  %splat.splatinsert3099 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 10>
  %2170 = fmul <1 x double> %block875, %splat.splatinsert3099
  %2171 = fadd <1 x double> %2169, %2170
  %splat.splatinsert3102 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 11>
  %2172 = fmul <1 x double> %block878, %splat.splatinsert3102
  %2173 = fadd <1 x double> %2171, %2172
  %splat.splatinsert3105 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 12>
  %2174 = fmul <1 x double> %block881, %splat.splatinsert3105
  %2175 = fadd <1 x double> %2173, %2174
  %splat.splatinsert3108 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 13>
  %2176 = fmul <1 x double> %block884, %splat.splatinsert3108
  %2177 = fadd <1 x double> %2175, %2176
  %splat.splatinsert3111 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 14>
  %2178 = fmul <1 x double> %block887, %splat.splatinsert3111
  %2179 = fadd <1 x double> %2177, %2178
  %splat.splatinsert3114 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 15>
  %2180 = fmul <1 x double> %block890, %splat.splatinsert3114
  %2181 = fadd <1 x double> %2179, %2180
  %splat.splatinsert3117 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 16>
  %2182 = fmul <1 x double> %block893, %splat.splatinsert3117
  %2183 = fadd <1 x double> %2181, %2182
  %splat.splatinsert3120 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 17>
  %2184 = fmul <1 x double> %block896, %splat.splatinsert3120
  %2185 = fadd <1 x double> %2183, %2184
  %splat.splatinsert3123 = shufflevector <19 x double> %col.load149, <19 x double> undef, <1 x i32> <i32 18>
  %2186 = fmul <1 x double> %block899, %splat.splatinsert3123
  %2187 = fadd <1 x double> %2185, %2186
  %2188 = shufflevector <1 x double> %2187, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2189 = shufflevector <25 x double> %2150, <25 x double> %2188, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  %splat.splat3127 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> zeroinitializer
  %2190 = fmul <2 x double> %block, %splat.splat3127
  %splat.splat3130 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %2191 = fmul <2 x double> %block164, %splat.splat3130
  %2192 = fadd <2 x double> %2190, %2191
  %splat.splat3133 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %2193 = fmul <2 x double> %block167, %splat.splat3133
  %2194 = fadd <2 x double> %2192, %2193
  %splat.splat3136 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %2195 = fmul <2 x double> %block170, %splat.splat3136
  %2196 = fadd <2 x double> %2194, %2195
  %splat.splat3139 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %2197 = fmul <2 x double> %block173, %splat.splat3139
  %2198 = fadd <2 x double> %2196, %2197
  %splat.splat3142 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %2199 = fmul <2 x double> %block176, %splat.splat3142
  %2200 = fadd <2 x double> %2198, %2199
  %splat.splat3145 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %2201 = fmul <2 x double> %block179, %splat.splat3145
  %2202 = fadd <2 x double> %2200, %2201
  %splat.splat3148 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %2203 = fmul <2 x double> %block182, %splat.splat3148
  %2204 = fadd <2 x double> %2202, %2203
  %splat.splat3151 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %2205 = fmul <2 x double> %block185, %splat.splat3151
  %2206 = fadd <2 x double> %2204, %2205
  %splat.splat3154 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %2207 = fmul <2 x double> %block188, %splat.splat3154
  %2208 = fadd <2 x double> %2206, %2207
  %splat.splat3157 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %2209 = fmul <2 x double> %block191, %splat.splat3157
  %2210 = fadd <2 x double> %2208, %2209
  %splat.splat3160 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %2211 = fmul <2 x double> %block194, %splat.splat3160
  %2212 = fadd <2 x double> %2210, %2211
  %splat.splat3163 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %2213 = fmul <2 x double> %block197, %splat.splat3163
  %2214 = fadd <2 x double> %2212, %2213
  %splat.splat3166 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %2215 = fmul <2 x double> %block200, %splat.splat3166
  %2216 = fadd <2 x double> %2214, %2215
  %splat.splat3169 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %2217 = fmul <2 x double> %block203, %splat.splat3169
  %2218 = fadd <2 x double> %2216, %2217
  %splat.splat3172 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %2219 = fmul <2 x double> %block206, %splat.splat3172
  %2220 = fadd <2 x double> %2218, %2219
  %splat.splat3175 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %2221 = fmul <2 x double> %block209, %splat.splat3175
  %2222 = fadd <2 x double> %2220, %2221
  %splat.splat3178 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %2223 = fmul <2 x double> %block212, %splat.splat3178
  %2224 = fadd <2 x double> %2222, %2223
  %splat.splat3181 = shufflevector <19 x double> %col.load151, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %2225 = fmul <2 x double> %block215, %splat.splat3181
  %2226 = fadd <2 x double> %2224, %2225
  %2227 = shufflevector <2 x double> %2226, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2228 = fmul <2 x double> %block218, %splat.splat3127
  %2229 = fmul <2 x double> %block221, %splat.splat3130
  %2230 = fadd <2 x double> %2228, %2229
  %2231 = fmul <2 x double> %block224, %splat.splat3133
  %2232 = fadd <2 x double> %2230, %2231
  %2233 = fmul <2 x double> %block227, %splat.splat3136
  %2234 = fadd <2 x double> %2232, %2233
  %2235 = fmul <2 x double> %block230, %splat.splat3139
  %2236 = fadd <2 x double> %2234, %2235
  %2237 = fmul <2 x double> %block233, %splat.splat3142
  %2238 = fadd <2 x double> %2236, %2237
  %2239 = fmul <2 x double> %block236, %splat.splat3145
  %2240 = fadd <2 x double> %2238, %2239
  %2241 = fmul <2 x double> %block239, %splat.splat3148
  %2242 = fadd <2 x double> %2240, %2241
  %2243 = fmul <2 x double> %block242, %splat.splat3151
  %2244 = fadd <2 x double> %2242, %2243
  %2245 = fmul <2 x double> %block245, %splat.splat3154
  %2246 = fadd <2 x double> %2244, %2245
  %2247 = fmul <2 x double> %block248, %splat.splat3157
  %2248 = fadd <2 x double> %2246, %2247
  %2249 = fmul <2 x double> %block251, %splat.splat3160
  %2250 = fadd <2 x double> %2248, %2249
  %2251 = fmul <2 x double> %block254, %splat.splat3163
  %2252 = fadd <2 x double> %2250, %2251
  %2253 = fmul <2 x double> %block257, %splat.splat3166
  %2254 = fadd <2 x double> %2252, %2253
  %2255 = fmul <2 x double> %block260, %splat.splat3169
  %2256 = fadd <2 x double> %2254, %2255
  %2257 = fmul <2 x double> %block263, %splat.splat3172
  %2258 = fadd <2 x double> %2256, %2257
  %2259 = fmul <2 x double> %block266, %splat.splat3175
  %2260 = fadd <2 x double> %2258, %2259
  %2261 = fmul <2 x double> %block269, %splat.splat3178
  %2262 = fadd <2 x double> %2260, %2261
  %2263 = fmul <2 x double> %block272, %splat.splat3181
  %2264 = fadd <2 x double> %2262, %2263
  %2265 = shufflevector <2 x double> %2264, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2266 = shufflevector <25 x double> %2227, <25 x double> %2265, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2267 = fmul <2 x double> %block275, %splat.splat3127
  %2268 = fmul <2 x double> %block278, %splat.splat3130
  %2269 = fadd <2 x double> %2267, %2268
  %2270 = fmul <2 x double> %block281, %splat.splat3133
  %2271 = fadd <2 x double> %2269, %2270
  %2272 = fmul <2 x double> %block284, %splat.splat3136
  %2273 = fadd <2 x double> %2271, %2272
  %2274 = fmul <2 x double> %block287, %splat.splat3139
  %2275 = fadd <2 x double> %2273, %2274
  %2276 = fmul <2 x double> %block290, %splat.splat3142
  %2277 = fadd <2 x double> %2275, %2276
  %2278 = fmul <2 x double> %block293, %splat.splat3145
  %2279 = fadd <2 x double> %2277, %2278
  %2280 = fmul <2 x double> %block296, %splat.splat3148
  %2281 = fadd <2 x double> %2279, %2280
  %2282 = fmul <2 x double> %block299, %splat.splat3151
  %2283 = fadd <2 x double> %2281, %2282
  %2284 = fmul <2 x double> %block302, %splat.splat3154
  %2285 = fadd <2 x double> %2283, %2284
  %2286 = fmul <2 x double> %block305, %splat.splat3157
  %2287 = fadd <2 x double> %2285, %2286
  %2288 = fmul <2 x double> %block308, %splat.splat3160
  %2289 = fadd <2 x double> %2287, %2288
  %2290 = fmul <2 x double> %block311, %splat.splat3163
  %2291 = fadd <2 x double> %2289, %2290
  %2292 = fmul <2 x double> %block314, %splat.splat3166
  %2293 = fadd <2 x double> %2291, %2292
  %2294 = fmul <2 x double> %block317, %splat.splat3169
  %2295 = fadd <2 x double> %2293, %2294
  %2296 = fmul <2 x double> %block320, %splat.splat3172
  %2297 = fadd <2 x double> %2295, %2296
  %2298 = fmul <2 x double> %block323, %splat.splat3175
  %2299 = fadd <2 x double> %2297, %2298
  %2300 = fmul <2 x double> %block326, %splat.splat3178
  %2301 = fadd <2 x double> %2299, %2300
  %2302 = fmul <2 x double> %block329, %splat.splat3181
  %2303 = fadd <2 x double> %2301, %2302
  %2304 = shufflevector <2 x double> %2303, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2305 = shufflevector <25 x double> %2266, <25 x double> %2304, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2306 = fmul <2 x double> %block332, %splat.splat3127
  %2307 = fmul <2 x double> %block335, %splat.splat3130
  %2308 = fadd <2 x double> %2306, %2307
  %2309 = fmul <2 x double> %block338, %splat.splat3133
  %2310 = fadd <2 x double> %2308, %2309
  %2311 = fmul <2 x double> %block341, %splat.splat3136
  %2312 = fadd <2 x double> %2310, %2311
  %2313 = fmul <2 x double> %block344, %splat.splat3139
  %2314 = fadd <2 x double> %2312, %2313
  %2315 = fmul <2 x double> %block347, %splat.splat3142
  %2316 = fadd <2 x double> %2314, %2315
  %2317 = fmul <2 x double> %block350, %splat.splat3145
  %2318 = fadd <2 x double> %2316, %2317
  %2319 = fmul <2 x double> %block353, %splat.splat3148
  %2320 = fadd <2 x double> %2318, %2319
  %2321 = fmul <2 x double> %block356, %splat.splat3151
  %2322 = fadd <2 x double> %2320, %2321
  %2323 = fmul <2 x double> %block359, %splat.splat3154
  %2324 = fadd <2 x double> %2322, %2323
  %2325 = fmul <2 x double> %block362, %splat.splat3157
  %2326 = fadd <2 x double> %2324, %2325
  %2327 = fmul <2 x double> %block365, %splat.splat3160
  %2328 = fadd <2 x double> %2326, %2327
  %2329 = fmul <2 x double> %block368, %splat.splat3163
  %2330 = fadd <2 x double> %2328, %2329
  %2331 = fmul <2 x double> %block371, %splat.splat3166
  %2332 = fadd <2 x double> %2330, %2331
  %2333 = fmul <2 x double> %block374, %splat.splat3169
  %2334 = fadd <2 x double> %2332, %2333
  %2335 = fmul <2 x double> %block377, %splat.splat3172
  %2336 = fadd <2 x double> %2334, %2335
  %2337 = fmul <2 x double> %block380, %splat.splat3175
  %2338 = fadd <2 x double> %2336, %2337
  %2339 = fmul <2 x double> %block383, %splat.splat3178
  %2340 = fadd <2 x double> %2338, %2339
  %2341 = fmul <2 x double> %block386, %splat.splat3181
  %2342 = fadd <2 x double> %2340, %2341
  %2343 = shufflevector <2 x double> %2342, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2344 = shufflevector <25 x double> %2305, <25 x double> %2343, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2345 = fmul <2 x double> %block389, %splat.splat3127
  %2346 = fmul <2 x double> %block392, %splat.splat3130
  %2347 = fadd <2 x double> %2345, %2346
  %2348 = fmul <2 x double> %block395, %splat.splat3133
  %2349 = fadd <2 x double> %2347, %2348
  %2350 = fmul <2 x double> %block398, %splat.splat3136
  %2351 = fadd <2 x double> %2349, %2350
  %2352 = fmul <2 x double> %block401, %splat.splat3139
  %2353 = fadd <2 x double> %2351, %2352
  %2354 = fmul <2 x double> %block404, %splat.splat3142
  %2355 = fadd <2 x double> %2353, %2354
  %2356 = fmul <2 x double> %block407, %splat.splat3145
  %2357 = fadd <2 x double> %2355, %2356
  %2358 = fmul <2 x double> %block410, %splat.splat3148
  %2359 = fadd <2 x double> %2357, %2358
  %2360 = fmul <2 x double> %block413, %splat.splat3151
  %2361 = fadd <2 x double> %2359, %2360
  %2362 = fmul <2 x double> %block416, %splat.splat3154
  %2363 = fadd <2 x double> %2361, %2362
  %2364 = fmul <2 x double> %block419, %splat.splat3157
  %2365 = fadd <2 x double> %2363, %2364
  %2366 = fmul <2 x double> %block422, %splat.splat3160
  %2367 = fadd <2 x double> %2365, %2366
  %2368 = fmul <2 x double> %block425, %splat.splat3163
  %2369 = fadd <2 x double> %2367, %2368
  %2370 = fmul <2 x double> %block428, %splat.splat3166
  %2371 = fadd <2 x double> %2369, %2370
  %2372 = fmul <2 x double> %block431, %splat.splat3169
  %2373 = fadd <2 x double> %2371, %2372
  %2374 = fmul <2 x double> %block434, %splat.splat3172
  %2375 = fadd <2 x double> %2373, %2374
  %2376 = fmul <2 x double> %block437, %splat.splat3175
  %2377 = fadd <2 x double> %2375, %2376
  %2378 = fmul <2 x double> %block440, %splat.splat3178
  %2379 = fadd <2 x double> %2377, %2378
  %2380 = fmul <2 x double> %block443, %splat.splat3181
  %2381 = fadd <2 x double> %2379, %2380
  %2382 = shufflevector <2 x double> %2381, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2383 = shufflevector <25 x double> %2344, <25 x double> %2382, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2384 = fmul <2 x double> %block446, %splat.splat3127
  %2385 = fmul <2 x double> %block449, %splat.splat3130
  %2386 = fadd <2 x double> %2384, %2385
  %2387 = fmul <2 x double> %block452, %splat.splat3133
  %2388 = fadd <2 x double> %2386, %2387
  %2389 = fmul <2 x double> %block455, %splat.splat3136
  %2390 = fadd <2 x double> %2388, %2389
  %2391 = fmul <2 x double> %block458, %splat.splat3139
  %2392 = fadd <2 x double> %2390, %2391
  %2393 = fmul <2 x double> %block461, %splat.splat3142
  %2394 = fadd <2 x double> %2392, %2393
  %2395 = fmul <2 x double> %block464, %splat.splat3145
  %2396 = fadd <2 x double> %2394, %2395
  %2397 = fmul <2 x double> %block467, %splat.splat3148
  %2398 = fadd <2 x double> %2396, %2397
  %2399 = fmul <2 x double> %block470, %splat.splat3151
  %2400 = fadd <2 x double> %2398, %2399
  %2401 = fmul <2 x double> %block473, %splat.splat3154
  %2402 = fadd <2 x double> %2400, %2401
  %2403 = fmul <2 x double> %block476, %splat.splat3157
  %2404 = fadd <2 x double> %2402, %2403
  %2405 = fmul <2 x double> %block479, %splat.splat3160
  %2406 = fadd <2 x double> %2404, %2405
  %2407 = fmul <2 x double> %block482, %splat.splat3163
  %2408 = fadd <2 x double> %2406, %2407
  %2409 = fmul <2 x double> %block485, %splat.splat3166
  %2410 = fadd <2 x double> %2408, %2409
  %2411 = fmul <2 x double> %block488, %splat.splat3169
  %2412 = fadd <2 x double> %2410, %2411
  %2413 = fmul <2 x double> %block491, %splat.splat3172
  %2414 = fadd <2 x double> %2412, %2413
  %2415 = fmul <2 x double> %block494, %splat.splat3175
  %2416 = fadd <2 x double> %2414, %2415
  %2417 = fmul <2 x double> %block497, %splat.splat3178
  %2418 = fadd <2 x double> %2416, %2417
  %2419 = fmul <2 x double> %block500, %splat.splat3181
  %2420 = fadd <2 x double> %2418, %2419
  %2421 = shufflevector <2 x double> %2420, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2422 = shufflevector <25 x double> %2383, <25 x double> %2421, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2423 = fmul <2 x double> %block503, %splat.splat3127
  %2424 = fmul <2 x double> %block506, %splat.splat3130
  %2425 = fadd <2 x double> %2423, %2424
  %2426 = fmul <2 x double> %block509, %splat.splat3133
  %2427 = fadd <2 x double> %2425, %2426
  %2428 = fmul <2 x double> %block512, %splat.splat3136
  %2429 = fadd <2 x double> %2427, %2428
  %2430 = fmul <2 x double> %block515, %splat.splat3139
  %2431 = fadd <2 x double> %2429, %2430
  %2432 = fmul <2 x double> %block518, %splat.splat3142
  %2433 = fadd <2 x double> %2431, %2432
  %2434 = fmul <2 x double> %block521, %splat.splat3145
  %2435 = fadd <2 x double> %2433, %2434
  %2436 = fmul <2 x double> %block524, %splat.splat3148
  %2437 = fadd <2 x double> %2435, %2436
  %2438 = fmul <2 x double> %block527, %splat.splat3151
  %2439 = fadd <2 x double> %2437, %2438
  %2440 = fmul <2 x double> %block530, %splat.splat3154
  %2441 = fadd <2 x double> %2439, %2440
  %2442 = fmul <2 x double> %block533, %splat.splat3157
  %2443 = fadd <2 x double> %2441, %2442
  %2444 = fmul <2 x double> %block536, %splat.splat3160
  %2445 = fadd <2 x double> %2443, %2444
  %2446 = fmul <2 x double> %block539, %splat.splat3163
  %2447 = fadd <2 x double> %2445, %2446
  %2448 = fmul <2 x double> %block542, %splat.splat3166
  %2449 = fadd <2 x double> %2447, %2448
  %2450 = fmul <2 x double> %block545, %splat.splat3169
  %2451 = fadd <2 x double> %2449, %2450
  %2452 = fmul <2 x double> %block548, %splat.splat3172
  %2453 = fadd <2 x double> %2451, %2452
  %2454 = fmul <2 x double> %block551, %splat.splat3175
  %2455 = fadd <2 x double> %2453, %2454
  %2456 = fmul <2 x double> %block554, %splat.splat3178
  %2457 = fadd <2 x double> %2455, %2456
  %2458 = fmul <2 x double> %block557, %splat.splat3181
  %2459 = fadd <2 x double> %2457, %2458
  %2460 = shufflevector <2 x double> %2459, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2461 = shufflevector <25 x double> %2422, <25 x double> %2460, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2462 = fmul <2 x double> %block560, %splat.splat3127
  %2463 = fmul <2 x double> %block563, %splat.splat3130
  %2464 = fadd <2 x double> %2462, %2463
  %2465 = fmul <2 x double> %block566, %splat.splat3133
  %2466 = fadd <2 x double> %2464, %2465
  %2467 = fmul <2 x double> %block569, %splat.splat3136
  %2468 = fadd <2 x double> %2466, %2467
  %2469 = fmul <2 x double> %block572, %splat.splat3139
  %2470 = fadd <2 x double> %2468, %2469
  %2471 = fmul <2 x double> %block575, %splat.splat3142
  %2472 = fadd <2 x double> %2470, %2471
  %2473 = fmul <2 x double> %block578, %splat.splat3145
  %2474 = fadd <2 x double> %2472, %2473
  %2475 = fmul <2 x double> %block581, %splat.splat3148
  %2476 = fadd <2 x double> %2474, %2475
  %2477 = fmul <2 x double> %block584, %splat.splat3151
  %2478 = fadd <2 x double> %2476, %2477
  %2479 = fmul <2 x double> %block587, %splat.splat3154
  %2480 = fadd <2 x double> %2478, %2479
  %2481 = fmul <2 x double> %block590, %splat.splat3157
  %2482 = fadd <2 x double> %2480, %2481
  %2483 = fmul <2 x double> %block593, %splat.splat3160
  %2484 = fadd <2 x double> %2482, %2483
  %2485 = fmul <2 x double> %block596, %splat.splat3163
  %2486 = fadd <2 x double> %2484, %2485
  %2487 = fmul <2 x double> %block599, %splat.splat3166
  %2488 = fadd <2 x double> %2486, %2487
  %2489 = fmul <2 x double> %block602, %splat.splat3169
  %2490 = fadd <2 x double> %2488, %2489
  %2491 = fmul <2 x double> %block605, %splat.splat3172
  %2492 = fadd <2 x double> %2490, %2491
  %2493 = fmul <2 x double> %block608, %splat.splat3175
  %2494 = fadd <2 x double> %2492, %2493
  %2495 = fmul <2 x double> %block611, %splat.splat3178
  %2496 = fadd <2 x double> %2494, %2495
  %2497 = fmul <2 x double> %block614, %splat.splat3181
  %2498 = fadd <2 x double> %2496, %2497
  %2499 = shufflevector <2 x double> %2498, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2500 = shufflevector <25 x double> %2461, <25 x double> %2499, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2501 = fmul <2 x double> %block617, %splat.splat3127
  %2502 = fmul <2 x double> %block620, %splat.splat3130
  %2503 = fadd <2 x double> %2501, %2502
  %2504 = fmul <2 x double> %block623, %splat.splat3133
  %2505 = fadd <2 x double> %2503, %2504
  %2506 = fmul <2 x double> %block626, %splat.splat3136
  %2507 = fadd <2 x double> %2505, %2506
  %2508 = fmul <2 x double> %block629, %splat.splat3139
  %2509 = fadd <2 x double> %2507, %2508
  %2510 = fmul <2 x double> %block632, %splat.splat3142
  %2511 = fadd <2 x double> %2509, %2510
  %2512 = fmul <2 x double> %block635, %splat.splat3145
  %2513 = fadd <2 x double> %2511, %2512
  %2514 = fmul <2 x double> %block638, %splat.splat3148
  %2515 = fadd <2 x double> %2513, %2514
  %2516 = fmul <2 x double> %block641, %splat.splat3151
  %2517 = fadd <2 x double> %2515, %2516
  %2518 = fmul <2 x double> %block644, %splat.splat3154
  %2519 = fadd <2 x double> %2517, %2518
  %2520 = fmul <2 x double> %block647, %splat.splat3157
  %2521 = fadd <2 x double> %2519, %2520
  %2522 = fmul <2 x double> %block650, %splat.splat3160
  %2523 = fadd <2 x double> %2521, %2522
  %2524 = fmul <2 x double> %block653, %splat.splat3163
  %2525 = fadd <2 x double> %2523, %2524
  %2526 = fmul <2 x double> %block656, %splat.splat3166
  %2527 = fadd <2 x double> %2525, %2526
  %2528 = fmul <2 x double> %block659, %splat.splat3169
  %2529 = fadd <2 x double> %2527, %2528
  %2530 = fmul <2 x double> %block662, %splat.splat3172
  %2531 = fadd <2 x double> %2529, %2530
  %2532 = fmul <2 x double> %block665, %splat.splat3175
  %2533 = fadd <2 x double> %2531, %2532
  %2534 = fmul <2 x double> %block668, %splat.splat3178
  %2535 = fadd <2 x double> %2533, %2534
  %2536 = fmul <2 x double> %block671, %splat.splat3181
  %2537 = fadd <2 x double> %2535, %2536
  %2538 = shufflevector <2 x double> %2537, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2539 = shufflevector <25 x double> %2500, <25 x double> %2538, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2540 = fmul <2 x double> %block674, %splat.splat3127
  %2541 = fmul <2 x double> %block677, %splat.splat3130
  %2542 = fadd <2 x double> %2540, %2541
  %2543 = fmul <2 x double> %block680, %splat.splat3133
  %2544 = fadd <2 x double> %2542, %2543
  %2545 = fmul <2 x double> %block683, %splat.splat3136
  %2546 = fadd <2 x double> %2544, %2545
  %2547 = fmul <2 x double> %block686, %splat.splat3139
  %2548 = fadd <2 x double> %2546, %2547
  %2549 = fmul <2 x double> %block689, %splat.splat3142
  %2550 = fadd <2 x double> %2548, %2549
  %2551 = fmul <2 x double> %block692, %splat.splat3145
  %2552 = fadd <2 x double> %2550, %2551
  %2553 = fmul <2 x double> %block695, %splat.splat3148
  %2554 = fadd <2 x double> %2552, %2553
  %2555 = fmul <2 x double> %block698, %splat.splat3151
  %2556 = fadd <2 x double> %2554, %2555
  %2557 = fmul <2 x double> %block701, %splat.splat3154
  %2558 = fadd <2 x double> %2556, %2557
  %2559 = fmul <2 x double> %block704, %splat.splat3157
  %2560 = fadd <2 x double> %2558, %2559
  %2561 = fmul <2 x double> %block707, %splat.splat3160
  %2562 = fadd <2 x double> %2560, %2561
  %2563 = fmul <2 x double> %block710, %splat.splat3163
  %2564 = fadd <2 x double> %2562, %2563
  %2565 = fmul <2 x double> %block713, %splat.splat3166
  %2566 = fadd <2 x double> %2564, %2565
  %2567 = fmul <2 x double> %block716, %splat.splat3169
  %2568 = fadd <2 x double> %2566, %2567
  %2569 = fmul <2 x double> %block719, %splat.splat3172
  %2570 = fadd <2 x double> %2568, %2569
  %2571 = fmul <2 x double> %block722, %splat.splat3175
  %2572 = fadd <2 x double> %2570, %2571
  %2573 = fmul <2 x double> %block725, %splat.splat3178
  %2574 = fadd <2 x double> %2572, %2573
  %2575 = fmul <2 x double> %block728, %splat.splat3181
  %2576 = fadd <2 x double> %2574, %2575
  %2577 = shufflevector <2 x double> %2576, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2578 = shufflevector <25 x double> %2539, <25 x double> %2577, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2579 = fmul <2 x double> %block731, %splat.splat3127
  %2580 = fmul <2 x double> %block734, %splat.splat3130
  %2581 = fadd <2 x double> %2579, %2580
  %2582 = fmul <2 x double> %block737, %splat.splat3133
  %2583 = fadd <2 x double> %2581, %2582
  %2584 = fmul <2 x double> %block740, %splat.splat3136
  %2585 = fadd <2 x double> %2583, %2584
  %2586 = fmul <2 x double> %block743, %splat.splat3139
  %2587 = fadd <2 x double> %2585, %2586
  %2588 = fmul <2 x double> %block746, %splat.splat3142
  %2589 = fadd <2 x double> %2587, %2588
  %2590 = fmul <2 x double> %block749, %splat.splat3145
  %2591 = fadd <2 x double> %2589, %2590
  %2592 = fmul <2 x double> %block752, %splat.splat3148
  %2593 = fadd <2 x double> %2591, %2592
  %2594 = fmul <2 x double> %block755, %splat.splat3151
  %2595 = fadd <2 x double> %2593, %2594
  %2596 = fmul <2 x double> %block758, %splat.splat3154
  %2597 = fadd <2 x double> %2595, %2596
  %2598 = fmul <2 x double> %block761, %splat.splat3157
  %2599 = fadd <2 x double> %2597, %2598
  %2600 = fmul <2 x double> %block764, %splat.splat3160
  %2601 = fadd <2 x double> %2599, %2600
  %2602 = fmul <2 x double> %block767, %splat.splat3163
  %2603 = fadd <2 x double> %2601, %2602
  %2604 = fmul <2 x double> %block770, %splat.splat3166
  %2605 = fadd <2 x double> %2603, %2604
  %2606 = fmul <2 x double> %block773, %splat.splat3169
  %2607 = fadd <2 x double> %2605, %2606
  %2608 = fmul <2 x double> %block776, %splat.splat3172
  %2609 = fadd <2 x double> %2607, %2608
  %2610 = fmul <2 x double> %block779, %splat.splat3175
  %2611 = fadd <2 x double> %2609, %2610
  %2612 = fmul <2 x double> %block782, %splat.splat3178
  %2613 = fadd <2 x double> %2611, %2612
  %2614 = fmul <2 x double> %block785, %splat.splat3181
  %2615 = fadd <2 x double> %2613, %2614
  %2616 = shufflevector <2 x double> %2615, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2617 = shufflevector <25 x double> %2578, <25 x double> %2616, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %2618 = fmul <2 x double> %block788, %splat.splat3127
  %2619 = fmul <2 x double> %block791, %splat.splat3130
  %2620 = fadd <2 x double> %2618, %2619
  %2621 = fmul <2 x double> %block794, %splat.splat3133
  %2622 = fadd <2 x double> %2620, %2621
  %2623 = fmul <2 x double> %block797, %splat.splat3136
  %2624 = fadd <2 x double> %2622, %2623
  %2625 = fmul <2 x double> %block800, %splat.splat3139
  %2626 = fadd <2 x double> %2624, %2625
  %2627 = fmul <2 x double> %block803, %splat.splat3142
  %2628 = fadd <2 x double> %2626, %2627
  %2629 = fmul <2 x double> %block806, %splat.splat3145
  %2630 = fadd <2 x double> %2628, %2629
  %2631 = fmul <2 x double> %block809, %splat.splat3148
  %2632 = fadd <2 x double> %2630, %2631
  %2633 = fmul <2 x double> %block812, %splat.splat3151
  %2634 = fadd <2 x double> %2632, %2633
  %2635 = fmul <2 x double> %block815, %splat.splat3154
  %2636 = fadd <2 x double> %2634, %2635
  %2637 = fmul <2 x double> %block818, %splat.splat3157
  %2638 = fadd <2 x double> %2636, %2637
  %2639 = fmul <2 x double> %block821, %splat.splat3160
  %2640 = fadd <2 x double> %2638, %2639
  %2641 = fmul <2 x double> %block824, %splat.splat3163
  %2642 = fadd <2 x double> %2640, %2641
  %2643 = fmul <2 x double> %block827, %splat.splat3166
  %2644 = fadd <2 x double> %2642, %2643
  %2645 = fmul <2 x double> %block830, %splat.splat3169
  %2646 = fadd <2 x double> %2644, %2645
  %2647 = fmul <2 x double> %block833, %splat.splat3172
  %2648 = fadd <2 x double> %2646, %2647
  %2649 = fmul <2 x double> %block836, %splat.splat3175
  %2650 = fadd <2 x double> %2648, %2649
  %2651 = fmul <2 x double> %block839, %splat.splat3178
  %2652 = fadd <2 x double> %2650, %2651
  %2653 = fmul <2 x double> %block842, %splat.splat3181
  %2654 = fadd <2 x double> %2652, %2653
  %2655 = shufflevector <2 x double> %2654, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2656 = shufflevector <25 x double> %2617, <25 x double> %2655, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %splat.splatinsert3810 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> zeroinitializer
  %2657 = fmul <1 x double> %block845, %splat.splatinsert3810
  %splat.splatinsert3813 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 1>
  %2658 = fmul <1 x double> %block848, %splat.splatinsert3813
  %2659 = fadd <1 x double> %2657, %2658
  %splat.splatinsert3816 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 2>
  %2660 = fmul <1 x double> %block851, %splat.splatinsert3816
  %2661 = fadd <1 x double> %2659, %2660
  %splat.splatinsert3819 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 3>
  %2662 = fmul <1 x double> %block854, %splat.splatinsert3819
  %2663 = fadd <1 x double> %2661, %2662
  %splat.splatinsert3822 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 4>
  %2664 = fmul <1 x double> %block857, %splat.splatinsert3822
  %2665 = fadd <1 x double> %2663, %2664
  %splat.splatinsert3825 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 5>
  %2666 = fmul <1 x double> %block860, %splat.splatinsert3825
  %2667 = fadd <1 x double> %2665, %2666
  %splat.splatinsert3828 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 6>
  %2668 = fmul <1 x double> %block863, %splat.splatinsert3828
  %2669 = fadd <1 x double> %2667, %2668
  %splat.splatinsert3831 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 7>
  %2670 = fmul <1 x double> %block866, %splat.splatinsert3831
  %2671 = fadd <1 x double> %2669, %2670
  %splat.splatinsert3834 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 8>
  %2672 = fmul <1 x double> %block869, %splat.splatinsert3834
  %2673 = fadd <1 x double> %2671, %2672
  %splat.splatinsert3837 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 9>
  %2674 = fmul <1 x double> %block872, %splat.splatinsert3837
  %2675 = fadd <1 x double> %2673, %2674
  %splat.splatinsert3840 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 10>
  %2676 = fmul <1 x double> %block875, %splat.splatinsert3840
  %2677 = fadd <1 x double> %2675, %2676
  %splat.splatinsert3843 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 11>
  %2678 = fmul <1 x double> %block878, %splat.splatinsert3843
  %2679 = fadd <1 x double> %2677, %2678
  %splat.splatinsert3846 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 12>
  %2680 = fmul <1 x double> %block881, %splat.splatinsert3846
  %2681 = fadd <1 x double> %2679, %2680
  %splat.splatinsert3849 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 13>
  %2682 = fmul <1 x double> %block884, %splat.splatinsert3849
  %2683 = fadd <1 x double> %2681, %2682
  %splat.splatinsert3852 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 14>
  %2684 = fmul <1 x double> %block887, %splat.splatinsert3852
  %2685 = fadd <1 x double> %2683, %2684
  %splat.splatinsert3855 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 15>
  %2686 = fmul <1 x double> %block890, %splat.splatinsert3855
  %2687 = fadd <1 x double> %2685, %2686
  %splat.splatinsert3858 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 16>
  %2688 = fmul <1 x double> %block893, %splat.splatinsert3858
  %2689 = fadd <1 x double> %2687, %2688
  %splat.splatinsert3861 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 17>
  %2690 = fmul <1 x double> %block896, %splat.splatinsert3861
  %2691 = fadd <1 x double> %2689, %2690
  %splat.splatinsert3864 = shufflevector <19 x double> %col.load151, <19 x double> undef, <1 x i32> <i32 18>
  %2692 = fmul <1 x double> %block899, %splat.splatinsert3864
  %2693 = fadd <1 x double> %2691, %2692
  %2694 = shufflevector <1 x double> %2693, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2695 = shufflevector <25 x double> %2656, <25 x double> %2694, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  %splat.splat3868 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> zeroinitializer
  %2696 = fmul <2 x double> %block, %splat.splat3868
  %splat.splat3871 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %2697 = fmul <2 x double> %block164, %splat.splat3871
  %2698 = fadd <2 x double> %2696, %2697
  %splat.splat3874 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %2699 = fmul <2 x double> %block167, %splat.splat3874
  %2700 = fadd <2 x double> %2698, %2699
  %splat.splat3877 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %2701 = fmul <2 x double> %block170, %splat.splat3877
  %2702 = fadd <2 x double> %2700, %2701
  %splat.splat3880 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %2703 = fmul <2 x double> %block173, %splat.splat3880
  %2704 = fadd <2 x double> %2702, %2703
  %splat.splat3883 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %2705 = fmul <2 x double> %block176, %splat.splat3883
  %2706 = fadd <2 x double> %2704, %2705
  %splat.splat3886 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %2707 = fmul <2 x double> %block179, %splat.splat3886
  %2708 = fadd <2 x double> %2706, %2707
  %splat.splat3889 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %2709 = fmul <2 x double> %block182, %splat.splat3889
  %2710 = fadd <2 x double> %2708, %2709
  %splat.splat3892 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %2711 = fmul <2 x double> %block185, %splat.splat3892
  %2712 = fadd <2 x double> %2710, %2711
  %splat.splat3895 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %2713 = fmul <2 x double> %block188, %splat.splat3895
  %2714 = fadd <2 x double> %2712, %2713
  %splat.splat3898 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %2715 = fmul <2 x double> %block191, %splat.splat3898
  %2716 = fadd <2 x double> %2714, %2715
  %splat.splat3901 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %2717 = fmul <2 x double> %block194, %splat.splat3901
  %2718 = fadd <2 x double> %2716, %2717
  %splat.splat3904 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %2719 = fmul <2 x double> %block197, %splat.splat3904
  %2720 = fadd <2 x double> %2718, %2719
  %splat.splat3907 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %2721 = fmul <2 x double> %block200, %splat.splat3907
  %2722 = fadd <2 x double> %2720, %2721
  %splat.splat3910 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %2723 = fmul <2 x double> %block203, %splat.splat3910
  %2724 = fadd <2 x double> %2722, %2723
  %splat.splat3913 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %2725 = fmul <2 x double> %block206, %splat.splat3913
  %2726 = fadd <2 x double> %2724, %2725
  %splat.splat3916 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %2727 = fmul <2 x double> %block209, %splat.splat3916
  %2728 = fadd <2 x double> %2726, %2727
  %splat.splat3919 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %2729 = fmul <2 x double> %block212, %splat.splat3919
  %2730 = fadd <2 x double> %2728, %2729
  %splat.splat3922 = shufflevector <19 x double> %col.load153, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %2731 = fmul <2 x double> %block215, %splat.splat3922
  %2732 = fadd <2 x double> %2730, %2731
  %2733 = shufflevector <2 x double> %2732, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2734 = fmul <2 x double> %block218, %splat.splat3868
  %2735 = fmul <2 x double> %block221, %splat.splat3871
  %2736 = fadd <2 x double> %2734, %2735
  %2737 = fmul <2 x double> %block224, %splat.splat3874
  %2738 = fadd <2 x double> %2736, %2737
  %2739 = fmul <2 x double> %block227, %splat.splat3877
  %2740 = fadd <2 x double> %2738, %2739
  %2741 = fmul <2 x double> %block230, %splat.splat3880
  %2742 = fadd <2 x double> %2740, %2741
  %2743 = fmul <2 x double> %block233, %splat.splat3883
  %2744 = fadd <2 x double> %2742, %2743
  %2745 = fmul <2 x double> %block236, %splat.splat3886
  %2746 = fadd <2 x double> %2744, %2745
  %2747 = fmul <2 x double> %block239, %splat.splat3889
  %2748 = fadd <2 x double> %2746, %2747
  %2749 = fmul <2 x double> %block242, %splat.splat3892
  %2750 = fadd <2 x double> %2748, %2749
  %2751 = fmul <2 x double> %block245, %splat.splat3895
  %2752 = fadd <2 x double> %2750, %2751
  %2753 = fmul <2 x double> %block248, %splat.splat3898
  %2754 = fadd <2 x double> %2752, %2753
  %2755 = fmul <2 x double> %block251, %splat.splat3901
  %2756 = fadd <2 x double> %2754, %2755
  %2757 = fmul <2 x double> %block254, %splat.splat3904
  %2758 = fadd <2 x double> %2756, %2757
  %2759 = fmul <2 x double> %block257, %splat.splat3907
  %2760 = fadd <2 x double> %2758, %2759
  %2761 = fmul <2 x double> %block260, %splat.splat3910
  %2762 = fadd <2 x double> %2760, %2761
  %2763 = fmul <2 x double> %block263, %splat.splat3913
  %2764 = fadd <2 x double> %2762, %2763
  %2765 = fmul <2 x double> %block266, %splat.splat3916
  %2766 = fadd <2 x double> %2764, %2765
  %2767 = fmul <2 x double> %block269, %splat.splat3919
  %2768 = fadd <2 x double> %2766, %2767
  %2769 = fmul <2 x double> %block272, %splat.splat3922
  %2770 = fadd <2 x double> %2768, %2769
  %2771 = shufflevector <2 x double> %2770, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2772 = shufflevector <25 x double> %2733, <25 x double> %2771, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2773 = fmul <2 x double> %block275, %splat.splat3868
  %2774 = fmul <2 x double> %block278, %splat.splat3871
  %2775 = fadd <2 x double> %2773, %2774
  %2776 = fmul <2 x double> %block281, %splat.splat3874
  %2777 = fadd <2 x double> %2775, %2776
  %2778 = fmul <2 x double> %block284, %splat.splat3877
  %2779 = fadd <2 x double> %2777, %2778
  %2780 = fmul <2 x double> %block287, %splat.splat3880
  %2781 = fadd <2 x double> %2779, %2780
  %2782 = fmul <2 x double> %block290, %splat.splat3883
  %2783 = fadd <2 x double> %2781, %2782
  %2784 = fmul <2 x double> %block293, %splat.splat3886
  %2785 = fadd <2 x double> %2783, %2784
  %2786 = fmul <2 x double> %block296, %splat.splat3889
  %2787 = fadd <2 x double> %2785, %2786
  %2788 = fmul <2 x double> %block299, %splat.splat3892
  %2789 = fadd <2 x double> %2787, %2788
  %2790 = fmul <2 x double> %block302, %splat.splat3895
  %2791 = fadd <2 x double> %2789, %2790
  %2792 = fmul <2 x double> %block305, %splat.splat3898
  %2793 = fadd <2 x double> %2791, %2792
  %2794 = fmul <2 x double> %block308, %splat.splat3901
  %2795 = fadd <2 x double> %2793, %2794
  %2796 = fmul <2 x double> %block311, %splat.splat3904
  %2797 = fadd <2 x double> %2795, %2796
  %2798 = fmul <2 x double> %block314, %splat.splat3907
  %2799 = fadd <2 x double> %2797, %2798
  %2800 = fmul <2 x double> %block317, %splat.splat3910
  %2801 = fadd <2 x double> %2799, %2800
  %2802 = fmul <2 x double> %block320, %splat.splat3913
  %2803 = fadd <2 x double> %2801, %2802
  %2804 = fmul <2 x double> %block323, %splat.splat3916
  %2805 = fadd <2 x double> %2803, %2804
  %2806 = fmul <2 x double> %block326, %splat.splat3919
  %2807 = fadd <2 x double> %2805, %2806
  %2808 = fmul <2 x double> %block329, %splat.splat3922
  %2809 = fadd <2 x double> %2807, %2808
  %2810 = shufflevector <2 x double> %2809, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2811 = shufflevector <25 x double> %2772, <25 x double> %2810, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2812 = fmul <2 x double> %block332, %splat.splat3868
  %2813 = fmul <2 x double> %block335, %splat.splat3871
  %2814 = fadd <2 x double> %2812, %2813
  %2815 = fmul <2 x double> %block338, %splat.splat3874
  %2816 = fadd <2 x double> %2814, %2815
  %2817 = fmul <2 x double> %block341, %splat.splat3877
  %2818 = fadd <2 x double> %2816, %2817
  %2819 = fmul <2 x double> %block344, %splat.splat3880
  %2820 = fadd <2 x double> %2818, %2819
  %2821 = fmul <2 x double> %block347, %splat.splat3883
  %2822 = fadd <2 x double> %2820, %2821
  %2823 = fmul <2 x double> %block350, %splat.splat3886
  %2824 = fadd <2 x double> %2822, %2823
  %2825 = fmul <2 x double> %block353, %splat.splat3889
  %2826 = fadd <2 x double> %2824, %2825
  %2827 = fmul <2 x double> %block356, %splat.splat3892
  %2828 = fadd <2 x double> %2826, %2827
  %2829 = fmul <2 x double> %block359, %splat.splat3895
  %2830 = fadd <2 x double> %2828, %2829
  %2831 = fmul <2 x double> %block362, %splat.splat3898
  %2832 = fadd <2 x double> %2830, %2831
  %2833 = fmul <2 x double> %block365, %splat.splat3901
  %2834 = fadd <2 x double> %2832, %2833
  %2835 = fmul <2 x double> %block368, %splat.splat3904
  %2836 = fadd <2 x double> %2834, %2835
  %2837 = fmul <2 x double> %block371, %splat.splat3907
  %2838 = fadd <2 x double> %2836, %2837
  %2839 = fmul <2 x double> %block374, %splat.splat3910
  %2840 = fadd <2 x double> %2838, %2839
  %2841 = fmul <2 x double> %block377, %splat.splat3913
  %2842 = fadd <2 x double> %2840, %2841
  %2843 = fmul <2 x double> %block380, %splat.splat3916
  %2844 = fadd <2 x double> %2842, %2843
  %2845 = fmul <2 x double> %block383, %splat.splat3919
  %2846 = fadd <2 x double> %2844, %2845
  %2847 = fmul <2 x double> %block386, %splat.splat3922
  %2848 = fadd <2 x double> %2846, %2847
  %2849 = shufflevector <2 x double> %2848, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2850 = shufflevector <25 x double> %2811, <25 x double> %2849, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2851 = fmul <2 x double> %block389, %splat.splat3868
  %2852 = fmul <2 x double> %block392, %splat.splat3871
  %2853 = fadd <2 x double> %2851, %2852
  %2854 = fmul <2 x double> %block395, %splat.splat3874
  %2855 = fadd <2 x double> %2853, %2854
  %2856 = fmul <2 x double> %block398, %splat.splat3877
  %2857 = fadd <2 x double> %2855, %2856
  %2858 = fmul <2 x double> %block401, %splat.splat3880
  %2859 = fadd <2 x double> %2857, %2858
  %2860 = fmul <2 x double> %block404, %splat.splat3883
  %2861 = fadd <2 x double> %2859, %2860
  %2862 = fmul <2 x double> %block407, %splat.splat3886
  %2863 = fadd <2 x double> %2861, %2862
  %2864 = fmul <2 x double> %block410, %splat.splat3889
  %2865 = fadd <2 x double> %2863, %2864
  %2866 = fmul <2 x double> %block413, %splat.splat3892
  %2867 = fadd <2 x double> %2865, %2866
  %2868 = fmul <2 x double> %block416, %splat.splat3895
  %2869 = fadd <2 x double> %2867, %2868
  %2870 = fmul <2 x double> %block419, %splat.splat3898
  %2871 = fadd <2 x double> %2869, %2870
  %2872 = fmul <2 x double> %block422, %splat.splat3901
  %2873 = fadd <2 x double> %2871, %2872
  %2874 = fmul <2 x double> %block425, %splat.splat3904
  %2875 = fadd <2 x double> %2873, %2874
  %2876 = fmul <2 x double> %block428, %splat.splat3907
  %2877 = fadd <2 x double> %2875, %2876
  %2878 = fmul <2 x double> %block431, %splat.splat3910
  %2879 = fadd <2 x double> %2877, %2878
  %2880 = fmul <2 x double> %block434, %splat.splat3913
  %2881 = fadd <2 x double> %2879, %2880
  %2882 = fmul <2 x double> %block437, %splat.splat3916
  %2883 = fadd <2 x double> %2881, %2882
  %2884 = fmul <2 x double> %block440, %splat.splat3919
  %2885 = fadd <2 x double> %2883, %2884
  %2886 = fmul <2 x double> %block443, %splat.splat3922
  %2887 = fadd <2 x double> %2885, %2886
  %2888 = shufflevector <2 x double> %2887, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2889 = shufflevector <25 x double> %2850, <25 x double> %2888, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2890 = fmul <2 x double> %block446, %splat.splat3868
  %2891 = fmul <2 x double> %block449, %splat.splat3871
  %2892 = fadd <2 x double> %2890, %2891
  %2893 = fmul <2 x double> %block452, %splat.splat3874
  %2894 = fadd <2 x double> %2892, %2893
  %2895 = fmul <2 x double> %block455, %splat.splat3877
  %2896 = fadd <2 x double> %2894, %2895
  %2897 = fmul <2 x double> %block458, %splat.splat3880
  %2898 = fadd <2 x double> %2896, %2897
  %2899 = fmul <2 x double> %block461, %splat.splat3883
  %2900 = fadd <2 x double> %2898, %2899
  %2901 = fmul <2 x double> %block464, %splat.splat3886
  %2902 = fadd <2 x double> %2900, %2901
  %2903 = fmul <2 x double> %block467, %splat.splat3889
  %2904 = fadd <2 x double> %2902, %2903
  %2905 = fmul <2 x double> %block470, %splat.splat3892
  %2906 = fadd <2 x double> %2904, %2905
  %2907 = fmul <2 x double> %block473, %splat.splat3895
  %2908 = fadd <2 x double> %2906, %2907
  %2909 = fmul <2 x double> %block476, %splat.splat3898
  %2910 = fadd <2 x double> %2908, %2909
  %2911 = fmul <2 x double> %block479, %splat.splat3901
  %2912 = fadd <2 x double> %2910, %2911
  %2913 = fmul <2 x double> %block482, %splat.splat3904
  %2914 = fadd <2 x double> %2912, %2913
  %2915 = fmul <2 x double> %block485, %splat.splat3907
  %2916 = fadd <2 x double> %2914, %2915
  %2917 = fmul <2 x double> %block488, %splat.splat3910
  %2918 = fadd <2 x double> %2916, %2917
  %2919 = fmul <2 x double> %block491, %splat.splat3913
  %2920 = fadd <2 x double> %2918, %2919
  %2921 = fmul <2 x double> %block494, %splat.splat3916
  %2922 = fadd <2 x double> %2920, %2921
  %2923 = fmul <2 x double> %block497, %splat.splat3919
  %2924 = fadd <2 x double> %2922, %2923
  %2925 = fmul <2 x double> %block500, %splat.splat3922
  %2926 = fadd <2 x double> %2924, %2925
  %2927 = shufflevector <2 x double> %2926, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2928 = shufflevector <25 x double> %2889, <25 x double> %2927, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2929 = fmul <2 x double> %block503, %splat.splat3868
  %2930 = fmul <2 x double> %block506, %splat.splat3871
  %2931 = fadd <2 x double> %2929, %2930
  %2932 = fmul <2 x double> %block509, %splat.splat3874
  %2933 = fadd <2 x double> %2931, %2932
  %2934 = fmul <2 x double> %block512, %splat.splat3877
  %2935 = fadd <2 x double> %2933, %2934
  %2936 = fmul <2 x double> %block515, %splat.splat3880
  %2937 = fadd <2 x double> %2935, %2936
  %2938 = fmul <2 x double> %block518, %splat.splat3883
  %2939 = fadd <2 x double> %2937, %2938
  %2940 = fmul <2 x double> %block521, %splat.splat3886
  %2941 = fadd <2 x double> %2939, %2940
  %2942 = fmul <2 x double> %block524, %splat.splat3889
  %2943 = fadd <2 x double> %2941, %2942
  %2944 = fmul <2 x double> %block527, %splat.splat3892
  %2945 = fadd <2 x double> %2943, %2944
  %2946 = fmul <2 x double> %block530, %splat.splat3895
  %2947 = fadd <2 x double> %2945, %2946
  %2948 = fmul <2 x double> %block533, %splat.splat3898
  %2949 = fadd <2 x double> %2947, %2948
  %2950 = fmul <2 x double> %block536, %splat.splat3901
  %2951 = fadd <2 x double> %2949, %2950
  %2952 = fmul <2 x double> %block539, %splat.splat3904
  %2953 = fadd <2 x double> %2951, %2952
  %2954 = fmul <2 x double> %block542, %splat.splat3907
  %2955 = fadd <2 x double> %2953, %2954
  %2956 = fmul <2 x double> %block545, %splat.splat3910
  %2957 = fadd <2 x double> %2955, %2956
  %2958 = fmul <2 x double> %block548, %splat.splat3913
  %2959 = fadd <2 x double> %2957, %2958
  %2960 = fmul <2 x double> %block551, %splat.splat3916
  %2961 = fadd <2 x double> %2959, %2960
  %2962 = fmul <2 x double> %block554, %splat.splat3919
  %2963 = fadd <2 x double> %2961, %2962
  %2964 = fmul <2 x double> %block557, %splat.splat3922
  %2965 = fadd <2 x double> %2963, %2964
  %2966 = shufflevector <2 x double> %2965, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2967 = shufflevector <25 x double> %2928, <25 x double> %2966, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2968 = fmul <2 x double> %block560, %splat.splat3868
  %2969 = fmul <2 x double> %block563, %splat.splat3871
  %2970 = fadd <2 x double> %2968, %2969
  %2971 = fmul <2 x double> %block566, %splat.splat3874
  %2972 = fadd <2 x double> %2970, %2971
  %2973 = fmul <2 x double> %block569, %splat.splat3877
  %2974 = fadd <2 x double> %2972, %2973
  %2975 = fmul <2 x double> %block572, %splat.splat3880
  %2976 = fadd <2 x double> %2974, %2975
  %2977 = fmul <2 x double> %block575, %splat.splat3883
  %2978 = fadd <2 x double> %2976, %2977
  %2979 = fmul <2 x double> %block578, %splat.splat3886
  %2980 = fadd <2 x double> %2978, %2979
  %2981 = fmul <2 x double> %block581, %splat.splat3889
  %2982 = fadd <2 x double> %2980, %2981
  %2983 = fmul <2 x double> %block584, %splat.splat3892
  %2984 = fadd <2 x double> %2982, %2983
  %2985 = fmul <2 x double> %block587, %splat.splat3895
  %2986 = fadd <2 x double> %2984, %2985
  %2987 = fmul <2 x double> %block590, %splat.splat3898
  %2988 = fadd <2 x double> %2986, %2987
  %2989 = fmul <2 x double> %block593, %splat.splat3901
  %2990 = fadd <2 x double> %2988, %2989
  %2991 = fmul <2 x double> %block596, %splat.splat3904
  %2992 = fadd <2 x double> %2990, %2991
  %2993 = fmul <2 x double> %block599, %splat.splat3907
  %2994 = fadd <2 x double> %2992, %2993
  %2995 = fmul <2 x double> %block602, %splat.splat3910
  %2996 = fadd <2 x double> %2994, %2995
  %2997 = fmul <2 x double> %block605, %splat.splat3913
  %2998 = fadd <2 x double> %2996, %2997
  %2999 = fmul <2 x double> %block608, %splat.splat3916
  %3000 = fadd <2 x double> %2998, %2999
  %3001 = fmul <2 x double> %block611, %splat.splat3919
  %3002 = fadd <2 x double> %3000, %3001
  %3003 = fmul <2 x double> %block614, %splat.splat3922
  %3004 = fadd <2 x double> %3002, %3003
  %3005 = shufflevector <2 x double> %3004, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3006 = shufflevector <25 x double> %2967, <25 x double> %3005, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3007 = fmul <2 x double> %block617, %splat.splat3868
  %3008 = fmul <2 x double> %block620, %splat.splat3871
  %3009 = fadd <2 x double> %3007, %3008
  %3010 = fmul <2 x double> %block623, %splat.splat3874
  %3011 = fadd <2 x double> %3009, %3010
  %3012 = fmul <2 x double> %block626, %splat.splat3877
  %3013 = fadd <2 x double> %3011, %3012
  %3014 = fmul <2 x double> %block629, %splat.splat3880
  %3015 = fadd <2 x double> %3013, %3014
  %3016 = fmul <2 x double> %block632, %splat.splat3883
  %3017 = fadd <2 x double> %3015, %3016
  %3018 = fmul <2 x double> %block635, %splat.splat3886
  %3019 = fadd <2 x double> %3017, %3018
  %3020 = fmul <2 x double> %block638, %splat.splat3889
  %3021 = fadd <2 x double> %3019, %3020
  %3022 = fmul <2 x double> %block641, %splat.splat3892
  %3023 = fadd <2 x double> %3021, %3022
  %3024 = fmul <2 x double> %block644, %splat.splat3895
  %3025 = fadd <2 x double> %3023, %3024
  %3026 = fmul <2 x double> %block647, %splat.splat3898
  %3027 = fadd <2 x double> %3025, %3026
  %3028 = fmul <2 x double> %block650, %splat.splat3901
  %3029 = fadd <2 x double> %3027, %3028
  %3030 = fmul <2 x double> %block653, %splat.splat3904
  %3031 = fadd <2 x double> %3029, %3030
  %3032 = fmul <2 x double> %block656, %splat.splat3907
  %3033 = fadd <2 x double> %3031, %3032
  %3034 = fmul <2 x double> %block659, %splat.splat3910
  %3035 = fadd <2 x double> %3033, %3034
  %3036 = fmul <2 x double> %block662, %splat.splat3913
  %3037 = fadd <2 x double> %3035, %3036
  %3038 = fmul <2 x double> %block665, %splat.splat3916
  %3039 = fadd <2 x double> %3037, %3038
  %3040 = fmul <2 x double> %block668, %splat.splat3919
  %3041 = fadd <2 x double> %3039, %3040
  %3042 = fmul <2 x double> %block671, %splat.splat3922
  %3043 = fadd <2 x double> %3041, %3042
  %3044 = shufflevector <2 x double> %3043, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3045 = shufflevector <25 x double> %3006, <25 x double> %3044, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3046 = fmul <2 x double> %block674, %splat.splat3868
  %3047 = fmul <2 x double> %block677, %splat.splat3871
  %3048 = fadd <2 x double> %3046, %3047
  %3049 = fmul <2 x double> %block680, %splat.splat3874
  %3050 = fadd <2 x double> %3048, %3049
  %3051 = fmul <2 x double> %block683, %splat.splat3877
  %3052 = fadd <2 x double> %3050, %3051
  %3053 = fmul <2 x double> %block686, %splat.splat3880
  %3054 = fadd <2 x double> %3052, %3053
  %3055 = fmul <2 x double> %block689, %splat.splat3883
  %3056 = fadd <2 x double> %3054, %3055
  %3057 = fmul <2 x double> %block692, %splat.splat3886
  %3058 = fadd <2 x double> %3056, %3057
  %3059 = fmul <2 x double> %block695, %splat.splat3889
  %3060 = fadd <2 x double> %3058, %3059
  %3061 = fmul <2 x double> %block698, %splat.splat3892
  %3062 = fadd <2 x double> %3060, %3061
  %3063 = fmul <2 x double> %block701, %splat.splat3895
  %3064 = fadd <2 x double> %3062, %3063
  %3065 = fmul <2 x double> %block704, %splat.splat3898
  %3066 = fadd <2 x double> %3064, %3065
  %3067 = fmul <2 x double> %block707, %splat.splat3901
  %3068 = fadd <2 x double> %3066, %3067
  %3069 = fmul <2 x double> %block710, %splat.splat3904
  %3070 = fadd <2 x double> %3068, %3069
  %3071 = fmul <2 x double> %block713, %splat.splat3907
  %3072 = fadd <2 x double> %3070, %3071
  %3073 = fmul <2 x double> %block716, %splat.splat3910
  %3074 = fadd <2 x double> %3072, %3073
  %3075 = fmul <2 x double> %block719, %splat.splat3913
  %3076 = fadd <2 x double> %3074, %3075
  %3077 = fmul <2 x double> %block722, %splat.splat3916
  %3078 = fadd <2 x double> %3076, %3077
  %3079 = fmul <2 x double> %block725, %splat.splat3919
  %3080 = fadd <2 x double> %3078, %3079
  %3081 = fmul <2 x double> %block728, %splat.splat3922
  %3082 = fadd <2 x double> %3080, %3081
  %3083 = shufflevector <2 x double> %3082, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3084 = shufflevector <25 x double> %3045, <25 x double> %3083, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3085 = fmul <2 x double> %block731, %splat.splat3868
  %3086 = fmul <2 x double> %block734, %splat.splat3871
  %3087 = fadd <2 x double> %3085, %3086
  %3088 = fmul <2 x double> %block737, %splat.splat3874
  %3089 = fadd <2 x double> %3087, %3088
  %3090 = fmul <2 x double> %block740, %splat.splat3877
  %3091 = fadd <2 x double> %3089, %3090
  %3092 = fmul <2 x double> %block743, %splat.splat3880
  %3093 = fadd <2 x double> %3091, %3092
  %3094 = fmul <2 x double> %block746, %splat.splat3883
  %3095 = fadd <2 x double> %3093, %3094
  %3096 = fmul <2 x double> %block749, %splat.splat3886
  %3097 = fadd <2 x double> %3095, %3096
  %3098 = fmul <2 x double> %block752, %splat.splat3889
  %3099 = fadd <2 x double> %3097, %3098
  %3100 = fmul <2 x double> %block755, %splat.splat3892
  %3101 = fadd <2 x double> %3099, %3100
  %3102 = fmul <2 x double> %block758, %splat.splat3895
  %3103 = fadd <2 x double> %3101, %3102
  %3104 = fmul <2 x double> %block761, %splat.splat3898
  %3105 = fadd <2 x double> %3103, %3104
  %3106 = fmul <2 x double> %block764, %splat.splat3901
  %3107 = fadd <2 x double> %3105, %3106
  %3108 = fmul <2 x double> %block767, %splat.splat3904
  %3109 = fadd <2 x double> %3107, %3108
  %3110 = fmul <2 x double> %block770, %splat.splat3907
  %3111 = fadd <2 x double> %3109, %3110
  %3112 = fmul <2 x double> %block773, %splat.splat3910
  %3113 = fadd <2 x double> %3111, %3112
  %3114 = fmul <2 x double> %block776, %splat.splat3913
  %3115 = fadd <2 x double> %3113, %3114
  %3116 = fmul <2 x double> %block779, %splat.splat3916
  %3117 = fadd <2 x double> %3115, %3116
  %3118 = fmul <2 x double> %block782, %splat.splat3919
  %3119 = fadd <2 x double> %3117, %3118
  %3120 = fmul <2 x double> %block785, %splat.splat3922
  %3121 = fadd <2 x double> %3119, %3120
  %3122 = shufflevector <2 x double> %3121, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3123 = shufflevector <25 x double> %3084, <25 x double> %3122, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %3124 = fmul <2 x double> %block788, %splat.splat3868
  %3125 = fmul <2 x double> %block791, %splat.splat3871
  %3126 = fadd <2 x double> %3124, %3125
  %3127 = fmul <2 x double> %block794, %splat.splat3874
  %3128 = fadd <2 x double> %3126, %3127
  %3129 = fmul <2 x double> %block797, %splat.splat3877
  %3130 = fadd <2 x double> %3128, %3129
  %3131 = fmul <2 x double> %block800, %splat.splat3880
  %3132 = fadd <2 x double> %3130, %3131
  %3133 = fmul <2 x double> %block803, %splat.splat3883
  %3134 = fadd <2 x double> %3132, %3133
  %3135 = fmul <2 x double> %block806, %splat.splat3886
  %3136 = fadd <2 x double> %3134, %3135
  %3137 = fmul <2 x double> %block809, %splat.splat3889
  %3138 = fadd <2 x double> %3136, %3137
  %3139 = fmul <2 x double> %block812, %splat.splat3892
  %3140 = fadd <2 x double> %3138, %3139
  %3141 = fmul <2 x double> %block815, %splat.splat3895
  %3142 = fadd <2 x double> %3140, %3141
  %3143 = fmul <2 x double> %block818, %splat.splat3898
  %3144 = fadd <2 x double> %3142, %3143
  %3145 = fmul <2 x double> %block821, %splat.splat3901
  %3146 = fadd <2 x double> %3144, %3145
  %3147 = fmul <2 x double> %block824, %splat.splat3904
  %3148 = fadd <2 x double> %3146, %3147
  %3149 = fmul <2 x double> %block827, %splat.splat3907
  %3150 = fadd <2 x double> %3148, %3149
  %3151 = fmul <2 x double> %block830, %splat.splat3910
  %3152 = fadd <2 x double> %3150, %3151
  %3153 = fmul <2 x double> %block833, %splat.splat3913
  %3154 = fadd <2 x double> %3152, %3153
  %3155 = fmul <2 x double> %block836, %splat.splat3916
  %3156 = fadd <2 x double> %3154, %3155
  %3157 = fmul <2 x double> %block839, %splat.splat3919
  %3158 = fadd <2 x double> %3156, %3157
  %3159 = fmul <2 x double> %block842, %splat.splat3922
  %3160 = fadd <2 x double> %3158, %3159
  %3161 = shufflevector <2 x double> %3160, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3162 = shufflevector <25 x double> %3123, <25 x double> %3161, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %splat.splatinsert4551 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> zeroinitializer
  %3163 = fmul <1 x double> %block845, %splat.splatinsert4551
  %splat.splatinsert4554 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 1>
  %3164 = fmul <1 x double> %block848, %splat.splatinsert4554
  %3165 = fadd <1 x double> %3163, %3164
  %splat.splatinsert4557 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 2>
  %3166 = fmul <1 x double> %block851, %splat.splatinsert4557
  %3167 = fadd <1 x double> %3165, %3166
  %splat.splatinsert4560 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 3>
  %3168 = fmul <1 x double> %block854, %splat.splatinsert4560
  %3169 = fadd <1 x double> %3167, %3168
  %splat.splatinsert4563 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 4>
  %3170 = fmul <1 x double> %block857, %splat.splatinsert4563
  %3171 = fadd <1 x double> %3169, %3170
  %splat.splatinsert4566 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 5>
  %3172 = fmul <1 x double> %block860, %splat.splatinsert4566
  %3173 = fadd <1 x double> %3171, %3172
  %splat.splatinsert4569 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 6>
  %3174 = fmul <1 x double> %block863, %splat.splatinsert4569
  %3175 = fadd <1 x double> %3173, %3174
  %splat.splatinsert4572 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 7>
  %3176 = fmul <1 x double> %block866, %splat.splatinsert4572
  %3177 = fadd <1 x double> %3175, %3176
  %splat.splatinsert4575 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 8>
  %3178 = fmul <1 x double> %block869, %splat.splatinsert4575
  %3179 = fadd <1 x double> %3177, %3178
  %splat.splatinsert4578 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 9>
  %3180 = fmul <1 x double> %block872, %splat.splatinsert4578
  %3181 = fadd <1 x double> %3179, %3180
  %splat.splatinsert4581 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 10>
  %3182 = fmul <1 x double> %block875, %splat.splatinsert4581
  %3183 = fadd <1 x double> %3181, %3182
  %splat.splatinsert4584 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 11>
  %3184 = fmul <1 x double> %block878, %splat.splatinsert4584
  %3185 = fadd <1 x double> %3183, %3184
  %splat.splatinsert4587 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 12>
  %3186 = fmul <1 x double> %block881, %splat.splatinsert4587
  %3187 = fadd <1 x double> %3185, %3186
  %splat.splatinsert4590 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 13>
  %3188 = fmul <1 x double> %block884, %splat.splatinsert4590
  %3189 = fadd <1 x double> %3187, %3188
  %splat.splatinsert4593 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 14>
  %3190 = fmul <1 x double> %block887, %splat.splatinsert4593
  %3191 = fadd <1 x double> %3189, %3190
  %splat.splatinsert4596 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 15>
  %3192 = fmul <1 x double> %block890, %splat.splatinsert4596
  %3193 = fadd <1 x double> %3191, %3192
  %splat.splatinsert4599 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 16>
  %3194 = fmul <1 x double> %block893, %splat.splatinsert4599
  %3195 = fadd <1 x double> %3193, %3194
  %splat.splatinsert4602 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 17>
  %3196 = fmul <1 x double> %block896, %splat.splatinsert4602
  %3197 = fadd <1 x double> %3195, %3196
  %splat.splatinsert4605 = shufflevector <19 x double> %col.load153, <19 x double> undef, <1 x i32> <i32 18>
  %3198 = fmul <1 x double> %block899, %splat.splatinsert4605
  %3199 = fadd <1 x double> %3197, %3198
  %3200 = shufflevector <1 x double> %3199, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3201 = shufflevector <25 x double> %3162, <25 x double> %3200, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  %splat.splat4609 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> zeroinitializer
  %3202 = fmul <2 x double> %block, %splat.splat4609
  %splat.splat4612 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %3203 = fmul <2 x double> %block164, %splat.splat4612
  %3204 = fadd <2 x double> %3202, %3203
  %splat.splat4615 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %3205 = fmul <2 x double> %block167, %splat.splat4615
  %3206 = fadd <2 x double> %3204, %3205
  %splat.splat4618 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %3207 = fmul <2 x double> %block170, %splat.splat4618
  %3208 = fadd <2 x double> %3206, %3207
  %splat.splat4621 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %3209 = fmul <2 x double> %block173, %splat.splat4621
  %3210 = fadd <2 x double> %3208, %3209
  %splat.splat4624 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %3211 = fmul <2 x double> %block176, %splat.splat4624
  %3212 = fadd <2 x double> %3210, %3211
  %splat.splat4627 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %3213 = fmul <2 x double> %block179, %splat.splat4627
  %3214 = fadd <2 x double> %3212, %3213
  %splat.splat4630 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %3215 = fmul <2 x double> %block182, %splat.splat4630
  %3216 = fadd <2 x double> %3214, %3215
  %splat.splat4633 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %3217 = fmul <2 x double> %block185, %splat.splat4633
  %3218 = fadd <2 x double> %3216, %3217
  %splat.splat4636 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %3219 = fmul <2 x double> %block188, %splat.splat4636
  %3220 = fadd <2 x double> %3218, %3219
  %splat.splat4639 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %3221 = fmul <2 x double> %block191, %splat.splat4639
  %3222 = fadd <2 x double> %3220, %3221
  %splat.splat4642 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %3223 = fmul <2 x double> %block194, %splat.splat4642
  %3224 = fadd <2 x double> %3222, %3223
  %splat.splat4645 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %3225 = fmul <2 x double> %block197, %splat.splat4645
  %3226 = fadd <2 x double> %3224, %3225
  %splat.splat4648 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %3227 = fmul <2 x double> %block200, %splat.splat4648
  %3228 = fadd <2 x double> %3226, %3227
  %splat.splat4651 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %3229 = fmul <2 x double> %block203, %splat.splat4651
  %3230 = fadd <2 x double> %3228, %3229
  %splat.splat4654 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %3231 = fmul <2 x double> %block206, %splat.splat4654
  %3232 = fadd <2 x double> %3230, %3231
  %splat.splat4657 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %3233 = fmul <2 x double> %block209, %splat.splat4657
  %3234 = fadd <2 x double> %3232, %3233
  %splat.splat4660 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %3235 = fmul <2 x double> %block212, %splat.splat4660
  %3236 = fadd <2 x double> %3234, %3235
  %splat.splat4663 = shufflevector <19 x double> %col.load155, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %3237 = fmul <2 x double> %block215, %splat.splat4663
  %3238 = fadd <2 x double> %3236, %3237
  %3239 = shufflevector <2 x double> %3238, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3240 = fmul <2 x double> %block218, %splat.splat4609
  %3241 = fmul <2 x double> %block221, %splat.splat4612
  %3242 = fadd <2 x double> %3240, %3241
  %3243 = fmul <2 x double> %block224, %splat.splat4615
  %3244 = fadd <2 x double> %3242, %3243
  %3245 = fmul <2 x double> %block227, %splat.splat4618
  %3246 = fadd <2 x double> %3244, %3245
  %3247 = fmul <2 x double> %block230, %splat.splat4621
  %3248 = fadd <2 x double> %3246, %3247
  %3249 = fmul <2 x double> %block233, %splat.splat4624
  %3250 = fadd <2 x double> %3248, %3249
  %3251 = fmul <2 x double> %block236, %splat.splat4627
  %3252 = fadd <2 x double> %3250, %3251
  %3253 = fmul <2 x double> %block239, %splat.splat4630
  %3254 = fadd <2 x double> %3252, %3253
  %3255 = fmul <2 x double> %block242, %splat.splat4633
  %3256 = fadd <2 x double> %3254, %3255
  %3257 = fmul <2 x double> %block245, %splat.splat4636
  %3258 = fadd <2 x double> %3256, %3257
  %3259 = fmul <2 x double> %block248, %splat.splat4639
  %3260 = fadd <2 x double> %3258, %3259
  %3261 = fmul <2 x double> %block251, %splat.splat4642
  %3262 = fadd <2 x double> %3260, %3261
  %3263 = fmul <2 x double> %block254, %splat.splat4645
  %3264 = fadd <2 x double> %3262, %3263
  %3265 = fmul <2 x double> %block257, %splat.splat4648
  %3266 = fadd <2 x double> %3264, %3265
  %3267 = fmul <2 x double> %block260, %splat.splat4651
  %3268 = fadd <2 x double> %3266, %3267
  %3269 = fmul <2 x double> %block263, %splat.splat4654
  %3270 = fadd <2 x double> %3268, %3269
  %3271 = fmul <2 x double> %block266, %splat.splat4657
  %3272 = fadd <2 x double> %3270, %3271
  %3273 = fmul <2 x double> %block269, %splat.splat4660
  %3274 = fadd <2 x double> %3272, %3273
  %3275 = fmul <2 x double> %block272, %splat.splat4663
  %3276 = fadd <2 x double> %3274, %3275
  %3277 = shufflevector <2 x double> %3276, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3278 = shufflevector <25 x double> %3239, <25 x double> %3277, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3279 = fmul <2 x double> %block275, %splat.splat4609
  %3280 = fmul <2 x double> %block278, %splat.splat4612
  %3281 = fadd <2 x double> %3279, %3280
  %3282 = fmul <2 x double> %block281, %splat.splat4615
  %3283 = fadd <2 x double> %3281, %3282
  %3284 = fmul <2 x double> %block284, %splat.splat4618
  %3285 = fadd <2 x double> %3283, %3284
  %3286 = fmul <2 x double> %block287, %splat.splat4621
  %3287 = fadd <2 x double> %3285, %3286
  %3288 = fmul <2 x double> %block290, %splat.splat4624
  %3289 = fadd <2 x double> %3287, %3288
  %3290 = fmul <2 x double> %block293, %splat.splat4627
  %3291 = fadd <2 x double> %3289, %3290
  %3292 = fmul <2 x double> %block296, %splat.splat4630
  %3293 = fadd <2 x double> %3291, %3292
  %3294 = fmul <2 x double> %block299, %splat.splat4633
  %3295 = fadd <2 x double> %3293, %3294
  %3296 = fmul <2 x double> %block302, %splat.splat4636
  %3297 = fadd <2 x double> %3295, %3296
  %3298 = fmul <2 x double> %block305, %splat.splat4639
  %3299 = fadd <2 x double> %3297, %3298
  %3300 = fmul <2 x double> %block308, %splat.splat4642
  %3301 = fadd <2 x double> %3299, %3300
  %3302 = fmul <2 x double> %block311, %splat.splat4645
  %3303 = fadd <2 x double> %3301, %3302
  %3304 = fmul <2 x double> %block314, %splat.splat4648
  %3305 = fadd <2 x double> %3303, %3304
  %3306 = fmul <2 x double> %block317, %splat.splat4651
  %3307 = fadd <2 x double> %3305, %3306
  %3308 = fmul <2 x double> %block320, %splat.splat4654
  %3309 = fadd <2 x double> %3307, %3308
  %3310 = fmul <2 x double> %block323, %splat.splat4657
  %3311 = fadd <2 x double> %3309, %3310
  %3312 = fmul <2 x double> %block326, %splat.splat4660
  %3313 = fadd <2 x double> %3311, %3312
  %3314 = fmul <2 x double> %block329, %splat.splat4663
  %3315 = fadd <2 x double> %3313, %3314
  %3316 = shufflevector <2 x double> %3315, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3317 = shufflevector <25 x double> %3278, <25 x double> %3316, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3318 = fmul <2 x double> %block332, %splat.splat4609
  %3319 = fmul <2 x double> %block335, %splat.splat4612
  %3320 = fadd <2 x double> %3318, %3319
  %3321 = fmul <2 x double> %block338, %splat.splat4615
  %3322 = fadd <2 x double> %3320, %3321
  %3323 = fmul <2 x double> %block341, %splat.splat4618
  %3324 = fadd <2 x double> %3322, %3323
  %3325 = fmul <2 x double> %block344, %splat.splat4621
  %3326 = fadd <2 x double> %3324, %3325
  %3327 = fmul <2 x double> %block347, %splat.splat4624
  %3328 = fadd <2 x double> %3326, %3327
  %3329 = fmul <2 x double> %block350, %splat.splat4627
  %3330 = fadd <2 x double> %3328, %3329
  %3331 = fmul <2 x double> %block353, %splat.splat4630
  %3332 = fadd <2 x double> %3330, %3331
  %3333 = fmul <2 x double> %block356, %splat.splat4633
  %3334 = fadd <2 x double> %3332, %3333
  %3335 = fmul <2 x double> %block359, %splat.splat4636
  %3336 = fadd <2 x double> %3334, %3335
  %3337 = fmul <2 x double> %block362, %splat.splat4639
  %3338 = fadd <2 x double> %3336, %3337
  %3339 = fmul <2 x double> %block365, %splat.splat4642
  %3340 = fadd <2 x double> %3338, %3339
  %3341 = fmul <2 x double> %block368, %splat.splat4645
  %3342 = fadd <2 x double> %3340, %3341
  %3343 = fmul <2 x double> %block371, %splat.splat4648
  %3344 = fadd <2 x double> %3342, %3343
  %3345 = fmul <2 x double> %block374, %splat.splat4651
  %3346 = fadd <2 x double> %3344, %3345
  %3347 = fmul <2 x double> %block377, %splat.splat4654
  %3348 = fadd <2 x double> %3346, %3347
  %3349 = fmul <2 x double> %block380, %splat.splat4657
  %3350 = fadd <2 x double> %3348, %3349
  %3351 = fmul <2 x double> %block383, %splat.splat4660
  %3352 = fadd <2 x double> %3350, %3351
  %3353 = fmul <2 x double> %block386, %splat.splat4663
  %3354 = fadd <2 x double> %3352, %3353
  %3355 = shufflevector <2 x double> %3354, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3356 = shufflevector <25 x double> %3317, <25 x double> %3355, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3357 = fmul <2 x double> %block389, %splat.splat4609
  %3358 = fmul <2 x double> %block392, %splat.splat4612
  %3359 = fadd <2 x double> %3357, %3358
  %3360 = fmul <2 x double> %block395, %splat.splat4615
  %3361 = fadd <2 x double> %3359, %3360
  %3362 = fmul <2 x double> %block398, %splat.splat4618
  %3363 = fadd <2 x double> %3361, %3362
  %3364 = fmul <2 x double> %block401, %splat.splat4621
  %3365 = fadd <2 x double> %3363, %3364
  %3366 = fmul <2 x double> %block404, %splat.splat4624
  %3367 = fadd <2 x double> %3365, %3366
  %3368 = fmul <2 x double> %block407, %splat.splat4627
  %3369 = fadd <2 x double> %3367, %3368
  %3370 = fmul <2 x double> %block410, %splat.splat4630
  %3371 = fadd <2 x double> %3369, %3370
  %3372 = fmul <2 x double> %block413, %splat.splat4633
  %3373 = fadd <2 x double> %3371, %3372
  %3374 = fmul <2 x double> %block416, %splat.splat4636
  %3375 = fadd <2 x double> %3373, %3374
  %3376 = fmul <2 x double> %block419, %splat.splat4639
  %3377 = fadd <2 x double> %3375, %3376
  %3378 = fmul <2 x double> %block422, %splat.splat4642
  %3379 = fadd <2 x double> %3377, %3378
  %3380 = fmul <2 x double> %block425, %splat.splat4645
  %3381 = fadd <2 x double> %3379, %3380
  %3382 = fmul <2 x double> %block428, %splat.splat4648
  %3383 = fadd <2 x double> %3381, %3382
  %3384 = fmul <2 x double> %block431, %splat.splat4651
  %3385 = fadd <2 x double> %3383, %3384
  %3386 = fmul <2 x double> %block434, %splat.splat4654
  %3387 = fadd <2 x double> %3385, %3386
  %3388 = fmul <2 x double> %block437, %splat.splat4657
  %3389 = fadd <2 x double> %3387, %3388
  %3390 = fmul <2 x double> %block440, %splat.splat4660
  %3391 = fadd <2 x double> %3389, %3390
  %3392 = fmul <2 x double> %block443, %splat.splat4663
  %3393 = fadd <2 x double> %3391, %3392
  %3394 = shufflevector <2 x double> %3393, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3395 = shufflevector <25 x double> %3356, <25 x double> %3394, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3396 = fmul <2 x double> %block446, %splat.splat4609
  %3397 = fmul <2 x double> %block449, %splat.splat4612
  %3398 = fadd <2 x double> %3396, %3397
  %3399 = fmul <2 x double> %block452, %splat.splat4615
  %3400 = fadd <2 x double> %3398, %3399
  %3401 = fmul <2 x double> %block455, %splat.splat4618
  %3402 = fadd <2 x double> %3400, %3401
  %3403 = fmul <2 x double> %block458, %splat.splat4621
  %3404 = fadd <2 x double> %3402, %3403
  %3405 = fmul <2 x double> %block461, %splat.splat4624
  %3406 = fadd <2 x double> %3404, %3405
  %3407 = fmul <2 x double> %block464, %splat.splat4627
  %3408 = fadd <2 x double> %3406, %3407
  %3409 = fmul <2 x double> %block467, %splat.splat4630
  %3410 = fadd <2 x double> %3408, %3409
  %3411 = fmul <2 x double> %block470, %splat.splat4633
  %3412 = fadd <2 x double> %3410, %3411
  %3413 = fmul <2 x double> %block473, %splat.splat4636
  %3414 = fadd <2 x double> %3412, %3413
  %3415 = fmul <2 x double> %block476, %splat.splat4639
  %3416 = fadd <2 x double> %3414, %3415
  %3417 = fmul <2 x double> %block479, %splat.splat4642
  %3418 = fadd <2 x double> %3416, %3417
  %3419 = fmul <2 x double> %block482, %splat.splat4645
  %3420 = fadd <2 x double> %3418, %3419
  %3421 = fmul <2 x double> %block485, %splat.splat4648
  %3422 = fadd <2 x double> %3420, %3421
  %3423 = fmul <2 x double> %block488, %splat.splat4651
  %3424 = fadd <2 x double> %3422, %3423
  %3425 = fmul <2 x double> %block491, %splat.splat4654
  %3426 = fadd <2 x double> %3424, %3425
  %3427 = fmul <2 x double> %block494, %splat.splat4657
  %3428 = fadd <2 x double> %3426, %3427
  %3429 = fmul <2 x double> %block497, %splat.splat4660
  %3430 = fadd <2 x double> %3428, %3429
  %3431 = fmul <2 x double> %block500, %splat.splat4663
  %3432 = fadd <2 x double> %3430, %3431
  %3433 = shufflevector <2 x double> %3432, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3434 = shufflevector <25 x double> %3395, <25 x double> %3433, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3435 = fmul <2 x double> %block503, %splat.splat4609
  %3436 = fmul <2 x double> %block506, %splat.splat4612
  %3437 = fadd <2 x double> %3435, %3436
  %3438 = fmul <2 x double> %block509, %splat.splat4615
  %3439 = fadd <2 x double> %3437, %3438
  %3440 = fmul <2 x double> %block512, %splat.splat4618
  %3441 = fadd <2 x double> %3439, %3440
  %3442 = fmul <2 x double> %block515, %splat.splat4621
  %3443 = fadd <2 x double> %3441, %3442
  %3444 = fmul <2 x double> %block518, %splat.splat4624
  %3445 = fadd <2 x double> %3443, %3444
  %3446 = fmul <2 x double> %block521, %splat.splat4627
  %3447 = fadd <2 x double> %3445, %3446
  %3448 = fmul <2 x double> %block524, %splat.splat4630
  %3449 = fadd <2 x double> %3447, %3448
  %3450 = fmul <2 x double> %block527, %splat.splat4633
  %3451 = fadd <2 x double> %3449, %3450
  %3452 = fmul <2 x double> %block530, %splat.splat4636
  %3453 = fadd <2 x double> %3451, %3452
  %3454 = fmul <2 x double> %block533, %splat.splat4639
  %3455 = fadd <2 x double> %3453, %3454
  %3456 = fmul <2 x double> %block536, %splat.splat4642
  %3457 = fadd <2 x double> %3455, %3456
  %3458 = fmul <2 x double> %block539, %splat.splat4645
  %3459 = fadd <2 x double> %3457, %3458
  %3460 = fmul <2 x double> %block542, %splat.splat4648
  %3461 = fadd <2 x double> %3459, %3460
  %3462 = fmul <2 x double> %block545, %splat.splat4651
  %3463 = fadd <2 x double> %3461, %3462
  %3464 = fmul <2 x double> %block548, %splat.splat4654
  %3465 = fadd <2 x double> %3463, %3464
  %3466 = fmul <2 x double> %block551, %splat.splat4657
  %3467 = fadd <2 x double> %3465, %3466
  %3468 = fmul <2 x double> %block554, %splat.splat4660
  %3469 = fadd <2 x double> %3467, %3468
  %3470 = fmul <2 x double> %block557, %splat.splat4663
  %3471 = fadd <2 x double> %3469, %3470
  %3472 = shufflevector <2 x double> %3471, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3473 = shufflevector <25 x double> %3434, <25 x double> %3472, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3474 = fmul <2 x double> %block560, %splat.splat4609
  %3475 = fmul <2 x double> %block563, %splat.splat4612
  %3476 = fadd <2 x double> %3474, %3475
  %3477 = fmul <2 x double> %block566, %splat.splat4615
  %3478 = fadd <2 x double> %3476, %3477
  %3479 = fmul <2 x double> %block569, %splat.splat4618
  %3480 = fadd <2 x double> %3478, %3479
  %3481 = fmul <2 x double> %block572, %splat.splat4621
  %3482 = fadd <2 x double> %3480, %3481
  %3483 = fmul <2 x double> %block575, %splat.splat4624
  %3484 = fadd <2 x double> %3482, %3483
  %3485 = fmul <2 x double> %block578, %splat.splat4627
  %3486 = fadd <2 x double> %3484, %3485
  %3487 = fmul <2 x double> %block581, %splat.splat4630
  %3488 = fadd <2 x double> %3486, %3487
  %3489 = fmul <2 x double> %block584, %splat.splat4633
  %3490 = fadd <2 x double> %3488, %3489
  %3491 = fmul <2 x double> %block587, %splat.splat4636
  %3492 = fadd <2 x double> %3490, %3491
  %3493 = fmul <2 x double> %block590, %splat.splat4639
  %3494 = fadd <2 x double> %3492, %3493
  %3495 = fmul <2 x double> %block593, %splat.splat4642
  %3496 = fadd <2 x double> %3494, %3495
  %3497 = fmul <2 x double> %block596, %splat.splat4645
  %3498 = fadd <2 x double> %3496, %3497
  %3499 = fmul <2 x double> %block599, %splat.splat4648
  %3500 = fadd <2 x double> %3498, %3499
  %3501 = fmul <2 x double> %block602, %splat.splat4651
  %3502 = fadd <2 x double> %3500, %3501
  %3503 = fmul <2 x double> %block605, %splat.splat4654
  %3504 = fadd <2 x double> %3502, %3503
  %3505 = fmul <2 x double> %block608, %splat.splat4657
  %3506 = fadd <2 x double> %3504, %3505
  %3507 = fmul <2 x double> %block611, %splat.splat4660
  %3508 = fadd <2 x double> %3506, %3507
  %3509 = fmul <2 x double> %block614, %splat.splat4663
  %3510 = fadd <2 x double> %3508, %3509
  %3511 = shufflevector <2 x double> %3510, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3512 = shufflevector <25 x double> %3473, <25 x double> %3511, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3513 = fmul <2 x double> %block617, %splat.splat4609
  %3514 = fmul <2 x double> %block620, %splat.splat4612
  %3515 = fadd <2 x double> %3513, %3514
  %3516 = fmul <2 x double> %block623, %splat.splat4615
  %3517 = fadd <2 x double> %3515, %3516
  %3518 = fmul <2 x double> %block626, %splat.splat4618
  %3519 = fadd <2 x double> %3517, %3518
  %3520 = fmul <2 x double> %block629, %splat.splat4621
  %3521 = fadd <2 x double> %3519, %3520
  %3522 = fmul <2 x double> %block632, %splat.splat4624
  %3523 = fadd <2 x double> %3521, %3522
  %3524 = fmul <2 x double> %block635, %splat.splat4627
  %3525 = fadd <2 x double> %3523, %3524
  %3526 = fmul <2 x double> %block638, %splat.splat4630
  %3527 = fadd <2 x double> %3525, %3526
  %3528 = fmul <2 x double> %block641, %splat.splat4633
  %3529 = fadd <2 x double> %3527, %3528
  %3530 = fmul <2 x double> %block644, %splat.splat4636
  %3531 = fadd <2 x double> %3529, %3530
  %3532 = fmul <2 x double> %block647, %splat.splat4639
  %3533 = fadd <2 x double> %3531, %3532
  %3534 = fmul <2 x double> %block650, %splat.splat4642
  %3535 = fadd <2 x double> %3533, %3534
  %3536 = fmul <2 x double> %block653, %splat.splat4645
  %3537 = fadd <2 x double> %3535, %3536
  %3538 = fmul <2 x double> %block656, %splat.splat4648
  %3539 = fadd <2 x double> %3537, %3538
  %3540 = fmul <2 x double> %block659, %splat.splat4651
  %3541 = fadd <2 x double> %3539, %3540
  %3542 = fmul <2 x double> %block662, %splat.splat4654
  %3543 = fadd <2 x double> %3541, %3542
  %3544 = fmul <2 x double> %block665, %splat.splat4657
  %3545 = fadd <2 x double> %3543, %3544
  %3546 = fmul <2 x double> %block668, %splat.splat4660
  %3547 = fadd <2 x double> %3545, %3546
  %3548 = fmul <2 x double> %block671, %splat.splat4663
  %3549 = fadd <2 x double> %3547, %3548
  %3550 = shufflevector <2 x double> %3549, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3551 = shufflevector <25 x double> %3512, <25 x double> %3550, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3552 = fmul <2 x double> %block674, %splat.splat4609
  %3553 = fmul <2 x double> %block677, %splat.splat4612
  %3554 = fadd <2 x double> %3552, %3553
  %3555 = fmul <2 x double> %block680, %splat.splat4615
  %3556 = fadd <2 x double> %3554, %3555
  %3557 = fmul <2 x double> %block683, %splat.splat4618
  %3558 = fadd <2 x double> %3556, %3557
  %3559 = fmul <2 x double> %block686, %splat.splat4621
  %3560 = fadd <2 x double> %3558, %3559
  %3561 = fmul <2 x double> %block689, %splat.splat4624
  %3562 = fadd <2 x double> %3560, %3561
  %3563 = fmul <2 x double> %block692, %splat.splat4627
  %3564 = fadd <2 x double> %3562, %3563
  %3565 = fmul <2 x double> %block695, %splat.splat4630
  %3566 = fadd <2 x double> %3564, %3565
  %3567 = fmul <2 x double> %block698, %splat.splat4633
  %3568 = fadd <2 x double> %3566, %3567
  %3569 = fmul <2 x double> %block701, %splat.splat4636
  %3570 = fadd <2 x double> %3568, %3569
  %3571 = fmul <2 x double> %block704, %splat.splat4639
  %3572 = fadd <2 x double> %3570, %3571
  %3573 = fmul <2 x double> %block707, %splat.splat4642
  %3574 = fadd <2 x double> %3572, %3573
  %3575 = fmul <2 x double> %block710, %splat.splat4645
  %3576 = fadd <2 x double> %3574, %3575
  %3577 = fmul <2 x double> %block713, %splat.splat4648
  %3578 = fadd <2 x double> %3576, %3577
  %3579 = fmul <2 x double> %block716, %splat.splat4651
  %3580 = fadd <2 x double> %3578, %3579
  %3581 = fmul <2 x double> %block719, %splat.splat4654
  %3582 = fadd <2 x double> %3580, %3581
  %3583 = fmul <2 x double> %block722, %splat.splat4657
  %3584 = fadd <2 x double> %3582, %3583
  %3585 = fmul <2 x double> %block725, %splat.splat4660
  %3586 = fadd <2 x double> %3584, %3585
  %3587 = fmul <2 x double> %block728, %splat.splat4663
  %3588 = fadd <2 x double> %3586, %3587
  %3589 = shufflevector <2 x double> %3588, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3590 = shufflevector <25 x double> %3551, <25 x double> %3589, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3591 = fmul <2 x double> %block731, %splat.splat4609
  %3592 = fmul <2 x double> %block734, %splat.splat4612
  %3593 = fadd <2 x double> %3591, %3592
  %3594 = fmul <2 x double> %block737, %splat.splat4615
  %3595 = fadd <2 x double> %3593, %3594
  %3596 = fmul <2 x double> %block740, %splat.splat4618
  %3597 = fadd <2 x double> %3595, %3596
  %3598 = fmul <2 x double> %block743, %splat.splat4621
  %3599 = fadd <2 x double> %3597, %3598
  %3600 = fmul <2 x double> %block746, %splat.splat4624
  %3601 = fadd <2 x double> %3599, %3600
  %3602 = fmul <2 x double> %block749, %splat.splat4627
  %3603 = fadd <2 x double> %3601, %3602
  %3604 = fmul <2 x double> %block752, %splat.splat4630
  %3605 = fadd <2 x double> %3603, %3604
  %3606 = fmul <2 x double> %block755, %splat.splat4633
  %3607 = fadd <2 x double> %3605, %3606
  %3608 = fmul <2 x double> %block758, %splat.splat4636
  %3609 = fadd <2 x double> %3607, %3608
  %3610 = fmul <2 x double> %block761, %splat.splat4639
  %3611 = fadd <2 x double> %3609, %3610
  %3612 = fmul <2 x double> %block764, %splat.splat4642
  %3613 = fadd <2 x double> %3611, %3612
  %3614 = fmul <2 x double> %block767, %splat.splat4645
  %3615 = fadd <2 x double> %3613, %3614
  %3616 = fmul <2 x double> %block770, %splat.splat4648
  %3617 = fadd <2 x double> %3615, %3616
  %3618 = fmul <2 x double> %block773, %splat.splat4651
  %3619 = fadd <2 x double> %3617, %3618
  %3620 = fmul <2 x double> %block776, %splat.splat4654
  %3621 = fadd <2 x double> %3619, %3620
  %3622 = fmul <2 x double> %block779, %splat.splat4657
  %3623 = fadd <2 x double> %3621, %3622
  %3624 = fmul <2 x double> %block782, %splat.splat4660
  %3625 = fadd <2 x double> %3623, %3624
  %3626 = fmul <2 x double> %block785, %splat.splat4663
  %3627 = fadd <2 x double> %3625, %3626
  %3628 = shufflevector <2 x double> %3627, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3629 = shufflevector <25 x double> %3590, <25 x double> %3628, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %3630 = fmul <2 x double> %block788, %splat.splat4609
  %3631 = fmul <2 x double> %block791, %splat.splat4612
  %3632 = fadd <2 x double> %3630, %3631
  %3633 = fmul <2 x double> %block794, %splat.splat4615
  %3634 = fadd <2 x double> %3632, %3633
  %3635 = fmul <2 x double> %block797, %splat.splat4618
  %3636 = fadd <2 x double> %3634, %3635
  %3637 = fmul <2 x double> %block800, %splat.splat4621
  %3638 = fadd <2 x double> %3636, %3637
  %3639 = fmul <2 x double> %block803, %splat.splat4624
  %3640 = fadd <2 x double> %3638, %3639
  %3641 = fmul <2 x double> %block806, %splat.splat4627
  %3642 = fadd <2 x double> %3640, %3641
  %3643 = fmul <2 x double> %block809, %splat.splat4630
  %3644 = fadd <2 x double> %3642, %3643
  %3645 = fmul <2 x double> %block812, %splat.splat4633
  %3646 = fadd <2 x double> %3644, %3645
  %3647 = fmul <2 x double> %block815, %splat.splat4636
  %3648 = fadd <2 x double> %3646, %3647
  %3649 = fmul <2 x double> %block818, %splat.splat4639
  %3650 = fadd <2 x double> %3648, %3649
  %3651 = fmul <2 x double> %block821, %splat.splat4642
  %3652 = fadd <2 x double> %3650, %3651
  %3653 = fmul <2 x double> %block824, %splat.splat4645
  %3654 = fadd <2 x double> %3652, %3653
  %3655 = fmul <2 x double> %block827, %splat.splat4648
  %3656 = fadd <2 x double> %3654, %3655
  %3657 = fmul <2 x double> %block830, %splat.splat4651
  %3658 = fadd <2 x double> %3656, %3657
  %3659 = fmul <2 x double> %block833, %splat.splat4654
  %3660 = fadd <2 x double> %3658, %3659
  %3661 = fmul <2 x double> %block836, %splat.splat4657
  %3662 = fadd <2 x double> %3660, %3661
  %3663 = fmul <2 x double> %block839, %splat.splat4660
  %3664 = fadd <2 x double> %3662, %3663
  %3665 = fmul <2 x double> %block842, %splat.splat4663
  %3666 = fadd <2 x double> %3664, %3665
  %3667 = shufflevector <2 x double> %3666, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3668 = shufflevector <25 x double> %3629, <25 x double> %3667, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %splat.splatinsert5292 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> zeroinitializer
  %3669 = fmul <1 x double> %block845, %splat.splatinsert5292
  %splat.splatinsert5295 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 1>
  %3670 = fmul <1 x double> %block848, %splat.splatinsert5295
  %3671 = fadd <1 x double> %3669, %3670
  %splat.splatinsert5298 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 2>
  %3672 = fmul <1 x double> %block851, %splat.splatinsert5298
  %3673 = fadd <1 x double> %3671, %3672
  %splat.splatinsert5301 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 3>
  %3674 = fmul <1 x double> %block854, %splat.splatinsert5301
  %3675 = fadd <1 x double> %3673, %3674
  %splat.splatinsert5304 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 4>
  %3676 = fmul <1 x double> %block857, %splat.splatinsert5304
  %3677 = fadd <1 x double> %3675, %3676
  %splat.splatinsert5307 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 5>
  %3678 = fmul <1 x double> %block860, %splat.splatinsert5307
  %3679 = fadd <1 x double> %3677, %3678
  %splat.splatinsert5310 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 6>
  %3680 = fmul <1 x double> %block863, %splat.splatinsert5310
  %3681 = fadd <1 x double> %3679, %3680
  %splat.splatinsert5313 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 7>
  %3682 = fmul <1 x double> %block866, %splat.splatinsert5313
  %3683 = fadd <1 x double> %3681, %3682
  %splat.splatinsert5316 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 8>
  %3684 = fmul <1 x double> %block869, %splat.splatinsert5316
  %3685 = fadd <1 x double> %3683, %3684
  %splat.splatinsert5319 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 9>
  %3686 = fmul <1 x double> %block872, %splat.splatinsert5319
  %3687 = fadd <1 x double> %3685, %3686
  %splat.splatinsert5322 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 10>
  %3688 = fmul <1 x double> %block875, %splat.splatinsert5322
  %3689 = fadd <1 x double> %3687, %3688
  %splat.splatinsert5325 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 11>
  %3690 = fmul <1 x double> %block878, %splat.splatinsert5325
  %3691 = fadd <1 x double> %3689, %3690
  %splat.splatinsert5328 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 12>
  %3692 = fmul <1 x double> %block881, %splat.splatinsert5328
  %3693 = fadd <1 x double> %3691, %3692
  %splat.splatinsert5331 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 13>
  %3694 = fmul <1 x double> %block884, %splat.splatinsert5331
  %3695 = fadd <1 x double> %3693, %3694
  %splat.splatinsert5334 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 14>
  %3696 = fmul <1 x double> %block887, %splat.splatinsert5334
  %3697 = fadd <1 x double> %3695, %3696
  %splat.splatinsert5337 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 15>
  %3698 = fmul <1 x double> %block890, %splat.splatinsert5337
  %3699 = fadd <1 x double> %3697, %3698
  %splat.splatinsert5340 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 16>
  %3700 = fmul <1 x double> %block893, %splat.splatinsert5340
  %3701 = fadd <1 x double> %3699, %3700
  %splat.splatinsert5343 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 17>
  %3702 = fmul <1 x double> %block896, %splat.splatinsert5343
  %3703 = fadd <1 x double> %3701, %3702
  %splat.splatinsert5346 = shufflevector <19 x double> %col.load155, <19 x double> undef, <1 x i32> <i32 18>
  %3704 = fmul <1 x double> %block899, %splat.splatinsert5346
  %3705 = fadd <1 x double> %3703, %3704
  %3706 = shufflevector <1 x double> %3705, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3707 = shufflevector <25 x double> %3668, <25 x double> %3706, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  %splat.splat5350 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> zeroinitializer
  %3708 = fmul <2 x double> %block, %splat.splat5350
  %splat.splat5353 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %3709 = fmul <2 x double> %block164, %splat.splat5353
  %3710 = fadd <2 x double> %3708, %3709
  %splat.splat5356 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %3711 = fmul <2 x double> %block167, %splat.splat5356
  %3712 = fadd <2 x double> %3710, %3711
  %splat.splat5359 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %3713 = fmul <2 x double> %block170, %splat.splat5359
  %3714 = fadd <2 x double> %3712, %3713
  %splat.splat5362 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %3715 = fmul <2 x double> %block173, %splat.splat5362
  %3716 = fadd <2 x double> %3714, %3715
  %splat.splat5365 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %3717 = fmul <2 x double> %block176, %splat.splat5365
  %3718 = fadd <2 x double> %3716, %3717
  %splat.splat5368 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %3719 = fmul <2 x double> %block179, %splat.splat5368
  %3720 = fadd <2 x double> %3718, %3719
  %splat.splat5371 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %3721 = fmul <2 x double> %block182, %splat.splat5371
  %3722 = fadd <2 x double> %3720, %3721
  %splat.splat5374 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %3723 = fmul <2 x double> %block185, %splat.splat5374
  %3724 = fadd <2 x double> %3722, %3723
  %splat.splat5377 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %3725 = fmul <2 x double> %block188, %splat.splat5377
  %3726 = fadd <2 x double> %3724, %3725
  %splat.splat5380 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %3727 = fmul <2 x double> %block191, %splat.splat5380
  %3728 = fadd <2 x double> %3726, %3727
  %splat.splat5383 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %3729 = fmul <2 x double> %block194, %splat.splat5383
  %3730 = fadd <2 x double> %3728, %3729
  %splat.splat5386 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %3731 = fmul <2 x double> %block197, %splat.splat5386
  %3732 = fadd <2 x double> %3730, %3731
  %splat.splat5389 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %3733 = fmul <2 x double> %block200, %splat.splat5389
  %3734 = fadd <2 x double> %3732, %3733
  %splat.splat5392 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %3735 = fmul <2 x double> %block203, %splat.splat5392
  %3736 = fadd <2 x double> %3734, %3735
  %splat.splat5395 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %3737 = fmul <2 x double> %block206, %splat.splat5395
  %3738 = fadd <2 x double> %3736, %3737
  %splat.splat5398 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %3739 = fmul <2 x double> %block209, %splat.splat5398
  %3740 = fadd <2 x double> %3738, %3739
  %splat.splat5401 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %3741 = fmul <2 x double> %block212, %splat.splat5401
  %3742 = fadd <2 x double> %3740, %3741
  %splat.splat5404 = shufflevector <19 x double> %col.load157, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %3743 = fmul <2 x double> %block215, %splat.splat5404
  %3744 = fadd <2 x double> %3742, %3743
  %3745 = shufflevector <2 x double> %3744, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3746 = fmul <2 x double> %block218, %splat.splat5350
  %3747 = fmul <2 x double> %block221, %splat.splat5353
  %3748 = fadd <2 x double> %3746, %3747
  %3749 = fmul <2 x double> %block224, %splat.splat5356
  %3750 = fadd <2 x double> %3748, %3749
  %3751 = fmul <2 x double> %block227, %splat.splat5359
  %3752 = fadd <2 x double> %3750, %3751
  %3753 = fmul <2 x double> %block230, %splat.splat5362
  %3754 = fadd <2 x double> %3752, %3753
  %3755 = fmul <2 x double> %block233, %splat.splat5365
  %3756 = fadd <2 x double> %3754, %3755
  %3757 = fmul <2 x double> %block236, %splat.splat5368
  %3758 = fadd <2 x double> %3756, %3757
  %3759 = fmul <2 x double> %block239, %splat.splat5371
  %3760 = fadd <2 x double> %3758, %3759
  %3761 = fmul <2 x double> %block242, %splat.splat5374
  %3762 = fadd <2 x double> %3760, %3761
  %3763 = fmul <2 x double> %block245, %splat.splat5377
  %3764 = fadd <2 x double> %3762, %3763
  %3765 = fmul <2 x double> %block248, %splat.splat5380
  %3766 = fadd <2 x double> %3764, %3765
  %3767 = fmul <2 x double> %block251, %splat.splat5383
  %3768 = fadd <2 x double> %3766, %3767
  %3769 = fmul <2 x double> %block254, %splat.splat5386
  %3770 = fadd <2 x double> %3768, %3769
  %3771 = fmul <2 x double> %block257, %splat.splat5389
  %3772 = fadd <2 x double> %3770, %3771
  %3773 = fmul <2 x double> %block260, %splat.splat5392
  %3774 = fadd <2 x double> %3772, %3773
  %3775 = fmul <2 x double> %block263, %splat.splat5395
  %3776 = fadd <2 x double> %3774, %3775
  %3777 = fmul <2 x double> %block266, %splat.splat5398
  %3778 = fadd <2 x double> %3776, %3777
  %3779 = fmul <2 x double> %block269, %splat.splat5401
  %3780 = fadd <2 x double> %3778, %3779
  %3781 = fmul <2 x double> %block272, %splat.splat5404
  %3782 = fadd <2 x double> %3780, %3781
  %3783 = shufflevector <2 x double> %3782, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3784 = shufflevector <25 x double> %3745, <25 x double> %3783, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3785 = fmul <2 x double> %block275, %splat.splat5350
  %3786 = fmul <2 x double> %block278, %splat.splat5353
  %3787 = fadd <2 x double> %3785, %3786
  %3788 = fmul <2 x double> %block281, %splat.splat5356
  %3789 = fadd <2 x double> %3787, %3788
  %3790 = fmul <2 x double> %block284, %splat.splat5359
  %3791 = fadd <2 x double> %3789, %3790
  %3792 = fmul <2 x double> %block287, %splat.splat5362
  %3793 = fadd <2 x double> %3791, %3792
  %3794 = fmul <2 x double> %block290, %splat.splat5365
  %3795 = fadd <2 x double> %3793, %3794
  %3796 = fmul <2 x double> %block293, %splat.splat5368
  %3797 = fadd <2 x double> %3795, %3796
  %3798 = fmul <2 x double> %block296, %splat.splat5371
  %3799 = fadd <2 x double> %3797, %3798
  %3800 = fmul <2 x double> %block299, %splat.splat5374
  %3801 = fadd <2 x double> %3799, %3800
  %3802 = fmul <2 x double> %block302, %splat.splat5377
  %3803 = fadd <2 x double> %3801, %3802
  %3804 = fmul <2 x double> %block305, %splat.splat5380
  %3805 = fadd <2 x double> %3803, %3804
  %3806 = fmul <2 x double> %block308, %splat.splat5383
  %3807 = fadd <2 x double> %3805, %3806
  %3808 = fmul <2 x double> %block311, %splat.splat5386
  %3809 = fadd <2 x double> %3807, %3808
  %3810 = fmul <2 x double> %block314, %splat.splat5389
  %3811 = fadd <2 x double> %3809, %3810
  %3812 = fmul <2 x double> %block317, %splat.splat5392
  %3813 = fadd <2 x double> %3811, %3812
  %3814 = fmul <2 x double> %block320, %splat.splat5395
  %3815 = fadd <2 x double> %3813, %3814
  %3816 = fmul <2 x double> %block323, %splat.splat5398
  %3817 = fadd <2 x double> %3815, %3816
  %3818 = fmul <2 x double> %block326, %splat.splat5401
  %3819 = fadd <2 x double> %3817, %3818
  %3820 = fmul <2 x double> %block329, %splat.splat5404
  %3821 = fadd <2 x double> %3819, %3820
  %3822 = shufflevector <2 x double> %3821, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3823 = shufflevector <25 x double> %3784, <25 x double> %3822, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3824 = fmul <2 x double> %block332, %splat.splat5350
  %3825 = fmul <2 x double> %block335, %splat.splat5353
  %3826 = fadd <2 x double> %3824, %3825
  %3827 = fmul <2 x double> %block338, %splat.splat5356
  %3828 = fadd <2 x double> %3826, %3827
  %3829 = fmul <2 x double> %block341, %splat.splat5359
  %3830 = fadd <2 x double> %3828, %3829
  %3831 = fmul <2 x double> %block344, %splat.splat5362
  %3832 = fadd <2 x double> %3830, %3831
  %3833 = fmul <2 x double> %block347, %splat.splat5365
  %3834 = fadd <2 x double> %3832, %3833
  %3835 = fmul <2 x double> %block350, %splat.splat5368
  %3836 = fadd <2 x double> %3834, %3835
  %3837 = fmul <2 x double> %block353, %splat.splat5371
  %3838 = fadd <2 x double> %3836, %3837
  %3839 = fmul <2 x double> %block356, %splat.splat5374
  %3840 = fadd <2 x double> %3838, %3839
  %3841 = fmul <2 x double> %block359, %splat.splat5377
  %3842 = fadd <2 x double> %3840, %3841
  %3843 = fmul <2 x double> %block362, %splat.splat5380
  %3844 = fadd <2 x double> %3842, %3843
  %3845 = fmul <2 x double> %block365, %splat.splat5383
  %3846 = fadd <2 x double> %3844, %3845
  %3847 = fmul <2 x double> %block368, %splat.splat5386
  %3848 = fadd <2 x double> %3846, %3847
  %3849 = fmul <2 x double> %block371, %splat.splat5389
  %3850 = fadd <2 x double> %3848, %3849
  %3851 = fmul <2 x double> %block374, %splat.splat5392
  %3852 = fadd <2 x double> %3850, %3851
  %3853 = fmul <2 x double> %block377, %splat.splat5395
  %3854 = fadd <2 x double> %3852, %3853
  %3855 = fmul <2 x double> %block380, %splat.splat5398
  %3856 = fadd <2 x double> %3854, %3855
  %3857 = fmul <2 x double> %block383, %splat.splat5401
  %3858 = fadd <2 x double> %3856, %3857
  %3859 = fmul <2 x double> %block386, %splat.splat5404
  %3860 = fadd <2 x double> %3858, %3859
  %3861 = shufflevector <2 x double> %3860, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3862 = shufflevector <25 x double> %3823, <25 x double> %3861, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3863 = fmul <2 x double> %block389, %splat.splat5350
  %3864 = fmul <2 x double> %block392, %splat.splat5353
  %3865 = fadd <2 x double> %3863, %3864
  %3866 = fmul <2 x double> %block395, %splat.splat5356
  %3867 = fadd <2 x double> %3865, %3866
  %3868 = fmul <2 x double> %block398, %splat.splat5359
  %3869 = fadd <2 x double> %3867, %3868
  %3870 = fmul <2 x double> %block401, %splat.splat5362
  %3871 = fadd <2 x double> %3869, %3870
  %3872 = fmul <2 x double> %block404, %splat.splat5365
  %3873 = fadd <2 x double> %3871, %3872
  %3874 = fmul <2 x double> %block407, %splat.splat5368
  %3875 = fadd <2 x double> %3873, %3874
  %3876 = fmul <2 x double> %block410, %splat.splat5371
  %3877 = fadd <2 x double> %3875, %3876
  %3878 = fmul <2 x double> %block413, %splat.splat5374
  %3879 = fadd <2 x double> %3877, %3878
  %3880 = fmul <2 x double> %block416, %splat.splat5377
  %3881 = fadd <2 x double> %3879, %3880
  %3882 = fmul <2 x double> %block419, %splat.splat5380
  %3883 = fadd <2 x double> %3881, %3882
  %3884 = fmul <2 x double> %block422, %splat.splat5383
  %3885 = fadd <2 x double> %3883, %3884
  %3886 = fmul <2 x double> %block425, %splat.splat5386
  %3887 = fadd <2 x double> %3885, %3886
  %3888 = fmul <2 x double> %block428, %splat.splat5389
  %3889 = fadd <2 x double> %3887, %3888
  %3890 = fmul <2 x double> %block431, %splat.splat5392
  %3891 = fadd <2 x double> %3889, %3890
  %3892 = fmul <2 x double> %block434, %splat.splat5395
  %3893 = fadd <2 x double> %3891, %3892
  %3894 = fmul <2 x double> %block437, %splat.splat5398
  %3895 = fadd <2 x double> %3893, %3894
  %3896 = fmul <2 x double> %block440, %splat.splat5401
  %3897 = fadd <2 x double> %3895, %3896
  %3898 = fmul <2 x double> %block443, %splat.splat5404
  %3899 = fadd <2 x double> %3897, %3898
  %3900 = shufflevector <2 x double> %3899, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3901 = shufflevector <25 x double> %3862, <25 x double> %3900, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3902 = fmul <2 x double> %block446, %splat.splat5350
  %3903 = fmul <2 x double> %block449, %splat.splat5353
  %3904 = fadd <2 x double> %3902, %3903
  %3905 = fmul <2 x double> %block452, %splat.splat5356
  %3906 = fadd <2 x double> %3904, %3905
  %3907 = fmul <2 x double> %block455, %splat.splat5359
  %3908 = fadd <2 x double> %3906, %3907
  %3909 = fmul <2 x double> %block458, %splat.splat5362
  %3910 = fadd <2 x double> %3908, %3909
  %3911 = fmul <2 x double> %block461, %splat.splat5365
  %3912 = fadd <2 x double> %3910, %3911
  %3913 = fmul <2 x double> %block464, %splat.splat5368
  %3914 = fadd <2 x double> %3912, %3913
  %3915 = fmul <2 x double> %block467, %splat.splat5371
  %3916 = fadd <2 x double> %3914, %3915
  %3917 = fmul <2 x double> %block470, %splat.splat5374
  %3918 = fadd <2 x double> %3916, %3917
  %3919 = fmul <2 x double> %block473, %splat.splat5377
  %3920 = fadd <2 x double> %3918, %3919
  %3921 = fmul <2 x double> %block476, %splat.splat5380
  %3922 = fadd <2 x double> %3920, %3921
  %3923 = fmul <2 x double> %block479, %splat.splat5383
  %3924 = fadd <2 x double> %3922, %3923
  %3925 = fmul <2 x double> %block482, %splat.splat5386
  %3926 = fadd <2 x double> %3924, %3925
  %3927 = fmul <2 x double> %block485, %splat.splat5389
  %3928 = fadd <2 x double> %3926, %3927
  %3929 = fmul <2 x double> %block488, %splat.splat5392
  %3930 = fadd <2 x double> %3928, %3929
  %3931 = fmul <2 x double> %block491, %splat.splat5395
  %3932 = fadd <2 x double> %3930, %3931
  %3933 = fmul <2 x double> %block494, %splat.splat5398
  %3934 = fadd <2 x double> %3932, %3933
  %3935 = fmul <2 x double> %block497, %splat.splat5401
  %3936 = fadd <2 x double> %3934, %3935
  %3937 = fmul <2 x double> %block500, %splat.splat5404
  %3938 = fadd <2 x double> %3936, %3937
  %3939 = shufflevector <2 x double> %3938, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3940 = shufflevector <25 x double> %3901, <25 x double> %3939, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3941 = fmul <2 x double> %block503, %splat.splat5350
  %3942 = fmul <2 x double> %block506, %splat.splat5353
  %3943 = fadd <2 x double> %3941, %3942
  %3944 = fmul <2 x double> %block509, %splat.splat5356
  %3945 = fadd <2 x double> %3943, %3944
  %3946 = fmul <2 x double> %block512, %splat.splat5359
  %3947 = fadd <2 x double> %3945, %3946
  %3948 = fmul <2 x double> %block515, %splat.splat5362
  %3949 = fadd <2 x double> %3947, %3948
  %3950 = fmul <2 x double> %block518, %splat.splat5365
  %3951 = fadd <2 x double> %3949, %3950
  %3952 = fmul <2 x double> %block521, %splat.splat5368
  %3953 = fadd <2 x double> %3951, %3952
  %3954 = fmul <2 x double> %block524, %splat.splat5371
  %3955 = fadd <2 x double> %3953, %3954
  %3956 = fmul <2 x double> %block527, %splat.splat5374
  %3957 = fadd <2 x double> %3955, %3956
  %3958 = fmul <2 x double> %block530, %splat.splat5377
  %3959 = fadd <2 x double> %3957, %3958
  %3960 = fmul <2 x double> %block533, %splat.splat5380
  %3961 = fadd <2 x double> %3959, %3960
  %3962 = fmul <2 x double> %block536, %splat.splat5383
  %3963 = fadd <2 x double> %3961, %3962
  %3964 = fmul <2 x double> %block539, %splat.splat5386
  %3965 = fadd <2 x double> %3963, %3964
  %3966 = fmul <2 x double> %block542, %splat.splat5389
  %3967 = fadd <2 x double> %3965, %3966
  %3968 = fmul <2 x double> %block545, %splat.splat5392
  %3969 = fadd <2 x double> %3967, %3968
  %3970 = fmul <2 x double> %block548, %splat.splat5395
  %3971 = fadd <2 x double> %3969, %3970
  %3972 = fmul <2 x double> %block551, %splat.splat5398
  %3973 = fadd <2 x double> %3971, %3972
  %3974 = fmul <2 x double> %block554, %splat.splat5401
  %3975 = fadd <2 x double> %3973, %3974
  %3976 = fmul <2 x double> %block557, %splat.splat5404
  %3977 = fadd <2 x double> %3975, %3976
  %3978 = shufflevector <2 x double> %3977, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3979 = shufflevector <25 x double> %3940, <25 x double> %3978, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3980 = fmul <2 x double> %block560, %splat.splat5350
  %3981 = fmul <2 x double> %block563, %splat.splat5353
  %3982 = fadd <2 x double> %3980, %3981
  %3983 = fmul <2 x double> %block566, %splat.splat5356
  %3984 = fadd <2 x double> %3982, %3983
  %3985 = fmul <2 x double> %block569, %splat.splat5359
  %3986 = fadd <2 x double> %3984, %3985
  %3987 = fmul <2 x double> %block572, %splat.splat5362
  %3988 = fadd <2 x double> %3986, %3987
  %3989 = fmul <2 x double> %block575, %splat.splat5365
  %3990 = fadd <2 x double> %3988, %3989
  %3991 = fmul <2 x double> %block578, %splat.splat5368
  %3992 = fadd <2 x double> %3990, %3991
  %3993 = fmul <2 x double> %block581, %splat.splat5371
  %3994 = fadd <2 x double> %3992, %3993
  %3995 = fmul <2 x double> %block584, %splat.splat5374
  %3996 = fadd <2 x double> %3994, %3995
  %3997 = fmul <2 x double> %block587, %splat.splat5377
  %3998 = fadd <2 x double> %3996, %3997
  %3999 = fmul <2 x double> %block590, %splat.splat5380
  %4000 = fadd <2 x double> %3998, %3999
  %4001 = fmul <2 x double> %block593, %splat.splat5383
  %4002 = fadd <2 x double> %4000, %4001
  %4003 = fmul <2 x double> %block596, %splat.splat5386
  %4004 = fadd <2 x double> %4002, %4003
  %4005 = fmul <2 x double> %block599, %splat.splat5389
  %4006 = fadd <2 x double> %4004, %4005
  %4007 = fmul <2 x double> %block602, %splat.splat5392
  %4008 = fadd <2 x double> %4006, %4007
  %4009 = fmul <2 x double> %block605, %splat.splat5395
  %4010 = fadd <2 x double> %4008, %4009
  %4011 = fmul <2 x double> %block608, %splat.splat5398
  %4012 = fadd <2 x double> %4010, %4011
  %4013 = fmul <2 x double> %block611, %splat.splat5401
  %4014 = fadd <2 x double> %4012, %4013
  %4015 = fmul <2 x double> %block614, %splat.splat5404
  %4016 = fadd <2 x double> %4014, %4015
  %4017 = shufflevector <2 x double> %4016, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4018 = shufflevector <25 x double> %3979, <25 x double> %4017, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4019 = fmul <2 x double> %block617, %splat.splat5350
  %4020 = fmul <2 x double> %block620, %splat.splat5353
  %4021 = fadd <2 x double> %4019, %4020
  %4022 = fmul <2 x double> %block623, %splat.splat5356
  %4023 = fadd <2 x double> %4021, %4022
  %4024 = fmul <2 x double> %block626, %splat.splat5359
  %4025 = fadd <2 x double> %4023, %4024
  %4026 = fmul <2 x double> %block629, %splat.splat5362
  %4027 = fadd <2 x double> %4025, %4026
  %4028 = fmul <2 x double> %block632, %splat.splat5365
  %4029 = fadd <2 x double> %4027, %4028
  %4030 = fmul <2 x double> %block635, %splat.splat5368
  %4031 = fadd <2 x double> %4029, %4030
  %4032 = fmul <2 x double> %block638, %splat.splat5371
  %4033 = fadd <2 x double> %4031, %4032
  %4034 = fmul <2 x double> %block641, %splat.splat5374
  %4035 = fadd <2 x double> %4033, %4034
  %4036 = fmul <2 x double> %block644, %splat.splat5377
  %4037 = fadd <2 x double> %4035, %4036
  %4038 = fmul <2 x double> %block647, %splat.splat5380
  %4039 = fadd <2 x double> %4037, %4038
  %4040 = fmul <2 x double> %block650, %splat.splat5383
  %4041 = fadd <2 x double> %4039, %4040
  %4042 = fmul <2 x double> %block653, %splat.splat5386
  %4043 = fadd <2 x double> %4041, %4042
  %4044 = fmul <2 x double> %block656, %splat.splat5389
  %4045 = fadd <2 x double> %4043, %4044
  %4046 = fmul <2 x double> %block659, %splat.splat5392
  %4047 = fadd <2 x double> %4045, %4046
  %4048 = fmul <2 x double> %block662, %splat.splat5395
  %4049 = fadd <2 x double> %4047, %4048
  %4050 = fmul <2 x double> %block665, %splat.splat5398
  %4051 = fadd <2 x double> %4049, %4050
  %4052 = fmul <2 x double> %block668, %splat.splat5401
  %4053 = fadd <2 x double> %4051, %4052
  %4054 = fmul <2 x double> %block671, %splat.splat5404
  %4055 = fadd <2 x double> %4053, %4054
  %4056 = shufflevector <2 x double> %4055, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4057 = shufflevector <25 x double> %4018, <25 x double> %4056, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4058 = fmul <2 x double> %block674, %splat.splat5350
  %4059 = fmul <2 x double> %block677, %splat.splat5353
  %4060 = fadd <2 x double> %4058, %4059
  %4061 = fmul <2 x double> %block680, %splat.splat5356
  %4062 = fadd <2 x double> %4060, %4061
  %4063 = fmul <2 x double> %block683, %splat.splat5359
  %4064 = fadd <2 x double> %4062, %4063
  %4065 = fmul <2 x double> %block686, %splat.splat5362
  %4066 = fadd <2 x double> %4064, %4065
  %4067 = fmul <2 x double> %block689, %splat.splat5365
  %4068 = fadd <2 x double> %4066, %4067
  %4069 = fmul <2 x double> %block692, %splat.splat5368
  %4070 = fadd <2 x double> %4068, %4069
  %4071 = fmul <2 x double> %block695, %splat.splat5371
  %4072 = fadd <2 x double> %4070, %4071
  %4073 = fmul <2 x double> %block698, %splat.splat5374
  %4074 = fadd <2 x double> %4072, %4073
  %4075 = fmul <2 x double> %block701, %splat.splat5377
  %4076 = fadd <2 x double> %4074, %4075
  %4077 = fmul <2 x double> %block704, %splat.splat5380
  %4078 = fadd <2 x double> %4076, %4077
  %4079 = fmul <2 x double> %block707, %splat.splat5383
  %4080 = fadd <2 x double> %4078, %4079
  %4081 = fmul <2 x double> %block710, %splat.splat5386
  %4082 = fadd <2 x double> %4080, %4081
  %4083 = fmul <2 x double> %block713, %splat.splat5389
  %4084 = fadd <2 x double> %4082, %4083
  %4085 = fmul <2 x double> %block716, %splat.splat5392
  %4086 = fadd <2 x double> %4084, %4085
  %4087 = fmul <2 x double> %block719, %splat.splat5395
  %4088 = fadd <2 x double> %4086, %4087
  %4089 = fmul <2 x double> %block722, %splat.splat5398
  %4090 = fadd <2 x double> %4088, %4089
  %4091 = fmul <2 x double> %block725, %splat.splat5401
  %4092 = fadd <2 x double> %4090, %4091
  %4093 = fmul <2 x double> %block728, %splat.splat5404
  %4094 = fadd <2 x double> %4092, %4093
  %4095 = shufflevector <2 x double> %4094, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4096 = shufflevector <25 x double> %4057, <25 x double> %4095, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4097 = fmul <2 x double> %block731, %splat.splat5350
  %4098 = fmul <2 x double> %block734, %splat.splat5353
  %4099 = fadd <2 x double> %4097, %4098
  %4100 = fmul <2 x double> %block737, %splat.splat5356
  %4101 = fadd <2 x double> %4099, %4100
  %4102 = fmul <2 x double> %block740, %splat.splat5359
  %4103 = fadd <2 x double> %4101, %4102
  %4104 = fmul <2 x double> %block743, %splat.splat5362
  %4105 = fadd <2 x double> %4103, %4104
  %4106 = fmul <2 x double> %block746, %splat.splat5365
  %4107 = fadd <2 x double> %4105, %4106
  %4108 = fmul <2 x double> %block749, %splat.splat5368
  %4109 = fadd <2 x double> %4107, %4108
  %4110 = fmul <2 x double> %block752, %splat.splat5371
  %4111 = fadd <2 x double> %4109, %4110
  %4112 = fmul <2 x double> %block755, %splat.splat5374
  %4113 = fadd <2 x double> %4111, %4112
  %4114 = fmul <2 x double> %block758, %splat.splat5377
  %4115 = fadd <2 x double> %4113, %4114
  %4116 = fmul <2 x double> %block761, %splat.splat5380
  %4117 = fadd <2 x double> %4115, %4116
  %4118 = fmul <2 x double> %block764, %splat.splat5383
  %4119 = fadd <2 x double> %4117, %4118
  %4120 = fmul <2 x double> %block767, %splat.splat5386
  %4121 = fadd <2 x double> %4119, %4120
  %4122 = fmul <2 x double> %block770, %splat.splat5389
  %4123 = fadd <2 x double> %4121, %4122
  %4124 = fmul <2 x double> %block773, %splat.splat5392
  %4125 = fadd <2 x double> %4123, %4124
  %4126 = fmul <2 x double> %block776, %splat.splat5395
  %4127 = fadd <2 x double> %4125, %4126
  %4128 = fmul <2 x double> %block779, %splat.splat5398
  %4129 = fadd <2 x double> %4127, %4128
  %4130 = fmul <2 x double> %block782, %splat.splat5401
  %4131 = fadd <2 x double> %4129, %4130
  %4132 = fmul <2 x double> %block785, %splat.splat5404
  %4133 = fadd <2 x double> %4131, %4132
  %4134 = shufflevector <2 x double> %4133, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4135 = shufflevector <25 x double> %4096, <25 x double> %4134, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %4136 = fmul <2 x double> %block788, %splat.splat5350
  %4137 = fmul <2 x double> %block791, %splat.splat5353
  %4138 = fadd <2 x double> %4136, %4137
  %4139 = fmul <2 x double> %block794, %splat.splat5356
  %4140 = fadd <2 x double> %4138, %4139
  %4141 = fmul <2 x double> %block797, %splat.splat5359
  %4142 = fadd <2 x double> %4140, %4141
  %4143 = fmul <2 x double> %block800, %splat.splat5362
  %4144 = fadd <2 x double> %4142, %4143
  %4145 = fmul <2 x double> %block803, %splat.splat5365
  %4146 = fadd <2 x double> %4144, %4145
  %4147 = fmul <2 x double> %block806, %splat.splat5368
  %4148 = fadd <2 x double> %4146, %4147
  %4149 = fmul <2 x double> %block809, %splat.splat5371
  %4150 = fadd <2 x double> %4148, %4149
  %4151 = fmul <2 x double> %block812, %splat.splat5374
  %4152 = fadd <2 x double> %4150, %4151
  %4153 = fmul <2 x double> %block815, %splat.splat5377
  %4154 = fadd <2 x double> %4152, %4153
  %4155 = fmul <2 x double> %block818, %splat.splat5380
  %4156 = fadd <2 x double> %4154, %4155
  %4157 = fmul <2 x double> %block821, %splat.splat5383
  %4158 = fadd <2 x double> %4156, %4157
  %4159 = fmul <2 x double> %block824, %splat.splat5386
  %4160 = fadd <2 x double> %4158, %4159
  %4161 = fmul <2 x double> %block827, %splat.splat5389
  %4162 = fadd <2 x double> %4160, %4161
  %4163 = fmul <2 x double> %block830, %splat.splat5392
  %4164 = fadd <2 x double> %4162, %4163
  %4165 = fmul <2 x double> %block833, %splat.splat5395
  %4166 = fadd <2 x double> %4164, %4165
  %4167 = fmul <2 x double> %block836, %splat.splat5398
  %4168 = fadd <2 x double> %4166, %4167
  %4169 = fmul <2 x double> %block839, %splat.splat5401
  %4170 = fadd <2 x double> %4168, %4169
  %4171 = fmul <2 x double> %block842, %splat.splat5404
  %4172 = fadd <2 x double> %4170, %4171
  %4173 = shufflevector <2 x double> %4172, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4174 = shufflevector <25 x double> %4135, <25 x double> %4173, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %splat.splatinsert6033 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> zeroinitializer
  %4175 = fmul <1 x double> %block845, %splat.splatinsert6033
  %splat.splatinsert6036 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 1>
  %4176 = fmul <1 x double> %block848, %splat.splatinsert6036
  %4177 = fadd <1 x double> %4175, %4176
  %splat.splatinsert6039 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 2>
  %4178 = fmul <1 x double> %block851, %splat.splatinsert6039
  %4179 = fadd <1 x double> %4177, %4178
  %splat.splatinsert6042 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 3>
  %4180 = fmul <1 x double> %block854, %splat.splatinsert6042
  %4181 = fadd <1 x double> %4179, %4180
  %splat.splatinsert6045 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 4>
  %4182 = fmul <1 x double> %block857, %splat.splatinsert6045
  %4183 = fadd <1 x double> %4181, %4182
  %splat.splatinsert6048 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 5>
  %4184 = fmul <1 x double> %block860, %splat.splatinsert6048
  %4185 = fadd <1 x double> %4183, %4184
  %splat.splatinsert6051 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 6>
  %4186 = fmul <1 x double> %block863, %splat.splatinsert6051
  %4187 = fadd <1 x double> %4185, %4186
  %splat.splatinsert6054 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 7>
  %4188 = fmul <1 x double> %block866, %splat.splatinsert6054
  %4189 = fadd <1 x double> %4187, %4188
  %splat.splatinsert6057 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 8>
  %4190 = fmul <1 x double> %block869, %splat.splatinsert6057
  %4191 = fadd <1 x double> %4189, %4190
  %splat.splatinsert6060 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 9>
  %4192 = fmul <1 x double> %block872, %splat.splatinsert6060
  %4193 = fadd <1 x double> %4191, %4192
  %splat.splatinsert6063 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 10>
  %4194 = fmul <1 x double> %block875, %splat.splatinsert6063
  %4195 = fadd <1 x double> %4193, %4194
  %splat.splatinsert6066 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 11>
  %4196 = fmul <1 x double> %block878, %splat.splatinsert6066
  %4197 = fadd <1 x double> %4195, %4196
  %splat.splatinsert6069 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 12>
  %4198 = fmul <1 x double> %block881, %splat.splatinsert6069
  %4199 = fadd <1 x double> %4197, %4198
  %splat.splatinsert6072 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 13>
  %4200 = fmul <1 x double> %block884, %splat.splatinsert6072
  %4201 = fadd <1 x double> %4199, %4200
  %splat.splatinsert6075 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 14>
  %4202 = fmul <1 x double> %block887, %splat.splatinsert6075
  %4203 = fadd <1 x double> %4201, %4202
  %splat.splatinsert6078 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 15>
  %4204 = fmul <1 x double> %block890, %splat.splatinsert6078
  %4205 = fadd <1 x double> %4203, %4204
  %splat.splatinsert6081 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 16>
  %4206 = fmul <1 x double> %block893, %splat.splatinsert6081
  %4207 = fadd <1 x double> %4205, %4206
  %splat.splatinsert6084 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 17>
  %4208 = fmul <1 x double> %block896, %splat.splatinsert6084
  %4209 = fadd <1 x double> %4207, %4208
  %splat.splatinsert6087 = shufflevector <19 x double> %col.load157, <19 x double> undef, <1 x i32> <i32 18>
  %4210 = fmul <1 x double> %block899, %splat.splatinsert6087
  %4211 = fadd <1 x double> %4209, %4210
  %4212 = shufflevector <1 x double> %4211, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4213 = shufflevector <25 x double> %4174, <25 x double> %4212, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  %splat.splat6091 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> zeroinitializer
  %4214 = fmul <2 x double> %block, %splat.splat6091
  %splat.splat6094 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %4215 = fmul <2 x double> %block164, %splat.splat6094
  %4216 = fadd <2 x double> %4214, %4215
  %splat.splat6097 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %4217 = fmul <2 x double> %block167, %splat.splat6097
  %4218 = fadd <2 x double> %4216, %4217
  %splat.splat6100 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %4219 = fmul <2 x double> %block170, %splat.splat6100
  %4220 = fadd <2 x double> %4218, %4219
  %splat.splat6103 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %4221 = fmul <2 x double> %block173, %splat.splat6103
  %4222 = fadd <2 x double> %4220, %4221
  %splat.splat6106 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %4223 = fmul <2 x double> %block176, %splat.splat6106
  %4224 = fadd <2 x double> %4222, %4223
  %splat.splat6109 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %4225 = fmul <2 x double> %block179, %splat.splat6109
  %4226 = fadd <2 x double> %4224, %4225
  %splat.splat6112 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %4227 = fmul <2 x double> %block182, %splat.splat6112
  %4228 = fadd <2 x double> %4226, %4227
  %splat.splat6115 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %4229 = fmul <2 x double> %block185, %splat.splat6115
  %4230 = fadd <2 x double> %4228, %4229
  %splat.splat6118 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %4231 = fmul <2 x double> %block188, %splat.splat6118
  %4232 = fadd <2 x double> %4230, %4231
  %splat.splat6121 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %4233 = fmul <2 x double> %block191, %splat.splat6121
  %4234 = fadd <2 x double> %4232, %4233
  %splat.splat6124 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %4235 = fmul <2 x double> %block194, %splat.splat6124
  %4236 = fadd <2 x double> %4234, %4235
  %splat.splat6127 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %4237 = fmul <2 x double> %block197, %splat.splat6127
  %4238 = fadd <2 x double> %4236, %4237
  %splat.splat6130 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %4239 = fmul <2 x double> %block200, %splat.splat6130
  %4240 = fadd <2 x double> %4238, %4239
  %splat.splat6133 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %4241 = fmul <2 x double> %block203, %splat.splat6133
  %4242 = fadd <2 x double> %4240, %4241
  %splat.splat6136 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %4243 = fmul <2 x double> %block206, %splat.splat6136
  %4244 = fadd <2 x double> %4242, %4243
  %splat.splat6139 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %4245 = fmul <2 x double> %block209, %splat.splat6139
  %4246 = fadd <2 x double> %4244, %4245
  %splat.splat6142 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %4247 = fmul <2 x double> %block212, %splat.splat6142
  %4248 = fadd <2 x double> %4246, %4247
  %splat.splat6145 = shufflevector <19 x double> %col.load159, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %4249 = fmul <2 x double> %block215, %splat.splat6145
  %4250 = fadd <2 x double> %4248, %4249
  %4251 = shufflevector <2 x double> %4250, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4252 = fmul <2 x double> %block218, %splat.splat6091
  %4253 = fmul <2 x double> %block221, %splat.splat6094
  %4254 = fadd <2 x double> %4252, %4253
  %4255 = fmul <2 x double> %block224, %splat.splat6097
  %4256 = fadd <2 x double> %4254, %4255
  %4257 = fmul <2 x double> %block227, %splat.splat6100
  %4258 = fadd <2 x double> %4256, %4257
  %4259 = fmul <2 x double> %block230, %splat.splat6103
  %4260 = fadd <2 x double> %4258, %4259
  %4261 = fmul <2 x double> %block233, %splat.splat6106
  %4262 = fadd <2 x double> %4260, %4261
  %4263 = fmul <2 x double> %block236, %splat.splat6109
  %4264 = fadd <2 x double> %4262, %4263
  %4265 = fmul <2 x double> %block239, %splat.splat6112
  %4266 = fadd <2 x double> %4264, %4265
  %4267 = fmul <2 x double> %block242, %splat.splat6115
  %4268 = fadd <2 x double> %4266, %4267
  %4269 = fmul <2 x double> %block245, %splat.splat6118
  %4270 = fadd <2 x double> %4268, %4269
  %4271 = fmul <2 x double> %block248, %splat.splat6121
  %4272 = fadd <2 x double> %4270, %4271
  %4273 = fmul <2 x double> %block251, %splat.splat6124
  %4274 = fadd <2 x double> %4272, %4273
  %4275 = fmul <2 x double> %block254, %splat.splat6127
  %4276 = fadd <2 x double> %4274, %4275
  %4277 = fmul <2 x double> %block257, %splat.splat6130
  %4278 = fadd <2 x double> %4276, %4277
  %4279 = fmul <2 x double> %block260, %splat.splat6133
  %4280 = fadd <2 x double> %4278, %4279
  %4281 = fmul <2 x double> %block263, %splat.splat6136
  %4282 = fadd <2 x double> %4280, %4281
  %4283 = fmul <2 x double> %block266, %splat.splat6139
  %4284 = fadd <2 x double> %4282, %4283
  %4285 = fmul <2 x double> %block269, %splat.splat6142
  %4286 = fadd <2 x double> %4284, %4285
  %4287 = fmul <2 x double> %block272, %splat.splat6145
  %4288 = fadd <2 x double> %4286, %4287
  %4289 = shufflevector <2 x double> %4288, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4290 = shufflevector <25 x double> %4251, <25 x double> %4289, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4291 = fmul <2 x double> %block275, %splat.splat6091
  %4292 = fmul <2 x double> %block278, %splat.splat6094
  %4293 = fadd <2 x double> %4291, %4292
  %4294 = fmul <2 x double> %block281, %splat.splat6097
  %4295 = fadd <2 x double> %4293, %4294
  %4296 = fmul <2 x double> %block284, %splat.splat6100
  %4297 = fadd <2 x double> %4295, %4296
  %4298 = fmul <2 x double> %block287, %splat.splat6103
  %4299 = fadd <2 x double> %4297, %4298
  %4300 = fmul <2 x double> %block290, %splat.splat6106
  %4301 = fadd <2 x double> %4299, %4300
  %4302 = fmul <2 x double> %block293, %splat.splat6109
  %4303 = fadd <2 x double> %4301, %4302
  %4304 = fmul <2 x double> %block296, %splat.splat6112
  %4305 = fadd <2 x double> %4303, %4304
  %4306 = fmul <2 x double> %block299, %splat.splat6115
  %4307 = fadd <2 x double> %4305, %4306
  %4308 = fmul <2 x double> %block302, %splat.splat6118
  %4309 = fadd <2 x double> %4307, %4308
  %4310 = fmul <2 x double> %block305, %splat.splat6121
  %4311 = fadd <2 x double> %4309, %4310
  %4312 = fmul <2 x double> %block308, %splat.splat6124
  %4313 = fadd <2 x double> %4311, %4312
  %4314 = fmul <2 x double> %block311, %splat.splat6127
  %4315 = fadd <2 x double> %4313, %4314
  %4316 = fmul <2 x double> %block314, %splat.splat6130
  %4317 = fadd <2 x double> %4315, %4316
  %4318 = fmul <2 x double> %block317, %splat.splat6133
  %4319 = fadd <2 x double> %4317, %4318
  %4320 = fmul <2 x double> %block320, %splat.splat6136
  %4321 = fadd <2 x double> %4319, %4320
  %4322 = fmul <2 x double> %block323, %splat.splat6139
  %4323 = fadd <2 x double> %4321, %4322
  %4324 = fmul <2 x double> %block326, %splat.splat6142
  %4325 = fadd <2 x double> %4323, %4324
  %4326 = fmul <2 x double> %block329, %splat.splat6145
  %4327 = fadd <2 x double> %4325, %4326
  %4328 = shufflevector <2 x double> %4327, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4329 = shufflevector <25 x double> %4290, <25 x double> %4328, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4330 = fmul <2 x double> %block332, %splat.splat6091
  %4331 = fmul <2 x double> %block335, %splat.splat6094
  %4332 = fadd <2 x double> %4330, %4331
  %4333 = fmul <2 x double> %block338, %splat.splat6097
  %4334 = fadd <2 x double> %4332, %4333
  %4335 = fmul <2 x double> %block341, %splat.splat6100
  %4336 = fadd <2 x double> %4334, %4335
  %4337 = fmul <2 x double> %block344, %splat.splat6103
  %4338 = fadd <2 x double> %4336, %4337
  %4339 = fmul <2 x double> %block347, %splat.splat6106
  %4340 = fadd <2 x double> %4338, %4339
  %4341 = fmul <2 x double> %block350, %splat.splat6109
  %4342 = fadd <2 x double> %4340, %4341
  %4343 = fmul <2 x double> %block353, %splat.splat6112
  %4344 = fadd <2 x double> %4342, %4343
  %4345 = fmul <2 x double> %block356, %splat.splat6115
  %4346 = fadd <2 x double> %4344, %4345
  %4347 = fmul <2 x double> %block359, %splat.splat6118
  %4348 = fadd <2 x double> %4346, %4347
  %4349 = fmul <2 x double> %block362, %splat.splat6121
  %4350 = fadd <2 x double> %4348, %4349
  %4351 = fmul <2 x double> %block365, %splat.splat6124
  %4352 = fadd <2 x double> %4350, %4351
  %4353 = fmul <2 x double> %block368, %splat.splat6127
  %4354 = fadd <2 x double> %4352, %4353
  %4355 = fmul <2 x double> %block371, %splat.splat6130
  %4356 = fadd <2 x double> %4354, %4355
  %4357 = fmul <2 x double> %block374, %splat.splat6133
  %4358 = fadd <2 x double> %4356, %4357
  %4359 = fmul <2 x double> %block377, %splat.splat6136
  %4360 = fadd <2 x double> %4358, %4359
  %4361 = fmul <2 x double> %block380, %splat.splat6139
  %4362 = fadd <2 x double> %4360, %4361
  %4363 = fmul <2 x double> %block383, %splat.splat6142
  %4364 = fadd <2 x double> %4362, %4363
  %4365 = fmul <2 x double> %block386, %splat.splat6145
  %4366 = fadd <2 x double> %4364, %4365
  %4367 = shufflevector <2 x double> %4366, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4368 = shufflevector <25 x double> %4329, <25 x double> %4367, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4369 = fmul <2 x double> %block389, %splat.splat6091
  %4370 = fmul <2 x double> %block392, %splat.splat6094
  %4371 = fadd <2 x double> %4369, %4370
  %4372 = fmul <2 x double> %block395, %splat.splat6097
  %4373 = fadd <2 x double> %4371, %4372
  %4374 = fmul <2 x double> %block398, %splat.splat6100
  %4375 = fadd <2 x double> %4373, %4374
  %4376 = fmul <2 x double> %block401, %splat.splat6103
  %4377 = fadd <2 x double> %4375, %4376
  %4378 = fmul <2 x double> %block404, %splat.splat6106
  %4379 = fadd <2 x double> %4377, %4378
  %4380 = fmul <2 x double> %block407, %splat.splat6109
  %4381 = fadd <2 x double> %4379, %4380
  %4382 = fmul <2 x double> %block410, %splat.splat6112
  %4383 = fadd <2 x double> %4381, %4382
  %4384 = fmul <2 x double> %block413, %splat.splat6115
  %4385 = fadd <2 x double> %4383, %4384
  %4386 = fmul <2 x double> %block416, %splat.splat6118
  %4387 = fadd <2 x double> %4385, %4386
  %4388 = fmul <2 x double> %block419, %splat.splat6121
  %4389 = fadd <2 x double> %4387, %4388
  %4390 = fmul <2 x double> %block422, %splat.splat6124
  %4391 = fadd <2 x double> %4389, %4390
  %4392 = fmul <2 x double> %block425, %splat.splat6127
  %4393 = fadd <2 x double> %4391, %4392
  %4394 = fmul <2 x double> %block428, %splat.splat6130
  %4395 = fadd <2 x double> %4393, %4394
  %4396 = fmul <2 x double> %block431, %splat.splat6133
  %4397 = fadd <2 x double> %4395, %4396
  %4398 = fmul <2 x double> %block434, %splat.splat6136
  %4399 = fadd <2 x double> %4397, %4398
  %4400 = fmul <2 x double> %block437, %splat.splat6139
  %4401 = fadd <2 x double> %4399, %4400
  %4402 = fmul <2 x double> %block440, %splat.splat6142
  %4403 = fadd <2 x double> %4401, %4402
  %4404 = fmul <2 x double> %block443, %splat.splat6145
  %4405 = fadd <2 x double> %4403, %4404
  %4406 = shufflevector <2 x double> %4405, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4407 = shufflevector <25 x double> %4368, <25 x double> %4406, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4408 = fmul <2 x double> %block446, %splat.splat6091
  %4409 = fmul <2 x double> %block449, %splat.splat6094
  %4410 = fadd <2 x double> %4408, %4409
  %4411 = fmul <2 x double> %block452, %splat.splat6097
  %4412 = fadd <2 x double> %4410, %4411
  %4413 = fmul <2 x double> %block455, %splat.splat6100
  %4414 = fadd <2 x double> %4412, %4413
  %4415 = fmul <2 x double> %block458, %splat.splat6103
  %4416 = fadd <2 x double> %4414, %4415
  %4417 = fmul <2 x double> %block461, %splat.splat6106
  %4418 = fadd <2 x double> %4416, %4417
  %4419 = fmul <2 x double> %block464, %splat.splat6109
  %4420 = fadd <2 x double> %4418, %4419
  %4421 = fmul <2 x double> %block467, %splat.splat6112
  %4422 = fadd <2 x double> %4420, %4421
  %4423 = fmul <2 x double> %block470, %splat.splat6115
  %4424 = fadd <2 x double> %4422, %4423
  %4425 = fmul <2 x double> %block473, %splat.splat6118
  %4426 = fadd <2 x double> %4424, %4425
  %4427 = fmul <2 x double> %block476, %splat.splat6121
  %4428 = fadd <2 x double> %4426, %4427
  %4429 = fmul <2 x double> %block479, %splat.splat6124
  %4430 = fadd <2 x double> %4428, %4429
  %4431 = fmul <2 x double> %block482, %splat.splat6127
  %4432 = fadd <2 x double> %4430, %4431
  %4433 = fmul <2 x double> %block485, %splat.splat6130
  %4434 = fadd <2 x double> %4432, %4433
  %4435 = fmul <2 x double> %block488, %splat.splat6133
  %4436 = fadd <2 x double> %4434, %4435
  %4437 = fmul <2 x double> %block491, %splat.splat6136
  %4438 = fadd <2 x double> %4436, %4437
  %4439 = fmul <2 x double> %block494, %splat.splat6139
  %4440 = fadd <2 x double> %4438, %4439
  %4441 = fmul <2 x double> %block497, %splat.splat6142
  %4442 = fadd <2 x double> %4440, %4441
  %4443 = fmul <2 x double> %block500, %splat.splat6145
  %4444 = fadd <2 x double> %4442, %4443
  %4445 = shufflevector <2 x double> %4444, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4446 = shufflevector <25 x double> %4407, <25 x double> %4445, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4447 = fmul <2 x double> %block503, %splat.splat6091
  %4448 = fmul <2 x double> %block506, %splat.splat6094
  %4449 = fadd <2 x double> %4447, %4448
  %4450 = fmul <2 x double> %block509, %splat.splat6097
  %4451 = fadd <2 x double> %4449, %4450
  %4452 = fmul <2 x double> %block512, %splat.splat6100
  %4453 = fadd <2 x double> %4451, %4452
  %4454 = fmul <2 x double> %block515, %splat.splat6103
  %4455 = fadd <2 x double> %4453, %4454
  %4456 = fmul <2 x double> %block518, %splat.splat6106
  %4457 = fadd <2 x double> %4455, %4456
  %4458 = fmul <2 x double> %block521, %splat.splat6109
  %4459 = fadd <2 x double> %4457, %4458
  %4460 = fmul <2 x double> %block524, %splat.splat6112
  %4461 = fadd <2 x double> %4459, %4460
  %4462 = fmul <2 x double> %block527, %splat.splat6115
  %4463 = fadd <2 x double> %4461, %4462
  %4464 = fmul <2 x double> %block530, %splat.splat6118
  %4465 = fadd <2 x double> %4463, %4464
  %4466 = fmul <2 x double> %block533, %splat.splat6121
  %4467 = fadd <2 x double> %4465, %4466
  %4468 = fmul <2 x double> %block536, %splat.splat6124
  %4469 = fadd <2 x double> %4467, %4468
  %4470 = fmul <2 x double> %block539, %splat.splat6127
  %4471 = fadd <2 x double> %4469, %4470
  %4472 = fmul <2 x double> %block542, %splat.splat6130
  %4473 = fadd <2 x double> %4471, %4472
  %4474 = fmul <2 x double> %block545, %splat.splat6133
  %4475 = fadd <2 x double> %4473, %4474
  %4476 = fmul <2 x double> %block548, %splat.splat6136
  %4477 = fadd <2 x double> %4475, %4476
  %4478 = fmul <2 x double> %block551, %splat.splat6139
  %4479 = fadd <2 x double> %4477, %4478
  %4480 = fmul <2 x double> %block554, %splat.splat6142
  %4481 = fadd <2 x double> %4479, %4480
  %4482 = fmul <2 x double> %block557, %splat.splat6145
  %4483 = fadd <2 x double> %4481, %4482
  %4484 = shufflevector <2 x double> %4483, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4485 = shufflevector <25 x double> %4446, <25 x double> %4484, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4486 = fmul <2 x double> %block560, %splat.splat6091
  %4487 = fmul <2 x double> %block563, %splat.splat6094
  %4488 = fadd <2 x double> %4486, %4487
  %4489 = fmul <2 x double> %block566, %splat.splat6097
  %4490 = fadd <2 x double> %4488, %4489
  %4491 = fmul <2 x double> %block569, %splat.splat6100
  %4492 = fadd <2 x double> %4490, %4491
  %4493 = fmul <2 x double> %block572, %splat.splat6103
  %4494 = fadd <2 x double> %4492, %4493
  %4495 = fmul <2 x double> %block575, %splat.splat6106
  %4496 = fadd <2 x double> %4494, %4495
  %4497 = fmul <2 x double> %block578, %splat.splat6109
  %4498 = fadd <2 x double> %4496, %4497
  %4499 = fmul <2 x double> %block581, %splat.splat6112
  %4500 = fadd <2 x double> %4498, %4499
  %4501 = fmul <2 x double> %block584, %splat.splat6115
  %4502 = fadd <2 x double> %4500, %4501
  %4503 = fmul <2 x double> %block587, %splat.splat6118
  %4504 = fadd <2 x double> %4502, %4503
  %4505 = fmul <2 x double> %block590, %splat.splat6121
  %4506 = fadd <2 x double> %4504, %4505
  %4507 = fmul <2 x double> %block593, %splat.splat6124
  %4508 = fadd <2 x double> %4506, %4507
  %4509 = fmul <2 x double> %block596, %splat.splat6127
  %4510 = fadd <2 x double> %4508, %4509
  %4511 = fmul <2 x double> %block599, %splat.splat6130
  %4512 = fadd <2 x double> %4510, %4511
  %4513 = fmul <2 x double> %block602, %splat.splat6133
  %4514 = fadd <2 x double> %4512, %4513
  %4515 = fmul <2 x double> %block605, %splat.splat6136
  %4516 = fadd <2 x double> %4514, %4515
  %4517 = fmul <2 x double> %block608, %splat.splat6139
  %4518 = fadd <2 x double> %4516, %4517
  %4519 = fmul <2 x double> %block611, %splat.splat6142
  %4520 = fadd <2 x double> %4518, %4519
  %4521 = fmul <2 x double> %block614, %splat.splat6145
  %4522 = fadd <2 x double> %4520, %4521
  %4523 = shufflevector <2 x double> %4522, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4524 = shufflevector <25 x double> %4485, <25 x double> %4523, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4525 = fmul <2 x double> %block617, %splat.splat6091
  %4526 = fmul <2 x double> %block620, %splat.splat6094
  %4527 = fadd <2 x double> %4525, %4526
  %4528 = fmul <2 x double> %block623, %splat.splat6097
  %4529 = fadd <2 x double> %4527, %4528
  %4530 = fmul <2 x double> %block626, %splat.splat6100
  %4531 = fadd <2 x double> %4529, %4530
  %4532 = fmul <2 x double> %block629, %splat.splat6103
  %4533 = fadd <2 x double> %4531, %4532
  %4534 = fmul <2 x double> %block632, %splat.splat6106
  %4535 = fadd <2 x double> %4533, %4534
  %4536 = fmul <2 x double> %block635, %splat.splat6109
  %4537 = fadd <2 x double> %4535, %4536
  %4538 = fmul <2 x double> %block638, %splat.splat6112
  %4539 = fadd <2 x double> %4537, %4538
  %4540 = fmul <2 x double> %block641, %splat.splat6115
  %4541 = fadd <2 x double> %4539, %4540
  %4542 = fmul <2 x double> %block644, %splat.splat6118
  %4543 = fadd <2 x double> %4541, %4542
  %4544 = fmul <2 x double> %block647, %splat.splat6121
  %4545 = fadd <2 x double> %4543, %4544
  %4546 = fmul <2 x double> %block650, %splat.splat6124
  %4547 = fadd <2 x double> %4545, %4546
  %4548 = fmul <2 x double> %block653, %splat.splat6127
  %4549 = fadd <2 x double> %4547, %4548
  %4550 = fmul <2 x double> %block656, %splat.splat6130
  %4551 = fadd <2 x double> %4549, %4550
  %4552 = fmul <2 x double> %block659, %splat.splat6133
  %4553 = fadd <2 x double> %4551, %4552
  %4554 = fmul <2 x double> %block662, %splat.splat6136
  %4555 = fadd <2 x double> %4553, %4554
  %4556 = fmul <2 x double> %block665, %splat.splat6139
  %4557 = fadd <2 x double> %4555, %4556
  %4558 = fmul <2 x double> %block668, %splat.splat6142
  %4559 = fadd <2 x double> %4557, %4558
  %4560 = fmul <2 x double> %block671, %splat.splat6145
  %4561 = fadd <2 x double> %4559, %4560
  %4562 = shufflevector <2 x double> %4561, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4563 = shufflevector <25 x double> %4524, <25 x double> %4562, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4564 = fmul <2 x double> %block674, %splat.splat6091
  %4565 = fmul <2 x double> %block677, %splat.splat6094
  %4566 = fadd <2 x double> %4564, %4565
  %4567 = fmul <2 x double> %block680, %splat.splat6097
  %4568 = fadd <2 x double> %4566, %4567
  %4569 = fmul <2 x double> %block683, %splat.splat6100
  %4570 = fadd <2 x double> %4568, %4569
  %4571 = fmul <2 x double> %block686, %splat.splat6103
  %4572 = fadd <2 x double> %4570, %4571
  %4573 = fmul <2 x double> %block689, %splat.splat6106
  %4574 = fadd <2 x double> %4572, %4573
  %4575 = fmul <2 x double> %block692, %splat.splat6109
  %4576 = fadd <2 x double> %4574, %4575
  %4577 = fmul <2 x double> %block695, %splat.splat6112
  %4578 = fadd <2 x double> %4576, %4577
  %4579 = fmul <2 x double> %block698, %splat.splat6115
  %4580 = fadd <2 x double> %4578, %4579
  %4581 = fmul <2 x double> %block701, %splat.splat6118
  %4582 = fadd <2 x double> %4580, %4581
  %4583 = fmul <2 x double> %block704, %splat.splat6121
  %4584 = fadd <2 x double> %4582, %4583
  %4585 = fmul <2 x double> %block707, %splat.splat6124
  %4586 = fadd <2 x double> %4584, %4585
  %4587 = fmul <2 x double> %block710, %splat.splat6127
  %4588 = fadd <2 x double> %4586, %4587
  %4589 = fmul <2 x double> %block713, %splat.splat6130
  %4590 = fadd <2 x double> %4588, %4589
  %4591 = fmul <2 x double> %block716, %splat.splat6133
  %4592 = fadd <2 x double> %4590, %4591
  %4593 = fmul <2 x double> %block719, %splat.splat6136
  %4594 = fadd <2 x double> %4592, %4593
  %4595 = fmul <2 x double> %block722, %splat.splat6139
  %4596 = fadd <2 x double> %4594, %4595
  %4597 = fmul <2 x double> %block725, %splat.splat6142
  %4598 = fadd <2 x double> %4596, %4597
  %4599 = fmul <2 x double> %block728, %splat.splat6145
  %4600 = fadd <2 x double> %4598, %4599
  %4601 = shufflevector <2 x double> %4600, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4602 = shufflevector <25 x double> %4563, <25 x double> %4601, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4603 = fmul <2 x double> %block731, %splat.splat6091
  %4604 = fmul <2 x double> %block734, %splat.splat6094
  %4605 = fadd <2 x double> %4603, %4604
  %4606 = fmul <2 x double> %block737, %splat.splat6097
  %4607 = fadd <2 x double> %4605, %4606
  %4608 = fmul <2 x double> %block740, %splat.splat6100
  %4609 = fadd <2 x double> %4607, %4608
  %4610 = fmul <2 x double> %block743, %splat.splat6103
  %4611 = fadd <2 x double> %4609, %4610
  %4612 = fmul <2 x double> %block746, %splat.splat6106
  %4613 = fadd <2 x double> %4611, %4612
  %4614 = fmul <2 x double> %block749, %splat.splat6109
  %4615 = fadd <2 x double> %4613, %4614
  %4616 = fmul <2 x double> %block752, %splat.splat6112
  %4617 = fadd <2 x double> %4615, %4616
  %4618 = fmul <2 x double> %block755, %splat.splat6115
  %4619 = fadd <2 x double> %4617, %4618
  %4620 = fmul <2 x double> %block758, %splat.splat6118
  %4621 = fadd <2 x double> %4619, %4620
  %4622 = fmul <2 x double> %block761, %splat.splat6121
  %4623 = fadd <2 x double> %4621, %4622
  %4624 = fmul <2 x double> %block764, %splat.splat6124
  %4625 = fadd <2 x double> %4623, %4624
  %4626 = fmul <2 x double> %block767, %splat.splat6127
  %4627 = fadd <2 x double> %4625, %4626
  %4628 = fmul <2 x double> %block770, %splat.splat6130
  %4629 = fadd <2 x double> %4627, %4628
  %4630 = fmul <2 x double> %block773, %splat.splat6133
  %4631 = fadd <2 x double> %4629, %4630
  %4632 = fmul <2 x double> %block776, %splat.splat6136
  %4633 = fadd <2 x double> %4631, %4632
  %4634 = fmul <2 x double> %block779, %splat.splat6139
  %4635 = fadd <2 x double> %4633, %4634
  %4636 = fmul <2 x double> %block782, %splat.splat6142
  %4637 = fadd <2 x double> %4635, %4636
  %4638 = fmul <2 x double> %block785, %splat.splat6145
  %4639 = fadd <2 x double> %4637, %4638
  %4640 = shufflevector <2 x double> %4639, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4641 = shufflevector <25 x double> %4602, <25 x double> %4640, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %4642 = fmul <2 x double> %block788, %splat.splat6091
  %4643 = fmul <2 x double> %block791, %splat.splat6094
  %4644 = fadd <2 x double> %4642, %4643
  %4645 = fmul <2 x double> %block794, %splat.splat6097
  %4646 = fadd <2 x double> %4644, %4645
  %4647 = fmul <2 x double> %block797, %splat.splat6100
  %4648 = fadd <2 x double> %4646, %4647
  %4649 = fmul <2 x double> %block800, %splat.splat6103
  %4650 = fadd <2 x double> %4648, %4649
  %4651 = fmul <2 x double> %block803, %splat.splat6106
  %4652 = fadd <2 x double> %4650, %4651
  %4653 = fmul <2 x double> %block806, %splat.splat6109
  %4654 = fadd <2 x double> %4652, %4653
  %4655 = fmul <2 x double> %block809, %splat.splat6112
  %4656 = fadd <2 x double> %4654, %4655
  %4657 = fmul <2 x double> %block812, %splat.splat6115
  %4658 = fadd <2 x double> %4656, %4657
  %4659 = fmul <2 x double> %block815, %splat.splat6118
  %4660 = fadd <2 x double> %4658, %4659
  %4661 = fmul <2 x double> %block818, %splat.splat6121
  %4662 = fadd <2 x double> %4660, %4661
  %4663 = fmul <2 x double> %block821, %splat.splat6124
  %4664 = fadd <2 x double> %4662, %4663
  %4665 = fmul <2 x double> %block824, %splat.splat6127
  %4666 = fadd <2 x double> %4664, %4665
  %4667 = fmul <2 x double> %block827, %splat.splat6130
  %4668 = fadd <2 x double> %4666, %4667
  %4669 = fmul <2 x double> %block830, %splat.splat6133
  %4670 = fadd <2 x double> %4668, %4669
  %4671 = fmul <2 x double> %block833, %splat.splat6136
  %4672 = fadd <2 x double> %4670, %4671
  %4673 = fmul <2 x double> %block836, %splat.splat6139
  %4674 = fadd <2 x double> %4672, %4673
  %4675 = fmul <2 x double> %block839, %splat.splat6142
  %4676 = fadd <2 x double> %4674, %4675
  %4677 = fmul <2 x double> %block842, %splat.splat6145
  %4678 = fadd <2 x double> %4676, %4677
  %4679 = shufflevector <2 x double> %4678, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4680 = shufflevector <25 x double> %4641, <25 x double> %4679, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %splat.splatinsert6774 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> zeroinitializer
  %4681 = fmul <1 x double> %block845, %splat.splatinsert6774
  %splat.splatinsert6777 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 1>
  %4682 = fmul <1 x double> %block848, %splat.splatinsert6777
  %4683 = fadd <1 x double> %4681, %4682
  %splat.splatinsert6780 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 2>
  %4684 = fmul <1 x double> %block851, %splat.splatinsert6780
  %4685 = fadd <1 x double> %4683, %4684
  %splat.splatinsert6783 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 3>
  %4686 = fmul <1 x double> %block854, %splat.splatinsert6783
  %4687 = fadd <1 x double> %4685, %4686
  %splat.splatinsert6786 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 4>
  %4688 = fmul <1 x double> %block857, %splat.splatinsert6786
  %4689 = fadd <1 x double> %4687, %4688
  %splat.splatinsert6789 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 5>
  %4690 = fmul <1 x double> %block860, %splat.splatinsert6789
  %4691 = fadd <1 x double> %4689, %4690
  %splat.splatinsert6792 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 6>
  %4692 = fmul <1 x double> %block863, %splat.splatinsert6792
  %4693 = fadd <1 x double> %4691, %4692
  %splat.splatinsert6795 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 7>
  %4694 = fmul <1 x double> %block866, %splat.splatinsert6795
  %4695 = fadd <1 x double> %4693, %4694
  %splat.splatinsert6798 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 8>
  %4696 = fmul <1 x double> %block869, %splat.splatinsert6798
  %4697 = fadd <1 x double> %4695, %4696
  %splat.splatinsert6801 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 9>
  %4698 = fmul <1 x double> %block872, %splat.splatinsert6801
  %4699 = fadd <1 x double> %4697, %4698
  %splat.splatinsert6804 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 10>
  %4700 = fmul <1 x double> %block875, %splat.splatinsert6804
  %4701 = fadd <1 x double> %4699, %4700
  %splat.splatinsert6807 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 11>
  %4702 = fmul <1 x double> %block878, %splat.splatinsert6807
  %4703 = fadd <1 x double> %4701, %4702
  %splat.splatinsert6810 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 12>
  %4704 = fmul <1 x double> %block881, %splat.splatinsert6810
  %4705 = fadd <1 x double> %4703, %4704
  %splat.splatinsert6813 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 13>
  %4706 = fmul <1 x double> %block884, %splat.splatinsert6813
  %4707 = fadd <1 x double> %4705, %4706
  %splat.splatinsert6816 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 14>
  %4708 = fmul <1 x double> %block887, %splat.splatinsert6816
  %4709 = fadd <1 x double> %4707, %4708
  %splat.splatinsert6819 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 15>
  %4710 = fmul <1 x double> %block890, %splat.splatinsert6819
  %4711 = fadd <1 x double> %4709, %4710
  %splat.splatinsert6822 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 16>
  %4712 = fmul <1 x double> %block893, %splat.splatinsert6822
  %4713 = fadd <1 x double> %4711, %4712
  %splat.splatinsert6825 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 17>
  %4714 = fmul <1 x double> %block896, %splat.splatinsert6825
  %4715 = fadd <1 x double> %4713, %4714
  %splat.splatinsert6828 = shufflevector <19 x double> %col.load159, <19 x double> undef, <1 x i32> <i32 18>
  %4716 = fmul <1 x double> %block899, %splat.splatinsert6828
  %4717 = fadd <1 x double> %4715, %4716
  %4718 = shufflevector <1 x double> %4717, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4719 = shufflevector <25 x double> %4680, <25 x double> %4718, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  %splat.splat6832 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> zeroinitializer
  %4720 = fmul <2 x double> %block, %splat.splat6832
  %splat.splat6835 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %4721 = fmul <2 x double> %block164, %splat.splat6835
  %4722 = fadd <2 x double> %4720, %4721
  %splat.splat6838 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %4723 = fmul <2 x double> %block167, %splat.splat6838
  %4724 = fadd <2 x double> %4722, %4723
  %splat.splat6841 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %4725 = fmul <2 x double> %block170, %splat.splat6841
  %4726 = fadd <2 x double> %4724, %4725
  %splat.splat6844 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %4727 = fmul <2 x double> %block173, %splat.splat6844
  %4728 = fadd <2 x double> %4726, %4727
  %splat.splat6847 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %4729 = fmul <2 x double> %block176, %splat.splat6847
  %4730 = fadd <2 x double> %4728, %4729
  %splat.splat6850 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %4731 = fmul <2 x double> %block179, %splat.splat6850
  %4732 = fadd <2 x double> %4730, %4731
  %splat.splat6853 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %4733 = fmul <2 x double> %block182, %splat.splat6853
  %4734 = fadd <2 x double> %4732, %4733
  %splat.splat6856 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %4735 = fmul <2 x double> %block185, %splat.splat6856
  %4736 = fadd <2 x double> %4734, %4735
  %splat.splat6859 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %4737 = fmul <2 x double> %block188, %splat.splat6859
  %4738 = fadd <2 x double> %4736, %4737
  %splat.splat6862 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %4739 = fmul <2 x double> %block191, %splat.splat6862
  %4740 = fadd <2 x double> %4738, %4739
  %splat.splat6865 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %4741 = fmul <2 x double> %block194, %splat.splat6865
  %4742 = fadd <2 x double> %4740, %4741
  %splat.splat6868 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %4743 = fmul <2 x double> %block197, %splat.splat6868
  %4744 = fadd <2 x double> %4742, %4743
  %splat.splat6871 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %4745 = fmul <2 x double> %block200, %splat.splat6871
  %4746 = fadd <2 x double> %4744, %4745
  %splat.splat6874 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %4747 = fmul <2 x double> %block203, %splat.splat6874
  %4748 = fadd <2 x double> %4746, %4747
  %splat.splat6877 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %4749 = fmul <2 x double> %block206, %splat.splat6877
  %4750 = fadd <2 x double> %4748, %4749
  %splat.splat6880 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %4751 = fmul <2 x double> %block209, %splat.splat6880
  %4752 = fadd <2 x double> %4750, %4751
  %splat.splat6883 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %4753 = fmul <2 x double> %block212, %splat.splat6883
  %4754 = fadd <2 x double> %4752, %4753
  %splat.splat6886 = shufflevector <19 x double> %col.load161, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %4755 = fmul <2 x double> %block215, %splat.splat6886
  %4756 = fadd <2 x double> %4754, %4755
  %4757 = shufflevector <2 x double> %4756, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4758 = fmul <2 x double> %block218, %splat.splat6832
  %4759 = fmul <2 x double> %block221, %splat.splat6835
  %4760 = fadd <2 x double> %4758, %4759
  %4761 = fmul <2 x double> %block224, %splat.splat6838
  %4762 = fadd <2 x double> %4760, %4761
  %4763 = fmul <2 x double> %block227, %splat.splat6841
  %4764 = fadd <2 x double> %4762, %4763
  %4765 = fmul <2 x double> %block230, %splat.splat6844
  %4766 = fadd <2 x double> %4764, %4765
  %4767 = fmul <2 x double> %block233, %splat.splat6847
  %4768 = fadd <2 x double> %4766, %4767
  %4769 = fmul <2 x double> %block236, %splat.splat6850
  %4770 = fadd <2 x double> %4768, %4769
  %4771 = fmul <2 x double> %block239, %splat.splat6853
  %4772 = fadd <2 x double> %4770, %4771
  %4773 = fmul <2 x double> %block242, %splat.splat6856
  %4774 = fadd <2 x double> %4772, %4773
  %4775 = fmul <2 x double> %block245, %splat.splat6859
  %4776 = fadd <2 x double> %4774, %4775
  %4777 = fmul <2 x double> %block248, %splat.splat6862
  %4778 = fadd <2 x double> %4776, %4777
  %4779 = fmul <2 x double> %block251, %splat.splat6865
  %4780 = fadd <2 x double> %4778, %4779
  %4781 = fmul <2 x double> %block254, %splat.splat6868
  %4782 = fadd <2 x double> %4780, %4781
  %4783 = fmul <2 x double> %block257, %splat.splat6871
  %4784 = fadd <2 x double> %4782, %4783
  %4785 = fmul <2 x double> %block260, %splat.splat6874
  %4786 = fadd <2 x double> %4784, %4785
  %4787 = fmul <2 x double> %block263, %splat.splat6877
  %4788 = fadd <2 x double> %4786, %4787
  %4789 = fmul <2 x double> %block266, %splat.splat6880
  %4790 = fadd <2 x double> %4788, %4789
  %4791 = fmul <2 x double> %block269, %splat.splat6883
  %4792 = fadd <2 x double> %4790, %4791
  %4793 = fmul <2 x double> %block272, %splat.splat6886
  %4794 = fadd <2 x double> %4792, %4793
  %4795 = shufflevector <2 x double> %4794, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4796 = shufflevector <25 x double> %4757, <25 x double> %4795, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4797 = fmul <2 x double> %block275, %splat.splat6832
  %4798 = fmul <2 x double> %block278, %splat.splat6835
  %4799 = fadd <2 x double> %4797, %4798
  %4800 = fmul <2 x double> %block281, %splat.splat6838
  %4801 = fadd <2 x double> %4799, %4800
  %4802 = fmul <2 x double> %block284, %splat.splat6841
  %4803 = fadd <2 x double> %4801, %4802
  %4804 = fmul <2 x double> %block287, %splat.splat6844
  %4805 = fadd <2 x double> %4803, %4804
  %4806 = fmul <2 x double> %block290, %splat.splat6847
  %4807 = fadd <2 x double> %4805, %4806
  %4808 = fmul <2 x double> %block293, %splat.splat6850
  %4809 = fadd <2 x double> %4807, %4808
  %4810 = fmul <2 x double> %block296, %splat.splat6853
  %4811 = fadd <2 x double> %4809, %4810
  %4812 = fmul <2 x double> %block299, %splat.splat6856
  %4813 = fadd <2 x double> %4811, %4812
  %4814 = fmul <2 x double> %block302, %splat.splat6859
  %4815 = fadd <2 x double> %4813, %4814
  %4816 = fmul <2 x double> %block305, %splat.splat6862
  %4817 = fadd <2 x double> %4815, %4816
  %4818 = fmul <2 x double> %block308, %splat.splat6865
  %4819 = fadd <2 x double> %4817, %4818
  %4820 = fmul <2 x double> %block311, %splat.splat6868
  %4821 = fadd <2 x double> %4819, %4820
  %4822 = fmul <2 x double> %block314, %splat.splat6871
  %4823 = fadd <2 x double> %4821, %4822
  %4824 = fmul <2 x double> %block317, %splat.splat6874
  %4825 = fadd <2 x double> %4823, %4824
  %4826 = fmul <2 x double> %block320, %splat.splat6877
  %4827 = fadd <2 x double> %4825, %4826
  %4828 = fmul <2 x double> %block323, %splat.splat6880
  %4829 = fadd <2 x double> %4827, %4828
  %4830 = fmul <2 x double> %block326, %splat.splat6883
  %4831 = fadd <2 x double> %4829, %4830
  %4832 = fmul <2 x double> %block329, %splat.splat6886
  %4833 = fadd <2 x double> %4831, %4832
  %4834 = shufflevector <2 x double> %4833, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4835 = shufflevector <25 x double> %4796, <25 x double> %4834, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4836 = fmul <2 x double> %block332, %splat.splat6832
  %4837 = fmul <2 x double> %block335, %splat.splat6835
  %4838 = fadd <2 x double> %4836, %4837
  %4839 = fmul <2 x double> %block338, %splat.splat6838
  %4840 = fadd <2 x double> %4838, %4839
  %4841 = fmul <2 x double> %block341, %splat.splat6841
  %4842 = fadd <2 x double> %4840, %4841
  %4843 = fmul <2 x double> %block344, %splat.splat6844
  %4844 = fadd <2 x double> %4842, %4843
  %4845 = fmul <2 x double> %block347, %splat.splat6847
  %4846 = fadd <2 x double> %4844, %4845
  %4847 = fmul <2 x double> %block350, %splat.splat6850
  %4848 = fadd <2 x double> %4846, %4847
  %4849 = fmul <2 x double> %block353, %splat.splat6853
  %4850 = fadd <2 x double> %4848, %4849
  %4851 = fmul <2 x double> %block356, %splat.splat6856
  %4852 = fadd <2 x double> %4850, %4851
  %4853 = fmul <2 x double> %block359, %splat.splat6859
  %4854 = fadd <2 x double> %4852, %4853
  %4855 = fmul <2 x double> %block362, %splat.splat6862
  %4856 = fadd <2 x double> %4854, %4855
  %4857 = fmul <2 x double> %block365, %splat.splat6865
  %4858 = fadd <2 x double> %4856, %4857
  %4859 = fmul <2 x double> %block368, %splat.splat6868
  %4860 = fadd <2 x double> %4858, %4859
  %4861 = fmul <2 x double> %block371, %splat.splat6871
  %4862 = fadd <2 x double> %4860, %4861
  %4863 = fmul <2 x double> %block374, %splat.splat6874
  %4864 = fadd <2 x double> %4862, %4863
  %4865 = fmul <2 x double> %block377, %splat.splat6877
  %4866 = fadd <2 x double> %4864, %4865
  %4867 = fmul <2 x double> %block380, %splat.splat6880
  %4868 = fadd <2 x double> %4866, %4867
  %4869 = fmul <2 x double> %block383, %splat.splat6883
  %4870 = fadd <2 x double> %4868, %4869
  %4871 = fmul <2 x double> %block386, %splat.splat6886
  %4872 = fadd <2 x double> %4870, %4871
  %4873 = shufflevector <2 x double> %4872, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4874 = shufflevector <25 x double> %4835, <25 x double> %4873, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4875 = fmul <2 x double> %block389, %splat.splat6832
  %4876 = fmul <2 x double> %block392, %splat.splat6835
  %4877 = fadd <2 x double> %4875, %4876
  %4878 = fmul <2 x double> %block395, %splat.splat6838
  %4879 = fadd <2 x double> %4877, %4878
  %4880 = fmul <2 x double> %block398, %splat.splat6841
  %4881 = fadd <2 x double> %4879, %4880
  %4882 = fmul <2 x double> %block401, %splat.splat6844
  %4883 = fadd <2 x double> %4881, %4882
  %4884 = fmul <2 x double> %block404, %splat.splat6847
  %4885 = fadd <2 x double> %4883, %4884
  %4886 = fmul <2 x double> %block407, %splat.splat6850
  %4887 = fadd <2 x double> %4885, %4886
  %4888 = fmul <2 x double> %block410, %splat.splat6853
  %4889 = fadd <2 x double> %4887, %4888
  %4890 = fmul <2 x double> %block413, %splat.splat6856
  %4891 = fadd <2 x double> %4889, %4890
  %4892 = fmul <2 x double> %block416, %splat.splat6859
  %4893 = fadd <2 x double> %4891, %4892
  %4894 = fmul <2 x double> %block419, %splat.splat6862
  %4895 = fadd <2 x double> %4893, %4894
  %4896 = fmul <2 x double> %block422, %splat.splat6865
  %4897 = fadd <2 x double> %4895, %4896
  %4898 = fmul <2 x double> %block425, %splat.splat6868
  %4899 = fadd <2 x double> %4897, %4898
  %4900 = fmul <2 x double> %block428, %splat.splat6871
  %4901 = fadd <2 x double> %4899, %4900
  %4902 = fmul <2 x double> %block431, %splat.splat6874
  %4903 = fadd <2 x double> %4901, %4902
  %4904 = fmul <2 x double> %block434, %splat.splat6877
  %4905 = fadd <2 x double> %4903, %4904
  %4906 = fmul <2 x double> %block437, %splat.splat6880
  %4907 = fadd <2 x double> %4905, %4906
  %4908 = fmul <2 x double> %block440, %splat.splat6883
  %4909 = fadd <2 x double> %4907, %4908
  %4910 = fmul <2 x double> %block443, %splat.splat6886
  %4911 = fadd <2 x double> %4909, %4910
  %4912 = shufflevector <2 x double> %4911, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4913 = shufflevector <25 x double> %4874, <25 x double> %4912, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4914 = fmul <2 x double> %block446, %splat.splat6832
  %4915 = fmul <2 x double> %block449, %splat.splat6835
  %4916 = fadd <2 x double> %4914, %4915
  %4917 = fmul <2 x double> %block452, %splat.splat6838
  %4918 = fadd <2 x double> %4916, %4917
  %4919 = fmul <2 x double> %block455, %splat.splat6841
  %4920 = fadd <2 x double> %4918, %4919
  %4921 = fmul <2 x double> %block458, %splat.splat6844
  %4922 = fadd <2 x double> %4920, %4921
  %4923 = fmul <2 x double> %block461, %splat.splat6847
  %4924 = fadd <2 x double> %4922, %4923
  %4925 = fmul <2 x double> %block464, %splat.splat6850
  %4926 = fadd <2 x double> %4924, %4925
  %4927 = fmul <2 x double> %block467, %splat.splat6853
  %4928 = fadd <2 x double> %4926, %4927
  %4929 = fmul <2 x double> %block470, %splat.splat6856
  %4930 = fadd <2 x double> %4928, %4929
  %4931 = fmul <2 x double> %block473, %splat.splat6859
  %4932 = fadd <2 x double> %4930, %4931
  %4933 = fmul <2 x double> %block476, %splat.splat6862
  %4934 = fadd <2 x double> %4932, %4933
  %4935 = fmul <2 x double> %block479, %splat.splat6865
  %4936 = fadd <2 x double> %4934, %4935
  %4937 = fmul <2 x double> %block482, %splat.splat6868
  %4938 = fadd <2 x double> %4936, %4937
  %4939 = fmul <2 x double> %block485, %splat.splat6871
  %4940 = fadd <2 x double> %4938, %4939
  %4941 = fmul <2 x double> %block488, %splat.splat6874
  %4942 = fadd <2 x double> %4940, %4941
  %4943 = fmul <2 x double> %block491, %splat.splat6877
  %4944 = fadd <2 x double> %4942, %4943
  %4945 = fmul <2 x double> %block494, %splat.splat6880
  %4946 = fadd <2 x double> %4944, %4945
  %4947 = fmul <2 x double> %block497, %splat.splat6883
  %4948 = fadd <2 x double> %4946, %4947
  %4949 = fmul <2 x double> %block500, %splat.splat6886
  %4950 = fadd <2 x double> %4948, %4949
  %4951 = shufflevector <2 x double> %4950, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4952 = shufflevector <25 x double> %4913, <25 x double> %4951, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4953 = fmul <2 x double> %block503, %splat.splat6832
  %4954 = fmul <2 x double> %block506, %splat.splat6835
  %4955 = fadd <2 x double> %4953, %4954
  %4956 = fmul <2 x double> %block509, %splat.splat6838
  %4957 = fadd <2 x double> %4955, %4956
  %4958 = fmul <2 x double> %block512, %splat.splat6841
  %4959 = fadd <2 x double> %4957, %4958
  %4960 = fmul <2 x double> %block515, %splat.splat6844
  %4961 = fadd <2 x double> %4959, %4960
  %4962 = fmul <2 x double> %block518, %splat.splat6847
  %4963 = fadd <2 x double> %4961, %4962
  %4964 = fmul <2 x double> %block521, %splat.splat6850
  %4965 = fadd <2 x double> %4963, %4964
  %4966 = fmul <2 x double> %block524, %splat.splat6853
  %4967 = fadd <2 x double> %4965, %4966
  %4968 = fmul <2 x double> %block527, %splat.splat6856
  %4969 = fadd <2 x double> %4967, %4968
  %4970 = fmul <2 x double> %block530, %splat.splat6859
  %4971 = fadd <2 x double> %4969, %4970
  %4972 = fmul <2 x double> %block533, %splat.splat6862
  %4973 = fadd <2 x double> %4971, %4972
  %4974 = fmul <2 x double> %block536, %splat.splat6865
  %4975 = fadd <2 x double> %4973, %4974
  %4976 = fmul <2 x double> %block539, %splat.splat6868
  %4977 = fadd <2 x double> %4975, %4976
  %4978 = fmul <2 x double> %block542, %splat.splat6871
  %4979 = fadd <2 x double> %4977, %4978
  %4980 = fmul <2 x double> %block545, %splat.splat6874
  %4981 = fadd <2 x double> %4979, %4980
  %4982 = fmul <2 x double> %block548, %splat.splat6877
  %4983 = fadd <2 x double> %4981, %4982
  %4984 = fmul <2 x double> %block551, %splat.splat6880
  %4985 = fadd <2 x double> %4983, %4984
  %4986 = fmul <2 x double> %block554, %splat.splat6883
  %4987 = fadd <2 x double> %4985, %4986
  %4988 = fmul <2 x double> %block557, %splat.splat6886
  %4989 = fadd <2 x double> %4987, %4988
  %4990 = shufflevector <2 x double> %4989, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4991 = shufflevector <25 x double> %4952, <25 x double> %4990, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4992 = fmul <2 x double> %block560, %splat.splat6832
  %4993 = fmul <2 x double> %block563, %splat.splat6835
  %4994 = fadd <2 x double> %4992, %4993
  %4995 = fmul <2 x double> %block566, %splat.splat6838
  %4996 = fadd <2 x double> %4994, %4995
  %4997 = fmul <2 x double> %block569, %splat.splat6841
  %4998 = fadd <2 x double> %4996, %4997
  %4999 = fmul <2 x double> %block572, %splat.splat6844
  %5000 = fadd <2 x double> %4998, %4999
  %5001 = fmul <2 x double> %block575, %splat.splat6847
  %5002 = fadd <2 x double> %5000, %5001
  %5003 = fmul <2 x double> %block578, %splat.splat6850
  %5004 = fadd <2 x double> %5002, %5003
  %5005 = fmul <2 x double> %block581, %splat.splat6853
  %5006 = fadd <2 x double> %5004, %5005
  %5007 = fmul <2 x double> %block584, %splat.splat6856
  %5008 = fadd <2 x double> %5006, %5007
  %5009 = fmul <2 x double> %block587, %splat.splat6859
  %5010 = fadd <2 x double> %5008, %5009
  %5011 = fmul <2 x double> %block590, %splat.splat6862
  %5012 = fadd <2 x double> %5010, %5011
  %5013 = fmul <2 x double> %block593, %splat.splat6865
  %5014 = fadd <2 x double> %5012, %5013
  %5015 = fmul <2 x double> %block596, %splat.splat6868
  %5016 = fadd <2 x double> %5014, %5015
  %5017 = fmul <2 x double> %block599, %splat.splat6871
  %5018 = fadd <2 x double> %5016, %5017
  %5019 = fmul <2 x double> %block602, %splat.splat6874
  %5020 = fadd <2 x double> %5018, %5019
  %5021 = fmul <2 x double> %block605, %splat.splat6877
  %5022 = fadd <2 x double> %5020, %5021
  %5023 = fmul <2 x double> %block608, %splat.splat6880
  %5024 = fadd <2 x double> %5022, %5023
  %5025 = fmul <2 x double> %block611, %splat.splat6883
  %5026 = fadd <2 x double> %5024, %5025
  %5027 = fmul <2 x double> %block614, %splat.splat6886
  %5028 = fadd <2 x double> %5026, %5027
  %5029 = shufflevector <2 x double> %5028, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5030 = shufflevector <25 x double> %4991, <25 x double> %5029, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5031 = fmul <2 x double> %block617, %splat.splat6832
  %5032 = fmul <2 x double> %block620, %splat.splat6835
  %5033 = fadd <2 x double> %5031, %5032
  %5034 = fmul <2 x double> %block623, %splat.splat6838
  %5035 = fadd <2 x double> %5033, %5034
  %5036 = fmul <2 x double> %block626, %splat.splat6841
  %5037 = fadd <2 x double> %5035, %5036
  %5038 = fmul <2 x double> %block629, %splat.splat6844
  %5039 = fadd <2 x double> %5037, %5038
  %5040 = fmul <2 x double> %block632, %splat.splat6847
  %5041 = fadd <2 x double> %5039, %5040
  %5042 = fmul <2 x double> %block635, %splat.splat6850
  %5043 = fadd <2 x double> %5041, %5042
  %5044 = fmul <2 x double> %block638, %splat.splat6853
  %5045 = fadd <2 x double> %5043, %5044
  %5046 = fmul <2 x double> %block641, %splat.splat6856
  %5047 = fadd <2 x double> %5045, %5046
  %5048 = fmul <2 x double> %block644, %splat.splat6859
  %5049 = fadd <2 x double> %5047, %5048
  %5050 = fmul <2 x double> %block647, %splat.splat6862
  %5051 = fadd <2 x double> %5049, %5050
  %5052 = fmul <2 x double> %block650, %splat.splat6865
  %5053 = fadd <2 x double> %5051, %5052
  %5054 = fmul <2 x double> %block653, %splat.splat6868
  %5055 = fadd <2 x double> %5053, %5054
  %5056 = fmul <2 x double> %block656, %splat.splat6871
  %5057 = fadd <2 x double> %5055, %5056
  %5058 = fmul <2 x double> %block659, %splat.splat6874
  %5059 = fadd <2 x double> %5057, %5058
  %5060 = fmul <2 x double> %block662, %splat.splat6877
  %5061 = fadd <2 x double> %5059, %5060
  %5062 = fmul <2 x double> %block665, %splat.splat6880
  %5063 = fadd <2 x double> %5061, %5062
  %5064 = fmul <2 x double> %block668, %splat.splat6883
  %5065 = fadd <2 x double> %5063, %5064
  %5066 = fmul <2 x double> %block671, %splat.splat6886
  %5067 = fadd <2 x double> %5065, %5066
  %5068 = shufflevector <2 x double> %5067, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5069 = shufflevector <25 x double> %5030, <25 x double> %5068, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5070 = fmul <2 x double> %block674, %splat.splat6832
  %5071 = fmul <2 x double> %block677, %splat.splat6835
  %5072 = fadd <2 x double> %5070, %5071
  %5073 = fmul <2 x double> %block680, %splat.splat6838
  %5074 = fadd <2 x double> %5072, %5073
  %5075 = fmul <2 x double> %block683, %splat.splat6841
  %5076 = fadd <2 x double> %5074, %5075
  %5077 = fmul <2 x double> %block686, %splat.splat6844
  %5078 = fadd <2 x double> %5076, %5077
  %5079 = fmul <2 x double> %block689, %splat.splat6847
  %5080 = fadd <2 x double> %5078, %5079
  %5081 = fmul <2 x double> %block692, %splat.splat6850
  %5082 = fadd <2 x double> %5080, %5081
  %5083 = fmul <2 x double> %block695, %splat.splat6853
  %5084 = fadd <2 x double> %5082, %5083
  %5085 = fmul <2 x double> %block698, %splat.splat6856
  %5086 = fadd <2 x double> %5084, %5085
  %5087 = fmul <2 x double> %block701, %splat.splat6859
  %5088 = fadd <2 x double> %5086, %5087
  %5089 = fmul <2 x double> %block704, %splat.splat6862
  %5090 = fadd <2 x double> %5088, %5089
  %5091 = fmul <2 x double> %block707, %splat.splat6865
  %5092 = fadd <2 x double> %5090, %5091
  %5093 = fmul <2 x double> %block710, %splat.splat6868
  %5094 = fadd <2 x double> %5092, %5093
  %5095 = fmul <2 x double> %block713, %splat.splat6871
  %5096 = fadd <2 x double> %5094, %5095
  %5097 = fmul <2 x double> %block716, %splat.splat6874
  %5098 = fadd <2 x double> %5096, %5097
  %5099 = fmul <2 x double> %block719, %splat.splat6877
  %5100 = fadd <2 x double> %5098, %5099
  %5101 = fmul <2 x double> %block722, %splat.splat6880
  %5102 = fadd <2 x double> %5100, %5101
  %5103 = fmul <2 x double> %block725, %splat.splat6883
  %5104 = fadd <2 x double> %5102, %5103
  %5105 = fmul <2 x double> %block728, %splat.splat6886
  %5106 = fadd <2 x double> %5104, %5105
  %5107 = shufflevector <2 x double> %5106, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5108 = shufflevector <25 x double> %5069, <25 x double> %5107, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5109 = fmul <2 x double> %block731, %splat.splat6832
  %5110 = fmul <2 x double> %block734, %splat.splat6835
  %5111 = fadd <2 x double> %5109, %5110
  %5112 = fmul <2 x double> %block737, %splat.splat6838
  %5113 = fadd <2 x double> %5111, %5112
  %5114 = fmul <2 x double> %block740, %splat.splat6841
  %5115 = fadd <2 x double> %5113, %5114
  %5116 = fmul <2 x double> %block743, %splat.splat6844
  %5117 = fadd <2 x double> %5115, %5116
  %5118 = fmul <2 x double> %block746, %splat.splat6847
  %5119 = fadd <2 x double> %5117, %5118
  %5120 = fmul <2 x double> %block749, %splat.splat6850
  %5121 = fadd <2 x double> %5119, %5120
  %5122 = fmul <2 x double> %block752, %splat.splat6853
  %5123 = fadd <2 x double> %5121, %5122
  %5124 = fmul <2 x double> %block755, %splat.splat6856
  %5125 = fadd <2 x double> %5123, %5124
  %5126 = fmul <2 x double> %block758, %splat.splat6859
  %5127 = fadd <2 x double> %5125, %5126
  %5128 = fmul <2 x double> %block761, %splat.splat6862
  %5129 = fadd <2 x double> %5127, %5128
  %5130 = fmul <2 x double> %block764, %splat.splat6865
  %5131 = fadd <2 x double> %5129, %5130
  %5132 = fmul <2 x double> %block767, %splat.splat6868
  %5133 = fadd <2 x double> %5131, %5132
  %5134 = fmul <2 x double> %block770, %splat.splat6871
  %5135 = fadd <2 x double> %5133, %5134
  %5136 = fmul <2 x double> %block773, %splat.splat6874
  %5137 = fadd <2 x double> %5135, %5136
  %5138 = fmul <2 x double> %block776, %splat.splat6877
  %5139 = fadd <2 x double> %5137, %5138
  %5140 = fmul <2 x double> %block779, %splat.splat6880
  %5141 = fadd <2 x double> %5139, %5140
  %5142 = fmul <2 x double> %block782, %splat.splat6883
  %5143 = fadd <2 x double> %5141, %5142
  %5144 = fmul <2 x double> %block785, %splat.splat6886
  %5145 = fadd <2 x double> %5143, %5144
  %5146 = shufflevector <2 x double> %5145, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5147 = shufflevector <25 x double> %5108, <25 x double> %5146, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %5148 = fmul <2 x double> %block788, %splat.splat6832
  %5149 = fmul <2 x double> %block791, %splat.splat6835
  %5150 = fadd <2 x double> %5148, %5149
  %5151 = fmul <2 x double> %block794, %splat.splat6838
  %5152 = fadd <2 x double> %5150, %5151
  %5153 = fmul <2 x double> %block797, %splat.splat6841
  %5154 = fadd <2 x double> %5152, %5153
  %5155 = fmul <2 x double> %block800, %splat.splat6844
  %5156 = fadd <2 x double> %5154, %5155
  %5157 = fmul <2 x double> %block803, %splat.splat6847
  %5158 = fadd <2 x double> %5156, %5157
  %5159 = fmul <2 x double> %block806, %splat.splat6850
  %5160 = fadd <2 x double> %5158, %5159
  %5161 = fmul <2 x double> %block809, %splat.splat6853
  %5162 = fadd <2 x double> %5160, %5161
  %5163 = fmul <2 x double> %block812, %splat.splat6856
  %5164 = fadd <2 x double> %5162, %5163
  %5165 = fmul <2 x double> %block815, %splat.splat6859
  %5166 = fadd <2 x double> %5164, %5165
  %5167 = fmul <2 x double> %block818, %splat.splat6862
  %5168 = fadd <2 x double> %5166, %5167
  %5169 = fmul <2 x double> %block821, %splat.splat6865
  %5170 = fadd <2 x double> %5168, %5169
  %5171 = fmul <2 x double> %block824, %splat.splat6868
  %5172 = fadd <2 x double> %5170, %5171
  %5173 = fmul <2 x double> %block827, %splat.splat6871
  %5174 = fadd <2 x double> %5172, %5173
  %5175 = fmul <2 x double> %block830, %splat.splat6874
  %5176 = fadd <2 x double> %5174, %5175
  %5177 = fmul <2 x double> %block833, %splat.splat6877
  %5178 = fadd <2 x double> %5176, %5177
  %5179 = fmul <2 x double> %block836, %splat.splat6880
  %5180 = fadd <2 x double> %5178, %5179
  %5181 = fmul <2 x double> %block839, %splat.splat6883
  %5182 = fadd <2 x double> %5180, %5181
  %5183 = fmul <2 x double> %block842, %splat.splat6886
  %5184 = fadd <2 x double> %5182, %5183
  %5185 = shufflevector <2 x double> %5184, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5186 = shufflevector <25 x double> %5147, <25 x double> %5185, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %splat.splatinsert7515 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> zeroinitializer
  %5187 = fmul <1 x double> %block845, %splat.splatinsert7515
  %splat.splatinsert7518 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 1>
  %5188 = fmul <1 x double> %block848, %splat.splatinsert7518
  %5189 = fadd <1 x double> %5187, %5188
  %splat.splatinsert7521 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 2>
  %5190 = fmul <1 x double> %block851, %splat.splatinsert7521
  %5191 = fadd <1 x double> %5189, %5190
  %splat.splatinsert7524 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 3>
  %5192 = fmul <1 x double> %block854, %splat.splatinsert7524
  %5193 = fadd <1 x double> %5191, %5192
  %splat.splatinsert7527 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 4>
  %5194 = fmul <1 x double> %block857, %splat.splatinsert7527
  %5195 = fadd <1 x double> %5193, %5194
  %splat.splatinsert7530 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 5>
  %5196 = fmul <1 x double> %block860, %splat.splatinsert7530
  %5197 = fadd <1 x double> %5195, %5196
  %splat.splatinsert7533 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 6>
  %5198 = fmul <1 x double> %block863, %splat.splatinsert7533
  %5199 = fadd <1 x double> %5197, %5198
  %splat.splatinsert7536 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 7>
  %5200 = fmul <1 x double> %block866, %splat.splatinsert7536
  %5201 = fadd <1 x double> %5199, %5200
  %splat.splatinsert7539 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 8>
  %5202 = fmul <1 x double> %block869, %splat.splatinsert7539
  %5203 = fadd <1 x double> %5201, %5202
  %splat.splatinsert7542 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 9>
  %5204 = fmul <1 x double> %block872, %splat.splatinsert7542
  %5205 = fadd <1 x double> %5203, %5204
  %splat.splatinsert7545 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 10>
  %5206 = fmul <1 x double> %block875, %splat.splatinsert7545
  %5207 = fadd <1 x double> %5205, %5206
  %splat.splatinsert7548 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 11>
  %5208 = fmul <1 x double> %block878, %splat.splatinsert7548
  %5209 = fadd <1 x double> %5207, %5208
  %splat.splatinsert7551 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 12>
  %5210 = fmul <1 x double> %block881, %splat.splatinsert7551
  %5211 = fadd <1 x double> %5209, %5210
  %splat.splatinsert7554 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 13>
  %5212 = fmul <1 x double> %block884, %splat.splatinsert7554
  %5213 = fadd <1 x double> %5211, %5212
  %splat.splatinsert7557 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 14>
  %5214 = fmul <1 x double> %block887, %splat.splatinsert7557
  %5215 = fadd <1 x double> %5213, %5214
  %splat.splatinsert7560 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 15>
  %5216 = fmul <1 x double> %block890, %splat.splatinsert7560
  %5217 = fadd <1 x double> %5215, %5216
  %splat.splatinsert7563 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 16>
  %5218 = fmul <1 x double> %block893, %splat.splatinsert7563
  %5219 = fadd <1 x double> %5217, %5218
  %splat.splatinsert7566 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 17>
  %5220 = fmul <1 x double> %block896, %splat.splatinsert7566
  %5221 = fadd <1 x double> %5219, %5220
  %splat.splatinsert7569 = shufflevector <19 x double> %col.load161, <19 x double> undef, <1 x i32> <i32 18>
  %5222 = fmul <1 x double> %block899, %splat.splatinsert7569
  %5223 = fadd <1 x double> %5221, %5222
  %5224 = shufflevector <1 x double> %5223, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5225 = shufflevector <25 x double> %5186, <25 x double> %5224, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  %splat.splat7573 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> zeroinitializer
  %5226 = fmul <2 x double> %block, %splat.splat7573
  %splat.splat7576 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 1, i32 1>
  %5227 = fmul <2 x double> %block164, %splat.splat7576
  %5228 = fadd <2 x double> %5226, %5227
  %splat.splat7579 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 2, i32 2>
  %5229 = fmul <2 x double> %block167, %splat.splat7579
  %5230 = fadd <2 x double> %5228, %5229
  %splat.splat7582 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 3, i32 3>
  %5231 = fmul <2 x double> %block170, %splat.splat7582
  %5232 = fadd <2 x double> %5230, %5231
  %splat.splat7585 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 4, i32 4>
  %5233 = fmul <2 x double> %block173, %splat.splat7585
  %5234 = fadd <2 x double> %5232, %5233
  %splat.splat7588 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 5, i32 5>
  %5235 = fmul <2 x double> %block176, %splat.splat7588
  %5236 = fadd <2 x double> %5234, %5235
  %splat.splat7591 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 6, i32 6>
  %5237 = fmul <2 x double> %block179, %splat.splat7591
  %5238 = fadd <2 x double> %5236, %5237
  %splat.splat7594 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 7, i32 7>
  %5239 = fmul <2 x double> %block182, %splat.splat7594
  %5240 = fadd <2 x double> %5238, %5239
  %splat.splat7597 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 8, i32 8>
  %5241 = fmul <2 x double> %block185, %splat.splat7597
  %5242 = fadd <2 x double> %5240, %5241
  %splat.splat7600 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 9, i32 9>
  %5243 = fmul <2 x double> %block188, %splat.splat7600
  %5244 = fadd <2 x double> %5242, %5243
  %splat.splat7603 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 10, i32 10>
  %5245 = fmul <2 x double> %block191, %splat.splat7603
  %5246 = fadd <2 x double> %5244, %5245
  %splat.splat7606 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 11, i32 11>
  %5247 = fmul <2 x double> %block194, %splat.splat7606
  %5248 = fadd <2 x double> %5246, %5247
  %splat.splat7609 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 12, i32 12>
  %5249 = fmul <2 x double> %block197, %splat.splat7609
  %5250 = fadd <2 x double> %5248, %5249
  %splat.splat7612 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 13, i32 13>
  %5251 = fmul <2 x double> %block200, %splat.splat7612
  %5252 = fadd <2 x double> %5250, %5251
  %splat.splat7615 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 14, i32 14>
  %5253 = fmul <2 x double> %block203, %splat.splat7615
  %5254 = fadd <2 x double> %5252, %5253
  %splat.splat7618 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 15, i32 15>
  %5255 = fmul <2 x double> %block206, %splat.splat7618
  %5256 = fadd <2 x double> %5254, %5255
  %splat.splat7621 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 16, i32 16>
  %5257 = fmul <2 x double> %block209, %splat.splat7621
  %5258 = fadd <2 x double> %5256, %5257
  %splat.splat7624 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 17, i32 17>
  %5259 = fmul <2 x double> %block212, %splat.splat7624
  %5260 = fadd <2 x double> %5258, %5259
  %splat.splat7627 = shufflevector <19 x double> %col.load163, <19 x double> undef, <2 x i32> <i32 18, i32 18>
  %5261 = fmul <2 x double> %block215, %splat.splat7627
  %5262 = fadd <2 x double> %5260, %5261
  %5263 = shufflevector <2 x double> %5262, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5264 = fmul <2 x double> %block218, %splat.splat7573
  %5265 = fmul <2 x double> %block221, %splat.splat7576
  %5266 = fadd <2 x double> %5264, %5265
  %5267 = fmul <2 x double> %block224, %splat.splat7579
  %5268 = fadd <2 x double> %5266, %5267
  %5269 = fmul <2 x double> %block227, %splat.splat7582
  %5270 = fadd <2 x double> %5268, %5269
  %5271 = fmul <2 x double> %block230, %splat.splat7585
  %5272 = fadd <2 x double> %5270, %5271
  %5273 = fmul <2 x double> %block233, %splat.splat7588
  %5274 = fadd <2 x double> %5272, %5273
  %5275 = fmul <2 x double> %block236, %splat.splat7591
  %5276 = fadd <2 x double> %5274, %5275
  %5277 = fmul <2 x double> %block239, %splat.splat7594
  %5278 = fadd <2 x double> %5276, %5277
  %5279 = fmul <2 x double> %block242, %splat.splat7597
  %5280 = fadd <2 x double> %5278, %5279
  %5281 = fmul <2 x double> %block245, %splat.splat7600
  %5282 = fadd <2 x double> %5280, %5281
  %5283 = fmul <2 x double> %block248, %splat.splat7603
  %5284 = fadd <2 x double> %5282, %5283
  %5285 = fmul <2 x double> %block251, %splat.splat7606
  %5286 = fadd <2 x double> %5284, %5285
  %5287 = fmul <2 x double> %block254, %splat.splat7609
  %5288 = fadd <2 x double> %5286, %5287
  %5289 = fmul <2 x double> %block257, %splat.splat7612
  %5290 = fadd <2 x double> %5288, %5289
  %5291 = fmul <2 x double> %block260, %splat.splat7615
  %5292 = fadd <2 x double> %5290, %5291
  %5293 = fmul <2 x double> %block263, %splat.splat7618
  %5294 = fadd <2 x double> %5292, %5293
  %5295 = fmul <2 x double> %block266, %splat.splat7621
  %5296 = fadd <2 x double> %5294, %5295
  %5297 = fmul <2 x double> %block269, %splat.splat7624
  %5298 = fadd <2 x double> %5296, %5297
  %5299 = fmul <2 x double> %block272, %splat.splat7627
  %5300 = fadd <2 x double> %5298, %5299
  %5301 = shufflevector <2 x double> %5300, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5302 = shufflevector <25 x double> %5263, <25 x double> %5301, <25 x i32> <i32 0, i32 1, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5303 = fmul <2 x double> %block275, %splat.splat7573
  %5304 = fmul <2 x double> %block278, %splat.splat7576
  %5305 = fadd <2 x double> %5303, %5304
  %5306 = fmul <2 x double> %block281, %splat.splat7579
  %5307 = fadd <2 x double> %5305, %5306
  %5308 = fmul <2 x double> %block284, %splat.splat7582
  %5309 = fadd <2 x double> %5307, %5308
  %5310 = fmul <2 x double> %block287, %splat.splat7585
  %5311 = fadd <2 x double> %5309, %5310
  %5312 = fmul <2 x double> %block290, %splat.splat7588
  %5313 = fadd <2 x double> %5311, %5312
  %5314 = fmul <2 x double> %block293, %splat.splat7591
  %5315 = fadd <2 x double> %5313, %5314
  %5316 = fmul <2 x double> %block296, %splat.splat7594
  %5317 = fadd <2 x double> %5315, %5316
  %5318 = fmul <2 x double> %block299, %splat.splat7597
  %5319 = fadd <2 x double> %5317, %5318
  %5320 = fmul <2 x double> %block302, %splat.splat7600
  %5321 = fadd <2 x double> %5319, %5320
  %5322 = fmul <2 x double> %block305, %splat.splat7603
  %5323 = fadd <2 x double> %5321, %5322
  %5324 = fmul <2 x double> %block308, %splat.splat7606
  %5325 = fadd <2 x double> %5323, %5324
  %5326 = fmul <2 x double> %block311, %splat.splat7609
  %5327 = fadd <2 x double> %5325, %5326
  %5328 = fmul <2 x double> %block314, %splat.splat7612
  %5329 = fadd <2 x double> %5327, %5328
  %5330 = fmul <2 x double> %block317, %splat.splat7615
  %5331 = fadd <2 x double> %5329, %5330
  %5332 = fmul <2 x double> %block320, %splat.splat7618
  %5333 = fadd <2 x double> %5331, %5332
  %5334 = fmul <2 x double> %block323, %splat.splat7621
  %5335 = fadd <2 x double> %5333, %5334
  %5336 = fmul <2 x double> %block326, %splat.splat7624
  %5337 = fadd <2 x double> %5335, %5336
  %5338 = fmul <2 x double> %block329, %splat.splat7627
  %5339 = fadd <2 x double> %5337, %5338
  %5340 = shufflevector <2 x double> %5339, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5341 = shufflevector <25 x double> %5302, <25 x double> %5340, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5342 = fmul <2 x double> %block332, %splat.splat7573
  %5343 = fmul <2 x double> %block335, %splat.splat7576
  %5344 = fadd <2 x double> %5342, %5343
  %5345 = fmul <2 x double> %block338, %splat.splat7579
  %5346 = fadd <2 x double> %5344, %5345
  %5347 = fmul <2 x double> %block341, %splat.splat7582
  %5348 = fadd <2 x double> %5346, %5347
  %5349 = fmul <2 x double> %block344, %splat.splat7585
  %5350 = fadd <2 x double> %5348, %5349
  %5351 = fmul <2 x double> %block347, %splat.splat7588
  %5352 = fadd <2 x double> %5350, %5351
  %5353 = fmul <2 x double> %block350, %splat.splat7591
  %5354 = fadd <2 x double> %5352, %5353
  %5355 = fmul <2 x double> %block353, %splat.splat7594
  %5356 = fadd <2 x double> %5354, %5355
  %5357 = fmul <2 x double> %block356, %splat.splat7597
  %5358 = fadd <2 x double> %5356, %5357
  %5359 = fmul <2 x double> %block359, %splat.splat7600
  %5360 = fadd <2 x double> %5358, %5359
  %5361 = fmul <2 x double> %block362, %splat.splat7603
  %5362 = fadd <2 x double> %5360, %5361
  %5363 = fmul <2 x double> %block365, %splat.splat7606
  %5364 = fadd <2 x double> %5362, %5363
  %5365 = fmul <2 x double> %block368, %splat.splat7609
  %5366 = fadd <2 x double> %5364, %5365
  %5367 = fmul <2 x double> %block371, %splat.splat7612
  %5368 = fadd <2 x double> %5366, %5367
  %5369 = fmul <2 x double> %block374, %splat.splat7615
  %5370 = fadd <2 x double> %5368, %5369
  %5371 = fmul <2 x double> %block377, %splat.splat7618
  %5372 = fadd <2 x double> %5370, %5371
  %5373 = fmul <2 x double> %block380, %splat.splat7621
  %5374 = fadd <2 x double> %5372, %5373
  %5375 = fmul <2 x double> %block383, %splat.splat7624
  %5376 = fadd <2 x double> %5374, %5375
  %5377 = fmul <2 x double> %block386, %splat.splat7627
  %5378 = fadd <2 x double> %5376, %5377
  %5379 = shufflevector <2 x double> %5378, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5380 = shufflevector <25 x double> %5341, <25 x double> %5379, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5381 = fmul <2 x double> %block389, %splat.splat7573
  %5382 = fmul <2 x double> %block392, %splat.splat7576
  %5383 = fadd <2 x double> %5381, %5382
  %5384 = fmul <2 x double> %block395, %splat.splat7579
  %5385 = fadd <2 x double> %5383, %5384
  %5386 = fmul <2 x double> %block398, %splat.splat7582
  %5387 = fadd <2 x double> %5385, %5386
  %5388 = fmul <2 x double> %block401, %splat.splat7585
  %5389 = fadd <2 x double> %5387, %5388
  %5390 = fmul <2 x double> %block404, %splat.splat7588
  %5391 = fadd <2 x double> %5389, %5390
  %5392 = fmul <2 x double> %block407, %splat.splat7591
  %5393 = fadd <2 x double> %5391, %5392
  %5394 = fmul <2 x double> %block410, %splat.splat7594
  %5395 = fadd <2 x double> %5393, %5394
  %5396 = fmul <2 x double> %block413, %splat.splat7597
  %5397 = fadd <2 x double> %5395, %5396
  %5398 = fmul <2 x double> %block416, %splat.splat7600
  %5399 = fadd <2 x double> %5397, %5398
  %5400 = fmul <2 x double> %block419, %splat.splat7603
  %5401 = fadd <2 x double> %5399, %5400
  %5402 = fmul <2 x double> %block422, %splat.splat7606
  %5403 = fadd <2 x double> %5401, %5402
  %5404 = fmul <2 x double> %block425, %splat.splat7609
  %5405 = fadd <2 x double> %5403, %5404
  %5406 = fmul <2 x double> %block428, %splat.splat7612
  %5407 = fadd <2 x double> %5405, %5406
  %5408 = fmul <2 x double> %block431, %splat.splat7615
  %5409 = fadd <2 x double> %5407, %5408
  %5410 = fmul <2 x double> %block434, %splat.splat7618
  %5411 = fadd <2 x double> %5409, %5410
  %5412 = fmul <2 x double> %block437, %splat.splat7621
  %5413 = fadd <2 x double> %5411, %5412
  %5414 = fmul <2 x double> %block440, %splat.splat7624
  %5415 = fadd <2 x double> %5413, %5414
  %5416 = fmul <2 x double> %block443, %splat.splat7627
  %5417 = fadd <2 x double> %5415, %5416
  %5418 = shufflevector <2 x double> %5417, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5419 = shufflevector <25 x double> %5380, <25 x double> %5418, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5420 = fmul <2 x double> %block446, %splat.splat7573
  %5421 = fmul <2 x double> %block449, %splat.splat7576
  %5422 = fadd <2 x double> %5420, %5421
  %5423 = fmul <2 x double> %block452, %splat.splat7579
  %5424 = fadd <2 x double> %5422, %5423
  %5425 = fmul <2 x double> %block455, %splat.splat7582
  %5426 = fadd <2 x double> %5424, %5425
  %5427 = fmul <2 x double> %block458, %splat.splat7585
  %5428 = fadd <2 x double> %5426, %5427
  %5429 = fmul <2 x double> %block461, %splat.splat7588
  %5430 = fadd <2 x double> %5428, %5429
  %5431 = fmul <2 x double> %block464, %splat.splat7591
  %5432 = fadd <2 x double> %5430, %5431
  %5433 = fmul <2 x double> %block467, %splat.splat7594
  %5434 = fadd <2 x double> %5432, %5433
  %5435 = fmul <2 x double> %block470, %splat.splat7597
  %5436 = fadd <2 x double> %5434, %5435
  %5437 = fmul <2 x double> %block473, %splat.splat7600
  %5438 = fadd <2 x double> %5436, %5437
  %5439 = fmul <2 x double> %block476, %splat.splat7603
  %5440 = fadd <2 x double> %5438, %5439
  %5441 = fmul <2 x double> %block479, %splat.splat7606
  %5442 = fadd <2 x double> %5440, %5441
  %5443 = fmul <2 x double> %block482, %splat.splat7609
  %5444 = fadd <2 x double> %5442, %5443
  %5445 = fmul <2 x double> %block485, %splat.splat7612
  %5446 = fadd <2 x double> %5444, %5445
  %5447 = fmul <2 x double> %block488, %splat.splat7615
  %5448 = fadd <2 x double> %5446, %5447
  %5449 = fmul <2 x double> %block491, %splat.splat7618
  %5450 = fadd <2 x double> %5448, %5449
  %5451 = fmul <2 x double> %block494, %splat.splat7621
  %5452 = fadd <2 x double> %5450, %5451
  %5453 = fmul <2 x double> %block497, %splat.splat7624
  %5454 = fadd <2 x double> %5452, %5453
  %5455 = fmul <2 x double> %block500, %splat.splat7627
  %5456 = fadd <2 x double> %5454, %5455
  %5457 = shufflevector <2 x double> %5456, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5458 = shufflevector <25 x double> %5419, <25 x double> %5457, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5459 = fmul <2 x double> %block503, %splat.splat7573
  %5460 = fmul <2 x double> %block506, %splat.splat7576
  %5461 = fadd <2 x double> %5459, %5460
  %5462 = fmul <2 x double> %block509, %splat.splat7579
  %5463 = fadd <2 x double> %5461, %5462
  %5464 = fmul <2 x double> %block512, %splat.splat7582
  %5465 = fadd <2 x double> %5463, %5464
  %5466 = fmul <2 x double> %block515, %splat.splat7585
  %5467 = fadd <2 x double> %5465, %5466
  %5468 = fmul <2 x double> %block518, %splat.splat7588
  %5469 = fadd <2 x double> %5467, %5468
  %5470 = fmul <2 x double> %block521, %splat.splat7591
  %5471 = fadd <2 x double> %5469, %5470
  %5472 = fmul <2 x double> %block524, %splat.splat7594
  %5473 = fadd <2 x double> %5471, %5472
  %5474 = fmul <2 x double> %block527, %splat.splat7597
  %5475 = fadd <2 x double> %5473, %5474
  %5476 = fmul <2 x double> %block530, %splat.splat7600
  %5477 = fadd <2 x double> %5475, %5476
  %5478 = fmul <2 x double> %block533, %splat.splat7603
  %5479 = fadd <2 x double> %5477, %5478
  %5480 = fmul <2 x double> %block536, %splat.splat7606
  %5481 = fadd <2 x double> %5479, %5480
  %5482 = fmul <2 x double> %block539, %splat.splat7609
  %5483 = fadd <2 x double> %5481, %5482
  %5484 = fmul <2 x double> %block542, %splat.splat7612
  %5485 = fadd <2 x double> %5483, %5484
  %5486 = fmul <2 x double> %block545, %splat.splat7615
  %5487 = fadd <2 x double> %5485, %5486
  %5488 = fmul <2 x double> %block548, %splat.splat7618
  %5489 = fadd <2 x double> %5487, %5488
  %5490 = fmul <2 x double> %block551, %splat.splat7621
  %5491 = fadd <2 x double> %5489, %5490
  %5492 = fmul <2 x double> %block554, %splat.splat7624
  %5493 = fadd <2 x double> %5491, %5492
  %5494 = fmul <2 x double> %block557, %splat.splat7627
  %5495 = fadd <2 x double> %5493, %5494
  %5496 = shufflevector <2 x double> %5495, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5497 = shufflevector <25 x double> %5458, <25 x double> %5496, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5498 = fmul <2 x double> %block560, %splat.splat7573
  %5499 = fmul <2 x double> %block563, %splat.splat7576
  %5500 = fadd <2 x double> %5498, %5499
  %5501 = fmul <2 x double> %block566, %splat.splat7579
  %5502 = fadd <2 x double> %5500, %5501
  %5503 = fmul <2 x double> %block569, %splat.splat7582
  %5504 = fadd <2 x double> %5502, %5503
  %5505 = fmul <2 x double> %block572, %splat.splat7585
  %5506 = fadd <2 x double> %5504, %5505
  %5507 = fmul <2 x double> %block575, %splat.splat7588
  %5508 = fadd <2 x double> %5506, %5507
  %5509 = fmul <2 x double> %block578, %splat.splat7591
  %5510 = fadd <2 x double> %5508, %5509
  %5511 = fmul <2 x double> %block581, %splat.splat7594
  %5512 = fadd <2 x double> %5510, %5511
  %5513 = fmul <2 x double> %block584, %splat.splat7597
  %5514 = fadd <2 x double> %5512, %5513
  %5515 = fmul <2 x double> %block587, %splat.splat7600
  %5516 = fadd <2 x double> %5514, %5515
  %5517 = fmul <2 x double> %block590, %splat.splat7603
  %5518 = fadd <2 x double> %5516, %5517
  %5519 = fmul <2 x double> %block593, %splat.splat7606
  %5520 = fadd <2 x double> %5518, %5519
  %5521 = fmul <2 x double> %block596, %splat.splat7609
  %5522 = fadd <2 x double> %5520, %5521
  %5523 = fmul <2 x double> %block599, %splat.splat7612
  %5524 = fadd <2 x double> %5522, %5523
  %5525 = fmul <2 x double> %block602, %splat.splat7615
  %5526 = fadd <2 x double> %5524, %5525
  %5527 = fmul <2 x double> %block605, %splat.splat7618
  %5528 = fadd <2 x double> %5526, %5527
  %5529 = fmul <2 x double> %block608, %splat.splat7621
  %5530 = fadd <2 x double> %5528, %5529
  %5531 = fmul <2 x double> %block611, %splat.splat7624
  %5532 = fadd <2 x double> %5530, %5531
  %5533 = fmul <2 x double> %block614, %splat.splat7627
  %5534 = fadd <2 x double> %5532, %5533
  %5535 = shufflevector <2 x double> %5534, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5536 = shufflevector <25 x double> %5497, <25 x double> %5535, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5537 = fmul <2 x double> %block617, %splat.splat7573
  %5538 = fmul <2 x double> %block620, %splat.splat7576
  %5539 = fadd <2 x double> %5537, %5538
  %5540 = fmul <2 x double> %block623, %splat.splat7579
  %5541 = fadd <2 x double> %5539, %5540
  %5542 = fmul <2 x double> %block626, %splat.splat7582
  %5543 = fadd <2 x double> %5541, %5542
  %5544 = fmul <2 x double> %block629, %splat.splat7585
  %5545 = fadd <2 x double> %5543, %5544
  %5546 = fmul <2 x double> %block632, %splat.splat7588
  %5547 = fadd <2 x double> %5545, %5546
  %5548 = fmul <2 x double> %block635, %splat.splat7591
  %5549 = fadd <2 x double> %5547, %5548
  %5550 = fmul <2 x double> %block638, %splat.splat7594
  %5551 = fadd <2 x double> %5549, %5550
  %5552 = fmul <2 x double> %block641, %splat.splat7597
  %5553 = fadd <2 x double> %5551, %5552
  %5554 = fmul <2 x double> %block644, %splat.splat7600
  %5555 = fadd <2 x double> %5553, %5554
  %5556 = fmul <2 x double> %block647, %splat.splat7603
  %5557 = fadd <2 x double> %5555, %5556
  %5558 = fmul <2 x double> %block650, %splat.splat7606
  %5559 = fadd <2 x double> %5557, %5558
  %5560 = fmul <2 x double> %block653, %splat.splat7609
  %5561 = fadd <2 x double> %5559, %5560
  %5562 = fmul <2 x double> %block656, %splat.splat7612
  %5563 = fadd <2 x double> %5561, %5562
  %5564 = fmul <2 x double> %block659, %splat.splat7615
  %5565 = fadd <2 x double> %5563, %5564
  %5566 = fmul <2 x double> %block662, %splat.splat7618
  %5567 = fadd <2 x double> %5565, %5566
  %5568 = fmul <2 x double> %block665, %splat.splat7621
  %5569 = fadd <2 x double> %5567, %5568
  %5570 = fmul <2 x double> %block668, %splat.splat7624
  %5571 = fadd <2 x double> %5569, %5570
  %5572 = fmul <2 x double> %block671, %splat.splat7627
  %5573 = fadd <2 x double> %5571, %5572
  %5574 = shufflevector <2 x double> %5573, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5575 = shufflevector <25 x double> %5536, <25 x double> %5574, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5576 = fmul <2 x double> %block674, %splat.splat7573
  %5577 = fmul <2 x double> %block677, %splat.splat7576
  %5578 = fadd <2 x double> %5576, %5577
  %5579 = fmul <2 x double> %block680, %splat.splat7579
  %5580 = fadd <2 x double> %5578, %5579
  %5581 = fmul <2 x double> %block683, %splat.splat7582
  %5582 = fadd <2 x double> %5580, %5581
  %5583 = fmul <2 x double> %block686, %splat.splat7585
  %5584 = fadd <2 x double> %5582, %5583
  %5585 = fmul <2 x double> %block689, %splat.splat7588
  %5586 = fadd <2 x double> %5584, %5585
  %5587 = fmul <2 x double> %block692, %splat.splat7591
  %5588 = fadd <2 x double> %5586, %5587
  %5589 = fmul <2 x double> %block695, %splat.splat7594
  %5590 = fadd <2 x double> %5588, %5589
  %5591 = fmul <2 x double> %block698, %splat.splat7597
  %5592 = fadd <2 x double> %5590, %5591
  %5593 = fmul <2 x double> %block701, %splat.splat7600
  %5594 = fadd <2 x double> %5592, %5593
  %5595 = fmul <2 x double> %block704, %splat.splat7603
  %5596 = fadd <2 x double> %5594, %5595
  %5597 = fmul <2 x double> %block707, %splat.splat7606
  %5598 = fadd <2 x double> %5596, %5597
  %5599 = fmul <2 x double> %block710, %splat.splat7609
  %5600 = fadd <2 x double> %5598, %5599
  %5601 = fmul <2 x double> %block713, %splat.splat7612
  %5602 = fadd <2 x double> %5600, %5601
  %5603 = fmul <2 x double> %block716, %splat.splat7615
  %5604 = fadd <2 x double> %5602, %5603
  %5605 = fmul <2 x double> %block719, %splat.splat7618
  %5606 = fadd <2 x double> %5604, %5605
  %5607 = fmul <2 x double> %block722, %splat.splat7621
  %5608 = fadd <2 x double> %5606, %5607
  %5609 = fmul <2 x double> %block725, %splat.splat7624
  %5610 = fadd <2 x double> %5608, %5609
  %5611 = fmul <2 x double> %block728, %splat.splat7627
  %5612 = fadd <2 x double> %5610, %5611
  %5613 = shufflevector <2 x double> %5612, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5614 = shufflevector <25 x double> %5575, <25 x double> %5613, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 25, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5615 = fmul <2 x double> %block731, %splat.splat7573
  %5616 = fmul <2 x double> %block734, %splat.splat7576
  %5617 = fadd <2 x double> %5615, %5616
  %5618 = fmul <2 x double> %block737, %splat.splat7579
  %5619 = fadd <2 x double> %5617, %5618
  %5620 = fmul <2 x double> %block740, %splat.splat7582
  %5621 = fadd <2 x double> %5619, %5620
  %5622 = fmul <2 x double> %block743, %splat.splat7585
  %5623 = fadd <2 x double> %5621, %5622
  %5624 = fmul <2 x double> %block746, %splat.splat7588
  %5625 = fadd <2 x double> %5623, %5624
  %5626 = fmul <2 x double> %block749, %splat.splat7591
  %5627 = fadd <2 x double> %5625, %5626
  %5628 = fmul <2 x double> %block752, %splat.splat7594
  %5629 = fadd <2 x double> %5627, %5628
  %5630 = fmul <2 x double> %block755, %splat.splat7597
  %5631 = fadd <2 x double> %5629, %5630
  %5632 = fmul <2 x double> %block758, %splat.splat7600
  %5633 = fadd <2 x double> %5631, %5632
  %5634 = fmul <2 x double> %block761, %splat.splat7603
  %5635 = fadd <2 x double> %5633, %5634
  %5636 = fmul <2 x double> %block764, %splat.splat7606
  %5637 = fadd <2 x double> %5635, %5636
  %5638 = fmul <2 x double> %block767, %splat.splat7609
  %5639 = fadd <2 x double> %5637, %5638
  %5640 = fmul <2 x double> %block770, %splat.splat7612
  %5641 = fadd <2 x double> %5639, %5640
  %5642 = fmul <2 x double> %block773, %splat.splat7615
  %5643 = fadd <2 x double> %5641, %5642
  %5644 = fmul <2 x double> %block776, %splat.splat7618
  %5645 = fadd <2 x double> %5643, %5644
  %5646 = fmul <2 x double> %block779, %splat.splat7621
  %5647 = fadd <2 x double> %5645, %5646
  %5648 = fmul <2 x double> %block782, %splat.splat7624
  %5649 = fadd <2 x double> %5647, %5648
  %5650 = fmul <2 x double> %block785, %splat.splat7627
  %5651 = fadd <2 x double> %5649, %5650
  %5652 = shufflevector <2 x double> %5651, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5653 = shufflevector <25 x double> %5614, <25 x double> %5652, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 25, i32 26, i32 undef, i32 undef, i32 undef>
  %5654 = fmul <2 x double> %block788, %splat.splat7573
  %5655 = fmul <2 x double> %block791, %splat.splat7576
  %5656 = fadd <2 x double> %5654, %5655
  %5657 = fmul <2 x double> %block794, %splat.splat7579
  %5658 = fadd <2 x double> %5656, %5657
  %5659 = fmul <2 x double> %block797, %splat.splat7582
  %5660 = fadd <2 x double> %5658, %5659
  %5661 = fmul <2 x double> %block800, %splat.splat7585
  %5662 = fadd <2 x double> %5660, %5661
  %5663 = fmul <2 x double> %block803, %splat.splat7588
  %5664 = fadd <2 x double> %5662, %5663
  %5665 = fmul <2 x double> %block806, %splat.splat7591
  %5666 = fadd <2 x double> %5664, %5665
  %5667 = fmul <2 x double> %block809, %splat.splat7594
  %5668 = fadd <2 x double> %5666, %5667
  %5669 = fmul <2 x double> %block812, %splat.splat7597
  %5670 = fadd <2 x double> %5668, %5669
  %5671 = fmul <2 x double> %block815, %splat.splat7600
  %5672 = fadd <2 x double> %5670, %5671
  %5673 = fmul <2 x double> %block818, %splat.splat7603
  %5674 = fadd <2 x double> %5672, %5673
  %5675 = fmul <2 x double> %block821, %splat.splat7606
  %5676 = fadd <2 x double> %5674, %5675
  %5677 = fmul <2 x double> %block824, %splat.splat7609
  %5678 = fadd <2 x double> %5676, %5677
  %5679 = fmul <2 x double> %block827, %splat.splat7612
  %5680 = fadd <2 x double> %5678, %5679
  %5681 = fmul <2 x double> %block830, %splat.splat7615
  %5682 = fadd <2 x double> %5680, %5681
  %5683 = fmul <2 x double> %block833, %splat.splat7618
  %5684 = fadd <2 x double> %5682, %5683
  %5685 = fmul <2 x double> %block836, %splat.splat7621
  %5686 = fadd <2 x double> %5684, %5685
  %5687 = fmul <2 x double> %block839, %splat.splat7624
  %5688 = fadd <2 x double> %5686, %5687
  %5689 = fmul <2 x double> %block842, %splat.splat7627
  %5690 = fadd <2 x double> %5688, %5689
  %5691 = shufflevector <2 x double> %5690, <2 x double> poison, <25 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5692 = shufflevector <25 x double> %5653, <25 x double> %5691, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 25, i32 26, i32 undef>
  %splat.splatinsert8256 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> zeroinitializer
  %5693 = fmul <1 x double> %block845, %splat.splatinsert8256
  %splat.splatinsert8259 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 1>
  %5694 = fmul <1 x double> %block848, %splat.splatinsert8259
  %5695 = fadd <1 x double> %5693, %5694
  %splat.splatinsert8262 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 2>
  %5696 = fmul <1 x double> %block851, %splat.splatinsert8262
  %5697 = fadd <1 x double> %5695, %5696
  %splat.splatinsert8265 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 3>
  %5698 = fmul <1 x double> %block854, %splat.splatinsert8265
  %5699 = fadd <1 x double> %5697, %5698
  %splat.splatinsert8268 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 4>
  %5700 = fmul <1 x double> %block857, %splat.splatinsert8268
  %5701 = fadd <1 x double> %5699, %5700
  %splat.splatinsert8271 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 5>
  %5702 = fmul <1 x double> %block860, %splat.splatinsert8271
  %5703 = fadd <1 x double> %5701, %5702
  %splat.splatinsert8274 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 6>
  %5704 = fmul <1 x double> %block863, %splat.splatinsert8274
  %5705 = fadd <1 x double> %5703, %5704
  %splat.splatinsert8277 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 7>
  %5706 = fmul <1 x double> %block866, %splat.splatinsert8277
  %5707 = fadd <1 x double> %5705, %5706
  %splat.splatinsert8280 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 8>
  %5708 = fmul <1 x double> %block869, %splat.splatinsert8280
  %5709 = fadd <1 x double> %5707, %5708
  %splat.splatinsert8283 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 9>
  %5710 = fmul <1 x double> %block872, %splat.splatinsert8283
  %5711 = fadd <1 x double> %5709, %5710
  %splat.splatinsert8286 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 10>
  %5712 = fmul <1 x double> %block875, %splat.splatinsert8286
  %5713 = fadd <1 x double> %5711, %5712
  %splat.splatinsert8289 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 11>
  %5714 = fmul <1 x double> %block878, %splat.splatinsert8289
  %5715 = fadd <1 x double> %5713, %5714
  %splat.splatinsert8292 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 12>
  %5716 = fmul <1 x double> %block881, %splat.splatinsert8292
  %5717 = fadd <1 x double> %5715, %5716
  %splat.splatinsert8295 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 13>
  %5718 = fmul <1 x double> %block884, %splat.splatinsert8295
  %5719 = fadd <1 x double> %5717, %5718
  %splat.splatinsert8298 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 14>
  %5720 = fmul <1 x double> %block887, %splat.splatinsert8298
  %5721 = fadd <1 x double> %5719, %5720
  %splat.splatinsert8301 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 15>
  %5722 = fmul <1 x double> %block890, %splat.splatinsert8301
  %5723 = fadd <1 x double> %5721, %5722
  %splat.splatinsert8304 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 16>
  %5724 = fmul <1 x double> %block893, %splat.splatinsert8304
  %5725 = fadd <1 x double> %5723, %5724
  %splat.splatinsert8307 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 17>
  %5726 = fmul <1 x double> %block896, %splat.splatinsert8307
  %5727 = fadd <1 x double> %5725, %5726
  %splat.splatinsert8310 = shufflevector <19 x double> %col.load163, <19 x double> undef, <1 x i32> <i32 18>
  %5728 = fmul <1 x double> %block899, %splat.splatinsert8310
  %5729 = fadd <1 x double> %5727, %5728
  %5730 = shufflevector <1 x double> %5729, <1 x double> poison, <25 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5731 = shufflevector <25 x double> %5692, <25 x double> %5730, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 25>
  store <25 x double> %671, ptr %ResBuiltin, align 16
  %vec.gep8312 = getelementptr inbounds double, ptr %ResBuiltin, i64 25
  store <25 x double> %1177, ptr %vec.gep8312, align 8
  %vec.gep8313 = getelementptr inbounds double, ptr %ResBuiltin, i64 50
  store <25 x double> %1683, ptr %vec.gep8313, align 16
  %vec.gep8314 = getelementptr inbounds double, ptr %ResBuiltin, i64 75
  store <25 x double> %2189, ptr %vec.gep8314, align 8
  %vec.gep8315 = getelementptr inbounds double, ptr %ResBuiltin, i64 100
  store <25 x double> %2695, ptr %vec.gep8315, align 16
  %vec.gep8316 = getelementptr inbounds double, ptr %ResBuiltin, i64 125
  store <25 x double> %3201, ptr %vec.gep8316, align 8
  %vec.gep8317 = getelementptr inbounds double, ptr %ResBuiltin, i64 150
  store <25 x double> %3707, ptr %vec.gep8317, align 16
  %vec.gep8318 = getelementptr inbounds double, ptr %ResBuiltin, i64 175
  store <25 x double> %4213, ptr %vec.gep8318, align 8
  %vec.gep8319 = getelementptr inbounds double, ptr %ResBuiltin, i64 200
  store <25 x double> %4719, ptr %vec.gep8319, align 16
  %vec.gep8320 = getelementptr inbounds double, ptr %ResBuiltin, i64 225
  store <25 x double> %5225, ptr %vec.gep8320, align 8
  %vec.gep8321 = getelementptr inbounds double, ptr %ResBuiltin, i64 250
  store <25 x double> %5731, ptr %vec.gep8321, align 16
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResSpec, ptr noundef nonnull %ResBuiltin, i32 noundef 25, i32 noundef 11)
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase, ptr noundef nonnull %ResBuiltin, i32 noundef 25, i32 noundef 11)
  call void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef nonnull %ResBase, ptr noundef nonnull %ResSpec, i32 noundef 25, i32 noundef 11)
  call void @llvm.lifetime.end.p0(i64 2200, ptr nonnull %ResBuiltin) #16
  call void @llvm.lifetime.end.p0(i64 2200, ptr nonnull %ResSpec) #16
  call void @llvm.lifetime.end.p0(i64 2200, ptr nonnull %ResBase) #16
  call void @llvm.lifetime.end.p0(i64 1672, ptr nonnull %Y) #16
  call void @llvm.lifetime.end.p0(i64 3800, ptr nonnull %X) #16
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14expectMatrixEQIdLi0EEvPT_S1_jj(ptr noundef %A, ptr noundef %B, i32 noundef %R, i32 noundef %C) local_unnamed_addr #5 comdat {
entry:
  %cmp34.not = icmp eq i32 %R, 0
  %cmp232.not = icmp eq i32 %C, 0
  %or.cond = or i1 %cmp34.not, %cmp232.not
  br i1 %or.cond, label %for.cond.cleanup, label %for.cond1.preheader.us.preheader

for.cond1.preheader.us.preheader:                 ; preds = %entry
  %wide.trip.count = zext i32 %C to i64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %for.cond1.for.cond.cleanup3_crit_edge.us
  %r.035.us = phi i32 [ %inc15.us, %for.cond1.for.cond.cleanup3_crit_edge.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br label %for.body4.us

for.body4.us:                                     ; preds = %for.cond1.preheader.us, %for.inc.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.inc.us ]
  %0 = trunc i64 %indvars.iv to i32
  %mul.us = mul i32 %0, %R
  %add.us = add i32 %mul.us, %r.035.us
  %idxprom.us = zext i32 %add.us to i64
  %arrayidx.us = getelementptr inbounds double, ptr %A, i64 %idxprom.us
  %1 = load double, ptr %arrayidx.us, align 8, !tbaa !5
  %arrayidx8.us = getelementptr inbounds double, ptr %B, i64 %idxprom.us
  %2 = load double, ptr %arrayidx8.us, align 8, !tbaa !5
  %sub.i.us = fsub double %1, %2
  %3 = tail call double @llvm.fabs.f64(double %sub.i.us)
  %cmp.i.us = fcmp ogt double %3, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp.i.us, label %if.then.i.us, label %for.inc.us

if.then.i.us:                                     ; preds = %for.body4.us
  %tobool.i.us = fcmp une double %2, 0.000000e+00
  br i1 %tobool.i.us, label %if.then1.i.us, label %if.else.i.us

if.else.i.us:                                     ; preds = %if.then.i.us
  %tobool3.i.us = fcmp une double %1, 0.000000e+00
  br i1 %tobool3.i.us, label %if.then4.i.us, label %for.inc.us

if.then4.i.us:                                    ; preds = %if.else.i.us
  %div5.i.us = fdiv double %2, %1
  br label %if.end8.i.us

if.then1.i.us:                                    ; preds = %if.then.i.us
  %div.i.us = fdiv double %1, %2
  br label %if.end8.i.us

if.end8.i.us:                                     ; preds = %if.then1.i.us, %if.then4.i.us
  %div.i.us.sink = phi double [ %div.i.us, %if.then1.i.us ], [ %div5.i.us, %if.then4.i.us ]
  %sub2.i.us = fadd double %div.i.us.sink, -1.000000e+00
  %4 = tail call double @llvm.fabs.f64(double %sub2.i.us)
  %cmp9.i.us = fcmp ule double %4, 1.000000e-05
  br i1 %cmp9.i.us, label %for.inc.us, label %if.then

for.inc.us:                                       ; preds = %if.end8.i.us, %if.else.i.us, %for.body4.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup3_crit_edge.us, label %for.body4.us, !llvm.loop !33

for.cond1.for.cond.cleanup3_crit_edge.us:         ; preds = %for.inc.us
  %inc15.us = add nuw i32 %r.035.us, 1
  %exitcond41.not = icmp eq i32 %inc15.us, %R
  br i1 %exitcond41.not, label %for.cond.cleanup, label %for.cond1.preheader.us, !llvm.loop !34

for.cond.cleanup:                                 ; preds = %for.cond1.for.cond.cleanup3_crit_edge.us, %entry
  ret void

if.then:                                          ; preds = %if.end8.i.us
  %5 = trunc i64 %indvars.iv to i32
  %call9 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) @_ZNSt3__14cerrE, ptr noundef nonnull @.str)
  %call10 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(ptr noundef nonnull align 8 dereferenceable(8) %call9, i32 noundef %r.035.us)
  %call11 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) %call10, ptr noundef nonnull @.str.1)
  %call12 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(ptr noundef nonnull align 8 dereferenceable(8) %call11, i32 noundef %5)
  %call13 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) %call12, ptr noundef nonnull @.str.2)
  tail call void @exit(i32 noundef 1) #17
  unreachable
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #1

; Function Attrs: mustprogress uwtable
define linkonce_odr hidden noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) %__os, ptr noundef %__str) local_unnamed_addr #5 comdat personality ptr @__gxx_personality_v0 {
entry:
  %call.i.i = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %__str) #16
  %call1 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__124__put_character_sequenceB7v170000IcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(ptr noundef nonnull align 8 dereferenceable(8) %__os, ptr noundef %__str, i64 noundef %call.i.i)
  ret ptr %call1
}

declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(ptr noundef nonnull align 8 dereferenceable(8), i32 noundef) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #7

; Function Attrs: uwtable
define linkonce_odr hidden noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__124__put_character_sequenceB7v170000IcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(ptr noundef nonnull align 8 dereferenceable(8) %__os, ptr noundef %__str, i64 noundef %__len) local_unnamed_addr #4 comdat personality ptr @__gxx_personality_v0 {
entry:
  %ref.tmp.i.i = alloca %"class.std::__1::locale", align 8
  %__s = alloca %"class.std::__1::basic_ostream<char>::sentry", align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %__s) #16
  invoke void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(ptr noundef nonnull align 8 dereferenceable(16) %__s, ptr noundef nonnull align 8 dereferenceable(8) %__os)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %entry
  %0 = load i8, ptr %__s, align 8, !tbaa !35, !range !39, !noundef !40
  %tobool.i.not = icmp eq i8 %0, 0
  br i1 %tobool.i.not, label %if.end28, label %if.then

if.then:                                          ; preds = %invoke.cont
  %vtable.i = load ptr, ptr %__os, align 8, !tbaa !41
  %vbase.offset.ptr.i = getelementptr i8, ptr %vtable.i, i64 -24
  %vbase.offset.i = load i64, ptr %vbase.offset.ptr.i, align 8
  %add.ptr.i = getelementptr inbounds i8, ptr %__os, i64 %vbase.offset.i
  %__rdbuf_.i.i.i = getelementptr inbounds %"class.std::__1::ios_base", ptr %add.ptr.i, i64 0, i32 6
  %1 = load ptr, ptr %__rdbuf_.i.i.i, align 8, !tbaa !43
  %__fmtflags_.i = getelementptr inbounds %"class.std::__1::ios_base", ptr %add.ptr.i, i64 0, i32 1
  %2 = load i32, ptr %__fmtflags_.i, align 8, !tbaa !45
  %__fill_.i = getelementptr inbounds %"class.std::__1::basic_ios", ptr %add.ptr.i, i64 0, i32 2
  %3 = load i32, ptr %__fill_.i, align 8, !tbaa !46
  %cmp.i.i = icmp eq i32 %3, -1
  br i1 %cmp.i.i, label %if.then.i, label %invoke.cont16

if.then.i:                                        ; preds = %if.then
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %ref.tmp.i.i) #16
  invoke void @_ZNKSt3__18ios_base6getlocEv(ptr nonnull sret(%"class.std::__1::locale") align 8 %ref.tmp.i.i, ptr noundef nonnull align 8 dereferenceable(136) %add.ptr.i)
          to label %.noexc unwind label %lpad3

.noexc:                                           ; preds = %if.then.i
  %call.i5.i.i = invoke noundef ptr @_ZNKSt3__16locale9use_facetERNS0_2idE(ptr noundef nonnull align 8 dereferenceable(8) %ref.tmp.i.i, ptr noundef nonnull align 8 dereferenceable(12) @_ZNSt3__15ctypeIcE2idE)
          to label %invoke.cont.i.i unwind label %lpad.i.i

invoke.cont.i.i:                                  ; preds = %.noexc
  %vtable.i.i.i = load ptr, ptr %call.i5.i.i, align 8, !tbaa !41
  %vfn.i.i.i = getelementptr inbounds ptr, ptr %vtable.i.i.i, i64 7
  %4 = load ptr, ptr %vfn.i.i.i, align 8
  %call.i6.i.i = invoke noundef signext i8 %4(ptr noundef nonnull align 8 dereferenceable(25) %call.i5.i.i, i8 noundef signext 32)
          to label %_ZNKSt3__19basic_iosIcNS_11char_traitsIcEEE5widenB7v170000Ec.exit.i unwind label %lpad.i.i

lpad.i.i:                                         ; preds = %invoke.cont.i.i, %.noexc
  %5 = landingpad { ptr, i32 }
          catch ptr null
  call void @_ZNSt3__16localeD1Ev(ptr noundef nonnull align 8 dereferenceable(8) %ref.tmp.i.i) #16
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %ref.tmp.i.i) #16
  br label %ehcleanup

_ZNKSt3__19basic_iosIcNS_11char_traitsIcEEE5widenB7v170000Ec.exit.i: ; preds = %invoke.cont.i.i
  call void @_ZNSt3__16localeD1Ev(ptr noundef nonnull align 8 dereferenceable(8) %ref.tmp.i.i) #16
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %ref.tmp.i.i) #16
  %conv.i = sext i8 %call.i6.i.i to i32
  store i32 %conv.i, ptr %__fill_.i, align 8, !tbaa !46
  br label %invoke.cont16

invoke.cont16:                                    ; preds = %_ZNKSt3__19basic_iosIcNS_11char_traitsIcEEE5widenB7v170000Ec.exit.i, %if.then
  %6 = phi i32 [ %conv.i, %_ZNKSt3__19basic_iosIcNS_11char_traitsIcEEE5widenB7v170000Ec.exit.i ], [ %3, %if.then ]
  %conv6.i = trunc i32 %6 to i8
  %and = and i32 %2, 176
  %cmp = icmp eq i32 %and, 32
  %add.ptr6 = getelementptr inbounds i8, ptr %__str, i64 %__len
  %cond = select i1 %cmp, ptr %add.ptr6, ptr %__str
  %call19 = invoke ptr @_ZNSt3__116__pad_and_outputB7v170000IcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(ptr %1, ptr noundef %__str, ptr noundef %cond, ptr noundef %add.ptr6, ptr noundef nonnull align 8 dereferenceable(136) %add.ptr.i, i8 noundef signext %conv6.i)
          to label %invoke.cont18 unwind label %lpad3

invoke.cont18:                                    ; preds = %invoke.cont16
  %cmp.i = icmp eq ptr %call19, null
  br i1 %cmp.i, label %if.then22, label %if.end28

if.then22:                                        ; preds = %invoke.cont18
  %vtable23 = load ptr, ptr %__os, align 8, !tbaa !41
  %vbase.offset.ptr24 = getelementptr i8, ptr %vtable23, i64 -24
  %vbase.offset25 = load i64, ptr %vbase.offset.ptr24, align 8
  %add.ptr26 = getelementptr inbounds i8, ptr %__os, i64 %vbase.offset25
  %__rdstate_.i.i = getelementptr inbounds %"class.std::__1::ios_base", ptr %add.ptr26, i64 0, i32 4
  %7 = load i32, ptr %__rdstate_.i.i, align 8, !tbaa !48
  %or.i.i = or i32 %7, 5
  invoke void @_ZNSt3__18ios_base5clearEj(ptr noundef nonnull align 8 dereferenceable(136) %add.ptr26, i32 noundef %or.i.i)
          to label %if.end28 unwind label %lpad1

lpad:                                             ; preds = %entry
  %8 = landingpad { ptr, i32 }
          catch ptr null
  br label %ehcleanup29

lpad1:                                            ; preds = %if.then22
  %9 = landingpad { ptr, i32 }
          catch ptr null
  br label %ehcleanup

lpad3:                                            ; preds = %if.then.i, %invoke.cont16
  %10 = landingpad { ptr, i32 }
          catch ptr null
  br label %ehcleanup

if.end28:                                         ; preds = %if.then22, %invoke.cont18, %invoke.cont
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(ptr noundef nonnull align 8 dereferenceable(16) %__s) #16
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %__s) #16
  br label %try.cont

ehcleanup:                                        ; preds = %lpad3, %lpad.i.i, %lpad1
  %.pn = phi { ptr, i32 } [ %9, %lpad1 ], [ %10, %lpad3 ], [ %5, %lpad.i.i ]
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(ptr noundef nonnull align 8 dereferenceable(16) %__s) #16
  br label %ehcleanup29

ehcleanup29:                                      ; preds = %ehcleanup, %lpad
  %.pn.pn = phi { ptr, i32 } [ %.pn, %ehcleanup ], [ %8, %lpad ]
  %exn.slot.1 = extractvalue { ptr, i32 } %.pn.pn, 0
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %__s) #16
  %11 = call ptr @__cxa_begin_catch(ptr %exn.slot.1) #16
  %vtable30 = load ptr, ptr %__os, align 8, !tbaa !41
  %vbase.offset.ptr31 = getelementptr i8, ptr %vtable30, i64 -24
  %vbase.offset32 = load i64, ptr %vbase.offset.ptr31, align 8
  %add.ptr33 = getelementptr inbounds i8, ptr %__os, i64 %vbase.offset32
  invoke void @_ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv(ptr noundef nonnull align 8 dereferenceable(136) %add.ptr33)
          to label %invoke.cont35 unwind label %lpad34

invoke.cont35:                                    ; preds = %ehcleanup29
  call void @__cxa_end_catch()
  br label %try.cont

try.cont:                                         ; preds = %invoke.cont35, %if.end28
  ret ptr %__os

lpad34:                                           ; preds = %ehcleanup29
  %12 = landingpad { ptr, i32 }
          cleanup
  invoke void @__cxa_end_catch()
          to label %eh.resume unwind label %terminate.lpad

eh.resume:                                        ; preds = %lpad34
  resume { ptr, i32 } %12

terminate.lpad:                                   ; preds = %lpad34
  %13 = landingpad { ptr, i32 }
          catch ptr null
  %14 = extractvalue { ptr, i32 } %13, 0
  call void @__clang_call_terminate(ptr %14) #17
  unreachable
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(ptr noundef nonnull align 8 dereferenceable(16), ptr noundef nonnull align 8 dereferenceable(8)) unnamed_addr #6

declare i32 @__gxx_personality_v0(...)

; Function Attrs: uwtable
define linkonce_odr hidden ptr @_ZNSt3__116__pad_and_outputB7v170000IcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(ptr %__s.coerce, ptr noundef %__ob, ptr noundef %__op, ptr noundef %__oe, ptr noundef nonnull align 8 dereferenceable(136) %__iob, i8 noundef signext %__fl) local_unnamed_addr #4 comdat personality ptr @__gxx_personality_v0 {
entry:
  %__sp = alloca %"class.std::__1::basic_string", align 8
  %cmp = icmp eq ptr %__s.coerce, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sub.ptr.lhs.cast = ptrtoint ptr %__oe to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %__ob to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %__width_.i = getelementptr inbounds %"class.std::__1::ios_base", ptr %__iob, i64 0, i32 3
  %0 = load i64, ptr %__width_.i, align 8, !tbaa !49
  %cmp1 = icmp sgt i64 %0, %sub.ptr.sub
  %sub = sub nsw i64 %0, %sub.ptr.sub
  %__ns.0 = select i1 %cmp1, i64 %sub, i64 0
  %sub.ptr.lhs.cast4 = ptrtoint ptr %__op to i64
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast4, %sub.ptr.rhs.cast
  %cmp7 = icmp sgt i64 %sub.ptr.sub6, 0
  br i1 %cmp7, label %if.then8, label %if.end15

if.then8:                                         ; preds = %if.end
  %vtable.i = load ptr, ptr %__s.coerce, align 8, !tbaa !41
  %vfn.i = getelementptr inbounds ptr, ptr %vtable.i, i64 12
  %1 = load ptr, ptr %vfn.i, align 8
  %call.i = tail call noundef i64 %1(ptr noundef nonnull align 8 dereferenceable(64) %__s.coerce, ptr noundef %__ob, i64 noundef %sub.ptr.sub6)
  %cmp11.not = icmp eq i64 %call.i, %sub.ptr.sub6
  br i1 %cmp11.not, label %if.end15, label %return

if.end15:                                         ; preds = %if.then8, %if.end
  %cmp16 = icmp sgt i64 %__ns.0, 0
  br i1 %cmp16, label %if.end.i.i, label %if.end26

if.end.i.i:                                       ; preds = %if.end15
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %__sp) #16
  %cmp.i.i.i = icmp ult i64 %__ns.0, 23
  br i1 %cmp.i.i.i, label %if.end9.i.i, label %if.end9.thread.i.i

if.end9.thread.i.i:                               ; preds = %if.end.i.i
  %sub.i.i.i = or i64 %__ns.0, 15
  %add.i.i = add nuw i64 %sub.i.i.i, 1
  %call.i5.i.i.i.i.i = tail call noalias noundef nonnull ptr @_Znwm(i64 noundef %add.i.i) #18
  %__data_.i23.i.i = getelementptr inbounds %"struct.std::__1::basic_string<char>::__long", ptr %__sp, i64 0, i32 2
  store ptr %call.i5.i.i.i.i.i, ptr %__data_.i23.i.i, align 8, !tbaa !50
  %bf.set6.i.i.i = or i64 %add.i.i, 1
  store i64 %bf.set6.i.i.i, ptr %__sp, align 8
  %__size_.i.i.i = getelementptr inbounds %"struct.std::__1::basic_string<char>::__long", ptr %__sp, i64 0, i32 1
  store i64 %__ns.0, ptr %__size_.i.i.i, align 8, !tbaa !50
  br label %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B7v170000Emc.exit

if.end9.i.i:                                      ; preds = %if.end.i.i
  %conv.i.i.i = trunc i64 %__ns.0 to i8
  %bf.shl.i.i.i = shl nuw nsw i8 %conv.i.i.i, 1
  store i8 %bf.shl.i.i.i, ptr %__sp, align 8
  %__data_.i.i.i = getelementptr inbounds %"struct.std::__1::basic_string<char>::__short", ptr %__sp, i64 0, i32 2
  br label %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B7v170000Emc.exit

_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B7v170000Emc.exit: ; preds = %if.end9.thread.i.i, %if.end9.i.i
  %__p.026.i.i = phi ptr [ %call.i5.i.i.i.i.i, %if.end9.thread.i.i ], [ %__data_.i.i.i, %if.end9.i.i ]
  call void @llvm.memset.p0.i64(ptr nonnull align 1 %__p.026.i.i, i8 %__fl, i64 %__ns.0, i1 false), !tbaa !50
  %arrayidx.i.i = getelementptr inbounds i8, ptr %__p.026.i.i, i64 %__ns.0
  store i8 0, ptr %arrayidx.i.i, align 1, !tbaa !50
  %bf.load.i.i.i = load i8, ptr %__sp, align 8
  %bf.clear.i.i.i = and i8 %bf.load.i.i.i, 1
  %tobool.i.not.i.i = icmp eq i8 %bf.clear.i.i.i, 0
  %__data_.i.i.i69 = getelementptr inbounds %"struct.std::__1::basic_string<char>::__long", ptr %__sp, i64 0, i32 2
  %2 = load ptr, ptr %__data_.i.i.i69, align 8
  %__data_.i4.i.i = getelementptr inbounds %"struct.std::__1::basic_string<char>::__short", ptr %__sp, i64 0, i32 2
  %cond.i.i = select i1 %tobool.i.not.i.i, ptr %__data_.i4.i.i, ptr %2
  %vtable.i70 = load ptr, ptr %__s.coerce, align 8, !tbaa !41
  %vfn.i71 = getelementptr inbounds ptr, ptr %vtable.i70, i64 12
  %3 = load ptr, ptr %vfn.i71, align 8
  %call.i7273 = invoke noundef i64 %3(ptr noundef nonnull align 8 dereferenceable(64) %__s.coerce, ptr noundef %cond.i.i, i64 noundef %__ns.0)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B7v170000Emc.exit
  %cmp21.not = icmp eq i64 %call.i7273, %__ns.0
  %bf.load.i.i = load i8, ptr %__sp, align 8
  %bf.clear.i.i = and i8 %bf.load.i.i, 1
  %tobool.i.not.i = icmp eq i8 %bf.clear.i.i, 0
  br i1 %tobool.i.not.i, label %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.exit, label %if.then.i

if.then.i:                                        ; preds = %invoke.cont
  %4 = load ptr, ptr %__data_.i.i.i69, align 8, !tbaa !50
  call void @_ZdlPv(ptr noundef %4) #19
  br label %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.exit

_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.exit: ; preds = %invoke.cont, %if.then.i
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %__sp) #16
  br i1 %cmp21.not, label %if.end26, label %return

lpad:                                             ; preds = %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B7v170000Emc.exit
  %5 = landingpad { ptr, i32 }
          cleanup
  %bf.load.i.i74 = load i8, ptr %__sp, align 8
  %bf.clear.i.i75 = and i8 %bf.load.i.i74, 1
  %tobool.i.not.i76 = icmp eq i8 %bf.clear.i.i75, 0
  br i1 %tobool.i.not.i76, label %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.exit79, label %if.then.i78

if.then.i78:                                      ; preds = %lpad
  %6 = load ptr, ptr %__data_.i.i.i69, align 8, !tbaa !50
  call void @_ZdlPv(ptr noundef %6) #19
  br label %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.exit79

_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.exit79: ; preds = %lpad, %if.then.i78
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %__sp) #16
  resume { ptr, i32 } %5

if.end26:                                         ; preds = %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.exit, %if.end15
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast, %sub.ptr.lhs.cast4
  %cmp30 = icmp sgt i64 %sub.ptr.sub29, 0
  br i1 %cmp30, label %if.then31, label %if.end38

if.then31:                                        ; preds = %if.end26
  %vtable.i80 = load ptr, ptr %__s.coerce, align 8, !tbaa !41
  %vfn.i81 = getelementptr inbounds ptr, ptr %vtable.i80, i64 12
  %7 = load ptr, ptr %vfn.i81, align 8
  %call.i82 = call noundef i64 %7(ptr noundef nonnull align 8 dereferenceable(64) %__s.coerce, ptr noundef %__op, i64 noundef %sub.ptr.sub29)
  %cmp34.not = icmp eq i64 %call.i82, %sub.ptr.sub29
  br i1 %cmp34.not, label %if.end38, label %return

if.end38:                                         ; preds = %if.then31, %if.end26
  store i64 0, ptr %__width_.i, align 8, !tbaa !49
  br label %return

return:                                           ; preds = %if.end38, %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.exit, %if.then8, %if.then31, %entry
  %retval.sroa.0.2 = phi ptr [ null, %entry ], [ %__s.coerce, %if.end38 ], [ null, %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.exit ], [ null, %if.then8 ], [ null, %if.then31 ]
  ret ptr %retval.sroa.0.2
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(ptr noundef nonnull align 8 dereferenceable(16)) unnamed_addr #8

declare ptr @__cxa_begin_catch(ptr) local_unnamed_addr

declare void @_ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv(ptr noundef nonnull align 8 dereferenceable(136)) local_unnamed_addr #6

declare void @__cxa_end_catch() local_unnamed_addr

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(ptr noundef %0) local_unnamed_addr #9 comdat {
  %2 = tail call ptr @__cxa_begin_catch(ptr %0) #16
  tail call void @_ZSt9terminatev() #17
  unreachable
}

declare void @_ZSt9terminatev() local_unnamed_addr

; Function Attrs: nobuiltin allocsize(0)
declare noundef nonnull ptr @_Znwm(i64 noundef) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(ptr noundef) local_unnamed_addr #11

declare void @_ZNKSt3__18ios_base6getlocEv(ptr sret(%"class.std::__1::locale") align 8, ptr noundef nonnull align 8 dereferenceable(136)) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(ptr noundef nonnull align 8 dereferenceable(8)) unnamed_addr #8

declare noundef ptr @_ZNKSt3__16locale9use_facetERNS0_2idE(ptr noundef nonnull align 8 dereferenceable(8), ptr noundef nonnull align 8 dereferenceable(12)) local_unnamed_addr #6

declare void @_ZNSt3__18ios_base5clearEj(ptr noundef nonnull align 8 dereferenceable(136), i32 noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #12

; Function Attrs: mustprogress nounwind uwtable
define linkonce_odr dso_local void @_Z13transposeSpecIfLj31ELj17EEvPT_S1_(ptr noundef %ResPtr, ptr noundef %SrcPtr) local_unnamed_addr #13 comdat {
entry:
  %col.load = load <31 x float>, ptr %SrcPtr, align 4
  %vec.gep = getelementptr float, ptr %SrcPtr, i64 31
  %col.load24 = load <31 x float>, ptr %vec.gep, align 4
  %vec.gep25 = getelementptr float, ptr %SrcPtr, i64 62
  %col.load26 = load <31 x float>, ptr %vec.gep25, align 4
  %vec.gep27 = getelementptr float, ptr %SrcPtr, i64 93
  %col.load28 = load <31 x float>, ptr %vec.gep27, align 4
  %vec.gep29 = getelementptr float, ptr %SrcPtr, i64 124
  %col.load30 = load <31 x float>, ptr %vec.gep29, align 4
  %vec.gep31 = getelementptr float, ptr %SrcPtr, i64 155
  %col.load32 = load <31 x float>, ptr %vec.gep31, align 4
  %vec.gep33 = getelementptr float, ptr %SrcPtr, i64 186
  %col.load34 = load <31 x float>, ptr %vec.gep33, align 4
  %vec.gep35 = getelementptr float, ptr %SrcPtr, i64 217
  %col.load36 = load <31 x float>, ptr %vec.gep35, align 4
  %vec.gep37 = getelementptr float, ptr %SrcPtr, i64 248
  %col.load38 = load <31 x float>, ptr %vec.gep37, align 4
  %vec.gep39 = getelementptr float, ptr %SrcPtr, i64 279
  %col.load40 = load <31 x float>, ptr %vec.gep39, align 4
  %vec.gep41 = getelementptr float, ptr %SrcPtr, i64 310
  %col.load42 = load <31 x float>, ptr %vec.gep41, align 4
  %vec.gep43 = getelementptr float, ptr %SrcPtr, i64 341
  %col.load44 = load <31 x float>, ptr %vec.gep43, align 4
  %vec.gep45 = getelementptr float, ptr %SrcPtr, i64 372
  %col.load46 = load <31 x float>, ptr %vec.gep45, align 4
  %vec.gep47 = getelementptr float, ptr %SrcPtr, i64 403
  %col.load48 = load <31 x float>, ptr %vec.gep47, align 4
  %vec.gep49 = getelementptr float, ptr %SrcPtr, i64 434
  %col.load50 = load <31 x float>, ptr %vec.gep49, align 4
  %vec.gep51 = getelementptr float, ptr %SrcPtr, i64 465
  %col.load52 = load <31 x float>, ptr %vec.gep51, align 4
  %vec.gep53 = getelementptr float, ptr %SrcPtr, i64 496
  %col.load54 = load <31 x float>, ptr %vec.gep53, align 4
  %0 = shufflevector <31 x float> %col.load, <31 x float> %col.load24, <62 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61>
  %1 = shufflevector <31 x float> %col.load26, <31 x float> %col.load28, <62 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61>
  %2 = shufflevector <31 x float> %col.load30, <31 x float> %col.load32, <62 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61>
  %3 = shufflevector <31 x float> %col.load34, <31 x float> %col.load36, <62 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61>
  %4 = shufflevector <31 x float> %col.load38, <31 x float> %col.load40, <62 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61>
  %5 = shufflevector <31 x float> %col.load42, <31 x float> %col.load44, <62 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61>
  %6 = shufflevector <31 x float> %col.load46, <31 x float> %col.load48, <62 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61>
  %7 = shufflevector <31 x float> %col.load50, <31 x float> %col.load52, <62 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61>
  %8 = shufflevector <62 x float> %0, <62 x float> %1, <124 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123>
  %9 = shufflevector <62 x float> %2, <62 x float> %3, <124 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123>
  %10 = shufflevector <62 x float> %4, <62 x float> %5, <124 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123>
  %11 = shufflevector <62 x float> %6, <62 x float> %7, <124 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123>
  %12 = shufflevector <124 x float> %8, <124 x float> %9, <248 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247>
  %13 = shufflevector <124 x float> %10, <124 x float> %11, <248 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247>
  %14 = shufflevector <248 x float> %12, <248 x float> %13, <496 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492, i32 493, i32 494, i32 495>
  %15 = shufflevector <31 x float> %col.load54, <31 x float> poison, <496 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <496 x float> %14, <496 x float> %15, <527 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492, i32 493, i32 494, i32 495, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509, i32 510, i32 511, i32 512, i32 513, i32 514, i32 515, i32 516, i32 517, i32 518, i32 519, i32 520, i32 521, i32 522, i32 523, i32 524, i32 525, i32 526>
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %entry, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.cond1.preheader ]
  %Res.sroa.0.020 = phi <527 x float> [ undef, %entry ], [ %matins.30, %for.cond1.preheader ]
  %17 = mul nuw nsw i64 %indvars.iv, 31
  %matrixext = extractelement <527 x float> %16, i64 %17
  %matins = insertelement <527 x float> %Res.sroa.0.020, float %matrixext, i64 %indvars.iv
  %18 = add nuw nsw i64 %17, 1
  %matrixext.1 = extractelement <527 x float> %16, i64 %18
  %19 = add nuw nsw i64 %indvars.iv, 17
  %matins.1 = insertelement <527 x float> %matins, float %matrixext.1, i64 %19
  %20 = add nuw nsw i64 %17, 2
  %matrixext.2 = extractelement <527 x float> %16, i64 %20
  %21 = add nuw nsw i64 %indvars.iv, 34
  %matins.2 = insertelement <527 x float> %matins.1, float %matrixext.2, i64 %21
  %22 = add nuw nsw i64 %17, 3
  %matrixext.3 = extractelement <527 x float> %16, i64 %22
  %23 = add nuw nsw i64 %indvars.iv, 51
  %matins.3 = insertelement <527 x float> %matins.2, float %matrixext.3, i64 %23
  %24 = add nuw nsw i64 %17, 4
  %matrixext.4 = extractelement <527 x float> %16, i64 %24
  %25 = add nuw nsw i64 %indvars.iv, 68
  %matins.4 = insertelement <527 x float> %matins.3, float %matrixext.4, i64 %25
  %26 = add nuw nsw i64 %17, 5
  %matrixext.5 = extractelement <527 x float> %16, i64 %26
  %27 = add nuw nsw i64 %indvars.iv, 85
  %matins.5 = insertelement <527 x float> %matins.4, float %matrixext.5, i64 %27
  %28 = add nuw nsw i64 %17, 6
  %matrixext.6 = extractelement <527 x float> %16, i64 %28
  %29 = add nuw nsw i64 %indvars.iv, 102
  %matins.6 = insertelement <527 x float> %matins.5, float %matrixext.6, i64 %29
  %30 = add nuw nsw i64 %17, 7
  %matrixext.7 = extractelement <527 x float> %16, i64 %30
  %31 = add nuw nsw i64 %indvars.iv, 119
  %matins.7 = insertelement <527 x float> %matins.6, float %matrixext.7, i64 %31
  %32 = add nuw nsw i64 %17, 8
  %matrixext.8 = extractelement <527 x float> %16, i64 %32
  %33 = add nuw nsw i64 %indvars.iv, 136
  %matins.8 = insertelement <527 x float> %matins.7, float %matrixext.8, i64 %33
  %34 = add nuw nsw i64 %17, 9
  %matrixext.9 = extractelement <527 x float> %16, i64 %34
  %35 = add nuw nsw i64 %indvars.iv, 153
  %matins.9 = insertelement <527 x float> %matins.8, float %matrixext.9, i64 %35
  %36 = add nuw nsw i64 %17, 10
  %matrixext.10 = extractelement <527 x float> %16, i64 %36
  %37 = add nuw nsw i64 %indvars.iv, 170
  %matins.10 = insertelement <527 x float> %matins.9, float %matrixext.10, i64 %37
  %38 = add nuw nsw i64 %17, 11
  %matrixext.11 = extractelement <527 x float> %16, i64 %38
  %39 = add nuw nsw i64 %indvars.iv, 187
  %matins.11 = insertelement <527 x float> %matins.10, float %matrixext.11, i64 %39
  %40 = add nuw nsw i64 %17, 12
  %matrixext.12 = extractelement <527 x float> %16, i64 %40
  %41 = add nuw nsw i64 %indvars.iv, 204
  %matins.12 = insertelement <527 x float> %matins.11, float %matrixext.12, i64 %41
  %42 = add nuw nsw i64 %17, 13
  %matrixext.13 = extractelement <527 x float> %16, i64 %42
  %43 = add nuw nsw i64 %indvars.iv, 221
  %matins.13 = insertelement <527 x float> %matins.12, float %matrixext.13, i64 %43
  %44 = add nuw nsw i64 %17, 14
  %matrixext.14 = extractelement <527 x float> %16, i64 %44
  %45 = add nuw nsw i64 %indvars.iv, 238
  %matins.14 = insertelement <527 x float> %matins.13, float %matrixext.14, i64 %45
  %46 = add nuw nsw i64 %17, 15
  %matrixext.15 = extractelement <527 x float> %16, i64 %46
  %47 = add nuw nsw i64 %indvars.iv, 255
  %matins.15 = insertelement <527 x float> %matins.14, float %matrixext.15, i64 %47
  %48 = add nuw nsw i64 %17, 16
  %matrixext.16 = extractelement <527 x float> %16, i64 %48
  %49 = add nuw nsw i64 %indvars.iv, 272
  %matins.16 = insertelement <527 x float> %matins.15, float %matrixext.16, i64 %49
  %50 = add nuw nsw i64 %17, 17
  %matrixext.17 = extractelement <527 x float> %16, i64 %50
  %51 = add nuw nsw i64 %indvars.iv, 289
  %matins.17 = insertelement <527 x float> %matins.16, float %matrixext.17, i64 %51
  %52 = add nuw nsw i64 %17, 18
  %matrixext.18 = extractelement <527 x float> %16, i64 %52
  %53 = add nuw nsw i64 %indvars.iv, 306
  %matins.18 = insertelement <527 x float> %matins.17, float %matrixext.18, i64 %53
  %54 = add nuw nsw i64 %17, 19
  %matrixext.19 = extractelement <527 x float> %16, i64 %54
  %55 = add nuw nsw i64 %indvars.iv, 323
  %matins.19 = insertelement <527 x float> %matins.18, float %matrixext.19, i64 %55
  %56 = add nuw nsw i64 %17, 20
  %matrixext.20 = extractelement <527 x float> %16, i64 %56
  %57 = add nuw nsw i64 %indvars.iv, 340
  %matins.20 = insertelement <527 x float> %matins.19, float %matrixext.20, i64 %57
  %58 = add nuw nsw i64 %17, 21
  %matrixext.21 = extractelement <527 x float> %16, i64 %58
  %59 = add nuw nsw i64 %indvars.iv, 357
  %matins.21 = insertelement <527 x float> %matins.20, float %matrixext.21, i64 %59
  %60 = add nuw nsw i64 %17, 22
  %matrixext.22 = extractelement <527 x float> %16, i64 %60
  %61 = add nuw nsw i64 %indvars.iv, 374
  %matins.22 = insertelement <527 x float> %matins.21, float %matrixext.22, i64 %61
  %62 = add nuw nsw i64 %17, 23
  %matrixext.23 = extractelement <527 x float> %16, i64 %62
  %63 = add nuw nsw i64 %indvars.iv, 391
  %matins.23 = insertelement <527 x float> %matins.22, float %matrixext.23, i64 %63
  %64 = add nuw nsw i64 %17, 24
  %matrixext.24 = extractelement <527 x float> %16, i64 %64
  %65 = add nuw nsw i64 %indvars.iv, 408
  %matins.24 = insertelement <527 x float> %matins.23, float %matrixext.24, i64 %65
  %66 = add nuw nsw i64 %17, 25
  %matrixext.25 = extractelement <527 x float> %16, i64 %66
  %67 = add nuw nsw i64 %indvars.iv, 425
  %matins.25 = insertelement <527 x float> %matins.24, float %matrixext.25, i64 %67
  %68 = add nuw nsw i64 %17, 26
  %matrixext.26 = extractelement <527 x float> %16, i64 %68
  %69 = add nuw nsw i64 %indvars.iv, 442
  %matins.26 = insertelement <527 x float> %matins.25, float %matrixext.26, i64 %69
  %70 = add nuw nsw i64 %17, 27
  %matrixext.27 = extractelement <527 x float> %16, i64 %70
  %71 = add nuw nsw i64 %indvars.iv, 459
  %matins.27 = insertelement <527 x float> %matins.26, float %matrixext.27, i64 %71
  %72 = add nuw nsw i64 %17, 28
  %matrixext.28 = extractelement <527 x float> %16, i64 %72
  %73 = add nuw nsw i64 %indvars.iv, 476
  %matins.28 = insertelement <527 x float> %matins.27, float %matrixext.28, i64 %73
  %74 = add nuw nsw i64 %17, 29
  %matrixext.29 = extractelement <527 x float> %16, i64 %74
  %75 = add nuw nsw i64 %indvars.iv, 493
  %matins.29 = insertelement <527 x float> %matins.28, float %matrixext.29, i64 %75
  %76 = add nuw nsw i64 %17, 30
  %matrixext.30 = extractelement <527 x float> %16, i64 %76
  %77 = add nuw nsw i64 %indvars.iv, 510
  %matins.30 = insertelement <527 x float> %matins.29, float %matrixext.30, i64 %77
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 17
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond1.preheader, !llvm.loop !51

for.cond.cleanup:                                 ; preds = %for.cond1.preheader
  %split = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %split55 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33>
  %split56 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50>
  %split57 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67>
  %split58 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84>
  %split59 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101>
  %split60 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118>
  %split61 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135>
  %split62 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152>
  %split63 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169>
  %split64 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186>
  %split65 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203>
  %split66 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220>
  %split67 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237>
  %split68 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254>
  %split69 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271>
  %split70 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288>
  %split71 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305>
  %split72 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322>
  %split73 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339>
  %split74 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356>
  %split75 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373>
  %split76 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390>
  %split77 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407>
  %split78 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424>
  %split79 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441>
  %split80 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458>
  %split81 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475>
  %split82 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482, i32 483, i32 484, i32 485, i32 486, i32 487, i32 488, i32 489, i32 490, i32 491, i32 492>
  %split83 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 493, i32 494, i32 495, i32 496, i32 497, i32 498, i32 499, i32 500, i32 501, i32 502, i32 503, i32 504, i32 505, i32 506, i32 507, i32 508, i32 509>
  %split84 = shufflevector <527 x float> %matins.30, <527 x float> poison, <17 x i32> <i32 510, i32 511, i32 512, i32 513, i32 514, i32 515, i32 516, i32 517, i32 518, i32 519, i32 520, i32 521, i32 522, i32 523, i32 524, i32 525, i32 526>
  store <17 x float> %split, ptr %ResPtr, align 4
  %vec.gep85 = getelementptr float, ptr %ResPtr, i64 17
  store <17 x float> %split55, ptr %vec.gep85, align 4
  %vec.gep86 = getelementptr float, ptr %ResPtr, i64 34
  store <17 x float> %split56, ptr %vec.gep86, align 4
  %vec.gep87 = getelementptr float, ptr %ResPtr, i64 51
  store <17 x float> %split57, ptr %vec.gep87, align 4
  %vec.gep88 = getelementptr float, ptr %ResPtr, i64 68
  store <17 x float> %split58, ptr %vec.gep88, align 4
  %vec.gep89 = getelementptr float, ptr %ResPtr, i64 85
  store <17 x float> %split59, ptr %vec.gep89, align 4
  %vec.gep90 = getelementptr float, ptr %ResPtr, i64 102
  store <17 x float> %split60, ptr %vec.gep90, align 4
  %vec.gep91 = getelementptr float, ptr %ResPtr, i64 119
  store <17 x float> %split61, ptr %vec.gep91, align 4
  %vec.gep92 = getelementptr float, ptr %ResPtr, i64 136
  store <17 x float> %split62, ptr %vec.gep92, align 4
  %vec.gep93 = getelementptr float, ptr %ResPtr, i64 153
  store <17 x float> %split63, ptr %vec.gep93, align 4
  %vec.gep94 = getelementptr float, ptr %ResPtr, i64 170
  store <17 x float> %split64, ptr %vec.gep94, align 4
  %vec.gep95 = getelementptr float, ptr %ResPtr, i64 187
  store <17 x float> %split65, ptr %vec.gep95, align 4
  %vec.gep96 = getelementptr float, ptr %ResPtr, i64 204
  store <17 x float> %split66, ptr %vec.gep96, align 4
  %vec.gep97 = getelementptr float, ptr %ResPtr, i64 221
  store <17 x float> %split67, ptr %vec.gep97, align 4
  %vec.gep98 = getelementptr float, ptr %ResPtr, i64 238
  store <17 x float> %split68, ptr %vec.gep98, align 4
  %vec.gep99 = getelementptr float, ptr %ResPtr, i64 255
  store <17 x float> %split69, ptr %vec.gep99, align 4
  %vec.gep100 = getelementptr float, ptr %ResPtr, i64 272
  store <17 x float> %split70, ptr %vec.gep100, align 4
  %vec.gep101 = getelementptr float, ptr %ResPtr, i64 289
  store <17 x float> %split71, ptr %vec.gep101, align 4
  %vec.gep102 = getelementptr float, ptr %ResPtr, i64 306
  store <17 x float> %split72, ptr %vec.gep102, align 4
  %vec.gep103 = getelementptr float, ptr %ResPtr, i64 323
  store <17 x float> %split73, ptr %vec.gep103, align 4
  %vec.gep104 = getelementptr float, ptr %ResPtr, i64 340
  store <17 x float> %split74, ptr %vec.gep104, align 4
  %vec.gep105 = getelementptr float, ptr %ResPtr, i64 357
  store <17 x float> %split75, ptr %vec.gep105, align 4
  %vec.gep106 = getelementptr float, ptr %ResPtr, i64 374
  store <17 x float> %split76, ptr %vec.gep106, align 4
  %vec.gep107 = getelementptr float, ptr %ResPtr, i64 391
  store <17 x float> %split77, ptr %vec.gep107, align 4
  %vec.gep108 = getelementptr float, ptr %ResPtr, i64 408
  store <17 x float> %split78, ptr %vec.gep108, align 4
  %vec.gep109 = getelementptr float, ptr %ResPtr, i64 425
  store <17 x float> %split79, ptr %vec.gep109, align 4
  %vec.gep110 = getelementptr float, ptr %ResPtr, i64 442
  store <17 x float> %split80, ptr %vec.gep110, align 4
  %vec.gep111 = getelementptr float, ptr %ResPtr, i64 459
  store <17 x float> %split81, ptr %vec.gep111, align 4
  %vec.gep112 = getelementptr float, ptr %ResPtr, i64 476
  store <17 x float> %split82, ptr %vec.gep112, align 4
  %vec.gep113 = getelementptr float, ptr %ResPtr, i64 493
  store <17 x float> %split83, ptr %vec.gep113, align 4
  %vec.gep114 = getelementptr float, ptr %ResPtr, i64 510
  store <17 x float> %split84, ptr %vec.gep114, align 4
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14expectMatrixEQIfLi0EEvPT_S1_jj(ptr noundef %A, ptr noundef %B, i32 noundef %R, i32 noundef %C) local_unnamed_addr #5 comdat {
entry:
  %cmp35.not = icmp eq i32 %R, 0
  %cmp233.not = icmp eq i32 %C, 0
  %or.cond = or i1 %cmp35.not, %cmp233.not
  br i1 %or.cond, label %for.cond.cleanup, label %for.cond1.preheader.us.preheader

for.cond1.preheader.us.preheader:                 ; preds = %entry
  %wide.trip.count = zext i32 %C to i64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %for.cond1.for.cond.cleanup3_crit_edge.us
  %r.036.us = phi i32 [ %inc16.us, %for.cond1.for.cond.cleanup3_crit_edge.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br label %for.body4.us

for.body4.us:                                     ; preds = %for.cond1.preheader.us, %for.inc.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.inc.us ]
  %0 = trunc i64 %indvars.iv to i32
  %mul.us = mul i32 %0, %R
  %add.us = add i32 %mul.us, %r.036.us
  %idxprom.us = zext i32 %add.us to i64
  %arrayidx.us = getelementptr inbounds float, ptr %A, i64 %idxprom.us
  %1 = load float, ptr %arrayidx.us, align 4, !tbaa !11
  %conv.us = fpext float %1 to double
  %arrayidx8.us = getelementptr inbounds float, ptr %B, i64 %idxprom.us
  %2 = load float, ptr %arrayidx8.us, align 4, !tbaa !11
  %conv9.us = fpext float %2 to double
  %sub.i.us = fsub double %conv.us, %conv9.us
  %3 = tail call double @llvm.fabs.f64(double %sub.i.us)
  %cmp.i.us = fcmp ogt double %3, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp.i.us, label %if.then.i.us, label %for.inc.us

if.then.i.us:                                     ; preds = %for.body4.us
  %tobool.i.us = fcmp une float %2, 0.000000e+00
  br i1 %tobool.i.us, label %if.then1.i.us, label %if.else.i.us

if.else.i.us:                                     ; preds = %if.then.i.us
  %tobool3.i.us = fcmp une float %1, 0.000000e+00
  br i1 %tobool3.i.us, label %if.then4.i.us, label %for.inc.us

if.then4.i.us:                                    ; preds = %if.else.i.us
  %div5.i.us = fdiv double %conv9.us, %conv.us
  br label %if.end8.i.us

if.then1.i.us:                                    ; preds = %if.then.i.us
  %div.i.us = fdiv double %conv.us, %conv9.us
  br label %if.end8.i.us

if.end8.i.us:                                     ; preds = %if.then1.i.us, %if.then4.i.us
  %div.i.us.sink = phi double [ %div.i.us, %if.then1.i.us ], [ %div5.i.us, %if.then4.i.us ]
  %sub2.i.us = fadd double %div.i.us.sink, -1.000000e+00
  %4 = tail call double @llvm.fabs.f64(double %sub2.i.us)
  %cmp9.i.us = fcmp ule double %4, 1.000000e-05
  br i1 %cmp9.i.us, label %for.inc.us, label %if.then

for.inc.us:                                       ; preds = %if.end8.i.us, %if.else.i.us, %for.body4.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup3_crit_edge.us, label %for.body4.us, !llvm.loop !52

for.cond1.for.cond.cleanup3_crit_edge.us:         ; preds = %for.inc.us
  %inc16.us = add nuw i32 %r.036.us, 1
  %exitcond42.not = icmp eq i32 %inc16.us, %R
  br i1 %exitcond42.not, label %for.cond.cleanup, label %for.cond1.preheader.us, !llvm.loop !53

for.cond.cleanup:                                 ; preds = %for.cond1.for.cond.cleanup3_crit_edge.us, %entry
  ret void

if.then:                                          ; preds = %if.end8.i.us
  %5 = trunc i64 %indvars.iv to i32
  %call10 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) @_ZNSt3__14cerrE, ptr noundef nonnull @.str)
  %call11 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(ptr noundef nonnull align 8 dereferenceable(8) %call10, i32 noundef %r.036.us)
  %call12 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) %call11, ptr noundef nonnull @.str.1)
  %call13 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(ptr noundef nonnull align 8 dereferenceable(8) %call12, i32 noundef %5)
  %call14 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt3__1lsB7v170000INS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(ptr noundef nonnull align 8 dereferenceable(8) %call13, ptr noundef nonnull @.str.2)
  tail call void @exit(i32 noundef 1) #17
  unreachable
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: uwtable
define linkonce_odr dso_local noundef i32 @_ZNSt3__124uniform_int_distributionIjEclINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEEjRT_RKNS1_10param_typeE(ptr noundef nonnull align 4 dereferenceable(8) %this, ptr noundef nonnull align 8 dereferenceable(8) %__g, ptr noundef nonnull align 4 dereferenceable(8) %__p) local_unnamed_addr #4 comdat align 2 {
entry:
  %__b_.i = getelementptr inbounds %"class.std::__1::uniform_int_distribution<unsigned int>::param_type", ptr %__p, i64 0, i32 1
  %0 = load i32, ptr %__b_.i, align 4, !tbaa !21
  %1 = load i32, ptr %__p, align 4, !tbaa !18
  %sub = sub i32 %0, %1
  %add = add i32 %sub, 1
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %cleanup20, label %if.end

if.end:                                           ; preds = %entry
  %cmp4 = icmp eq i32 %add, 0
  br i1 %cmp4, label %do.body.preheader.lr.ph.i.i, label %if.end7

do.body.preheader.lr.ph.i.i:                      ; preds = %if.end
  %.promoted55.i.i = load i64, ptr %__g, align 8, !tbaa !15
  br label %do.body.i.i

do.body.i.i:                                      ; preds = %do.body.i.i, %do.body.preheader.lr.ph.i.i
  %rem.i.i50.i.i = phi i64 [ %.promoted55.i.i, %do.body.preheader.lr.ph.i.i ], [ %rem.i.i.i.i, %do.body.i.i ]
  %mul.i.i.i.i = mul i64 %rem.i.i50.i.i, 48271
  %rem.i.i.i.i = urem i64 %mul.i.i.i.i, 2147483647
  %sub.i.i = add nsw i64 %rem.i.i.i.i, -1
  %cmp3.not.i.i = icmp ult i64 %sub.i.i, 2147418112
  br i1 %cmp3.not.i.i, label %do.end.i.i, label %do.body.i.i, !llvm.loop !54

do.end.i.i:                                       ; preds = %do.body.i.i
  %2 = trunc i64 %sub.i.i to i32
  br label %do.body.i.i.1

do.body.i.i.1:                                    ; preds = %do.body.i.i.1, %do.end.i.i
  %rem.i.i50.i.i.1 = phi i64 [ %rem.i.i.i.i, %do.end.i.i ], [ %rem.i.i.i.i.1, %do.body.i.i.1 ]
  %mul.i.i.i.i.1 = mul nuw nsw i64 %rem.i.i50.i.i.1, 48271
  %rem.i.i.i.i.1 = urem i64 %mul.i.i.i.i.1, 2147483647
  %sub.i.i.1 = add nsw i64 %rem.i.i.i.i.1, -1
  %cmp3.not.i.i.1 = icmp ult i64 %sub.i.i.1, 2147418112
  br i1 %cmp3.not.i.i.1, label %do.end.i.i.1, label %do.body.i.i.1, !llvm.loop !54

do.end.i.i.1:                                     ; preds = %do.body.i.i.1
  %3 = shl i32 %2, 16
  %4 = trunc i64 %sub.i.i.1 to i32
  %5 = and i32 %4, 65535
  %conv6.i.i.1 = or i32 %5, %3
  store i64 %rem.i.i.i.i.1, ptr %__g, align 8, !tbaa !15
  br label %cleanup20

if.end7:                                          ; preds = %if.end
  %6 = tail call i32 @llvm.ctlz.i32(i32 %add, i1 true), !range !55
  %conv = zext i32 %6 to i64
  %shr = lshr i32 2147483647, %6
  %and = and i32 %shr, %add
  %cmp13.not = icmp eq i32 %and, 0
  %spec.select = select i1 %cmp13.not, i64 31, i64 32
  %__w.0 = sub nsw i64 %spec.select, %conv
  %div.i = udiv i64 %__w.0, 30
  %rem.i = urem i64 %__w.0, 30
  %cmp.i = icmp ne i64 %rem.i, 0
  %conv.i = zext i1 %cmp.i to i64
  %add.i = add nuw nsw i64 %div.i, %conv.i
  %div6.i = udiv i64 %__w.0, %add.i
  %cmp8.i = icmp ult i64 %div6.i, 64
  %7 = shl nsw i64 -1, %div6.i
  %shl.i = and i64 %7, 2147483646
  %.sink.i = select i1 %cmp8.i, i64 %shl.i, i64 0
  %sub.i = sub nuw nsw i64 2147483646, %.sink.i
  %div15.i = udiv i64 %.sink.i, %add.i
  %cmp16.i = icmp ugt i64 %sub.i, %div15.i
  br i1 %cmp16.i, label %if.then17.i, label %if.end34.i

if.then17.i:                                      ; preds = %if.end7
  %inc.i = add nuw nsw i64 %add.i, 1
  %div21.i = udiv i64 %__w.0, %inc.i
  %rem3869.i = urem i64 %__w.0, %inc.i
  %cmp24.i = icmp ult i64 %div21.i, 64
  br i1 %cmp24.i, label %if.then25.i, label %if.end34.thread.i

if.then25.i:                                      ; preds = %if.then17.i
  %8 = shl nsw i64 -1, %div21.i
  %shl29.i = and i64 %8, 2147483646
  br label %if.end34.i

if.end34.thread.i:                                ; preds = %if.then17.i
  %sub3970.i = sub nsw i64 %inc.i, %rem3869.i
  br label %_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread

if.end34.i:                                       ; preds = %if.then25.i, %if.end7
  %__e.sroa.10.0 = phi i64 [ %inc.i, %if.then25.i ], [ %add.i, %if.end7 ]
  %__e.sroa.6.0 = phi i64 [ %div21.i, %if.then25.i ], [ %div6.i, %if.end7 ]
  %__e.sroa.16.0 = phi i64 [ %shl29.i, %if.then25.i ], [ %.sink.i, %if.end7 ]
  %rem38.i = urem i64 %__w.0, %__e.sroa.10.0
  %sub39.i35 = sub nsw i64 %__e.sroa.10.0, %rem38.i
  %cmp41.i = icmp ult i64 %__e.sroa.6.0, 63
  br i1 %cmp41.i, label %9, label %_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread

_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread: ; preds = %if.end34.thread.i, %if.end34.i
  %__e.sroa.10.1.ph = phi i64 [ %inc.i, %if.end34.thread.i ], [ %__e.sroa.10.0, %if.end34.i ]
  %__e.sroa.6.1.ph = phi i64 [ %div21.i, %if.end34.thread.i ], [ %__e.sroa.6.0, %if.end34.i ]
  %__e.sroa.13.0.ph = phi i64 [ %sub3970.i, %if.end34.thread.i ], [ %sub39.i35, %if.end34.i ]
  %__e.sroa.16.1.ph = phi i64 [ 0, %if.end34.thread.i ], [ %__e.sroa.16.0, %if.end34.i ]
  %sub55.i109 = sub i64 64, %__e.sroa.6.1.ph
  %shr56.i110 = lshr i64 -1, %sub55.i109
  br label %10

9:                                                ; preds = %if.end34.i
  %add44.i = add nuw nsw i64 %__e.sroa.6.0, 1
  %shr45.i = lshr i64 1073741823, %__e.sroa.6.0
  %shl48.i = shl i64 %shr45.i, %add44.i
  %cmp53.not.i = icmp eq i64 %__e.sroa.6.0, 0
  %sub55.i = sub nuw nsw i64 64, %__e.sroa.6.0
  %shr56.i = lshr i64 -1, %sub55.i
  %cond.i = select i1 %cmp53.not.i, i64 0, i64 %shr56.i
  %sub62.i = sub nuw nsw i64 63, %__e.sroa.6.0
  %shr63.i = lshr i64 -1, %sub62.i
  br label %10

10:                                               ; preds = %_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread, %9
  %cond.i119 = phi i64 [ %cond.i, %9 ], [ %shr56.i110, %_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread ]
  %.sink76.i118 = phi i64 [ %shl48.i, %9 ], [ 0, %_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread ]
  %__e.sroa.16.1117 = phi i64 [ %__e.sroa.16.0, %9 ], [ %__e.sroa.16.1.ph, %_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread ]
  %__e.sroa.13.0116 = phi i64 [ %sub39.i35, %9 ], [ %__e.sroa.13.0.ph, %_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread ]
  %__e.sroa.6.1115 = phi i64 [ %__e.sroa.6.0, %9 ], [ %__e.sroa.6.1.ph, %_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread ]
  %__e.sroa.10.1114 = phi i64 [ %__e.sroa.10.0, %9 ], [ %__e.sroa.10.1.ph, %_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread ]
  %11 = phi i64 [ %shr63.i, %9 ], [ -1, %_ZNSt3__125__independent_bits_engineINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEjEC2ERS2_m.exit.thread ]
  %cmp51.not.i.i41 = icmp eq i64 %__e.sroa.13.0116, 0
  %cmp1058.i.i56 = icmp ult i64 %__e.sroa.13.0116, %__e.sroa.10.1114
  %__g.promoted = load i64, ptr %__g, align 8, !tbaa !15
  %cmp4.i.i44 = icmp ult i64 %__e.sroa.6.1115, 32
  %sh_prom.i.i45 = trunc i64 %__e.sroa.6.1115 to i32
  %cmp23.i.i60 = icmp ult i64 %__e.sroa.6.1115, 31
  %sh_prom27.i.i61 = add i32 %sh_prom.i.i45, 1
  br i1 %cmp51.not.i.i41, label %.split.us, label %.split

.split.us:                                        ; preds = %10
  br i1 %cmp1058.i.i56, label %do.body14.preheader.i.i81.us.us, label %do.end

do.body14.preheader.i.i81.us.us:                  ; preds = %.split.us, %do.body14.preheader.i.i81.us.us.backedge
  %rem.i.i49.lcssa63.i.i78.us.us = phi i64 [ %rem.i.i49.i.i85.us.us, %do.body14.preheader.i.i81.us.us.backedge ], [ %__g.promoted, %.split.us ]
  %_Sp.260.i.i79.us.us = phi i32 [ %_Sp.260.i.i79.us.us.be, %do.body14.preheader.i.i81.us.us.backedge ], [ 0, %.split.us ]
  %__k7.059.i.i80.us.us = phi i64 [ %__k7.059.i.i80.us.us.be, %do.body14.preheader.i.i81.us.us.backedge ], [ 0, %.split.us ]
  br label %do.body14.i.i88.us.us

do.body14.i.i88.us.us:                            ; preds = %do.body14.i.i88.us.us, %do.body14.preheader.i.i81.us.us
  %rem.i.i4957.i.i83.us.us = phi i64 [ %rem.i.i49.lcssa63.i.i78.us.us, %do.body14.preheader.i.i81.us.us ], [ %rem.i.i49.i.i85.us.us, %do.body14.i.i88.us.us ]
  %mul.i.i48.i.i84.us.us = mul i64 %rem.i.i4957.i.i83.us.us, 48271
  %rem.i.i49.i.i85.us.us = urem i64 %mul.i.i48.i.i84.us.us, 2147483647
  %sub18.i.i86.us.us = add nsw i64 %rem.i.i49.i.i85.us.us, -1
  %cmp20.not.i.i87.us.us = icmp ult i64 %sub18.i.i86.us.us, %.sink76.i118
  br i1 %cmp20.not.i.i87.us.us, label %do.end21.i.i95.us.us, label %do.body14.i.i88.us.us, !llvm.loop !56

do.end21.i.i95.us.us:                             ; preds = %do.body14.i.i88.us.us
  %shl28.i.i89.us.us = shl i32 %_Sp.260.i.i79.us.us, %sh_prom27.i.i61
  %_Sp.3.i.i90.us.us = select i1 %cmp23.i.i60, i32 %shl28.i.i89.us.us, i32 0
  %and31.i.i91.us.us = and i64 %sub18.i.i86.us.us, %11
  %12 = trunc i64 %and31.i.i91.us.us to i32
  %conv34.i.i92.us.us = add i32 %_Sp.3.i.i90.us.us, %12
  %inc36.i.i93.us.us = add nuw i64 %__k7.059.i.i80.us.us, 1
  %exitcond64.not.i.i94.us.us = icmp eq i64 %inc36.i.i93.us.us, %__e.sroa.10.1114
  br i1 %exitcond64.not.i.i94.us.us, label %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us.us, label %do.body14.preheader.i.i81.us.us.backedge

do.body14.preheader.i.i81.us.us.backedge:         ; preds = %do.end21.i.i95.us.us, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us.us
  %_Sp.260.i.i79.us.us.be = phi i32 [ %conv34.i.i92.us.us, %do.end21.i.i95.us.us ], [ 0, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us.us ]
  %__k7.059.i.i80.us.us.be = phi i64 [ %inc36.i.i93.us.us, %do.end21.i.i95.us.us ], [ 0, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us.us ]
  br label %do.body14.preheader.i.i81.us.us, !llvm.loop !57

for.cond9.for.cond.cleanup11_crit_edge.i.i82.us.us: ; preds = %do.end21.i.i95.us.us
  %cmp17.not.us.us = icmp ult i32 %conv34.i.i92.us.us, %add
  br i1 %cmp17.not.us.us, label %do.end.sink.split, label %do.body14.preheader.i.i81.us.us.backedge

.split:                                           ; preds = %10
  br i1 %cmp1058.i.i56, label %do.body.preheader.i.i52.us, label %do.body.preheader.i.i52

do.body.preheader.i.i52.us:                       ; preds = %.split, %do.body.preheader.i.i52.us.backedge
  %rem.i.i.lcssa56.i.i49.us = phi i64 [ %rem.i.i.lcssa56.i.i49.us.be, %do.body.preheader.i.i52.us.backedge ], [ %__g.promoted, %.split ]
  %_Sp.053.i.i50.us = phi i32 [ %_Sp.053.i.i50.us.be, %do.body.preheader.i.i52.us.backedge ], [ 0, %.split ]
  %__k.052.i.i51.us = phi i64 [ %__k.052.i.i51.us.be, %do.body.preheader.i.i52.us.backedge ], [ 0, %.split ]
  br label %do.body.i.i70.us

do.body.i.i70.us:                                 ; preds = %do.body.i.i70.us, %do.body.preheader.i.i52.us
  %rem.i.i50.i.i65.us = phi i64 [ %rem.i.i.lcssa56.i.i49.us, %do.body.preheader.i.i52.us ], [ %rem.i.i.i.i67.us, %do.body.i.i70.us ]
  %mul.i.i.i.i66.us = mul i64 %rem.i.i50.i.i65.us, 48271
  %rem.i.i.i.i67.us = urem i64 %mul.i.i.i.i66.us, 2147483647
  %sub.i.i68.us = add nsw i64 %rem.i.i.i.i67.us, -1
  %cmp3.not.i.i69.us = icmp ult i64 %sub.i.i68.us, %__e.sroa.16.1117
  br i1 %cmp3.not.i.i69.us, label %do.end.i.i77.us, label %do.body.i.i70.us, !llvm.loop !54

do.end.i.i77.us:                                  ; preds = %do.body.i.i70.us
  %shl.i.i71.us = shl i32 %_Sp.053.i.i50.us, %sh_prom.i.i45
  %_Sp.1.i.i72.us = select i1 %cmp4.i.i44, i32 %shl.i.i71.us, i32 0
  %and.i.i73.us = and i64 %sub.i.i68.us, %cond.i119
  %13 = trunc i64 %and.i.i73.us to i32
  %conv6.i.i74.us = add i32 %_Sp.1.i.i72.us, %13
  %inc.i.i75.us = add nuw i64 %__k.052.i.i51.us, 1
  %exitcond.not.i.i76.us = icmp eq i64 %inc.i.i75.us, %__e.sroa.13.0116
  br i1 %exitcond.not.i.i76.us, label %do.body14.preheader.i.i81.us126, label %do.body.preheader.i.i52.us.backedge

do.body.preheader.i.i52.us.backedge:              ; preds = %do.end.i.i77.us, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us145
  %rem.i.i.lcssa56.i.i49.us.be = phi i64 [ %rem.i.i.i.i67.us, %do.end.i.i77.us ], [ %rem.i.i49.i.i85.us133, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us145 ]
  %_Sp.053.i.i50.us.be = phi i32 [ %conv6.i.i74.us, %do.end.i.i77.us ], [ 0, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us145 ]
  %__k.052.i.i51.us.be = phi i64 [ %inc.i.i75.us, %do.end.i.i77.us ], [ 0, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us145 ]
  br label %do.body.preheader.i.i52.us, !llvm.loop !57

do.body14.preheader.i.i81.us126:                  ; preds = %do.end.i.i77.us, %do.end21.i.i95.us136
  %rem.i.i49.lcssa63.i.i78.us127 = phi i64 [ %rem.i.i49.i.i85.us133, %do.end21.i.i95.us136 ], [ %rem.i.i.i.i67.us, %do.end.i.i77.us ]
  %_Sp.260.i.i79.us128 = phi i32 [ %conv34.i.i92.us142, %do.end21.i.i95.us136 ], [ %conv6.i.i74.us, %do.end.i.i77.us ]
  %__k7.059.i.i80.us129 = phi i64 [ %inc36.i.i93.us143, %do.end21.i.i95.us136 ], [ %__e.sroa.13.0116, %do.end.i.i77.us ]
  br label %do.body14.i.i88.us130

do.body14.i.i88.us130:                            ; preds = %do.body14.i.i88.us130, %do.body14.preheader.i.i81.us126
  %rem.i.i4957.i.i83.us131 = phi i64 [ %rem.i.i49.lcssa63.i.i78.us127, %do.body14.preheader.i.i81.us126 ], [ %rem.i.i49.i.i85.us133, %do.body14.i.i88.us130 ]
  %mul.i.i48.i.i84.us132 = mul nuw nsw i64 %rem.i.i4957.i.i83.us131, 48271
  %rem.i.i49.i.i85.us133 = urem i64 %mul.i.i48.i.i84.us132, 2147483647
  %sub18.i.i86.us134 = add nsw i64 %rem.i.i49.i.i85.us133, -1
  %cmp20.not.i.i87.us135 = icmp ult i64 %sub18.i.i86.us134, %.sink76.i118
  br i1 %cmp20.not.i.i87.us135, label %do.end21.i.i95.us136, label %do.body14.i.i88.us130, !llvm.loop !56

do.end21.i.i95.us136:                             ; preds = %do.body14.i.i88.us130
  %shl28.i.i89.us139 = shl i32 %_Sp.260.i.i79.us128, %sh_prom27.i.i61
  %_Sp.3.i.i90.us140 = select i1 %cmp23.i.i60, i32 %shl28.i.i89.us139, i32 0
  %and31.i.i91.us141 = and i64 %sub18.i.i86.us134, %11
  %14 = trunc i64 %and31.i.i91.us141 to i32
  %conv34.i.i92.us142 = add i32 %_Sp.3.i.i90.us140, %14
  %inc36.i.i93.us143 = add nuw i64 %__k7.059.i.i80.us129, 1
  %exitcond64.not.i.i94.us144 = icmp eq i64 %inc36.i.i93.us143, %__e.sroa.10.1114
  br i1 %exitcond64.not.i.i94.us144, label %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us145, label %do.body14.preheader.i.i81.us126, !llvm.loop !58

for.cond9.for.cond.cleanup11_crit_edge.i.i82.us145: ; preds = %do.end21.i.i95.us136
  %cmp17.not.us151 = icmp ult i32 %conv34.i.i92.us142, %add
  br i1 %cmp17.not.us151, label %do.end.sink.split, label %do.body.preheader.i.i52.us.backedge

do.body.preheader.i.i52:                          ; preds = %.split, %do.body.preheader.i.i52.backedge
  %rem.i.i.lcssa56.i.i49 = phi i64 [ %rem.i.i.i.i67, %do.body.preheader.i.i52.backedge ], [ %__g.promoted, %.split ]
  %_Sp.053.i.i50 = phi i32 [ %_Sp.053.i.i50.be, %do.body.preheader.i.i52.backedge ], [ 0, %.split ]
  %__k.052.i.i51 = phi i64 [ %__k.052.i.i51.be, %do.body.preheader.i.i52.backedge ], [ 0, %.split ]
  br label %do.body.i.i70

for.cond.for.cond9.preheader_crit_edge.i.i53:     ; preds = %do.end.i.i77
  %cmp17.not = icmp ult i32 %conv6.i.i74, %add
  br i1 %cmp17.not, label %do.end.sink.split, label %do.body.preheader.i.i52.backedge

do.body.i.i70:                                    ; preds = %do.body.i.i70, %do.body.preheader.i.i52
  %rem.i.i50.i.i65 = phi i64 [ %rem.i.i.lcssa56.i.i49, %do.body.preheader.i.i52 ], [ %rem.i.i.i.i67, %do.body.i.i70 ]
  %mul.i.i.i.i66 = mul i64 %rem.i.i50.i.i65, 48271
  %rem.i.i.i.i67 = urem i64 %mul.i.i.i.i66, 2147483647
  %sub.i.i68 = add nsw i64 %rem.i.i.i.i67, -1
  %cmp3.not.i.i69 = icmp ult i64 %sub.i.i68, %__e.sroa.16.1117
  br i1 %cmp3.not.i.i69, label %do.end.i.i77, label %do.body.i.i70, !llvm.loop !54

do.end.i.i77:                                     ; preds = %do.body.i.i70
  %shl.i.i71 = shl i32 %_Sp.053.i.i50, %sh_prom.i.i45
  %_Sp.1.i.i72 = select i1 %cmp4.i.i44, i32 %shl.i.i71, i32 0
  %and.i.i73 = and i64 %sub.i.i68, %cond.i119
  %15 = trunc i64 %and.i.i73 to i32
  %conv6.i.i74 = add i32 %_Sp.1.i.i72, %15
  %inc.i.i75 = add nuw i64 %__k.052.i.i51, 1
  %exitcond.not.i.i76 = icmp eq i64 %inc.i.i75, %__e.sroa.13.0116
  br i1 %exitcond.not.i.i76, label %for.cond.for.cond9.preheader_crit_edge.i.i53, label %do.body.preheader.i.i52.backedge

do.body.preheader.i.i52.backedge:                 ; preds = %do.end.i.i77, %for.cond.for.cond9.preheader_crit_edge.i.i53
  %_Sp.053.i.i50.be = phi i32 [ %conv6.i.i74, %do.end.i.i77 ], [ 0, %for.cond.for.cond9.preheader_crit_edge.i.i53 ]
  %__k.052.i.i51.be = phi i64 [ %inc.i.i75, %do.end.i.i77 ], [ 0, %for.cond.for.cond9.preheader_crit_edge.i.i53 ]
  br label %do.body.preheader.i.i52, !llvm.loop !57

do.end.sink.split:                                ; preds = %for.cond.for.cond9.preheader_crit_edge.i.i53, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us145, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us.us
  %rem.i.i49.i.i85.us.us.lcssa.lcssa.lcssa.sink = phi i64 [ %rem.i.i49.i.i85.us.us, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us.us ], [ %rem.i.i49.i.i85.us133, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us145 ], [ %rem.i.i.i.i67, %for.cond.for.cond9.preheader_crit_edge.i.i53 ]
  %.us-phi.ph = phi i32 [ %conv34.i.i92.us.us, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us.us ], [ %conv34.i.i92.us142, %for.cond9.for.cond.cleanup11_crit_edge.i.i82.us145 ], [ %conv6.i.i74, %for.cond.for.cond9.preheader_crit_edge.i.i53 ]
  store i64 %rem.i.i49.i.i85.us.us.lcssa.lcssa.lcssa.sink, ptr %__g, align 8, !tbaa !15
  br label %do.end

do.end:                                           ; preds = %do.end.sink.split, %.split.us
  %.us-phi = phi i32 [ 0, %.split.us ], [ %.us-phi.ph, %do.end.sink.split ]
  %add19 = add i32 %.us-phi, %1
  br label %cleanup20

cleanup20:                                        ; preds = %do.end.i.i.1, %entry, %do.end
  %retval.1 = phi i32 [ %add19, %do.end ], [ %0, %entry ], [ %conv6.i.i.1, %do.end.i.i.1 ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: mustprogress nounwind uwtable
define linkonce_odr dso_local void @_Z12multiplySpecIdLj10ELj21ELj23EEvPT_S1_S1_(ptr noundef %Res, ptr noundef %Matrix1, ptr noundef %Matrix2) local_unnamed_addr #13 comdat {
entry:
  %col.load = load <10 x double>, ptr %Matrix1, align 8
  %vec.gep = getelementptr double, ptr %Matrix1, i64 10
  %col.load45 = load <10 x double>, ptr %vec.gep, align 8
  %vec.gep46 = getelementptr double, ptr %Matrix1, i64 20
  %col.load47 = load <10 x double>, ptr %vec.gep46, align 8
  %vec.gep48 = getelementptr double, ptr %Matrix1, i64 30
  %col.load49 = load <10 x double>, ptr %vec.gep48, align 8
  %vec.gep50 = getelementptr double, ptr %Matrix1, i64 40
  %col.load51 = load <10 x double>, ptr %vec.gep50, align 8
  %vec.gep52 = getelementptr double, ptr %Matrix1, i64 50
  %col.load53 = load <10 x double>, ptr %vec.gep52, align 8
  %vec.gep54 = getelementptr double, ptr %Matrix1, i64 60
  %col.load55 = load <10 x double>, ptr %vec.gep54, align 8
  %vec.gep56 = getelementptr double, ptr %Matrix1, i64 70
  %col.load57 = load <10 x double>, ptr %vec.gep56, align 8
  %vec.gep58 = getelementptr double, ptr %Matrix1, i64 80
  %col.load59 = load <10 x double>, ptr %vec.gep58, align 8
  %vec.gep60 = getelementptr double, ptr %Matrix1, i64 90
  %col.load61 = load <10 x double>, ptr %vec.gep60, align 8
  %vec.gep62 = getelementptr double, ptr %Matrix1, i64 100
  %col.load63 = load <10 x double>, ptr %vec.gep62, align 8
  %vec.gep64 = getelementptr double, ptr %Matrix1, i64 110
  %col.load65 = load <10 x double>, ptr %vec.gep64, align 8
  %vec.gep66 = getelementptr double, ptr %Matrix1, i64 120
  %col.load67 = load <10 x double>, ptr %vec.gep66, align 8
  %vec.gep68 = getelementptr double, ptr %Matrix1, i64 130
  %col.load69 = load <10 x double>, ptr %vec.gep68, align 8
  %vec.gep70 = getelementptr double, ptr %Matrix1, i64 140
  %col.load71 = load <10 x double>, ptr %vec.gep70, align 8
  %vec.gep72 = getelementptr double, ptr %Matrix1, i64 150
  %col.load73 = load <10 x double>, ptr %vec.gep72, align 8
  %vec.gep74 = getelementptr double, ptr %Matrix1, i64 160
  %col.load75 = load <10 x double>, ptr %vec.gep74, align 8
  %vec.gep76 = getelementptr double, ptr %Matrix1, i64 170
  %col.load77 = load <10 x double>, ptr %vec.gep76, align 8
  %vec.gep78 = getelementptr double, ptr %Matrix1, i64 180
  %col.load79 = load <10 x double>, ptr %vec.gep78, align 8
  %vec.gep80 = getelementptr double, ptr %Matrix1, i64 190
  %col.load81 = load <10 x double>, ptr %vec.gep80, align 8
  %vec.gep82 = getelementptr double, ptr %Matrix1, i64 200
  %col.load83 = load <10 x double>, ptr %vec.gep82, align 8
  %0 = shufflevector <10 x double> %col.load, <10 x double> %col.load45, <20 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %1 = shufflevector <10 x double> %col.load47, <10 x double> %col.load49, <20 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %2 = shufflevector <10 x double> %col.load51, <10 x double> %col.load53, <20 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %3 = shufflevector <10 x double> %col.load55, <10 x double> %col.load57, <20 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %4 = shufflevector <10 x double> %col.load59, <10 x double> %col.load61, <20 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %5 = shufflevector <10 x double> %col.load63, <10 x double> %col.load65, <20 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %6 = shufflevector <10 x double> %col.load67, <10 x double> %col.load69, <20 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %7 = shufflevector <10 x double> %col.load71, <10 x double> %col.load73, <20 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %8 = shufflevector <10 x double> %col.load75, <10 x double> %col.load77, <20 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %9 = shufflevector <10 x double> %col.load79, <10 x double> %col.load81, <20 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %10 = shufflevector <20 x double> %0, <20 x double> %1, <40 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %11 = shufflevector <20 x double> %2, <20 x double> %3, <40 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %12 = shufflevector <20 x double> %4, <20 x double> %5, <40 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %13 = shufflevector <20 x double> %6, <20 x double> %7, <40 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %14 = shufflevector <20 x double> %8, <20 x double> %9, <40 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %15 = shufflevector <40 x double> %10, <40 x double> %11, <80 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79>
  %16 = shufflevector <40 x double> %12, <40 x double> %13, <80 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79>
  %17 = shufflevector <10 x double> %col.load83, <10 x double> poison, <40 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %18 = shufflevector <80 x double> %15, <80 x double> %16, <160 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159>
  %19 = shufflevector <40 x double> %14, <40 x double> %17, <160 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = shufflevector <160 x double> %18, <160 x double> %19, <210 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209>
  %col.load84 = load <21 x double>, ptr %Matrix2, align 8
  %vec.gep85 = getelementptr double, ptr %Matrix2, i64 21
  %col.load86 = load <21 x double>, ptr %vec.gep85, align 8
  %vec.gep87 = getelementptr double, ptr %Matrix2, i64 42
  %col.load88 = load <21 x double>, ptr %vec.gep87, align 8
  %vec.gep89 = getelementptr double, ptr %Matrix2, i64 63
  %col.load90 = load <21 x double>, ptr %vec.gep89, align 8
  %vec.gep91 = getelementptr double, ptr %Matrix2, i64 84
  %col.load92 = load <21 x double>, ptr %vec.gep91, align 8
  %vec.gep93 = getelementptr double, ptr %Matrix2, i64 105
  %col.load94 = load <21 x double>, ptr %vec.gep93, align 8
  %vec.gep95 = getelementptr double, ptr %Matrix2, i64 126
  %col.load96 = load <21 x double>, ptr %vec.gep95, align 8
  %vec.gep97 = getelementptr double, ptr %Matrix2, i64 147
  %col.load98 = load <21 x double>, ptr %vec.gep97, align 8
  %vec.gep99 = getelementptr double, ptr %Matrix2, i64 168
  %col.load100 = load <21 x double>, ptr %vec.gep99, align 8
  %vec.gep101 = getelementptr double, ptr %Matrix2, i64 189
  %col.load102 = load <21 x double>, ptr %vec.gep101, align 8
  %vec.gep103 = getelementptr double, ptr %Matrix2, i64 210
  %col.load104 = load <21 x double>, ptr %vec.gep103, align 8
  %vec.gep105 = getelementptr double, ptr %Matrix2, i64 231
  %col.load106 = load <21 x double>, ptr %vec.gep105, align 8
  %vec.gep107 = getelementptr double, ptr %Matrix2, i64 252
  %col.load108 = load <21 x double>, ptr %vec.gep107, align 8
  %vec.gep109 = getelementptr double, ptr %Matrix2, i64 273
  %col.load110 = load <21 x double>, ptr %vec.gep109, align 8
  %vec.gep111 = getelementptr double, ptr %Matrix2, i64 294
  %col.load112 = load <21 x double>, ptr %vec.gep111, align 8
  %vec.gep113 = getelementptr double, ptr %Matrix2, i64 315
  %col.load114 = load <21 x double>, ptr %vec.gep113, align 8
  %vec.gep115 = getelementptr double, ptr %Matrix2, i64 336
  %col.load116 = load <21 x double>, ptr %vec.gep115, align 8
  %vec.gep117 = getelementptr double, ptr %Matrix2, i64 357
  %col.load118 = load <21 x double>, ptr %vec.gep117, align 8
  %vec.gep119 = getelementptr double, ptr %Matrix2, i64 378
  %col.load120 = load <21 x double>, ptr %vec.gep119, align 8
  %vec.gep121 = getelementptr double, ptr %Matrix2, i64 399
  %col.load122 = load <21 x double>, ptr %vec.gep121, align 8
  %vec.gep123 = getelementptr double, ptr %Matrix2, i64 420
  %col.load124 = load <21 x double>, ptr %vec.gep123, align 8
  %vec.gep125 = getelementptr double, ptr %Matrix2, i64 441
  %col.load126 = load <21 x double>, ptr %vec.gep125, align 8
  %vec.gep127 = getelementptr double, ptr %Matrix2, i64 462
  %col.load128 = load <21 x double>, ptr %vec.gep127, align 8
  %21 = shufflevector <21 x double> %col.load84, <21 x double> %col.load86, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %22 = shufflevector <21 x double> %col.load88, <21 x double> %col.load90, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %23 = shufflevector <21 x double> %col.load92, <21 x double> %col.load94, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %24 = shufflevector <21 x double> %col.load96, <21 x double> %col.load98, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %25 = shufflevector <21 x double> %col.load100, <21 x double> %col.load102, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %26 = shufflevector <21 x double> %col.load104, <21 x double> %col.load106, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %27 = shufflevector <21 x double> %col.load108, <21 x double> %col.load110, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %28 = shufflevector <21 x double> %col.load112, <21 x double> %col.load114, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %29 = shufflevector <21 x double> %col.load116, <21 x double> %col.load118, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %30 = shufflevector <21 x double> %col.load120, <21 x double> %col.load122, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %31 = shufflevector <21 x double> %col.load124, <21 x double> %col.load126, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41>
  %32 = shufflevector <42 x double> %21, <42 x double> %22, <84 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83>
  %33 = shufflevector <42 x double> %23, <42 x double> %24, <84 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83>
  %34 = shufflevector <42 x double> %25, <42 x double> %26, <84 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83>
  %35 = shufflevector <42 x double> %27, <42 x double> %28, <84 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83>
  %36 = shufflevector <42 x double> %29, <42 x double> %30, <84 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83>
  %37 = shufflevector <21 x double> %col.load128, <21 x double> poison, <42 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %38 = shufflevector <84 x double> %32, <84 x double> %33, <168 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167>
  %39 = shufflevector <84 x double> %34, <84 x double> %35, <168 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167>
  %40 = shufflevector <42 x double> %31, <42 x double> %37, <84 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = shufflevector <168 x double> %38, <168 x double> %39, <336 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335>
  %42 = shufflevector <84 x double> %36, <84 x double> %40, <336 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = shufflevector <336 x double> %41, <336 x double> %42, <483 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474, i32 475, i32 476, i32 477, i32 478, i32 479, i32 480, i32 481, i32 482>
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %entry, %for.cond.cleanup4
  %indvars.iv41 = phi i64 [ 0, %entry ], [ %indvars.iv.next42, %for.cond.cleanup4 ]
  %ResM.sroa.0.037 = phi <230 x double> [ undef, %entry ], [ %matins, %for.cond.cleanup4 ]
  %44 = mul nuw nsw i64 %indvars.iv41, 21
  %45 = mul nuw nsw i64 %indvars.iv41, 10
  %matrixext13 = extractelement <483 x double> %43, i64 %44
  %46 = add nuw nsw i64 %44, 1
  %matrixext13.1 = extractelement <483 x double> %43, i64 %46
  %47 = add nuw nsw i64 %44, 2
  %matrixext13.2 = extractelement <483 x double> %43, i64 %47
  %48 = add nuw nsw i64 %44, 3
  %matrixext13.3 = extractelement <483 x double> %43, i64 %48
  %49 = add nuw nsw i64 %44, 4
  %matrixext13.4 = extractelement <483 x double> %43, i64 %49
  %50 = add nuw nsw i64 %44, 5
  %matrixext13.5 = extractelement <483 x double> %43, i64 %50
  %51 = add nuw nsw i64 %44, 6
  %matrixext13.6 = extractelement <483 x double> %43, i64 %51
  %52 = add nuw nsw i64 %44, 7
  %matrixext13.7 = extractelement <483 x double> %43, i64 %52
  %53 = add nuw nsw i64 %44, 8
  %matrixext13.8 = extractelement <483 x double> %43, i64 %53
  %54 = add nuw nsw i64 %44, 9
  %matrixext13.9 = extractelement <483 x double> %43, i64 %54
  %55 = add nuw nsw i64 %44, 10
  %matrixext13.10 = extractelement <483 x double> %43, i64 %55
  %56 = add nuw nsw i64 %44, 11
  %matrixext13.11 = extractelement <483 x double> %43, i64 %56
  %57 = add nuw nsw i64 %44, 12
  %matrixext13.12 = extractelement <483 x double> %43, i64 %57
  %58 = add nuw nsw i64 %44, 13
  %matrixext13.13 = extractelement <483 x double> %43, i64 %58
  %59 = add nuw nsw i64 %44, 14
  %matrixext13.14 = extractelement <483 x double> %43, i64 %59
  %60 = add nuw nsw i64 %44, 15
  %matrixext13.15 = extractelement <483 x double> %43, i64 %60
  %61 = add nuw nsw i64 %44, 16
  %matrixext13.16 = extractelement <483 x double> %43, i64 %61
  %62 = add nuw nsw i64 %44, 17
  %matrixext13.17 = extractelement <483 x double> %43, i64 %62
  %63 = add nuw nsw i64 %44, 18
  %matrixext13.18 = extractelement <483 x double> %43, i64 %63
  %64 = add nuw nsw i64 %44, 19
  %matrixext13.19 = extractelement <483 x double> %43, i64 %64
  %65 = add nuw nsw i64 %44, 20
  %matrixext13.20 = extractelement <483 x double> %43, i64 %65
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %split = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9>
  %split129 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %split130 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %split131 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>
  %split132 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %split133 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %split134 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69>
  %split135 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79>
  %split136 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89>
  %split137 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99>
  %split138 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109>
  %split139 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119>
  %split140 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129>
  %split141 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139>
  %split142 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149>
  %split143 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159>
  %split144 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169>
  %split145 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179>
  %split146 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189>
  %split147 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199>
  %split148 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209>
  %split149 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219>
  %split150 = shufflevector <230 x double> %matins, <230 x double> poison, <10 x i32> <i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229>
  store <10 x double> %split, ptr %Res, align 8
  %vec.gep151 = getelementptr double, ptr %Res, i64 10
  store <10 x double> %split129, ptr %vec.gep151, align 8
  %vec.gep152 = getelementptr double, ptr %Res, i64 20
  store <10 x double> %split130, ptr %vec.gep152, align 8
  %vec.gep153 = getelementptr double, ptr %Res, i64 30
  store <10 x double> %split131, ptr %vec.gep153, align 8
  %vec.gep154 = getelementptr double, ptr %Res, i64 40
  store <10 x double> %split132, ptr %vec.gep154, align 8
  %vec.gep155 = getelementptr double, ptr %Res, i64 50
  store <10 x double> %split133, ptr %vec.gep155, align 8
  %vec.gep156 = getelementptr double, ptr %Res, i64 60
  store <10 x double> %split134, ptr %vec.gep156, align 8
  %vec.gep157 = getelementptr double, ptr %Res, i64 70
  store <10 x double> %split135, ptr %vec.gep157, align 8
  %vec.gep158 = getelementptr double, ptr %Res, i64 80
  store <10 x double> %split136, ptr %vec.gep158, align 8
  %vec.gep159 = getelementptr double, ptr %Res, i64 90
  store <10 x double> %split137, ptr %vec.gep159, align 8
  %vec.gep160 = getelementptr double, ptr %Res, i64 100
  store <10 x double> %split138, ptr %vec.gep160, align 8
  %vec.gep161 = getelementptr double, ptr %Res, i64 110
  store <10 x double> %split139, ptr %vec.gep161, align 8
  %vec.gep162 = getelementptr double, ptr %Res, i64 120
  store <10 x double> %split140, ptr %vec.gep162, align 8
  %vec.gep163 = getelementptr double, ptr %Res, i64 130
  store <10 x double> %split141, ptr %vec.gep163, align 8
  %vec.gep164 = getelementptr double, ptr %Res, i64 140
  store <10 x double> %split142, ptr %vec.gep164, align 8
  %vec.gep165 = getelementptr double, ptr %Res, i64 150
  store <10 x double> %split143, ptr %vec.gep165, align 8
  %vec.gep166 = getelementptr double, ptr %Res, i64 160
  store <10 x double> %split144, ptr %vec.gep166, align 8
  %vec.gep167 = getelementptr double, ptr %Res, i64 170
  store <10 x double> %split145, ptr %vec.gep167, align 8
  %vec.gep168 = getelementptr double, ptr %Res, i64 180
  store <10 x double> %split146, ptr %vec.gep168, align 8
  %vec.gep169 = getelementptr double, ptr %Res, i64 190
  store <10 x double> %split147, ptr %vec.gep169, align 8
  %vec.gep170 = getelementptr double, ptr %Res, i64 200
  store <10 x double> %split148, ptr %vec.gep170, align 8
  %vec.gep171 = getelementptr double, ptr %Res, i64 210
  store <10 x double> %split149, ptr %vec.gep171, align 8
  %vec.gep172 = getelementptr double, ptr %Res, i64 220
  store <10 x double> %split150, ptr %vec.gep172, align 8
  ret void

for.cond6.preheader:                              ; preds = %for.cond2.preheader, %for.cond6.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.cond6.preheader ]
  %ResM.sroa.0.135 = phi <230 x double> [ %ResM.sroa.0.037, %for.cond2.preheader ], [ %matins, %for.cond6.preheader ]
  %matrixext = extractelement <210 x double> %20, i64 %indvars.iv
  %66 = tail call double @llvm.fmuladd.f64(double %matrixext, double %matrixext13, double 0.000000e+00)
  %67 = add nuw nsw i64 %indvars.iv, 10
  %matrixext.1 = extractelement <210 x double> %20, i64 %67
  %68 = tail call double @llvm.fmuladd.f64(double %matrixext.1, double %matrixext13.1, double %66)
  %69 = add nuw nsw i64 %indvars.iv, 20
  %matrixext.2 = extractelement <210 x double> %20, i64 %69
  %70 = tail call double @llvm.fmuladd.f64(double %matrixext.2, double %matrixext13.2, double %68)
  %71 = add nuw nsw i64 %indvars.iv, 30
  %matrixext.3 = extractelement <210 x double> %20, i64 %71
  %72 = tail call double @llvm.fmuladd.f64(double %matrixext.3, double %matrixext13.3, double %70)
  %73 = add nuw nsw i64 %indvars.iv, 40
  %matrixext.4 = extractelement <210 x double> %20, i64 %73
  %74 = tail call double @llvm.fmuladd.f64(double %matrixext.4, double %matrixext13.4, double %72)
  %75 = add nuw nsw i64 %indvars.iv, 50
  %matrixext.5 = extractelement <210 x double> %20, i64 %75
  %76 = tail call double @llvm.fmuladd.f64(double %matrixext.5, double %matrixext13.5, double %74)
  %77 = add nuw nsw i64 %indvars.iv, 60
  %matrixext.6 = extractelement <210 x double> %20, i64 %77
  %78 = tail call double @llvm.fmuladd.f64(double %matrixext.6, double %matrixext13.6, double %76)
  %79 = add nuw nsw i64 %indvars.iv, 70
  %matrixext.7 = extractelement <210 x double> %20, i64 %79
  %80 = tail call double @llvm.fmuladd.f64(double %matrixext.7, double %matrixext13.7, double %78)
  %81 = add nuw nsw i64 %indvars.iv, 80
  %matrixext.8 = extractelement <210 x double> %20, i64 %81
  %82 = tail call double @llvm.fmuladd.f64(double %matrixext.8, double %matrixext13.8, double %80)
  %83 = add nuw nsw i64 %indvars.iv, 90
  %matrixext.9 = extractelement <210 x double> %20, i64 %83
  %84 = tail call double @llvm.fmuladd.f64(double %matrixext.9, double %matrixext13.9, double %82)
  %85 = add nuw nsw i64 %indvars.iv, 100
  %matrixext.10 = extractelement <210 x double> %20, i64 %85
  %86 = tail call double @llvm.fmuladd.f64(double %matrixext.10, double %matrixext13.10, double %84)
  %87 = add nuw nsw i64 %indvars.iv, 110
  %matrixext.11 = extractelement <210 x double> %20, i64 %87
  %88 = tail call double @llvm.fmuladd.f64(double %matrixext.11, double %matrixext13.11, double %86)
  %89 = add nuw nsw i64 %indvars.iv, 120
  %matrixext.12 = extractelement <210 x double> %20, i64 %89
  %90 = tail call double @llvm.fmuladd.f64(double %matrixext.12, double %matrixext13.12, double %88)
  %91 = add nuw nsw i64 %indvars.iv, 130
  %matrixext.13 = extractelement <210 x double> %20, i64 %91
  %92 = tail call double @llvm.fmuladd.f64(double %matrixext.13, double %matrixext13.13, double %90)
  %93 = add nuw nsw i64 %indvars.iv, 140
  %matrixext.14 = extractelement <210 x double> %20, i64 %93
  %94 = tail call double @llvm.fmuladd.f64(double %matrixext.14, double %matrixext13.14, double %92)
  %95 = add nuw nsw i64 %indvars.iv, 150
  %matrixext.15 = extractelement <210 x double> %20, i64 %95
  %96 = tail call double @llvm.fmuladd.f64(double %matrixext.15, double %matrixext13.15, double %94)
  %97 = add nuw nsw i64 %indvars.iv, 160
  %matrixext.16 = extractelement <210 x double> %20, i64 %97
  %98 = tail call double @llvm.fmuladd.f64(double %matrixext.16, double %matrixext13.16, double %96)
  %99 = add nuw nsw i64 %indvars.iv, 170
  %matrixext.17 = extractelement <210 x double> %20, i64 %99
  %100 = tail call double @llvm.fmuladd.f64(double %matrixext.17, double %matrixext13.17, double %98)
  %101 = add nuw nsw i64 %indvars.iv, 180
  %matrixext.18 = extractelement <210 x double> %20, i64 %101
  %102 = tail call double @llvm.fmuladd.f64(double %matrixext.18, double %matrixext13.18, double %100)
  %103 = add nuw nsw i64 %indvars.iv, 190
  %matrixext.19 = extractelement <210 x double> %20, i64 %103
  %104 = tail call double @llvm.fmuladd.f64(double %matrixext.19, double %matrixext13.19, double %102)
  %105 = add nuw nsw i64 %indvars.iv, 200
  %matrixext.20 = extractelement <210 x double> %20, i64 %105
  %106 = tail call double @llvm.fmuladd.f64(double %matrixext.20, double %matrixext13.20, double %104)
  %107 = add nuw nsw i64 %45, %indvars.iv
  %matins = insertelement <230 x double> %ResM.sroa.0.135, double %106, i64 %107
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 10
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !59

for.cond.cleanup4:                                ; preds = %for.cond6.preheader
  %indvars.iv.next42 = add nuw nsw i64 %indvars.iv41, 1
  %exitcond44.not = icmp eq i64 %indvars.iv.next42, 23
  br i1 %exitcond44.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !60
}

; Function Attrs: mustprogress nounwind uwtable
define linkonce_odr dso_local void @_Z12multiplySpecIdLj25ELj19ELj11EEvPT_S1_S1_(ptr noundef %Res, ptr noundef %Matrix1, ptr noundef %Matrix2) local_unnamed_addr #13 comdat {
entry:
  %col.load = load <25 x double>, ptr %Matrix1, align 8
  %vec.gep = getelementptr double, ptr %Matrix1, i64 25
  %col.load45 = load <25 x double>, ptr %vec.gep, align 8
  %vec.gep46 = getelementptr double, ptr %Matrix1, i64 50
  %col.load47 = load <25 x double>, ptr %vec.gep46, align 8
  %vec.gep48 = getelementptr double, ptr %Matrix1, i64 75
  %col.load49 = load <25 x double>, ptr %vec.gep48, align 8
  %vec.gep50 = getelementptr double, ptr %Matrix1, i64 100
  %col.load51 = load <25 x double>, ptr %vec.gep50, align 8
  %vec.gep52 = getelementptr double, ptr %Matrix1, i64 125
  %col.load53 = load <25 x double>, ptr %vec.gep52, align 8
  %vec.gep54 = getelementptr double, ptr %Matrix1, i64 150
  %col.load55 = load <25 x double>, ptr %vec.gep54, align 8
  %vec.gep56 = getelementptr double, ptr %Matrix1, i64 175
  %col.load57 = load <25 x double>, ptr %vec.gep56, align 8
  %vec.gep58 = getelementptr double, ptr %Matrix1, i64 200
  %col.load59 = load <25 x double>, ptr %vec.gep58, align 8
  %vec.gep60 = getelementptr double, ptr %Matrix1, i64 225
  %col.load61 = load <25 x double>, ptr %vec.gep60, align 8
  %vec.gep62 = getelementptr double, ptr %Matrix1, i64 250
  %col.load63 = load <25 x double>, ptr %vec.gep62, align 8
  %vec.gep64 = getelementptr double, ptr %Matrix1, i64 275
  %col.load65 = load <25 x double>, ptr %vec.gep64, align 8
  %vec.gep66 = getelementptr double, ptr %Matrix1, i64 300
  %col.load67 = load <25 x double>, ptr %vec.gep66, align 8
  %vec.gep68 = getelementptr double, ptr %Matrix1, i64 325
  %col.load69 = load <25 x double>, ptr %vec.gep68, align 8
  %vec.gep70 = getelementptr double, ptr %Matrix1, i64 350
  %col.load71 = load <25 x double>, ptr %vec.gep70, align 8
  %vec.gep72 = getelementptr double, ptr %Matrix1, i64 375
  %col.load73 = load <25 x double>, ptr %vec.gep72, align 8
  %vec.gep74 = getelementptr double, ptr %Matrix1, i64 400
  %col.load75 = load <25 x double>, ptr %vec.gep74, align 8
  %vec.gep76 = getelementptr double, ptr %Matrix1, i64 425
  %col.load77 = load <25 x double>, ptr %vec.gep76, align 8
  %vec.gep78 = getelementptr double, ptr %Matrix1, i64 450
  %col.load79 = load <25 x double>, ptr %vec.gep78, align 8
  %0 = shufflevector <25 x double> %col.load, <25 x double> %col.load45, <50 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %1 = shufflevector <25 x double> %col.load47, <25 x double> %col.load49, <50 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %2 = shufflevector <25 x double> %col.load51, <25 x double> %col.load53, <50 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %3 = shufflevector <25 x double> %col.load55, <25 x double> %col.load57, <50 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %4 = shufflevector <25 x double> %col.load59, <25 x double> %col.load61, <50 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %5 = shufflevector <25 x double> %col.load63, <25 x double> %col.load65, <50 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %6 = shufflevector <25 x double> %col.load67, <25 x double> %col.load69, <50 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %7 = shufflevector <25 x double> %col.load71, <25 x double> %col.load73, <50 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %8 = shufflevector <25 x double> %col.load75, <25 x double> %col.load77, <50 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %9 = shufflevector <50 x double> %0, <50 x double> %1, <100 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99>
  %10 = shufflevector <50 x double> %2, <50 x double> %3, <100 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99>
  %11 = shufflevector <50 x double> %4, <50 x double> %5, <100 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99>
  %12 = shufflevector <50 x double> %6, <50 x double> %7, <100 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99>
  %13 = shufflevector <25 x double> %col.load79, <25 x double> poison, <50 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <100 x double> %9, <100 x double> %10, <200 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199>
  %15 = shufflevector <100 x double> %11, <100 x double> %12, <200 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199>
  %16 = shufflevector <200 x double> %14, <200 x double> %15, <400 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399>
  %17 = shufflevector <50 x double> %8, <50 x double> %13, <400 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %18 = shufflevector <400 x double> %16, <400 x double> %17, <475 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 280, i32 281, i32 282, i32 283, i32 284, i32 285, i32 286, i32 287, i32 288, i32 289, i32 290, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 303, i32 304, i32 305, i32 306, i32 307, i32 308, i32 309, i32 310, i32 311, i32 312, i32 313, i32 314, i32 315, i32 316, i32 317, i32 318, i32 319, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 326, i32 327, i32 328, i32 329, i32 330, i32 331, i32 332, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 343, i32 344, i32 345, i32 346, i32 347, i32 348, i32 349, i32 350, i32 351, i32 352, i32 353, i32 354, i32 355, i32 356, i32 357, i32 358, i32 359, i32 360, i32 361, i32 362, i32 363, i32 364, i32 365, i32 366, i32 367, i32 368, i32 369, i32 370, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 379, i32 380, i32 381, i32 382, i32 383, i32 384, i32 385, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399, i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32 416, i32 417, i32 418, i32 419, i32 420, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 428, i32 429, i32 430, i32 431, i32 432, i32 433, i32 434, i32 435, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 442, i32 443, i32 444, i32 445, i32 446, i32 447, i32 448, i32 449, i32 450, i32 451, i32 452, i32 453, i32 454, i32 455, i32 456, i32 457, i32 458, i32 459, i32 460, i32 461, i32 462, i32 463, i32 464, i32 465, i32 466, i32 467, i32 468, i32 469, i32 470, i32 471, i32 472, i32 473, i32 474>
  %col.load80 = load <19 x double>, ptr %Matrix2, align 8
  %vec.gep81 = getelementptr double, ptr %Matrix2, i64 19
  %col.load82 = load <19 x double>, ptr %vec.gep81, align 8
  %vec.gep83 = getelementptr double, ptr %Matrix2, i64 38
  %col.load84 = load <19 x double>, ptr %vec.gep83, align 8
  %vec.gep85 = getelementptr double, ptr %Matrix2, i64 57
  %col.load86 = load <19 x double>, ptr %vec.gep85, align 8
  %vec.gep87 = getelementptr double, ptr %Matrix2, i64 76
  %col.load88 = load <19 x double>, ptr %vec.gep87, align 8
  %vec.gep89 = getelementptr double, ptr %Matrix2, i64 95
  %col.load90 = load <19 x double>, ptr %vec.gep89, align 8
  %vec.gep91 = getelementptr double, ptr %Matrix2, i64 114
  %col.load92 = load <19 x double>, ptr %vec.gep91, align 8
  %vec.gep93 = getelementptr double, ptr %Matrix2, i64 133
  %col.load94 = load <19 x double>, ptr %vec.gep93, align 8
  %vec.gep95 = getelementptr double, ptr %Matrix2, i64 152
  %col.load96 = load <19 x double>, ptr %vec.gep95, align 8
  %vec.gep97 = getelementptr double, ptr %Matrix2, i64 171
  %col.load98 = load <19 x double>, ptr %vec.gep97, align 8
  %vec.gep99 = getelementptr double, ptr %Matrix2, i64 190
  %col.load100 = load <19 x double>, ptr %vec.gep99, align 8
  %19 = shufflevector <19 x double> %col.load80, <19 x double> %col.load82, <38 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37>
  %20 = shufflevector <19 x double> %col.load84, <19 x double> %col.load86, <38 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37>
  %21 = shufflevector <19 x double> %col.load88, <19 x double> %col.load90, <38 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37>
  %22 = shufflevector <19 x double> %col.load92, <19 x double> %col.load94, <38 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37>
  %23 = shufflevector <19 x double> %col.load96, <19 x double> %col.load98, <38 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37>
  %24 = shufflevector <38 x double> %19, <38 x double> %20, <76 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75>
  %25 = shufflevector <38 x double> %21, <38 x double> %22, <76 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75>
  %26 = shufflevector <19 x double> %col.load100, <19 x double> poison, <38 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = shufflevector <76 x double> %24, <76 x double> %25, <152 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151>
  %28 = shufflevector <38 x double> %23, <38 x double> %26, <152 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = shufflevector <152 x double> %27, <152 x double> %28, <209 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208>
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %entry, %for.cond.cleanup4
  %indvars.iv41 = phi i64 [ 0, %entry ], [ %indvars.iv.next42, %for.cond.cleanup4 ]
  %ResM.sroa.0.037 = phi <275 x double> [ undef, %entry ], [ %matins, %for.cond.cleanup4 ]
  %30 = mul nuw nsw i64 %indvars.iv41, 19
  %31 = mul nuw nsw i64 %indvars.iv41, 25
  %matrixext13 = extractelement <209 x double> %29, i64 %30
  %32 = add nuw nsw i64 %30, 1
  %matrixext13.1 = extractelement <209 x double> %29, i64 %32
  %33 = add nuw nsw i64 %30, 2
  %matrixext13.2 = extractelement <209 x double> %29, i64 %33
  %34 = add nuw nsw i64 %30, 3
  %matrixext13.3 = extractelement <209 x double> %29, i64 %34
  %35 = add nuw nsw i64 %30, 4
  %matrixext13.4 = extractelement <209 x double> %29, i64 %35
  %36 = add nuw nsw i64 %30, 5
  %matrixext13.5 = extractelement <209 x double> %29, i64 %36
  %37 = add nuw nsw i64 %30, 6
  %matrixext13.6 = extractelement <209 x double> %29, i64 %37
  %38 = add nuw nsw i64 %30, 7
  %matrixext13.7 = extractelement <209 x double> %29, i64 %38
  %39 = add nuw nsw i64 %30, 8
  %matrixext13.8 = extractelement <209 x double> %29, i64 %39
  %40 = add nuw nsw i64 %30, 9
  %matrixext13.9 = extractelement <209 x double> %29, i64 %40
  %41 = add nuw nsw i64 %30, 10
  %matrixext13.10 = extractelement <209 x double> %29, i64 %41
  %42 = add nuw nsw i64 %30, 11
  %matrixext13.11 = extractelement <209 x double> %29, i64 %42
  %43 = add nuw nsw i64 %30, 12
  %matrixext13.12 = extractelement <209 x double> %29, i64 %43
  %44 = add nuw nsw i64 %30, 13
  %matrixext13.13 = extractelement <209 x double> %29, i64 %44
  %45 = add nuw nsw i64 %30, 14
  %matrixext13.14 = extractelement <209 x double> %29, i64 %45
  %46 = add nuw nsw i64 %30, 15
  %matrixext13.15 = extractelement <209 x double> %29, i64 %46
  %47 = add nuw nsw i64 %30, 16
  %matrixext13.16 = extractelement <209 x double> %29, i64 %47
  %48 = add nuw nsw i64 %30, 17
  %matrixext13.17 = extractelement <209 x double> %29, i64 %48
  %49 = add nuw nsw i64 %30, 18
  %matrixext13.18 = extractelement <209 x double> %29, i64 %49
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %split = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %split101 = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49>
  %split102 = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74>
  %split103 = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99>
  %split104 = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124>
  %split105 = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149>
  %split106 = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174>
  %split107 = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199>
  %split108 = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224>
  %split109 = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249>
  %split110 = shufflevector <275 x double> %matins, <275 x double> poison, <25 x i32> <i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 269, i32 270, i32 271, i32 272, i32 273, i32 274>
  store <25 x double> %split, ptr %Res, align 8
  %vec.gep111 = getelementptr double, ptr %Res, i64 25
  store <25 x double> %split101, ptr %vec.gep111, align 8
  %vec.gep112 = getelementptr double, ptr %Res, i64 50
  store <25 x double> %split102, ptr %vec.gep112, align 8
  %vec.gep113 = getelementptr double, ptr %Res, i64 75
  store <25 x double> %split103, ptr %vec.gep113, align 8
  %vec.gep114 = getelementptr double, ptr %Res, i64 100
  store <25 x double> %split104, ptr %vec.gep114, align 8
  %vec.gep115 = getelementptr double, ptr %Res, i64 125
  store <25 x double> %split105, ptr %vec.gep115, align 8
  %vec.gep116 = getelementptr double, ptr %Res, i64 150
  store <25 x double> %split106, ptr %vec.gep116, align 8
  %vec.gep117 = getelementptr double, ptr %Res, i64 175
  store <25 x double> %split107, ptr %vec.gep117, align 8
  %vec.gep118 = getelementptr double, ptr %Res, i64 200
  store <25 x double> %split108, ptr %vec.gep118, align 8
  %vec.gep119 = getelementptr double, ptr %Res, i64 225
  store <25 x double> %split109, ptr %vec.gep119, align 8
  %vec.gep120 = getelementptr double, ptr %Res, i64 250
  store <25 x double> %split110, ptr %vec.gep120, align 8
  ret void

for.cond6.preheader:                              ; preds = %for.cond2.preheader, %for.cond6.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.cond6.preheader ]
  %ResM.sroa.0.135 = phi <275 x double> [ %ResM.sroa.0.037, %for.cond2.preheader ], [ %matins, %for.cond6.preheader ]
  %matrixext = extractelement <475 x double> %18, i64 %indvars.iv
  %50 = tail call double @llvm.fmuladd.f64(double %matrixext, double %matrixext13, double 0.000000e+00)
  %51 = add nuw nsw i64 %indvars.iv, 25
  %matrixext.1 = extractelement <475 x double> %18, i64 %51
  %52 = tail call double @llvm.fmuladd.f64(double %matrixext.1, double %matrixext13.1, double %50)
  %53 = add nuw nsw i64 %indvars.iv, 50
  %matrixext.2 = extractelement <475 x double> %18, i64 %53
  %54 = tail call double @llvm.fmuladd.f64(double %matrixext.2, double %matrixext13.2, double %52)
  %55 = add nuw nsw i64 %indvars.iv, 75
  %matrixext.3 = extractelement <475 x double> %18, i64 %55
  %56 = tail call double @llvm.fmuladd.f64(double %matrixext.3, double %matrixext13.3, double %54)
  %57 = add nuw nsw i64 %indvars.iv, 100
  %matrixext.4 = extractelement <475 x double> %18, i64 %57
  %58 = tail call double @llvm.fmuladd.f64(double %matrixext.4, double %matrixext13.4, double %56)
  %59 = add nuw nsw i64 %indvars.iv, 125
  %matrixext.5 = extractelement <475 x double> %18, i64 %59
  %60 = tail call double @llvm.fmuladd.f64(double %matrixext.5, double %matrixext13.5, double %58)
  %61 = add nuw nsw i64 %indvars.iv, 150
  %matrixext.6 = extractelement <475 x double> %18, i64 %61
  %62 = tail call double @llvm.fmuladd.f64(double %matrixext.6, double %matrixext13.6, double %60)
  %63 = add nuw nsw i64 %indvars.iv, 175
  %matrixext.7 = extractelement <475 x double> %18, i64 %63
  %64 = tail call double @llvm.fmuladd.f64(double %matrixext.7, double %matrixext13.7, double %62)
  %65 = add nuw nsw i64 %indvars.iv, 200
  %matrixext.8 = extractelement <475 x double> %18, i64 %65
  %66 = tail call double @llvm.fmuladd.f64(double %matrixext.8, double %matrixext13.8, double %64)
  %67 = add nuw nsw i64 %indvars.iv, 225
  %matrixext.9 = extractelement <475 x double> %18, i64 %67
  %68 = tail call double @llvm.fmuladd.f64(double %matrixext.9, double %matrixext13.9, double %66)
  %69 = add nuw nsw i64 %indvars.iv, 250
  %matrixext.10 = extractelement <475 x double> %18, i64 %69
  %70 = tail call double @llvm.fmuladd.f64(double %matrixext.10, double %matrixext13.10, double %68)
  %71 = add nuw nsw i64 %indvars.iv, 275
  %matrixext.11 = extractelement <475 x double> %18, i64 %71
  %72 = tail call double @llvm.fmuladd.f64(double %matrixext.11, double %matrixext13.11, double %70)
  %73 = add nuw nsw i64 %indvars.iv, 300
  %matrixext.12 = extractelement <475 x double> %18, i64 %73
  %74 = tail call double @llvm.fmuladd.f64(double %matrixext.12, double %matrixext13.12, double %72)
  %75 = add nuw nsw i64 %indvars.iv, 325
  %matrixext.13 = extractelement <475 x double> %18, i64 %75
  %76 = tail call double @llvm.fmuladd.f64(double %matrixext.13, double %matrixext13.13, double %74)
  %77 = add nuw nsw i64 %indvars.iv, 350
  %matrixext.14 = extractelement <475 x double> %18, i64 %77
  %78 = tail call double @llvm.fmuladd.f64(double %matrixext.14, double %matrixext13.14, double %76)
  %79 = add nuw nsw i64 %indvars.iv, 375
  %matrixext.15 = extractelement <475 x double> %18, i64 %79
  %80 = tail call double @llvm.fmuladd.f64(double %matrixext.15, double %matrixext13.15, double %78)
  %81 = add nuw nsw i64 %indvars.iv, 400
  %matrixext.16 = extractelement <475 x double> %18, i64 %81
  %82 = tail call double @llvm.fmuladd.f64(double %matrixext.16, double %matrixext13.16, double %80)
  %83 = add nuw nsw i64 %indvars.iv, 425
  %matrixext.17 = extractelement <475 x double> %18, i64 %83
  %84 = tail call double @llvm.fmuladd.f64(double %matrixext.17, double %matrixext13.17, double %82)
  %85 = add nuw nsw i64 %indvars.iv, 450
  %matrixext.18 = extractelement <475 x double> %18, i64 %85
  %86 = tail call double @llvm.fmuladd.f64(double %matrixext.18, double %matrixext13.18, double %84)
  %87 = add nuw nsw i64 %31, %indvars.iv
  %matins = insertelement <275 x double> %ResM.sroa.0.135, double %86, i64 %87
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 25
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !61

for.cond.cleanup4:                                ; preds = %for.cond6.preheader
  %indvars.iv.next42 = add nuw nsw i64 %indvars.iv41, 1
  %exitcond44.not = icmp eq i64 %indvars.iv.next42, 11
  br i1 %exitcond44.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !62
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #14

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #15

attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { norecurse uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { noinline noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nobuiltin allocsize(0) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nobuiltin nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { mustprogress nofree nounwind willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { mustprogress nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #15 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #16 = { nounwind }
attributes #17 = { noreturn nounwind }
attributes #18 = { builtin allocsize(0) }
attributes #19 = { builtin nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0 (https://github.com/llvm/llvm-project.git 6f27fecf90d850dbda4ced023eae0b1c90145a8b)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"double", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!12, !12, i64 0}
!12 = !{!"float", !7, i64 0}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !10}
!15 = !{!16, !17, i64 0}
!16 = !{!"_ZTSNSt3__126linear_congruential_engineImLm48271ELm0ELm2147483647EEE", !17, i64 0}
!17 = !{!"long", !7, i64 0}
!18 = !{!19, !20, i64 0}
!19 = !{!"_ZTSNSt3__124uniform_int_distributionIjE10param_typeE", !20, i64 0, !20, i64 4}
!20 = !{!"int", !7, i64 0}
!21 = !{!19, !20, i64 4}
!22 = !{!20, !20, i64 0}
!23 = distinct !{!23, !10}
!24 = distinct !{!24, !10}
!25 = distinct !{!25, !10}
!26 = distinct !{!26, !10, !27, !28}
!27 = !{!"llvm.loop.isvectorized", i32 1}
!28 = !{!"llvm.loop.unroll.runtime.disable"}
!29 = distinct !{!29, !10, !27, !28}
!30 = distinct !{!30, !10, !27, !28}
!31 = distinct !{!31, !10}
!32 = distinct !{!32, !10}
!33 = distinct !{!33, !10}
!34 = distinct !{!34, !10}
!35 = !{!36, !37, i64 0}
!36 = !{!"_ZTSNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryE", !37, i64 0, !38, i64 8}
!37 = !{!"bool", !7, i64 0}
!38 = !{!"any pointer", !7, i64 0}
!39 = !{i8 0, i8 2}
!40 = !{}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !8, i64 0}
!43 = !{!44, !38, i64 40}
!44 = !{!"_ZTSNSt3__18ios_baseE", !20, i64 8, !17, i64 16, !17, i64 24, !20, i64 32, !20, i64 36, !38, i64 40, !38, i64 48, !38, i64 56, !38, i64 64, !17, i64 72, !17, i64 80, !38, i64 88, !17, i64 96, !17, i64 104, !38, i64 112, !17, i64 120, !17, i64 128}
!45 = !{!44, !20, i64 8}
!46 = !{!47, !20, i64 144}
!47 = !{!"_ZTSNSt3__19basic_iosIcNS_11char_traitsIcEEEE", !44, i64 0, !38, i64 136, !20, i64 144}
!48 = !{!44, !20, i64 32}
!49 = !{!44, !17, i64 24}
!50 = !{!7, !7, i64 0}
!51 = distinct !{!51, !10}
!52 = distinct !{!52, !10}
!53 = distinct !{!53, !10}
!54 = distinct !{!54, !10}
!55 = !{i32 0, i32 33}
!56 = distinct !{!56, !10}
!57 = distinct !{!57, !10}
!58 = distinct !{!58, !10}
!59 = distinct !{!59, !10}
!60 = distinct !{!60, !10}
!61 = distinct !{!61, !10}
!62 = distinct !{!62, !10}
