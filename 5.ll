; ModuleID = '/local/mnt2/workspace2/mnadeem/llvm/llvm-test-suite/Bitcode/Benchmarks/Halide/local_laplacian/local_laplacian.bc'
source_filename = "/usr/local/google/home/asbirlea/Halide/Halide/src/runtime/destructors.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.halide_filter_argument_t = type { ptr, i32, i32, %struct.halide_type_t, ptr, ptr, ptr }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_filter_metadata_t = type { i32, i32, ptr, ptr, ptr }
%closure_t.11 = type { float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%closure_t.10 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.9 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.8 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.7 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.6 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.5 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.4 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.3 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.2 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.1 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.0 = type { float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr }
%closure_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%struct.buffer_t = type { i64, ptr, [4 x i32], [4 x i32], [4 x i32], i32, i8, i8, [2 x i8] }

@str = private constant [6 x i8] c"input\00", align 32
@str.2 = private constant [16 x i8] c"local_laplacian\00", align 32
@str.3 = private constant [19 x i8] c"Input buffer input\00", align 32
@str.4 = private constant [7 x i8] c"uint16\00", align 32
@str.5 = private constant [30 x i8] c"Output buffer local_laplacian\00", align 32
@str.6 = private constant [15 x i8] c"input.stride.0\00", align 32
@str.7 = private constant [2 x i8] c"1\00", align 32
@str.8 = private constant [25 x i8] c"local_laplacian.stride.0\00", align 32
@str.9 = private constant [3 x i8] c"f0\00", align 32
@str.10 = private constant [3 x i8] c"f2\00", align 32
@str.11 = private constant [3 x i8] c"f4\00", align 32
@str.12 = private constant [3 x i8] c"f5\00", align 32
@str.13 = private constant [4 x i8] c"f72\00", align 32
@str.14 = private constant [3 x i8] c"f6\00", align 32
@str.15 = private constant [4 x i8] c"f73\00", align 32
@str.16 = private constant [3 x i8] c"f7\00", align 32
@str.17 = private constant [4 x i8] c"f74\00", align 32
@str.18 = private constant [3 x i8] c"f8\00", align 32
@str.19 = private constant [4 x i8] c"f75\00", align 32
@str.20 = private constant [3 x i8] c"f9\00", align 32
@str.21 = private constant [4 x i8] c"f76\00", align 32
@str.22 = private constant [4 x i8] c"f10\00", align 32
@str.23 = private constant [4 x i8] c"f77\00", align 32
@str.24 = private constant [4 x i8] c"f78\00", align 32
@str.26 = private constant [5 x i8] c"f131\00", align 32
@str.27 = private constant [5 x i8] c"f130\00", align 32
@str.28 = private constant [5 x i8] c"f129\00", align 32
@str.29 = private constant [5 x i8] c"f128\00", align 32
@str.30 = private constant [5 x i8] c"f127\00", align 32
@str.31 = private constant [5 x i8] c"f126\00", align 32
@str.32 = private constant [5 x i8] c"f125\00", align 32
@str.33 = private constant [7 x i8] c"levels\00", align 32
@0 = private constant i32 0
@str.34 = private constant [6 x i8] c"alpha\00", align 32
@1 = private constant float 0.000000e+00
@str.35 = private constant [5 x i8] c"beta\00", align 32
@2 = private constant float 0.000000e+00
@3 = private constant [5 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { ptr @str.33, i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, ptr @0, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.34, i32 0, i32 0, %struct.halide_type_t { i8 2, i8 32, i16 1 }, ptr @1, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.35, i32 0, i32 0, %struct.halide_type_t { i8 2, i8 32, i16 1 }, ptr @2, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str, i32 1, i32 3, %struct.halide_type_t { i8 1, i8 16, i16 1 }, ptr null, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.2, i32 2, i32 3, %struct.halide_type_t { i8 1, i8 16, i16 1 }, ptr null, ptr null, ptr null }]
@str.36 = private constant [48 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_runtime-sse41\00", align 32
@local_laplacian_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 0, i32 5, ptr @3, ptr @str.36, ptr @str.2 }

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.floor.f32(float) #0

declare i32 @halide_do_par_for(ptr, ptr, i32, i32, ptr noalias) local_unnamed_addr #1

declare i32 @halide_error_access_out_of_bounds(ptr, ptr, i32, i32, i32, i32, i32) local_unnamed_addr #1

declare i32 @halide_error_bad_elem_size(ptr, ptr, ptr, i32, i32) local_unnamed_addr #1

declare i32 @halide_error_buffer_allocation_too_large(ptr, ptr, i64, i64) local_unnamed_addr #1

declare i32 @halide_error_buffer_argument_is_null(ptr, ptr) local_unnamed_addr #1

declare i32 @halide_error_buffer_extents_too_large(ptr, ptr, i64, i64) local_unnamed_addr #1

declare i32 @halide_error_constraint_violated(ptr, ptr, i32, ptr, i32) local_unnamed_addr #1

declare i32 @halide_error_out_of_memory(ptr) local_unnamed_addr #1

declare void @halide_free(ptr, ptr) local_unnamed_addr #1

declare noalias ptr @halide_malloc(ptr, i64) local_unnamed_addr #1

define i32 @__local_laplacian(i32 %levels, float %alpha, float %beta, ptr noalias %input.buffer, ptr noalias %local_laplacian.buffer) local_unnamed_addr {
entry:
  %0 = alloca %closure_t.11, align 8
  %1 = alloca %closure_t.10, align 8
  %2 = alloca %closure_t.9, align 8
  %3 = alloca %closure_t.8, align 8
  %4 = alloca %closure_t.7, align 8
  %5 = alloca %closure_t.6, align 8
  %6 = alloca %closure_t.5, align 8
  %7 = alloca %closure_t.4, align 8
  %8 = alloca %closure_t.3, align 8
  %9 = alloca %closure_t.2, align 8
  %10 = alloca %closure_t.1, align 8
  %11 = alloca %closure_t.0, align 8
  %12 = alloca %closure_t, align 8
  %.not = icmp eq ptr %input.buffer, null
  br i1 %.not, label %"assert failed", label %"assert succeeded", !prof !4

"assert failed":                                  ; preds = %entry
  %13 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str) #4
  br label %call_destructor.exit210.thread374

"assert succeeded":                               ; preds = %entry
  %buf_host = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 1
  %input.host = load ptr, ptr %buf_host, align 8
  %buf_extent = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 0
  %input.extent.0 = load i32, ptr %buf_extent, align 4
  %x1 = sext i32 %input.extent.0 to i64
  %buf_extent1 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 1
  %buf_extent2 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 2
  %buf_extent3 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 3
  %buf_stride = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 0
  %input.stride.0 = load i32, ptr %buf_stride, align 4
  %buf_stride4 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 1
  %input.stride.1 = load i32, ptr %buf_stride4, align 4
  %14 = sext i32 %input.stride.1 to i64
  %buf_stride5 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 2
  %input.stride.2 = load i32, ptr %buf_stride5, align 4
  %15 = sext i32 %input.stride.2 to i64
  %buf_stride6 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 3
  %buf_min = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 0
  %buf_min7 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 1
  %16 = load <2 x i32>, ptr %buf_extent1, align 4
  %17 = extractelement <2 x i32> %16, i64 0
  %18 = sext i32 %17 to i64
  %19 = extractelement <2 x i32> %16, i64 1
  %20 = sext i32 %19 to i64
  %21 = load <2 x i32>, ptr %buf_min, align 4
  %buf_min8 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 2
  %b108 = load i32, ptr %buf_min8, align 4
  %buf_min9 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 3
  %buf_elem_size = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 5
  %input.elem_size = load i32, ptr %buf_elem_size, align 4
  %.not101 = icmp eq ptr %local_laplacian.buffer, null
  br i1 %.not101, label %"assert failed10", label %"assert succeeded11", !prof !4

call_destructor.exit:                             ; preds = %"assert failed197", %"assert failed195"
  %.ph = phi i32 [ %1797, %"assert failed195" ], [ %1800, %"assert failed197" ]
  %.not100191 = icmp eq i32 %.ph, 0
  br i1 %.not100191, label %call_destructor.exit290, label %call_destructor.exit225.sink.split

call_destructor.exit205:                          ; preds = %"assert failed191", %"assert failed193"
  %.ph.ph = phi i32 [ %1643, %"assert failed193" ], [ %1640, %"assert failed191" ]
  %.not100191273 = icmp eq i32 %.ph.ph, 0
  br i1 %.not100191273, label %call_destructor.exit215, label %if.then.i209

if.then.i209:                                     ; preds = %call_destructor.exit205
  call void @halide_free(ptr null, ptr nonnull %1602) #7
  br label %call_destructor.exit215

call_destructor.exit210.thread374:                ; preds = %after_bb, %"assert failed", %"assert failed10", %"assert failed61", %"assert failed63", %"assert failed65", %"assert failed67", %"assert failed69", %"assert failed71", %"assert failed73", %"assert failed75", %"assert failed77", %"assert failed79", %"assert failed81", %"assert failed83", %"assert failed85", %"assert failed87", %"assert failed89", %"assert failed91", %"assert failed93", %"assert failed95", %"assert failed97", %"assert failed99", %"assert failed101", %"assert failed103", %"assert failed105", %"produce f2", %"assert failed109", %"assert failed111", %"produce f4", %"assert failed115", %"assert failed117", %"produce f5", %"assert failed121", %"assert failed123", %"produce f72", %"assert failed127", %"assert failed129", %"produce f6", %"assert failed133", %"assert failed135", %"produce f73", %"assert failed139", %"assert failed141", %"produce f7", %"assert failed145", %"assert failed147", %"produce f74", %"assert failed151", %"assert failed153", %"produce f8", %"assert failed157", %"assert failed159", %"produce f75", %"assert failed163", %"assert failed165", %"produce f9", %"assert failed169", %"assert failed171", %"assert failed173", %"assert failed175", %"produce f10", %"assert failed179", %"assert failed181", %"assert failed183", %"assert failed185", %if.then.i319, %after_bb44.thread
  %.051.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %1208, %"assert failed185" ], [ %1208, %"assert failed183" ], [ null, %"assert failed181" ], [ null, %"assert failed179" ], [ null, %"produce f10" ], [ null, %"assert failed175" ], [ null, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.050.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %1174, %"assert failed185" ], [ %1174, %"assert failed183" ], [ %1174, %"assert failed181" ], [ %1174, %"assert failed179" ], [ %1174, %"produce f10" ], [ null, %"assert failed175" ], [ null, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.049.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %958, %"assert failed185" ], [ %958, %"assert failed183" ], [ %958, %"assert failed181" ], [ %958, %"assert failed179" ], [ %958, %"produce f10" ], [ %958, %"assert failed175" ], [ %958, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.048.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %921, %"assert failed185" ], [ %921, %"assert failed183" ], [ %921, %"assert failed181" ], [ %921, %"assert failed179" ], [ %921, %"produce f10" ], [ %921, %"assert failed175" ], [ %921, %"assert failed173" ], [ %921, %"assert failed171" ], [ %921, %"assert failed169" ], [ %921, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.047.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %879, %"assert failed185" ], [ %879, %"assert failed183" ], [ %879, %"assert failed181" ], [ %879, %"assert failed179" ], [ %879, %"produce f10" ], [ %879, %"assert failed175" ], [ %879, %"assert failed173" ], [ %879, %"assert failed171" ], [ %879, %"assert failed169" ], [ %879, %"produce f9" ], [ %879, %"assert failed165" ], [ %879, %"assert failed163" ], [ %879, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.046.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %839, %"assert failed185" ], [ %839, %"assert failed183" ], [ %839, %"assert failed181" ], [ %839, %"assert failed179" ], [ %839, %"produce f10" ], [ %839, %"assert failed175" ], [ %839, %"assert failed173" ], [ %839, %"assert failed171" ], [ %839, %"assert failed169" ], [ %839, %"produce f9" ], [ %839, %"assert failed165" ], [ %839, %"assert failed163" ], [ %839, %"produce f75" ], [ %839, %"assert failed159" ], [ %839, %"assert failed157" ], [ %839, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.045.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %793, %"assert failed185" ], [ %793, %"assert failed183" ], [ %793, %"assert failed181" ], [ %793, %"assert failed179" ], [ %793, %"produce f10" ], [ %793, %"assert failed175" ], [ %793, %"assert failed173" ], [ %793, %"assert failed171" ], [ %793, %"assert failed169" ], [ %793, %"produce f9" ], [ %793, %"assert failed165" ], [ %793, %"assert failed163" ], [ %793, %"produce f75" ], [ %793, %"assert failed159" ], [ %793, %"assert failed157" ], [ %793, %"produce f8" ], [ %793, %"assert failed153" ], [ %793, %"assert failed151" ], [ %793, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.044.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %737, %"assert failed185" ], [ %737, %"assert failed183" ], [ %737, %"assert failed181" ], [ %737, %"assert failed179" ], [ %737, %"produce f10" ], [ %737, %"assert failed175" ], [ %737, %"assert failed173" ], [ %737, %"assert failed171" ], [ %737, %"assert failed169" ], [ %737, %"produce f9" ], [ %737, %"assert failed165" ], [ %737, %"assert failed163" ], [ %737, %"produce f75" ], [ %737, %"assert failed159" ], [ %737, %"assert failed157" ], [ %737, %"produce f8" ], [ %737, %"assert failed153" ], [ %737, %"assert failed151" ], [ %737, %"produce f74" ], [ %737, %"assert failed147" ], [ %737, %"assert failed145" ], [ %737, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.043.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %684, %"assert failed185" ], [ %684, %"assert failed183" ], [ %684, %"assert failed181" ], [ %684, %"assert failed179" ], [ %684, %"produce f10" ], [ %684, %"assert failed175" ], [ %684, %"assert failed173" ], [ %684, %"assert failed171" ], [ %684, %"assert failed169" ], [ %684, %"produce f9" ], [ %684, %"assert failed165" ], [ %684, %"assert failed163" ], [ %684, %"produce f75" ], [ %684, %"assert failed159" ], [ %684, %"assert failed157" ], [ %684, %"produce f8" ], [ %684, %"assert failed153" ], [ %684, %"assert failed151" ], [ %684, %"produce f74" ], [ %684, %"assert failed147" ], [ %684, %"assert failed145" ], [ %684, %"produce f7" ], [ %684, %"assert failed141" ], [ %684, %"assert failed139" ], [ %684, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.042.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %628, %"assert failed185" ], [ %628, %"assert failed183" ], [ %628, %"assert failed181" ], [ %628, %"assert failed179" ], [ %628, %"produce f10" ], [ %628, %"assert failed175" ], [ %628, %"assert failed173" ], [ %628, %"assert failed171" ], [ %628, %"assert failed169" ], [ %628, %"produce f9" ], [ %628, %"assert failed165" ], [ %628, %"assert failed163" ], [ %628, %"produce f75" ], [ %628, %"assert failed159" ], [ %628, %"assert failed157" ], [ %628, %"produce f8" ], [ %628, %"assert failed153" ], [ %628, %"assert failed151" ], [ %628, %"produce f74" ], [ %628, %"assert failed147" ], [ %628, %"assert failed145" ], [ %628, %"produce f7" ], [ %628, %"assert failed141" ], [ %628, %"assert failed139" ], [ %628, %"produce f73" ], [ %628, %"assert failed135" ], [ %628, %"assert failed133" ], [ %628, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.041.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %559, %"assert failed185" ], [ %559, %"assert failed183" ], [ %559, %"assert failed181" ], [ %559, %"assert failed179" ], [ %559, %"produce f10" ], [ %559, %"assert failed175" ], [ %559, %"assert failed173" ], [ %559, %"assert failed171" ], [ %559, %"assert failed169" ], [ %559, %"produce f9" ], [ %559, %"assert failed165" ], [ %559, %"assert failed163" ], [ %559, %"produce f75" ], [ %559, %"assert failed159" ], [ %559, %"assert failed157" ], [ %559, %"produce f8" ], [ %559, %"assert failed153" ], [ %559, %"assert failed151" ], [ %559, %"produce f74" ], [ %559, %"assert failed147" ], [ %559, %"assert failed145" ], [ %559, %"produce f7" ], [ %559, %"assert failed141" ], [ %559, %"assert failed139" ], [ %559, %"produce f73" ], [ %559, %"assert failed135" ], [ %559, %"assert failed133" ], [ %559, %"produce f6" ], [ %559, %"assert failed129" ], [ %559, %"assert failed127" ], [ %559, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.040.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %503, %"assert failed185" ], [ %503, %"assert failed183" ], [ %503, %"assert failed181" ], [ %503, %"assert failed179" ], [ %503, %"produce f10" ], [ %503, %"assert failed175" ], [ %503, %"assert failed173" ], [ %503, %"assert failed171" ], [ %503, %"assert failed169" ], [ %503, %"produce f9" ], [ %503, %"assert failed165" ], [ %503, %"assert failed163" ], [ %503, %"produce f75" ], [ %503, %"assert failed159" ], [ %503, %"assert failed157" ], [ %503, %"produce f8" ], [ %503, %"assert failed153" ], [ %503, %"assert failed151" ], [ %503, %"produce f74" ], [ %503, %"assert failed147" ], [ %503, %"assert failed145" ], [ %503, %"produce f7" ], [ %503, %"assert failed141" ], [ %503, %"assert failed139" ], [ %503, %"produce f73" ], [ %503, %"assert failed135" ], [ %503, %"assert failed133" ], [ %503, %"produce f6" ], [ %503, %"assert failed129" ], [ %503, %"assert failed127" ], [ %503, %"produce f72" ], [ %503, %"assert failed123" ], [ %503, %"assert failed121" ], [ %503, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.039.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %424, %"assert failed185" ], [ %424, %"assert failed183" ], [ %424, %"assert failed181" ], [ %424, %"assert failed179" ], [ %424, %"produce f10" ], [ %424, %"assert failed175" ], [ %424, %"assert failed173" ], [ %424, %"assert failed171" ], [ %424, %"assert failed169" ], [ %424, %"produce f9" ], [ %424, %"assert failed165" ], [ %424, %"assert failed163" ], [ %424, %"produce f75" ], [ %424, %"assert failed159" ], [ %424, %"assert failed157" ], [ %424, %"produce f8" ], [ %424, %"assert failed153" ], [ %424, %"assert failed151" ], [ %424, %"produce f74" ], [ %424, %"assert failed147" ], [ %424, %"assert failed145" ], [ %424, %"produce f7" ], [ %424, %"assert failed141" ], [ %424, %"assert failed139" ], [ %424, %"produce f73" ], [ %424, %"assert failed135" ], [ %424, %"assert failed133" ], [ %424, %"produce f6" ], [ %424, %"assert failed129" ], [ %424, %"assert failed127" ], [ %424, %"produce f72" ], [ %424, %"assert failed123" ], [ %424, %"assert failed121" ], [ %424, %"produce f5" ], [ %424, %"assert failed117" ], [ %424, %"assert failed115" ], [ %424, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.038.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %340, %"assert failed185" ], [ %340, %"assert failed183" ], [ %340, %"assert failed181" ], [ %340, %"assert failed179" ], [ %340, %"produce f10" ], [ %340, %"assert failed175" ], [ %340, %"assert failed173" ], [ %340, %"assert failed171" ], [ %340, %"assert failed169" ], [ %340, %"produce f9" ], [ %340, %"assert failed165" ], [ %340, %"assert failed163" ], [ %340, %"produce f75" ], [ %340, %"assert failed159" ], [ %340, %"assert failed157" ], [ %340, %"produce f8" ], [ %340, %"assert failed153" ], [ %340, %"assert failed151" ], [ %340, %"produce f74" ], [ %340, %"assert failed147" ], [ %340, %"assert failed145" ], [ %340, %"produce f7" ], [ %340, %"assert failed141" ], [ %340, %"assert failed139" ], [ %340, %"produce f73" ], [ %340, %"assert failed135" ], [ %340, %"assert failed133" ], [ %340, %"produce f6" ], [ %340, %"assert failed129" ], [ %340, %"assert failed127" ], [ %340, %"produce f72" ], [ %340, %"assert failed123" ], [ %340, %"assert failed121" ], [ %340, %"produce f5" ], [ %340, %"assert failed117" ], [ %340, %"assert failed115" ], [ %340, %"produce f4" ], [ %340, %"assert failed111" ], [ %340, %"assert failed109" ], [ %340, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.0.ph.ph.ph.ph = phi ptr [ null, %if.then.i319 ], [ %209, %"assert failed185" ], [ %209, %"assert failed183" ], [ %209, %"assert failed181" ], [ %209, %"assert failed179" ], [ %209, %"produce f10" ], [ %209, %"assert failed175" ], [ %209, %"assert failed173" ], [ %209, %"assert failed171" ], [ %209, %"assert failed169" ], [ %209, %"produce f9" ], [ %209, %"assert failed165" ], [ %209, %"assert failed163" ], [ %209, %"produce f75" ], [ %209, %"assert failed159" ], [ %209, %"assert failed157" ], [ %209, %"produce f8" ], [ %209, %"assert failed153" ], [ %209, %"assert failed151" ], [ %209, %"produce f74" ], [ %209, %"assert failed147" ], [ %209, %"assert failed145" ], [ %209, %"produce f7" ], [ %209, %"assert failed141" ], [ %209, %"assert failed139" ], [ %209, %"produce f73" ], [ %209, %"assert failed135" ], [ %209, %"assert failed133" ], [ %209, %"produce f6" ], [ %209, %"assert failed129" ], [ %209, %"assert failed127" ], [ %209, %"produce f72" ], [ %209, %"assert failed123" ], [ %209, %"assert failed121" ], [ %209, %"produce f5" ], [ %209, %"assert failed117" ], [ %209, %"assert failed115" ], [ %209, %"produce f4" ], [ %209, %"assert failed111" ], [ %209, %"assert failed109" ], [ %209, %"produce f2" ], [ %209, %"assert failed105" ], [ %209, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.ph.ph.ph.ph = phi i32 [ 0, %if.then.i319 ], [ %1402, %"assert failed185" ], [ %1399, %"assert failed183" ], [ %1209, %"assert failed181" ], [ %1206, %"assert failed179" ], [ %1189, %"produce f10" ], [ %1175, %"assert failed175" ], [ %1172, %"assert failed173" ], [ %959, %"assert failed171" ], [ %956, %"assert failed169" ], [ %939, %"produce f9" ], [ %922, %"assert failed165" ], [ %919, %"assert failed163" ], [ %895, %"produce f75" ], [ %880, %"assert failed159" ], [ %877, %"assert failed157" ], [ %858, %"produce f8" ], [ %840, %"assert failed153" ], [ %837, %"assert failed151" ], [ %809, %"produce f74" ], [ %794, %"assert failed147" ], [ %791, %"assert failed145" ], [ %757, %"produce f7" ], [ %738, %"assert failed141" ], [ %735, %"assert failed139" ], [ %700, %"produce f73" ], [ %685, %"assert failed135" ], [ %682, %"assert failed133" ], [ %648, %"produce f6" ], [ %629, %"assert failed129" ], [ %626, %"assert failed127" ], [ %576, %"produce f72" ], [ %560, %"assert failed123" ], [ %557, %"assert failed121" ], [ %523, %"produce f5" ], [ %504, %"assert failed117" ], [ %501, %"assert failed115" ], [ %449, %"produce f4" ], [ %425, %"assert failed111" ], [ %422, %"assert failed109" ], [ %369, %"produce f2" ], [ %341, %"assert failed105" ], [ %338, %"assert failed103" ], [ %210, %"assert failed101" ], [ %207, %"assert failed99" ], [ %200, %"assert failed97" ], [ %197, %"assert failed95" ], [ %194, %"assert failed93" ], [ %192, %"assert failed91" ], [ %189, %"assert failed89" ], [ %186, %"assert failed87" ], [ %183, %"assert failed85" ], [ %180, %"assert failed83" ], [ %178, %"assert failed81" ], [ %175, %"assert failed79" ], [ %172, %"assert failed77" ], [ %170, %"assert failed75" ], [ %168, %"assert failed73" ], [ %164, %"assert failed71" ], [ %160, %"assert failed69" ], [ %158, %"assert failed67" ], [ %156, %"assert failed65" ], [ %154, %"assert failed63" ], [ %152, %"assert failed61" ], [ %27, %"assert failed10" ], [ %13, %"assert failed" ], [ 0, %after_bb44.thread ], [ 0, %after_bb ]
  %.not100191273334392 = icmp eq i32 %.ph.ph.ph.ph, 0
  br label %call_destructor.exit215

call_destructor.exit210:                          ; preds = %"assert succeeded188.thread817", %"assert succeeded188.thread", %"assert succeeded188"
  %22 = call i32 @halide_error_out_of_memory(ptr null) #4
  %.not100191273334 = icmp eq i32 %22, 0
  br i1 %.not100191273334, label %call_destructor.exit290, label %if.then.i214

if.then.i214:                                     ; preds = %call_destructor.exit210
  call void @halide_free(ptr null, ptr nonnull %1401) #7
  br label %call_destructor.exit215

call_destructor.exit215:                          ; preds = %call_destructor.exit205, %if.then.i209, %call_destructor.exit210.thread374, %if.then.i214
  %.051197249298372 = phi ptr [ %1208, %if.then.i214 ], [ %.051.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %1208, %call_destructor.exit205 ], [ %1208, %if.then.i209 ]
  %.050198248299371 = phi ptr [ %1174, %if.then.i214 ], [ %.050.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %1174, %call_destructor.exit205 ], [ %1174, %if.then.i209 ]
  %.049199247300370 = phi ptr [ %958, %if.then.i214 ], [ %.049.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %958, %call_destructor.exit205 ], [ %958, %if.then.i209 ]
  %.048200246301369 = phi ptr [ %921, %if.then.i214 ], [ %.048.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %921, %call_destructor.exit205 ], [ %921, %if.then.i209 ]
  %.047201245302368 = phi ptr [ %879, %if.then.i214 ], [ %.047.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %879, %call_destructor.exit205 ], [ %879, %if.then.i209 ]
  %.046202244303367 = phi ptr [ %839, %if.then.i214 ], [ %.046.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %839, %call_destructor.exit205 ], [ %839, %if.then.i209 ]
  %.045203243304366 = phi ptr [ %793, %if.then.i214 ], [ %.045.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %793, %call_destructor.exit205 ], [ %793, %if.then.i209 ]
  %.044204242305365 = phi ptr [ %737, %if.then.i214 ], [ %.044.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %737, %call_destructor.exit205 ], [ %737, %if.then.i209 ]
  %.043205241306364 = phi ptr [ %684, %if.then.i214 ], [ %.043.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %684, %call_destructor.exit205 ], [ %684, %if.then.i209 ]
  %.042206240307363 = phi ptr [ %628, %if.then.i214 ], [ %.042.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %628, %call_destructor.exit205 ], [ %628, %if.then.i209 ]
  %.041207239308362 = phi ptr [ %559, %if.then.i214 ], [ %.041.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %559, %call_destructor.exit205 ], [ %559, %if.then.i209 ]
  %.040208238309361 = phi ptr [ %503, %if.then.i214 ], [ %.040.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %503, %call_destructor.exit205 ], [ %503, %if.then.i209 ]
  %.039209237310360 = phi ptr [ %424, %if.then.i214 ], [ %.039.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %424, %call_destructor.exit205 ], [ %424, %if.then.i209 ]
  %.038210236311359 = phi ptr [ %340, %if.then.i214 ], [ %.038.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %340, %call_destructor.exit205 ], [ %340, %if.then.i209 ]
  %.0211235312358 = phi ptr [ %209, %if.then.i214 ], [ %.0.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %209, %call_destructor.exit205 ], [ %209, %if.then.i209 ]
  %23 = phi i32 [ %22, %if.then.i214 ], [ %.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %.ph.ph, %call_destructor.exit205 ], [ %.ph.ph, %if.then.i209 ]
  %.not100212234313357 = phi i1 [ false, %if.then.i214 ], [ %.not100191273334392, %call_destructor.exit210.thread374 ], [ %.not100191273, %call_destructor.exit205 ], [ false, %if.then.i209 ]
  %tobool.i216 = icmp eq ptr %.051197249298372, null
  %brmerge.i218 = or i1 %tobool.i216, %.not100212234313357
  br i1 %brmerge.i218, label %call_destructor.exit220, label %if.then.i219

if.then.i219:                                     ; preds = %call_destructor.exit215
  call void @halide_free(ptr null, ptr nonnull %.051197249298372) #7
  br label %call_destructor.exit220

call_destructor.exit220:                          ; preds = %if.then.i219, %call_destructor.exit215
  %tobool.i221 = icmp eq ptr %.050198248299371, null
  %brmerge.i223 = or i1 %tobool.i221, %.not100212234313357
  br i1 %brmerge.i223, label %call_destructor.exit225, label %call_destructor.exit225.sink.split

call_destructor.exit225.sink.split:               ; preds = %call_destructor.exit220, %call_destructor.exit
  %.sink = phi ptr [ %1642, %call_destructor.exit ], [ %.050198248299371, %call_destructor.exit220 ]
  %.049199247300370415459.ph = phi ptr [ %958, %call_destructor.exit ], [ %.049199247300370, %call_destructor.exit220 ]
  %.048200246301369416458.ph = phi ptr [ %921, %call_destructor.exit ], [ %.048200246301369, %call_destructor.exit220 ]
  %.047201245302368417457.ph = phi ptr [ %879, %call_destructor.exit ], [ %.047201245302368, %call_destructor.exit220 ]
  %.046202244303367418456.ph = phi ptr [ %839, %call_destructor.exit ], [ %.046202244303367, %call_destructor.exit220 ]
  %.045203243304366419455.ph = phi ptr [ %793, %call_destructor.exit ], [ %.045203243304366, %call_destructor.exit220 ]
  %.044204242305365420454.ph = phi ptr [ %737, %call_destructor.exit ], [ %.044204242305365, %call_destructor.exit220 ]
  %.043205241306364421453.ph = phi ptr [ %684, %call_destructor.exit ], [ %.043205241306364, %call_destructor.exit220 ]
  %.042206240307363422452.ph = phi ptr [ %628, %call_destructor.exit ], [ %.042206240307363, %call_destructor.exit220 ]
  %.041207239308362423451.ph = phi ptr [ %559, %call_destructor.exit ], [ %.041207239308362, %call_destructor.exit220 ]
  %.040208238309361424450.ph = phi ptr [ %503, %call_destructor.exit ], [ %.040208238309361, %call_destructor.exit220 ]
  %.039209237310360425449.ph = phi ptr [ %424, %call_destructor.exit ], [ %.039209237310360, %call_destructor.exit220 ]
  %.038210236311359426448.ph = phi ptr [ %340, %call_destructor.exit ], [ %.038210236311359, %call_destructor.exit220 ]
  %.0211235312358427447.ph = phi ptr [ %209, %call_destructor.exit ], [ %.0211235312358, %call_destructor.exit220 ]
  %.ph819 = phi i32 [ %.ph, %call_destructor.exit ], [ %23, %call_destructor.exit220 ]
  call void @halide_free(ptr null, ptr nonnull %.sink) #7
  br label %call_destructor.exit225

call_destructor.exit225:                          ; preds = %call_destructor.exit225.sink.split, %call_destructor.exit220
  %.049199247300370415459 = phi ptr [ %.049199247300370, %call_destructor.exit220 ], [ %.049199247300370415459.ph, %call_destructor.exit225.sink.split ]
  %.048200246301369416458 = phi ptr [ %.048200246301369, %call_destructor.exit220 ], [ %.048200246301369416458.ph, %call_destructor.exit225.sink.split ]
  %.047201245302368417457 = phi ptr [ %.047201245302368, %call_destructor.exit220 ], [ %.047201245302368417457.ph, %call_destructor.exit225.sink.split ]
  %.046202244303367418456 = phi ptr [ %.046202244303367, %call_destructor.exit220 ], [ %.046202244303367418456.ph, %call_destructor.exit225.sink.split ]
  %.045203243304366419455 = phi ptr [ %.045203243304366, %call_destructor.exit220 ], [ %.045203243304366419455.ph, %call_destructor.exit225.sink.split ]
  %.044204242305365420454 = phi ptr [ %.044204242305365, %call_destructor.exit220 ], [ %.044204242305365420454.ph, %call_destructor.exit225.sink.split ]
  %.043205241306364421453 = phi ptr [ %.043205241306364, %call_destructor.exit220 ], [ %.043205241306364421453.ph, %call_destructor.exit225.sink.split ]
  %.042206240307363422452 = phi ptr [ %.042206240307363, %call_destructor.exit220 ], [ %.042206240307363422452.ph, %call_destructor.exit225.sink.split ]
  %.041207239308362423451 = phi ptr [ %.041207239308362, %call_destructor.exit220 ], [ %.041207239308362423451.ph, %call_destructor.exit225.sink.split ]
  %.040208238309361424450 = phi ptr [ %.040208238309361, %call_destructor.exit220 ], [ %.040208238309361424450.ph, %call_destructor.exit225.sink.split ]
  %.039209237310360425449 = phi ptr [ %.039209237310360, %call_destructor.exit220 ], [ %.039209237310360425449.ph, %call_destructor.exit225.sink.split ]
  %.038210236311359426448 = phi ptr [ %.038210236311359, %call_destructor.exit220 ], [ %.038210236311359426448.ph, %call_destructor.exit225.sink.split ]
  %.0211235312358427447 = phi ptr [ %.0211235312358, %call_destructor.exit220 ], [ %.0211235312358427447.ph, %call_destructor.exit225.sink.split ]
  %24 = phi i32 [ %23, %call_destructor.exit220 ], [ %.ph819, %call_destructor.exit225.sink.split ]
  %.not100212234313357428446 = phi i1 [ %.not100212234313357, %call_destructor.exit220 ], [ false, %call_destructor.exit225.sink.split ]
  %tobool.i226 = icmp eq ptr %.049199247300370415459, null
  %brmerge.i228 = or i1 %tobool.i226, %.not100212234313357428446
  br i1 %brmerge.i228, label %call_destructor.exit230, label %if.then.i229

if.then.i229:                                     ; preds = %call_destructor.exit225
  call void @halide_free(ptr null, ptr nonnull %.049199247300370415459) #7
  br label %call_destructor.exit230

call_destructor.exit230:                          ; preds = %if.then.i229, %call_destructor.exit225
  %tobool.i231 = icmp eq ptr %.048200246301369416458, null
  %brmerge.i233 = or i1 %tobool.i231, %.not100212234313357428446
  br i1 %brmerge.i233, label %call_destructor.exit235, label %call_destructor.exit235.sink.split

call_destructor.exit235.sink.split:               ; preds = %call_destructor.exit230, %"end for f130.s0.v4"
  %.sink821 = phi ptr [ %1799, %"end for f130.s0.v4" ], [ %.048200246301369416458, %call_destructor.exit230 ]
  %.047201245302368417457477515.ph = phi ptr [ %879, %"end for f130.s0.v4" ], [ %.047201245302368417457, %call_destructor.exit230 ]
  %.046202244303367418456478514.ph = phi ptr [ %839, %"end for f130.s0.v4" ], [ %.046202244303367418456, %call_destructor.exit230 ]
  %.045203243304366419455479513.ph = phi ptr [ %793, %"end for f130.s0.v4" ], [ %.045203243304366419455, %call_destructor.exit230 ]
  %.044204242305365420454480512.ph = phi ptr [ %737, %"end for f130.s0.v4" ], [ %.044204242305365420454, %call_destructor.exit230 ]
  %.043205241306364421453481511.ph = phi ptr [ %684, %"end for f130.s0.v4" ], [ %.043205241306364421453, %call_destructor.exit230 ]
  %.042206240307363422452482510.ph = phi ptr [ %628, %"end for f130.s0.v4" ], [ %.042206240307363422452, %call_destructor.exit230 ]
  %.041207239308362423451483509.ph = phi ptr [ %559, %"end for f130.s0.v4" ], [ %.041207239308362423451, %call_destructor.exit230 ]
  %.040208238309361424450484508.ph = phi ptr [ %503, %"end for f130.s0.v4" ], [ %.040208238309361424450, %call_destructor.exit230 ]
  %.039209237310360425449485507.ph = phi ptr [ %424, %"end for f130.s0.v4" ], [ %.039209237310360425449, %call_destructor.exit230 ]
  %.038210236311359426448486506.ph = phi ptr [ %340, %"end for f130.s0.v4" ], [ %.038210236311359426448, %call_destructor.exit230 ]
  %.0211235312358427447487505.ph = phi ptr [ %209, %"end for f130.s0.v4" ], [ %.0211235312358427447, %call_destructor.exit230 ]
  %.ph820 = phi i32 [ %1941, %"end for f130.s0.v4" ], [ %24, %call_destructor.exit230 ]
  call void @halide_free(ptr null, ptr nonnull %.sink821) #7
  br label %call_destructor.exit235

call_destructor.exit235:                          ; preds = %call_destructor.exit235.sink.split, %call_destructor.exit230
  %.047201245302368417457477515 = phi ptr [ %.047201245302368417457, %call_destructor.exit230 ], [ %.047201245302368417457477515.ph, %call_destructor.exit235.sink.split ]
  %.046202244303367418456478514 = phi ptr [ %.046202244303367418456, %call_destructor.exit230 ], [ %.046202244303367418456478514.ph, %call_destructor.exit235.sink.split ]
  %.045203243304366419455479513 = phi ptr [ %.045203243304366419455, %call_destructor.exit230 ], [ %.045203243304366419455479513.ph, %call_destructor.exit235.sink.split ]
  %.044204242305365420454480512 = phi ptr [ %.044204242305365420454, %call_destructor.exit230 ], [ %.044204242305365420454480512.ph, %call_destructor.exit235.sink.split ]
  %.043205241306364421453481511 = phi ptr [ %.043205241306364421453, %call_destructor.exit230 ], [ %.043205241306364421453481511.ph, %call_destructor.exit235.sink.split ]
  %.042206240307363422452482510 = phi ptr [ %.042206240307363422452, %call_destructor.exit230 ], [ %.042206240307363422452482510.ph, %call_destructor.exit235.sink.split ]
  %.041207239308362423451483509 = phi ptr [ %.041207239308362423451, %call_destructor.exit230 ], [ %.041207239308362423451483509.ph, %call_destructor.exit235.sink.split ]
  %.040208238309361424450484508 = phi ptr [ %.040208238309361424450, %call_destructor.exit230 ], [ %.040208238309361424450484508.ph, %call_destructor.exit235.sink.split ]
  %.039209237310360425449485507 = phi ptr [ %.039209237310360425449, %call_destructor.exit230 ], [ %.039209237310360425449485507.ph, %call_destructor.exit235.sink.split ]
  %.038210236311359426448486506 = phi ptr [ %.038210236311359426448, %call_destructor.exit230 ], [ %.038210236311359426448486506.ph, %call_destructor.exit235.sink.split ]
  %.0211235312358427447487505 = phi ptr [ %.0211235312358427447, %call_destructor.exit230 ], [ %.0211235312358427447487505.ph, %call_destructor.exit235.sink.split ]
  %25 = phi i32 [ %24, %call_destructor.exit230 ], [ %.ph820, %call_destructor.exit235.sink.split ]
  %.not100212234313357428446488504 = phi i1 [ %.not100212234313357428446, %call_destructor.exit230 ], [ false, %call_destructor.exit235.sink.split ]
  %tobool.i236 = icmp eq ptr %.047201245302368417457477515, null
  %brmerge.i238 = or i1 %tobool.i236, %.not100212234313357428446488504
  br i1 %brmerge.i238, label %call_destructor.exit240, label %if.then.i239

if.then.i239:                                     ; preds = %call_destructor.exit235
  call void @halide_free(ptr null, ptr nonnull %.047201245302368417457477515) #7
  br label %call_destructor.exit240

call_destructor.exit240:                          ; preds = %if.then.i239, %call_destructor.exit235
  %tobool.i241 = icmp eq ptr %.046202244303367418456478514, null
  %brmerge.i243 = or i1 %tobool.i241, %.not100212234313357428446488504
  br i1 %brmerge.i243, label %call_destructor.exit245, label %if.then.i244

if.then.i244:                                     ; preds = %call_destructor.exit240
  call void @halide_free(ptr null, ptr nonnull %.046202244303367418456478514) #7
  br label %call_destructor.exit245

call_destructor.exit245:                          ; preds = %if.then.i244, %call_destructor.exit240
  %tobool.i246 = icmp eq ptr %.045203243304366419455479513, null
  %brmerge.i248 = or i1 %tobool.i246, %.not100212234313357428446488504
  br i1 %brmerge.i248, label %call_destructor.exit250, label %if.then.i249

if.then.i249:                                     ; preds = %call_destructor.exit245
  call void @halide_free(ptr null, ptr nonnull %.045203243304366419455479513) #7
  br label %call_destructor.exit250

call_destructor.exit250:                          ; preds = %if.then.i249, %call_destructor.exit245
  %tobool.i251 = icmp eq ptr %.044204242305365420454480512, null
  %brmerge.i253 = or i1 %tobool.i251, %.not100212234313357428446488504
  br i1 %brmerge.i253, label %call_destructor.exit255, label %if.then.i254

if.then.i254:                                     ; preds = %call_destructor.exit250
  call void @halide_free(ptr null, ptr nonnull %.044204242305365420454480512) #7
  br label %call_destructor.exit255

call_destructor.exit255:                          ; preds = %if.then.i254, %call_destructor.exit250
  %tobool.i256 = icmp eq ptr %.043205241306364421453481511, null
  %brmerge.i258 = or i1 %tobool.i256, %.not100212234313357428446488504
  br i1 %brmerge.i258, label %call_destructor.exit260, label %if.then.i259

if.then.i259:                                     ; preds = %call_destructor.exit255
  call void @halide_free(ptr null, ptr nonnull %.043205241306364421453481511) #7
  br label %call_destructor.exit260

call_destructor.exit260:                          ; preds = %if.then.i259, %call_destructor.exit255
  %tobool.i261 = icmp eq ptr %.042206240307363422452482510, null
  %brmerge.i263 = or i1 %tobool.i261, %.not100212234313357428446488504
  br i1 %brmerge.i263, label %call_destructor.exit265, label %if.then.i264

if.then.i264:                                     ; preds = %call_destructor.exit260
  call void @halide_free(ptr null, ptr nonnull %.042206240307363422452482510) #7
  br label %call_destructor.exit265

call_destructor.exit265:                          ; preds = %if.then.i264, %call_destructor.exit260
  %tobool.i266 = icmp eq ptr %.041207239308362423451483509, null
  %brmerge.i268 = or i1 %tobool.i266, %.not100212234313357428446488504
  br i1 %brmerge.i268, label %call_destructor.exit270, label %if.then.i269

if.then.i269:                                     ; preds = %call_destructor.exit265
  call void @halide_free(ptr null, ptr nonnull %.041207239308362423451483509) #7
  br label %call_destructor.exit270

call_destructor.exit270:                          ; preds = %if.then.i269, %call_destructor.exit265
  %tobool.i271 = icmp eq ptr %.040208238309361424450484508, null
  %brmerge.i273 = or i1 %tobool.i271, %.not100212234313357428446488504
  br i1 %brmerge.i273, label %call_destructor.exit275, label %if.then.i274

if.then.i274:                                     ; preds = %call_destructor.exit270
  call void @halide_free(ptr null, ptr nonnull %.040208238309361424450484508) #7
  br label %call_destructor.exit275

call_destructor.exit275:                          ; preds = %if.then.i274, %call_destructor.exit270
  %tobool.i276 = icmp eq ptr %.039209237310360425449485507, null
  %brmerge.i278 = or i1 %tobool.i276, %.not100212234313357428446488504
  br i1 %brmerge.i278, label %call_destructor.exit280, label %if.then.i279

if.then.i279:                                     ; preds = %call_destructor.exit275
  call void @halide_free(ptr null, ptr nonnull %.039209237310360425449485507) #7
  br label %call_destructor.exit280

call_destructor.exit280:                          ; preds = %if.then.i279, %call_destructor.exit275
  %tobool.i281 = icmp eq ptr %.038210236311359426448486506, null
  %brmerge.i283 = or i1 %tobool.i281, %.not100212234313357428446488504
  br i1 %brmerge.i283, label %call_destructor.exit285, label %if.then.i284

if.then.i284:                                     ; preds = %call_destructor.exit280
  call void @halide_free(ptr null, ptr nonnull %.038210236311359426448486506) #7
  br label %call_destructor.exit285

call_destructor.exit285:                          ; preds = %if.then.i284, %call_destructor.exit280
  %tobool.i286 = icmp eq ptr %.0211235312358427447487505, null
  %brmerge.i288 = or i1 %tobool.i286, %.not100212234313357428446488504
  br i1 %brmerge.i288, label %call_destructor.exit290, label %if.then.i289

if.then.i289:                                     ; preds = %call_destructor.exit285
  call void @halide_free(ptr null, ptr nonnull %.0211235312358427447487505) #7
  br label %call_destructor.exit290

call_destructor.exit290:                          ; preds = %call_destructor.exit210, %call_destructor.exit, %if.then.i289, %call_destructor.exit285
  %26 = phi i32 [ %25, %if.then.i289 ], [ %25, %call_destructor.exit285 ], [ 0, %call_destructor.exit ], [ 0, %call_destructor.exit210 ]
  ret i32 %26

"assert failed10":                                ; preds = %"assert succeeded"
  %27 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str.2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded11":                             ; preds = %"assert succeeded"
  %28 = icmp eq ptr %input.host, null
  %input.dev = load i64, ptr %input.buffer, align 8
  %29 = icmp eq i64 %input.dev, 0
  %input.host_and_dev_are_null = and i1 %28, %29
  %buf_host12 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 1
  %local_laplacian.host = load ptr, ptr %buf_host12, align 8
  %local_laplacian.dev = load i64, ptr %local_laplacian.buffer, align 8
  %30 = icmp eq i64 %local_laplacian.dev, 0
  %31 = icmp eq ptr %local_laplacian.host, null
  %local_laplacian.host_and_dev_are_null = and i1 %31, %30
  %buf_extent16 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 0
  %local_laplacian.extent.0 = load i32, ptr %buf_extent16, align 4
  %x7 = sext i32 %local_laplacian.extent.0 to i64
  %buf_extent17 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 1
  %local_laplacian.extent.1 = load i32, ptr %buf_extent17, align 4
  %32 = sext i32 %local_laplacian.extent.1 to i64
  %buf_extent18 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 2
  %local_laplacian.extent.2 = load i32, ptr %buf_extent18, align 4
  %33 = sext i32 %local_laplacian.extent.2 to i64
  %buf_extent19 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 3
  %buf_stride20 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 0
  %local_laplacian.stride.0 = load i32, ptr %buf_stride20, align 4
  %buf_stride21 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 1
  %local_laplacian.stride.1 = load i32, ptr %buf_stride21, align 4
  %34 = sext i32 %local_laplacian.stride.1 to i64
  %buf_stride22 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 2
  %local_laplacian.stride.2 = load i32, ptr %buf_stride22, align 4
  %35 = sext i32 %local_laplacian.stride.2 to i64
  %buf_stride23 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 3
  %buf_min24 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 0
  %a286 = load i32, ptr %buf_min24, align 4
  %buf_min25 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 1
  %a114 = load i32, ptr %buf_min25, align 4
  %buf_min26 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 2
  %a108 = load i32, ptr %buf_min26, align 4
  %buf_min27 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 3
  %buf_elem_size28 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 5
  %local_laplacian.elem_size = load i32, ptr %buf_elem_size28, align 4
  %36 = add nsw i32 %a114, %local_laplacian.extent.1
  %37 = add nsw i32 %36, 125
  %a0 = ashr i32 %37, 6
  %38 = add nsw i32 %36, 253
  %39 = ashr i32 %38, 7
  %40 = shl nsw i32 %39, 1
  %b2 = add nsw i32 %40, 2
  %b750 = tail call i32 @llvm.smax.i32(i32 %a0, i32 %b2)
  %41 = add nsw i32 %a114, -126
  %a1 = ashr i32 %41, 6
  %42 = add nsw i32 %a114, -254
  %43 = ashr i32 %42, 7
  %44 = shl nsw i32 %43, 1
  %b3 = add nsw i32 %44, -1
  %b748 = tail call i32 @llvm.smin.i32(i32 %b3, i32 %a1)
  %45 = add nsw i32 %a286, %local_laplacian.extent.0
  %46 = add nsw i32 %45, 125
  %a2 = ashr i32 %46, 6
  %47 = add nsw i32 %45, 253
  %48 = ashr i32 %47, 7
  %49 = shl nsw i32 %48, 1
  %b4 = add nsw i32 %49, 2
  %b753 = tail call i32 @llvm.smax.i32(i32 %a2, i32 %b4)
  %50 = add nsw i32 %a286, -126
  %a3 = ashr i32 %50, 6
  %51 = add nsw i32 %a286, -254
  %52 = ashr i32 %51, 7
  %53 = shl nsw i32 %52, 1
  %b5 = add nsw i32 %53, -1
  %b751 = tail call i32 @llvm.smin.i32(i32 %b5, i32 %a3)
  %54 = add nsw i32 %levels, -1
  %55 = sitofp i32 %54 to float
  %56 = icmp slt i32 %levels, 1
  %57 = select i1 %56, float 0.000000e+00, float %55
  %a4 = fptosi float %57 to i32
  %b6 = add nsw i32 %levels, -2
  %a742 = tail call i32 @llvm.smin.i32(i32 %b6, i32 %a4)
  %58 = select i1 %56, float %55, float 0.000000e+00
  %a5 = fptosi float %58 to i32
  %a772 = tail call i32 @llvm.smin.i32(i32 %b6, i32 %a5)
  %59 = add nsw i32 %36, 61
  %a6 = ashr i32 %59, 5
  %60 = shl nsw i32 %b750, 1
  %b8 = add nsw i32 %60, 2
  %b735 = tail call i32 @llvm.smax.i32(i32 %a6, i32 %b8)
  %61 = add nsw i32 %a114, -62
  %a7 = ashr i32 %61, 5
  %62 = shl nsw i32 %b748, 1
  %b9 = add nsw i32 %62, -1
  %b733 = tail call i32 @llvm.smin.i32(i32 %b9, i32 %a7)
  %63 = add nsw i32 %45, 61
  %a8 = ashr i32 %63, 5
  %64 = shl nsw i32 %b753, 1
  %b10 = add nsw i32 %64, 2
  %b739 = tail call i32 @llvm.smax.i32(i32 %a8, i32 %b10)
  %65 = add nsw i32 %a286, -62
  %a9 = ashr i32 %65, 5
  %66 = shl i32 %b751, 1
  %b11 = add nsw i32 %66, -1
  %b737 = tail call i32 @llvm.smin.i32(i32 %b11, i32 %a9)
  %b14 = ashr i32 %61, 6
  %67 = tail call i32 @llvm.smin.i32(i32 %b14, i32 %44)
  %a11 = add nsw i32 %67, -1
  %.not133 = icmp slt i32 %a1, %67
  %b720 = select i1 %.not133, i32 %a1, i32 %a11
  %b17 = ashr i32 %65, 6
  %68 = tail call i32 @llvm.smin.i32(i32 %b17, i32 %53)
  %a14 = add nsw i32 %68, -1
  %.not134 = icmp slt i32 %a3, %68
  %b724 = select i1 %.not134, i32 %a3, i32 %a14
  %69 = add nsw i32 %36, 29
  %a16 = ashr i32 %69, 4
  %70 = shl nsw i32 %b735, 1
  %b18 = add nsw i32 %70, 2
  %b695 = tail call i32 @llvm.smax.i32(i32 %a16, i32 %b18)
  %71 = add nsw i32 %a114, -30
  %a17 = ashr i32 %71, 4
  %72 = shl i32 %b733, 1
  %b19 = add nsw i32 %72, -1
  %a691 = tail call i32 @llvm.smin.i32(i32 %b19, i32 %a17)
  %73 = add nsw i32 %45, 29
  %a18 = ashr i32 %73, 4
  %74 = shl nsw i32 %b739, 1
  %b20 = add nsw i32 %74, 2
  %b709 = tail call i32 @llvm.smax.i32(i32 %a18, i32 %b20)
  %75 = add nsw i32 %a286, -30
  %a19 = ashr i32 %75, 4
  %76 = shl i32 %b737, 1
  %b21 = add nsw i32 %76, -1
  %a705 = tail call i32 @llvm.smin.i32(i32 %b21, i32 %a19)
  %77 = shl nsw i32 %b720, 1
  %b23 = add nsw i32 %77, -1
  %b658 = tail call i32 @llvm.smin.i32(i32 %b23, i32 %a7)
  %78 = shl nsw i32 %b724, 1
  %b25 = add nsw i32 %78, -1
  %b675 = tail call i32 @llvm.smin.i32(i32 %b25, i32 %a9)
  %79 = add nsw i32 %36, 13
  %a24 = ashr i32 %79, 3
  %80 = shl nsw i32 %b695, 1
  %b26 = add nsw i32 %80, 2
  %b624 = tail call i32 @llvm.smax.i32(i32 %a24, i32 %b26)
  %81 = add nsw i32 %a114, -14
  %a25 = ashr i32 %81, 3
  %82 = shl nsw i32 %a691, 1
  %b27 = add nsw i32 %82, -1
  %a620 = tail call i32 @llvm.smin.i32(i32 %b27, i32 %a25)
  %83 = add nsw i32 %45, 13
  %a26 = ashr i32 %83, 3
  %84 = shl nsw i32 %b709, 1
  %b28 = add nsw i32 %84, 2
  %b641 = tail call i32 @llvm.smax.i32(i32 %a26, i32 %b28)
  %85 = add nsw i32 %a286, -14
  %a27 = ashr i32 %85, 3
  %86 = shl nsw i32 %a705, 1
  %b29 = add nsw i32 %86, -1
  %a637 = tail call i32 @llvm.smin.i32(i32 %b29, i32 %a27)
  %87 = shl nsw i32 %b658, 1
  %b31 = add nsw i32 %87, -1
  %a574 = tail call i32 @llvm.smin.i32(i32 %b31, i32 %a17)
  %88 = shl nsw i32 %b675, 1
  %b33 = add nsw i32 %88, -1
  %a595 = tail call i32 @llvm.smin.i32(i32 %b33, i32 %a19)
  %89 = add nsw i32 %36, 5
  %a32 = ashr i32 %89, 2
  %90 = shl nsw i32 %b624, 1
  %b34 = add nsw i32 %90, 2
  %b539 = tail call i32 @llvm.smax.i32(i32 %a32, i32 %b34)
  %91 = add nsw i32 %a114, -6
  %a33 = ashr i32 %91, 2
  %92 = shl nsw i32 %a620, 1
  %b35 = add nsw i32 %92, -1
  %a535 = tail call i32 @llvm.smin.i32(i32 %b35, i32 %a33)
  %93 = add nsw i32 %45, 5
  %a34 = ashr i32 %93, 2
  %94 = shl nsw i32 %b641, 1
  %b36 = add nsw i32 %94, 2
  %b556 = tail call i32 @llvm.smax.i32(i32 %a34, i32 %b36)
  %95 = add nsw i32 %a286, -6
  %a35 = ashr i32 %95, 2
  %96 = shl nsw i32 %a637, 1
  %b37 = add nsw i32 %96, -1
  %a552 = tail call i32 @llvm.smin.i32(i32 %b37, i32 %a35)
  %97 = shl nsw i32 %a574, 1
  %b39 = add nsw i32 %97, -1
  %a485 = tail call i32 @llvm.smin.i32(i32 %b39, i32 %a25)
  %98 = shl nsw i32 %a595, 1
  %b41 = add nsw i32 %98, -1
  %a509 = tail call i32 @llvm.smin.i32(i32 %b41, i32 %a27)
  %99 = add nsw i32 %36, 1
  %a40 = ashr i32 %99, 1
  %100 = shl nsw i32 %b539, 1
  %b42 = add nsw i32 %100, 2
  %b448 = tail call i32 @llvm.smax.i32(i32 %a40, i32 %b42)
  %a41 = ashr i32 %a114, 1
  %b43 = shl nsw i32 %a535, 1
  %f72.s0.v4.min.s = tail call i32 @llvm.smin.i32(i32 %b43, i32 %a41)
  %101 = add nsw i32 %45, 1
  %a42 = ashr i32 %101, 1
  %102 = shl nsw i32 %b556, 1
  %b44 = add nsw i32 %102, 2
  %b465 = tail call i32 @llvm.smax.i32(i32 %a42, i32 %b44)
  %a43 = ashr i32 %a286, 1
  %b45 = shl nsw i32 %a552, 1
  %f72.s0.v3.min.s = tail call i32 @llvm.smin.i32(i32 %b45, i32 %a43)
  %103 = shl nsw i32 %a485, 1
  %b47 = add nsw i32 %103, -1
  %a392 = tail call i32 @llvm.smin.i32(i32 %b47, i32 %a33)
  %104 = shl nsw i32 %a509, 1
  %b49 = add nsw i32 %104, -1
  %a416 = tail call i32 @llvm.smin.i32(i32 %b49, i32 %a35)
  %b51 = shl nsw i32 %a392, 1
  %f4.s0.v4.min.s = tail call i32 @llvm.smin.i32(i32 %b51, i32 %a41)
  %b53 = shl nsw i32 %a416, 1
  %f4.s0.v3.min.s = tail call i32 @llvm.smin.i32(i32 %b53, i32 %a43)
  %a54 = add nsw i32 %36, -1
  %105 = shl nsw i32 %b448, 1
  %b56 = add nsw i32 %105, 2
  %a53 = tail call i32 @llvm.smax.i32(i32 %a54, i32 %b56)
  %.not135 = icmp slt i32 %a53, %36
  %b149 = select i1 %.not135, i32 %a54, i32 %a53
  %106 = shl nsw i32 %f4.s0.v4.min.s, 1
  %b59 = add nsw i32 %106, -3
  %a56 = tail call i32 @llvm.smin.i32(i32 %b59, i32 %a114)
  %107 = shl nsw i32 %f72.s0.v4.min.s, 1
  %b58 = add nsw i32 %107, -3
  %a55 = tail call i32 @llvm.smin.i32(i32 %b58, i32 %a56)
  %a145 = tail call i32 @llvm.smin.i32(i32 %a114, i32 %a55)
  %a60 = add nsw i32 %45, -1
  %108 = shl nsw i32 %b465, 1
  %b62 = add nsw i32 %108, 2
  %a59 = tail call i32 @llvm.smax.i32(i32 %a60, i32 %b62)
  %.not136 = icmp slt i32 %a59, %45
  %b185 = select i1 %.not136, i32 %a60, i32 %a59
  %109 = shl nsw i32 %f4.s0.v3.min.s, 1
  %b65 = add nsw i32 %109, -3
  %a62 = tail call i32 @llvm.smin.i32(i32 %b65, i32 %a286)
  %110 = shl nsw i32 %f72.s0.v3.min.s, 1
  %b64 = add nsw i32 %110, -3
  %a61 = tail call i32 @llvm.smin.i32(i32 %b64, i32 %a62)
  %a181 = tail call i32 @llvm.smin.i32(i32 %a286, i32 %a61)
  %111 = tail call i32 @llvm.smax.i32(i32 %a772, i32 0)
  %112 = fmul float %57, 2.560000e+02
  %a66 = fptosi float %112 to i32
  %113 = shl nsw i32 %levels, 8
  %b68 = add nsw i32 %113, -256
  %a65 = tail call i32 @llvm.smin.i32(i32 %b68, i32 %a66)
  %114 = tail call i32 @llvm.smax.i32(i32 %a65, i32 0)
  %115 = tail call i32 @llvm.smax.i32(i32 %a742, i32 0)
  %116 = shl nsw i32 %115, 8
  %117 = fmul float %58, 2.560000e+02
  %a69 = fptosi float %117 to i32
  %a68 = tail call i32 @llvm.smin.i32(i32 %b68, i32 %a69)
  %118 = tail call i32 @llvm.smax.i32(i32 %a68, i32 0)
  %b121 = sub nsw i32 %118, %116
  %b75 = add nsw i32 %b185, -7
  %a72 = tail call i32 @llvm.smin.i32(i32 %b75, i32 %a181)
  %b76 = add nsw i32 %45, -8
  %b74 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %a286)
  %a71 = tail call i32 @llvm.smin.i32(i32 %b74, i32 %a72)
  %119 = add i32 %input.extent.0, -1
  %120 = extractelement <2 x i32> %21, i64 0
  %b73 = add i32 %119, %120
  %a70 = tail call i32 @llvm.smin.i32(i32 %b73, i32 %a71)
  %121 = tail call i32 @llvm.smax.i32(i32 %a70, i32 %120)
  %122 = sub nsw i32 %b185, %a181
  %123 = and i32 %122, -8
  %124 = add i32 %a181, 7
  %a78 = add i32 %124, %123
  %a77 = tail call i32 @llvm.smin.i32(i32 %b185, i32 %a78)
  %125 = add nsw i32 %local_laplacian.extent.0, -1
  %126 = and i32 %125, -8
  %127 = add nsw i32 %a286, %126
  %a79 = add nsw i32 %127, 7
  %b79 = tail call i32 @llvm.smin.i32(i32 %a60, i32 %a79)
  %a76 = tail call i32 @llvm.smax.i32(i32 %a77, i32 %b79)
  %a75 = tail call i32 @llvm.smin.i32(i32 %b73, i32 %a76)
  %128 = tail call i32 @llvm.smax.i32(i32 %a75, i32 %120)
  %b90 = add nsw i32 %b149, -31
  %a87 = tail call i32 @llvm.smin.i32(i32 %b90, i32 %a145)
  %b91 = add nsw i32 %36, -64
  %b89 = tail call i32 @llvm.smin.i32(i32 %b91, i32 %a114)
  %a86 = tail call i32 @llvm.smin.i32(i32 %b89, i32 %a87)
  %129 = extractelement <2 x i32> %21, i64 1
  %130 = add nsw i32 %129, %17
  %b88 = add nsw i32 %130, -1
  %a85 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %a86)
  %131 = tail call i32 @llvm.smax.i32(i32 %a85, i32 %129)
  %132 = sub nsw i32 %b149, %a145
  %133 = ashr i32 %132, 5
  %134 = and i32 %132, -32
  %135 = add i32 %a145, 31
  %a93 = add i32 %135, %134
  %a92 = tail call i32 @llvm.smin.i32(i32 %b149, i32 %a93)
  %136 = add nsw i32 %local_laplacian.extent.1, -1
  %137 = ashr i32 %136, 6
  %138 = or i32 %136, 63
  %a94 = add i32 %138, %a114
  %b94 = tail call i32 @llvm.smin.i32(i32 %a54, i32 %a94)
  %a91 = tail call i32 @llvm.smax.i32(i32 %a92, i32 %b94)
  %a90 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %a91)
  %139 = tail call i32 @llvm.smax.i32(i32 %a90, i32 %129)
  %140 = add i32 %19, -1
  %b104 = add i32 %140, %b108
  %a101 = tail call i32 @llvm.smin.i32(i32 %b104, i32 %a108)
  %141 = tail call i32 @llvm.smin.i32(i32 %a101, i32 0)
  %142 = tail call i32 @llvm.smax.i32(i32 %141, i32 %b108)
  %143 = add nsw i32 %a108, %local_laplacian.extent.2
  %a105 = add nsw i32 %143, -1
  %144 = icmp sgt i32 %143, 3
  %a104 = select i1 %144, i32 %a105, i32 2
  %a103 = tail call i32 @llvm.smin.i32(i32 %b104, i32 %a104)
  %145 = tail call i32 @llvm.smax.i32(i32 %a103, i32 %b108)
  %local_laplacian.extent.0.required.s = sub nsw i32 %b79, %b74
  %local_laplacian.extent.1.required.s = sub nsw i32 %b94, %b89
  %146 = add nsw i32 %local_laplacian.extent.1.required.s, 1
  %147 = add nsw i32 %local_laplacian.extent.0.required.s, 1
  %local_laplacian.stride.2.required = mul nsw i32 %146, %147
  br i1 %input.host_and_dev_are_null, label %after_bb, label %after_bb.thread

after_bb:                                         ; preds = %"assert succeeded11"
  %input.extent.0.required.s = sub nsw i32 %128, %121
  %148 = add nsw i32 %input.extent.0.required.s, 1
  %input.extent.1.required.s = sub nsw i32 %139, %131
  %149 = add nsw i32 %input.extent.1.required.s, 1
  %input.stride.2.required = mul nsw i32 %149, %148
  store i32 2, ptr %buf_elem_size, align 4
  store i32 %121, ptr %buf_min, align 4
  store i32 %148, ptr %buf_extent, align 4
  store i32 1, ptr %buf_stride, align 4
  store i32 %131, ptr %buf_min7, align 4
  store i32 %149, ptr %buf_extent1, align 4
  store i32 %148, ptr %buf_stride4, align 4
  store i32 %142, ptr %buf_min8, align 4
  %input.extent.2.required.s = sub i32 1, %142
  %150 = add i32 %input.extent.2.required.s, %145
  store i32 %150, ptr %buf_extent2, align 4
  store i32 %input.stride.2.required, ptr %buf_stride5, align 4
  store i32 0, ptr %buf_min9, align 4
  store i32 0, ptr %buf_extent3, align 4
  store i32 0, ptr %buf_stride6, align 4
  br i1 %local_laplacian.host_and_dev_are_null, label %after_bb44.thread, label %call_destructor.exit210.thread374

after_bb.thread:                                  ; preds = %"assert succeeded11"
  br i1 %local_laplacian.host_and_dev_are_null, label %after_bb44.thread, label %true_bb58

after_bb44.thread:                                ; preds = %after_bb.thread, %after_bb
  store i32 2, ptr %buf_elem_size28, align 4
  store i32 %b74, ptr %buf_min24, align 4
  store i32 %147, ptr %buf_extent16, align 4
  store i32 1, ptr %buf_stride20, align 4
  store i32 %b89, ptr %buf_min25, align 4
  store i32 %146, ptr %buf_extent17, align 4
  store i32 %147, ptr %buf_stride21, align 4
  store i32 %local_laplacian.stride.2.required, ptr %buf_stride22, align 4
  store i32 0, ptr %buf_min27, align 4
  store i32 0, ptr %buf_extent19, align 4
  store i32 0, ptr %buf_stride23, align 4
  br label %call_destructor.exit210.thread374

true_bb58:                                        ; preds = %after_bb.thread
  %151 = icmp eq i32 %input.elem_size, 2
  br i1 %151, label %"assert succeeded62", label %"assert failed61", !prof !5

"assert failed61":                                ; preds = %true_bb58
  %152 = tail call i32 @halide_error_bad_elem_size(ptr null, ptr nonnull @str.3, ptr nonnull @str.4, i32 %input.elem_size, i32 2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded62":                             ; preds = %true_bb58
  %153 = icmp eq i32 %local_laplacian.elem_size, 2
  br i1 %153, label %"assert succeeded64", label %"assert failed63", !prof !5

"assert failed63":                                ; preds = %"assert succeeded62"
  %154 = tail call i32 @halide_error_bad_elem_size(ptr null, ptr nonnull @str.5, ptr nonnull @str.4, i32 %local_laplacian.elem_size, i32 2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded64":                             ; preds = %"assert succeeded62"
  %155 = sub nsw i32 %128, %input.extent.0
  %.not102 = icmp slt i32 %155, %120
  br i1 %.not102, label %"assert succeeded66", label %"assert failed65", !prof !5

"assert failed65":                                ; preds = %"assert succeeded64"
  %156 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 0, i32 %121, i32 %128, i32 %120, i32 %b73) #4
  br label %call_destructor.exit210.thread374

"assert succeeded66":                             ; preds = %"assert succeeded64"
  %157 = sub nsw i32 %139, %17
  %.not103 = icmp slt i32 %157, %129
  br i1 %.not103, label %"assert succeeded68", label %"assert failed67", !prof !5

"assert failed67":                                ; preds = %"assert succeeded66"
  %158 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 1, i32 %131, i32 %139, i32 %129, i32 %b88) #4
  br label %call_destructor.exit210.thread374

"assert succeeded68":                             ; preds = %"assert succeeded66"
  %159 = sub nsw i32 %145, %19
  %.not104 = icmp slt i32 %159, %b108
  br i1 %.not104, label %"assert succeeded70", label %"assert failed69", !prof !5

"assert failed69":                                ; preds = %"assert succeeded68"
  %160 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 2, i32 %142, i32 %145, i32 %b108, i32 %b104) #4
  br label %call_destructor.exit210.thread374

"assert succeeded70":                             ; preds = %"assert succeeded68"
  %161 = sub nsw i32 %b79, %local_laplacian.extent.0
  %.not105 = icmp slt i32 %161, %a286
  %162 = icmp sle i32 %a286, %b76
  %163 = and i1 %162, %.not105
  br i1 %163, label %"assert succeeded72", label %"assert failed71", !prof !5

"assert failed71":                                ; preds = %"assert succeeded70"
  %164 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.5, i32 0, i32 %b74, i32 %b79, i32 %a286, i32 %a60) #4
  br label %call_destructor.exit210.thread374

"assert succeeded72":                             ; preds = %"assert succeeded70"
  %165 = sub nsw i32 %b94, %local_laplacian.extent.1
  %.not106 = icmp slt i32 %165, %a114
  %166 = icmp sle i32 %a114, %b91
  %167 = and i1 %166, %.not106
  br i1 %167, label %"assert succeeded74", label %"assert failed73", !prof !5

"assert failed73":                                ; preds = %"assert succeeded72"
  %168 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.5, i32 1, i32 %b89, i32 %b94, i32 %a114, i32 %a54) #4
  br label %call_destructor.exit210.thread374

"assert succeeded74":                             ; preds = %"assert succeeded72"
  %169 = icmp eq i32 %input.stride.0, 1
  br i1 %169, label %"assert succeeded76", label %"assert failed75", !prof !5

"assert failed75":                                ; preds = %"assert succeeded74"
  %170 = tail call i32 @halide_error_constraint_violated(ptr null, ptr nonnull @str.6, i32 %input.stride.0, ptr nonnull @str.7, i32 1) #4
  br label %call_destructor.exit210.thread374

"assert succeeded76":                             ; preds = %"assert succeeded74"
  %171 = icmp eq i32 %local_laplacian.stride.0, 1
  br i1 %171, label %"assert succeeded78", label %"assert failed77", !prof !5

"assert failed77":                                ; preds = %"assert succeeded76"
  %172 = tail call i32 @halide_error_constraint_violated(ptr null, ptr nonnull @str.8, i32 %local_laplacian.stride.0, ptr nonnull @str.7, i32 1) #4
  br label %call_destructor.exit210.thread374

"assert succeeded78":                             ; preds = %"assert succeeded76"
  %input.total_extent.1 = mul nsw i64 %18, %x1
  %local_laplacian.total_extent.1 = mul nsw i64 %32, %x7
  %173 = tail call i64 @llvm.abs.i64(i64 %x1, i1 true)
  %174 = icmp ult i64 %173, 2147483648
  br i1 %174, label %"assert succeeded80", label %"assert failed79", !prof !5

"assert failed79":                                ; preds = %"assert succeeded78"
  %175 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %173, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded80":                             ; preds = %"assert succeeded78"
  %x2 = mul nsw i64 %14, %18
  %176 = tail call i64 @llvm.abs.i64(i64 %x2, i1 true)
  %177 = icmp ult i64 %176, 2147483648
  br i1 %177, label %"assert succeeded82", label %"assert failed81", !prof !5

"assert failed81":                                ; preds = %"assert succeeded80"
  %178 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %176, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded82":                             ; preds = %"assert succeeded80"
  %179 = icmp slt i64 %input.total_extent.1, 2147483648
  br i1 %179, label %"assert succeeded84", label %"assert failed83", !prof !5

"assert failed83":                                ; preds = %"assert succeeded82"
  %180 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str, i64 %input.total_extent.1, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded84":                             ; preds = %"assert succeeded82"
  %x4 = mul nsw i64 %15, %20
  %181 = tail call i64 @llvm.abs.i64(i64 %x4, i1 true)
  %182 = icmp ult i64 %181, 2147483648
  br i1 %182, label %"assert succeeded86", label %"assert failed85", !prof !5

"assert failed85":                                ; preds = %"assert succeeded84"
  %183 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %181, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded86":                             ; preds = %"assert succeeded84"
  %184 = mul nsw i64 %input.total_extent.1, %20
  %185 = icmp slt i64 %184, 2147483648
  br i1 %185, label %"assert succeeded88", label %"assert failed87", !prof !5

"assert failed87":                                ; preds = %"assert succeeded86"
  %186 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str, i64 %184, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded88":                             ; preds = %"assert succeeded86"
  %187 = tail call i64 @llvm.abs.i64(i64 %x7, i1 true)
  %188 = icmp ult i64 %187, 2147483648
  br i1 %188, label %"assert succeeded90", label %"assert failed89", !prof !5

"assert failed89":                                ; preds = %"assert succeeded88"
  %189 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %187, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded90":                             ; preds = %"assert succeeded88"
  %x8 = mul nsw i64 %34, %32
  %190 = tail call i64 @llvm.abs.i64(i64 %x8, i1 true)
  %191 = icmp ult i64 %190, 2147483648
  br i1 %191, label %"assert succeeded92", label %"assert failed91", !prof !5

"assert failed91":                                ; preds = %"assert succeeded90"
  %192 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %190, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded92":                             ; preds = %"assert succeeded90"
  %193 = icmp slt i64 %local_laplacian.total_extent.1, 2147483648
  br i1 %193, label %"assert succeeded94", label %"assert failed93", !prof !5

"assert failed93":                                ; preds = %"assert succeeded92"
  %194 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str.2, i64 %local_laplacian.total_extent.1, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded94":                             ; preds = %"assert succeeded92"
  %x10 = mul nsw i64 %35, %33
  %195 = tail call i64 @llvm.abs.i64(i64 %x10, i1 true)
  %196 = icmp ult i64 %195, 2147483648
  br i1 %196, label %"assert succeeded96", label %"assert failed95", !prof !5

"assert failed95":                                ; preds = %"assert succeeded94"
  %197 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %195, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded96":                             ; preds = %"assert succeeded94"
  %198 = mul nsw i64 %local_laplacian.total_extent.1, %33
  %199 = icmp slt i64 %198, 2147483648
  br i1 %199, label %"assert succeeded98", label %"assert failed97", !prof !5

"assert failed97":                                ; preds = %"assert succeeded96"
  %200 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str.2, i64 %198, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded98":                             ; preds = %"assert succeeded96"
  %201 = shl i32 %111, 8
  %202 = add i32 %201, %b121
  %f0.v3.extent_realized.s.s = sub i32 %114, %202
  %203 = add nsw i32 %f0.v3.extent_realized.s.s, 257
  %204 = zext i32 %203 to i64
  %205 = shl nuw nsw i64 %204, 2
  %206 = icmp ult i32 %203, 536870912
  br i1 %206, label %"assert succeeded100", label %"assert failed99", !prof !5

"assert failed99":                                ; preds = %"assert succeeded98"
  %207 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.9, i64 %205, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded100":                            ; preds = %"assert succeeded98"
  %208 = add nuw nsw i64 %205, 4
  %209 = tail call ptr @halide_malloc(ptr null, i64 %208)
  %.not107 = icmp eq ptr %209, null
  br i1 %.not107, label %"assert failed101", label %"produce f0", !prof !4

"assert failed101":                               ; preds = %"assert succeeded100"
  %210 = tail call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f0":                                     ; preds = %"assert succeeded100"
  %211 = icmp sgt i32 %f0.v3.extent_realized.s.s, -257
  br i1 %211, label %"for f0.s0.v3.preheader", label %"consume f0", !prof !5

"for f0.s0.v3.preheader":                         ; preds = %"produce f0"
  %212 = add nsw i32 %b121, -256
  %213 = sext i32 %b121 to i64
  %214 = shl nsw i64 %213, 2
  %215 = sub nsw i64 1024, %214
  %scevgep480 = getelementptr i8, ptr %209, i64 %215
  %216 = sext i32 %212 to i64
  %217 = add nuw i32 %114, 256
  %218 = sub i32 %217, %202
  %219 = zext i32 %218 to i64
  %220 = add nuw nsw i64 %219, 1
  %min.iters.check = icmp ult i32 %218, 3
  br i1 %min.iters.check, label %"for f0.s0.v3.preheader1059", label %vector.ph

vector.ph:                                        ; preds = %"for f0.s0.v3.preheader"
  %n.vec = and i64 %220, -4
  %ind.end = add nsw i64 %n.vec, %216
  %.cast = trunc i64 %n.vec to i32
  %ind.end823 = sub i32 %203, %.cast
  %.splatinsert = insertelement <4 x i32> poison, i32 %212, i64 0
  %.splat = shufflevector <4 x i32> %.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %induction = add <4 x i32> %.splat, <i32 0, i32 1, i32 2, i32 3>
  %broadcast.splatinsert = insertelement <4 x float> poison, float %alpha, i64 0
  %broadcast.splat = shufflevector <4 x float> %broadcast.splatinsert, <4 x float> poison, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i32> [ %induction, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %offset.idx = add i64 %index, %216
  %221 = sitofp <4 x i32> %vec.ind to <4 x float>
  %222 = fmul <4 x float> %221, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %223 = fsub <4 x float> zeroinitializer, %222
  %224 = fmul <4 x float> %223, %221
  %225 = fmul <4 x float> %224, <float 0x3F60000000000000, float 0x3F60000000000000, float 0x3F60000000000000, float 0x3F60000000000000>
  %226 = fmul <4 x float> %225, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %227 = tail call <4 x float> @llvm.floor.v4f32(<4 x float> %226)
  %228 = fptosi <4 x float> %227 to <4 x i32>
  %229 = fmul <4 x float> %227, <float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000>
  %230 = fmul <4 x float> %227, <float 0x3FE62E4000000000, float 0x3FE62E4000000000, float 0x3FE62E4000000000, float 0x3FE62E4000000000>
  %231 = fsub <4 x float> %225, %230
  %232 = fsub <4 x float> %231, %229
  %233 = fmul <4 x float> %232, %232
  %234 = shl <4 x i32> %228, <i32 23, i32 23, i32 23, i32 23>
  %235 = add <4 x i32> %234, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %236 = bitcast <4 x i32> %235 to <4 x float>
  %237 = fmul <4 x float> %233, <float 0x3F5385CCC0000000, float 0x3F5385CCC0000000, float 0x3F5385CCC0000000, float 0x3F5385CCC0000000>
  %238 = fadd <4 x float> %237, <float 0x3FA54CD780000000, float 0x3FA54CD780000000, float 0x3FA54CD780000000, float 0x3FA54CD780000000>
  %239 = fmul <4 x float> %233, %238
  %240 = fadd <4 x float> %239, <float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000>
  %241 = fmul <4 x float> %233, %240
  %242 = fadd <4 x float> %241, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %243 = fmul <4 x float> %233, <float 0x3F34F2FE60000000, float 0x3F34F2FE60000000, float 0x3F34F2FE60000000, float 0x3F34F2FE60000000>
  %244 = fadd <4 x float> %243, <float 0x3F81632540000000, float 0x3F81632540000000, float 0x3F81632540000000, float 0x3F81632540000000>
  %245 = fmul <4 x float> %233, %244
  %246 = fadd <4 x float> %245, <float 0x3FC555C3E0000000, float 0x3FC555C3E0000000, float 0x3FC555C3E0000000, float 0x3FC555C3E0000000>
  %247 = fmul <4 x float> %233, %246
  %248 = fadd <4 x float> %247, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %249 = fmul <4 x float> %232, %248
  %250 = fadd <4 x float> %242, %249
  %251 = fmul <4 x float> %250, %236
  %252 = icmp slt <4 x i32> %228, <i32 128, i32 128, i32 128, i32 128>
  %253 = select <4 x i1> %252, <4 x float> %251, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %254 = icmp sgt <4 x i32> %228, <i32 -127, i32 -127, i32 -127, i32 -127>
  %255 = select <4 x i1> %254, <4 x float> %253, <4 x float> zeroinitializer
  %256 = fmul <4 x float> %broadcast.splat, %221
  %257 = fmul <4 x float> %256, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %258 = fmul <4 x float> %257, %255
  %259 = getelementptr float, ptr %scevgep480, i64 %offset.idx
  store <4 x float> %258, ptr %259, align 4, !tbaa !6
  %index.next = add nuw i64 %index, 4
  %vec.ind.next = add <4 x i32> %vec.ind, <i32 4, i32 4, i32 4, i32 4>
  %260 = icmp eq i64 %index.next, %n.vec
  br i1 %260, label %middle.block, label %vector.body, !llvm.loop !9

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %220, %n.vec
  br i1 %cmp.n, label %"consume f0", label %"for f0.s0.v3.preheader1059"

"for f0.s0.v3.preheader1059":                     ; preds = %"for f0.s0.v3.preheader", %middle.block
  %lsr.iv482.ph = phi i64 [ %216, %"for f0.s0.v3.preheader" ], [ %ind.end, %middle.block ]
  %lsr.iv478.ph = phi i32 [ %203, %"for f0.s0.v3.preheader" ], [ %ind.end823, %middle.block ]
  br label %"for f0.s0.v3"

"for f0.s0.v3":                                   ; preds = %"for f0.s0.v3.preheader1059", %"for f0.s0.v3"
  %lsr.iv482 = phi i64 [ %lsr.iv.next483, %"for f0.s0.v3" ], [ %lsr.iv482.ph, %"for f0.s0.v3.preheader1059" ]
  %lsr.iv478 = phi i32 [ %lsr.iv.next479, %"for f0.s0.v3" ], [ %lsr.iv478.ph, %"for f0.s0.v3.preheader1059" ]
  %tmp487 = trunc i64 %lsr.iv482 to i32
  %261 = sitofp i32 %tmp487 to float
  %262 = fmul float %261, 3.906250e-03
  %263 = fsub float 0.000000e+00, %262
  %t3062 = fmul float %263, %261
  %264 = fmul float %t3062, 0x3F60000000000000
  %265 = fmul float %264, 0x3FF7154760000000
  %y.i = tail call float @llvm.floor.f32(float %265) #8
  %t3064 = fptosi float %y.i to i32
  %266 = fmul float %y.i, 0x3EB7F7D1C0000000
  %267 = fmul float %y.i, 0x3FE62E4000000000
  %268 = fsub float %264, %267
  %t3065 = fsub float %268, %266
  %t3066 = fmul float %t3065, %t3065
  %269 = shl i32 %t3064, 23
  %270 = add i32 %269, 1065353216
  %271 = bitcast i32 %270 to float
  %272 = insertelement <2 x float> poison, float %t3066, i64 0
  %273 = shufflevector <2 x float> %272, <2 x float> poison, <2 x i32> zeroinitializer
  %274 = fmul <2 x float> %273, <float 0x3F5385CCC0000000, float 0x3F34F2FE60000000>
  %275 = fadd <2 x float> %274, <float 0x3FA54CD780000000, float 0x3F81632540000000>
  %276 = fmul <2 x float> %273, %275
  %277 = fadd <2 x float> %276, <float 0x3FDFFFFBC0000000, float 0x3FC555C3E0000000>
  %278 = fmul <2 x float> %273, %277
  %279 = fadd <2 x float> %278, <float 1.000000e+00, float 1.000000e+00>
  %280 = extractelement <2 x float> %279, i64 1
  %281 = fmul float %t3065, %280
  %282 = extractelement <2 x float> %279, i64 0
  %283 = fadd float %282, %281
  %284 = fmul float %283, %271
  %285 = icmp slt i32 %t3064, 128
  %286 = select i1 %285, float %284, float 0x7FF0000000000000
  %287 = icmp sgt i32 %t3064, -127
  %288 = select i1 %287, float %286, float 0.000000e+00
  %289 = fmul float %261, %alpha
  %290 = fmul float %289, 3.906250e-03
  %291 = fmul float %290, %288
  %scevgep484 = getelementptr float, ptr %scevgep480, i64 %lsr.iv482
  store float %291, ptr %scevgep484, align 4, !tbaa !6
  %lsr.iv.next479 = add i32 %lsr.iv478, -1
  %lsr.iv.next483 = add nsw i64 %lsr.iv482, 1
  %.not132 = icmp eq i32 %lsr.iv.next479, 0
  br i1 %.not132, label %"consume f0", label %"for f0.s0.v3", !llvm.loop !12

"consume f0":                                     ; preds = %"for f0.s0.v3", %middle.block, %"produce f0"
  %a127 = add nsw i32 %f72.s0.v4.min.s, -1
  %b129 = add nsw i32 %b448, -31
  %.not137 = icmp slt i32 %b129, %f72.s0.v4.min.s
  %b135 = select i1 %.not137, i32 %b129, i32 %a127
  %a134 = add nsw i32 %f4.s0.v4.min.s, -1
  %b136 = add nsw i32 %b448, -7
  %.not138 = icmp slt i32 %b136, %f4.s0.v4.min.s
  %a133 = select i1 %.not138, i32 %b136, i32 %a134
  %292 = tail call i32 @llvm.smin.i32(i32 %b135, i32 %a133)
  %293 = shl nsw i32 %292, 1
  %a132 = add nsw i32 %293, -1
  %b134 = shl nsw i32 %b135, 1
  %b133 = or i32 %b134, 1
  %.not139 = icmp slt i32 %b133, %293
  %a130 = select i1 %.not139, i32 %b133, i32 %a132
  %b132 = add nsw i32 %b134, 2
  %a129 = tail call i32 @llvm.smin.i32(i32 %b132, i32 %a130)
  %a128 = tail call i32 @llvm.smin.i32(i32 %b89, i32 %a129)
  %f2.v4.min_realized = tail call i32 @llvm.smin.i32(i32 %a87, i32 %a128)
  %294 = sub nsw i32 %b448, %f72.s0.v4.min.s
  %295 = add nsw i32 %294, 1
  %296 = and i32 %295, -32
  %297 = add nsw i32 %f72.s0.v4.min.s, 30
  %a136 = add i32 %297, %296
  %t1938 = tail call i32 @llvm.smin.i32(i32 %b448, i32 %a136)
  %298 = sub nsw i32 %b448, %f4.s0.v4.min.s
  %299 = add nsw i32 %298, 1
  %300 = and i32 %299, -8
  %301 = add nsw i32 %f4.s0.v4.min.s, 6
  %a154 = add i32 %301, %300
  %302 = tail call i32 @llvm.smin.i32(i32 %b448, i32 %a154)
  %303 = shl nsw i32 %302, 1
  %a153 = add nsw i32 %303, 2
  %304 = shl nsw i32 %t1938, 1
  %b155 = add nsw i32 %304, -1
  %.not140 = icmp slt i32 %a153, %304
  %a152 = select i1 %.not140, i32 %b155, i32 %a153
  %a151 = tail call i32 @llvm.smax.i32(i32 %a152, i32 %304)
  %b153 = or i32 %304, 1
  %a150 = tail call i32 @llvm.smax.i32(i32 %a151, i32 %b153)
  %b152 = add nsw i32 %304, 2
  %b150 = tail call i32 @llvm.smax.i32(i32 %a150, i32 %b152)
  %b148 = tail call i32 @llvm.smax.i32(i32 %b94, i32 %b150)
  %305 = tail call i32 @llvm.smax.i32(i32 %a92, i32 %b148)
  %a155 = add nsw i32 %f72.s0.v3.min.s, -1
  %b157 = add nsw i32 %b465, -7
  %.not141 = icmp slt i32 %b157, %f72.s0.v3.min.s
  %b165 = select i1 %.not141, i32 %b157, i32 %a155
  %a164 = add nsw i32 %f4.s0.v3.min.s, -1
  %.not142 = icmp slt i32 %b157, %f4.s0.v3.min.s
  %a163 = select i1 %.not142, i32 %b157, i32 %a164
  %306 = tail call i32 @llvm.smin.i32(i32 %b165, i32 %a163)
  %307 = shl nsw i32 %306, 1
  %a162 = add nsw i32 %307, -1
  %b164 = shl nsw i32 %b165, 1
  %b163 = or i32 %b164, 1
  %.not143 = icmp slt i32 %b163, %307
  %a160 = select i1 %.not143, i32 %b163, i32 %a162
  %b162 = add nsw i32 %b164, 2
  %a159 = tail call i32 @llvm.smin.i32(i32 %b162, i32 %a160)
  %b161 = add nsw i32 %b164, -1
  %a158 = tail call i32 @llvm.smin.i32(i32 %b161, i32 %a159)
  %308 = icmp sgt i32 %126, 0
  %a165 = select i1 %308, i32 %a286, i32 %127
  %b160 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %a165)
  %b159 = tail call i32 @llvm.smin.i32(i32 %b160, i32 %a158)
  %a156 = tail call i32 @llvm.smin.i32(i32 %b159, i32 %b74)
  %f2.v3.min_realized = tail call i32 @llvm.smin.i32(i32 %a72, i32 %a156)
  %309 = sub i32 1, %f72.s0.v3.min.s
  %310 = add i32 %309, %b465
  %311 = and i32 %310, -8
  %312 = add nsw i32 %f72.s0.v3.min.s, 6
  %a168 = add i32 %312, %311
  %t1943 = tail call i32 @llvm.smin.i32(i32 %b465, i32 %a168)
  %313 = sub i32 1, %f4.s0.v3.min.s
  %314 = add i32 %313, %b465
  %315 = and i32 %314, -8
  %316 = add nsw i32 %f4.s0.v3.min.s, 6
  %a191 = add i32 %316, %315
  %317 = tail call i32 @llvm.smin.i32(i32 %b465, i32 %a191)
  %318 = shl nsw i32 %317, 1
  %a190 = add nsw i32 %318, 2
  %319 = shl nsw i32 %t1943, 1
  %b192 = add nsw i32 %319, -1
  %.not144 = icmp slt i32 %a190, %319
  %a189 = select i1 %.not144, i32 %b192, i32 %a190
  %a188 = tail call i32 @llvm.smax.i32(i32 %a189, i32 %319)
  %b190 = or i32 %319, 1
  %a187 = tail call i32 @llvm.smax.i32(i32 %a188, i32 %b190)
  %b189 = add nsw i32 %319, 2
  %a186 = tail call i32 @llvm.smax.i32(i32 %a187, i32 %b189)
  %320 = and i32 %local_laplacian.extent.0.required.s, -8
  %a192 = add nsw i32 %320, %b74
  %b194 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %127)
  %321 = tail call i32 @llvm.smin.i32(i32 %b194, i32 %a192)
  %b188 = add nsw i32 %321, 7
  %b186 = tail call i32 @llvm.smax.i32(i32 %a186, i32 %b188)
  %b184 = tail call i32 @llvm.smax.i32(i32 %b79, i32 %b186)
  %322 = tail call i32 @llvm.smax.i32(i32 %a77, i32 %b184)
  %f2.v3.extent_realized.s = sub nsw i32 %322, %f2.v3.min_realized
  %f2.v4.extent_realized.s = sub i32 1, %f2.v4.min_realized
  %323 = add i32 %f2.v4.extent_realized.s, %305
  %324 = zext i32 %323 to i64
  %325 = add nsw i32 %f2.v3.extent_realized.s, 1
  %326 = zext i32 %325 to i64
  %327 = shl nuw nsw i64 %326, 2
  %328 = mul i64 %327, %324
  %329 = icmp ult i64 %328, 2147483648
  %330 = and i64 %327, 4294967292
  %331 = mul nuw i64 %330, %324
  %332 = lshr i64 %331, 32
  %333 = lshr i64 %326, 30
  %334 = mul nuw nsw i64 %333, %324
  %335 = add nuw nsw i64 %332, %334
  %336 = icmp ult i64 %335, 4294967296
  %337 = and i1 %329, %336
  br i1 %337, label %"assert succeeded104", label %"assert failed103", !prof !5

"assert failed103":                               ; preds = %"consume f0"
  %338 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.10, i64 %328, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded104":                            ; preds = %"consume f0"
  %339 = add nuw nsw i64 %328, 4
  %340 = tail call ptr @halide_malloc(ptr null, i64 %339)
  %.not516 = icmp eq ptr %340, null
  br i1 %.not516, label %"assert failed105", label %"produce f2", !prof !4

"assert failed105":                               ; preds = %"assert succeeded104"
  %341 = tail call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f2":                                     ; preds = %"assert succeeded104"
  %342 = sub nsw i32 %129, %a145
  %343 = add nsw i32 %342, 31
  %a195 = lshr i32 %343, 5
  %344 = icmp sgt i32 %342, 0
  %345 = select i1 %344, i32 %a195, i32 0
  %b196 = add nsw i32 %133, 1
  %.not145 = icmp slt i32 %133, %345
  %f2.s0.v4.v4.prologue = select i1 %.not145, i32 %b196, i32 %345
  %346 = sub nsw i32 %130, %a145
  %347 = ashr i32 %346, 5
  %a200 = add nsw i32 %347, -1
  %348 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %b90)
  %349 = sub nsw i32 %348, %a145
  %b202 = ashr i32 %349, 5
  %.not146 = icmp slt i32 %b202, %347
  %a199 = select i1 %.not146, i32 %b202, i32 %a200
  %350 = tail call i32 @llvm.smin.i32(i32 %133, i32 %a199)
  %b198 = add nsw i32 %350, 1
  %f2.s0.v4.v4.epilogue = tail call i32 @llvm.smax.i32(i32 %f2.s0.v4.v4.prologue, i32 %b198)
  store i32 %b185, ptr %12, align 8
  %351 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 1
  store i32 %a181, ptr %351, align 4
  %352 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 2
  store i32 %b149, ptr %352, align 8
  %353 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 3
  store i32 %a145, ptr %353, align 4
  %354 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 4
  store i32 %f2.s0.v4.v4.epilogue, ptr %354, align 8
  %355 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 5
  store i32 %f2.s0.v4.v4.prologue, ptr %355, align 4
  %356 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 6
  store i32 %f2.v3.extent_realized.s, ptr %356, align 8
  %357 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 7
  store i32 %f2.v3.min_realized, ptr %357, align 4
  %358 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 8
  store i32 %f2.v4.min_realized, ptr %358, align 8
  %359 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 9
  store i32 %input.extent.0, ptr %359, align 4
  %360 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 10
  %361 = shufflevector <2 x i32> %16, <2 x i32> %21, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %361, ptr %360, align 8
  %362 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 14
  store i32 %b108, ptr %362, align 8
  %363 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 15
  store i32 %input.stride.1, ptr %363, align 4
  %364 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 16
  store i32 %input.stride.2, ptr %364, align 8
  %365 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 17
  store ptr %340, ptr %365, align 8
  %366 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 18
  store ptr null, ptr %366, align 8
  %367 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 19
  store ptr %input.host, ptr %367, align 8
  %368 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 20
  store ptr %input.buffer, ptr %368, align 8
  %369 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f2.s0.v4.v4, i32 0, i32 %b196, ptr nonnull %12)
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %"consume f2", label %call_destructor.exit210.thread374, !prof !5

"consume f2":                                     ; preds = %"produce f2"
  %b252 = add nuw nsw i32 %115, 1
  %a249 = call i32 @llvm.smax.i32(i32 %a742, i32 %b252)
  %f4.v6.extent_realized.s = sub nsw i32 %a249, %111
  %371 = ashr i32 %b89, 1
  %a256 = add nsw i32 %371, -1
  %372 = add nsw i32 %b89, 3
  %b258 = ashr i32 %372, 1
  %.not147 = icmp slt i32 %b258, %371
  %a255 = select i1 %.not147, i32 %b258, i32 %a256
  %b259 = add nsw i32 %b539, -7
  %373 = call i32 @llvm.smin.i32(i32 %b259, i32 %a392)
  %374 = shl nsw i32 %373, 1
  %b257 = add nsw i32 %374, -1
  %a254 = call i32 @llvm.smin.i32(i32 %b257, i32 %a255)
  %a253 = call i32 @llvm.smin.i32(i32 %a256, i32 %a254)
  %a252 = call i32 @llvm.smin.i32(i32 %371, i32 %a253)
  %f4.v4.min_realized = call i32 @llvm.smin.i32(i32 %a133, i32 %a252)
  %375 = sub nsw i32 %b539, %a392
  %376 = ashr i32 %375, 3
  %377 = and i32 %375, -8
  %378 = add nsw i32 %a392, 7
  %a271 = add i32 %378, %377
  %379 = call i32 @llvm.smin.i32(i32 %b539, i32 %a271)
  %380 = shl nsw i32 %379, 1
  %a270 = add nsw i32 %380, 2
  %381 = ashr i32 %b94, 1
  %b272 = add nsw i32 %381, 1
  %a269 = call i32 @llvm.smax.i32(i32 %a270, i32 %b272)
  %b269 = call i32 @llvm.smax.i32(i32 %a269, i32 %381)
  %382 = call i32 @llvm.smax.i32(i32 %302, i32 %b269)
  %b280 = add nsw i32 %b556, -7
  %383 = call i32 @llvm.smin.i32(i32 %b280, i32 %a416)
  %384 = shl nsw i32 %383, 1
  %a277 = add nsw i32 %384, -1
  %385 = ashr i32 %b74, 1
  %a279 = add nsw i32 %385, -1
  %386 = ashr i32 %b79, 1
  %b281 = add nsw i32 %386, -6
  %.not148 = icmp slt i32 %b281, %385
  %b279 = select i1 %.not148, i32 %b281, i32 %a279
  %.not149 = icmp slt i32 %b279, %384
  %a276 = select i1 %.not149, i32 %b279, i32 %a277
  %387 = ashr i32 %b160, 1
  %b278 = add nsw i32 %387, -1
  %a275 = call i32 @llvm.smin.i32(i32 %b278, i32 %a276)
  %a274 = call i32 @llvm.smin.i32(i32 %387, i32 %a275)
  %f4.v3.min_realized = call i32 @llvm.smin.i32(i32 %a163, i32 %a274)
  %388 = sub nsw i32 %b556, %a416
  %389 = and i32 %388, -8
  %390 = add nsw i32 %a416, 7
  %a299 = add i32 %390, %389
  %391 = call i32 @llvm.smin.i32(i32 %b556, i32 %a299)
  %392 = shl nsw i32 %391, 1
  %a298 = add nsw i32 %392, 2
  %393 = sub nsw i32 2, %385
  %394 = add i32 %393, %386
  %395 = and i32 %394, -8
  %396 = add nsw i32 %395, %385
  %a300 = add nsw i32 %396, -1
  %.not150 = icmp slt i32 %b281, %396
  %397 = select i1 %.not150, i32 %b281, i32 %a300
  %b300 = add nsw i32 %397, 7
  %a297 = call i32 @llvm.smax.i32(i32 %a298, i32 %b300)
  %398 = add nsw i32 %321, 9
  %b299 = ashr i32 %398, 1
  %a296 = call i32 @llvm.smax.i32(i32 %a297, i32 %b299)
  %b298 = ashr i32 %b188, 1
  %b296 = call i32 @llvm.smax.i32(i32 %a296, i32 %b298)
  %399 = call i32 @llvm.smax.i32(i32 %317, i32 %b296)
  %f4.v3.extent_realized.s = sub nsw i32 %399, %f4.v3.min_realized
  %400 = add nsw i32 %f4.v6.extent_realized.s, 1
  %401 = add nsw i32 %f4.v3.extent_realized.s, 1
  %f4.stride.1 = mul nsw i32 %401, %400
  %f4.v4.extent_realized.s = sub i32 1, %f4.v4.min_realized
  %402 = add i32 %f4.v4.extent_realized.s, %382
  %403 = zext i32 %402 to i64
  %404 = zext i32 %401 to i64
  %405 = shl nuw nsw i64 %404, 2
  %406 = and i64 %405, 4294967292
  %407 = mul nuw i64 %406, %403
  %408 = lshr i64 %407, 32
  %409 = lshr i64 %404, 30
  %410 = mul nuw nsw i64 %409, %403
  %t3067 = add nuw nsw i64 %408, %410
  %t3068 = mul i64 %405, %403
  %411 = zext i32 %400 to i64
  %412 = mul i64 %t3068, %411
  %413 = icmp ult i64 %412, 2147483648
  %414 = and i64 %t3068, 4294967292
  %415 = mul nuw i64 %414, %411
  %416 = lshr i64 %415, 32
  %417 = mul i64 %t3067, %411
  %418 = add i64 %417, %416
  %419 = or i64 %418, %t3067
  %420 = icmp ult i64 %419, 4294967296
  %421 = and i1 %413, %420
  br i1 %421, label %"assert succeeded110", label %"assert failed109", !prof !5

"assert failed109":                               ; preds = %"consume f2"
  %422 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.11, i64 %412, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded110":                            ; preds = %"consume f2"
  %423 = add nuw nsw i64 %412, 4
  %424 = call ptr @halide_malloc(ptr null, i64 %423)
  %.not517 = icmp eq ptr %424, null
  br i1 %.not517, label %"assert failed111", label %"produce f4", !prof !4

"assert failed111":                               ; preds = %"assert succeeded110"
  %425 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f4":                                     ; preds = %"assert succeeded110"
  %f4.s0.v6.loop_extent.s = sub nsw i32 %115, %111
  %426 = add nsw i32 %298, 9
  %427 = ashr i32 %426, 3
  store float %beta, ptr %11, align 8
  %428 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 1
  store i32 %b121, ptr %428, align 4
  %429 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 2
  store i32 %a772, ptr %429, align 8
  %430 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 3
  store i32 %f2.v3.extent_realized.s, ptr %430, align 4
  %431 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 4
  store i32 %f2.v3.min_realized, ptr %431, align 8
  %432 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 5
  store i32 %f2.v4.min_realized, ptr %432, align 4
  %433 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 6
  store i32 %b465, ptr %433, align 8
  %434 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 7
  store i32 %f4.s0.v3.min.s, ptr %434, align 4
  %435 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 8
  store i32 %b448, ptr %435, align 8
  %436 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 9
  store i32 %f4.s0.v4.min.s, ptr %436, align 4
  %437 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 10
  store i32 %f4.s0.v6.loop_extent.s, ptr %437, align 8
  %438 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 11
  store i32 %f4.stride.1, ptr %438, align 4
  %439 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 12
  store i32 %f4.v3.extent_realized.s, ptr %439, align 8
  %440 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 13
  store i32 %f4.v3.min_realized, ptr %440, align 4
  %441 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 14
  store i32 %f4.v4.min_realized, ptr %441, align 8
  %442 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 15
  store i32 %levels, ptr %442, align 4
  %443 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 16
  store ptr %209, ptr %443, align 8
  %444 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 17
  store ptr null, ptr %444, align 8
  %445 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 18
  store ptr %340, ptr %445, align 8
  %446 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 19
  store ptr null, ptr %446, align 8
  %447 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 20
  store ptr %424, ptr %447, align 8
  %448 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 21
  store ptr null, ptr %448, align 8
  %449 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f4.s0.v4.v4, i32 0, i32 %427, ptr nonnull %11)
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %"consume f4", label %call_destructor.exit210.thread374, !prof !5

"consume f4":                                     ; preds = %"produce f4"
  %b385 = add nsw i32 %b624, -7
  %451 = call i32 @llvm.smin.i32(i32 %b385, i32 %a485)
  %452 = shl nsw i32 %451, 1
  %a382 = add nsw i32 %452, -1
  %453 = add nsw i32 %b89, -6
  %b384 = ashr i32 %453, 2
  %.not151 = icmp slt i32 %b384, %452
  %a381 = select i1 %.not151, i32 %b384, i32 %a382
  %454 = ashr i32 %a255, 1
  %b383 = add nsw i32 %454, -1
  %a380 = call i32 @llvm.smin.i32(i32 %b383, i32 %a381)
  %a379 = call i32 @llvm.smin.i32(i32 %454, i32 %a380)
  %f5.v4.min_realized = call i32 @llvm.smin.i32(i32 %373, i32 %a379)
  %455 = sub nsw i32 %b624, %a485
  %456 = ashr i32 %455, 3
  %457 = and i32 %455, -8
  %458 = add nsw i32 %a485, 7
  %a397 = add i32 %458, %457
  %459 = call i32 @llvm.smin.i32(i32 %b624, i32 %a397)
  %460 = shl nsw i32 %459, 1
  %a396 = add nsw i32 %460, 2
  %461 = add nsw i32 %b94, 6
  %b398 = ashr i32 %461, 2
  %a395 = call i32 @llvm.smax.i32(i32 %a396, i32 %b398)
  %462 = add nsw i32 %b94, 2
  %b397 = ashr i32 %462, 2
  %b395 = call i32 @llvm.smax.i32(i32 %a395, i32 %b397)
  %463 = call i32 @llvm.smax.i32(i32 %379, i32 %b395)
  %b406 = add nsw i32 %b641, -7
  %464 = call i32 @llvm.smin.i32(i32 %b406, i32 %a509)
  %465 = shl nsw i32 %464, 1
  %a403 = add nsw i32 %465, -1
  %a405 = add nsw i32 %b74, -6
  %b407 = add nsw i32 %b79, -22
  %466 = call i32 @llvm.smin.i32(i32 %b407, i32 %a405)
  %b405 = ashr i32 %466, 2
  %.not152 = icmp slt i32 %b405, %465
  %a402 = select i1 %.not152, i32 %b405, i32 %a403
  %467 = ashr i32 %b279, 1
  %b404 = add nsw i32 %467, -1
  %a401 = call i32 @llvm.smin.i32(i32 %b404, i32 %a402)
  %a400 = call i32 @llvm.smin.i32(i32 %467, i32 %a401)
  %f5.v3.min_realized = call i32 @llvm.smin.i32(i32 %383, i32 %a400)
  %468 = sub nsw i32 %b641, %a509
  %469 = and i32 %468, -8
  %470 = add nsw i32 %a509, 7
  %a422 = add i32 %470, %469
  %471 = call i32 @llvm.smin.i32(i32 %b641, i32 %a422)
  %472 = shl nsw i32 %471, 1
  %a421 = add nsw i32 %472, 2
  %473 = ashr i32 %a405, 2
  %474 = add nsw i32 %b79, 6
  %475 = ashr i32 %474, 2
  %476 = sub nsw i32 %475, %473
  %477 = and i32 %476, -8
  %a423 = add nsw i32 %477, %473
  %b425 = ashr i32 %b407, 2
  %478 = call i32 @llvm.smin.i32(i32 %b425, i32 %a423)
  %b423 = add nsw i32 %478, 7
  %a420 = call i32 @llvm.smax.i32(i32 %a421, i32 %b423)
  %479 = add nsw i32 %397, 9
  %b422 = ashr i32 %479, 1
  %a419 = call i32 @llvm.smax.i32(i32 %a420, i32 %b422)
  %b421 = ashr i32 %b300, 1
  %b419 = call i32 @llvm.smax.i32(i32 %a419, i32 %b421)
  %480 = call i32 @llvm.smax.i32(i32 %391, i32 %b419)
  %f5.v3.extent_realized.s = sub nsw i32 %480, %f5.v3.min_realized
  %481 = add nsw i32 %f5.v3.extent_realized.s, 1
  %f5.stride.1 = mul nsw i32 %481, %400
  %f5.v4.extent_realized.s = sub i32 1, %f5.v4.min_realized
  %482 = add i32 %f5.v4.extent_realized.s, %463
  %483 = zext i32 %482 to i64
  %484 = zext i32 %481 to i64
  %485 = shl nuw nsw i64 %484, 2
  %486 = and i64 %485, 4294967292
  %487 = mul nuw i64 %486, %483
  %488 = lshr i64 %487, 32
  %489 = lshr i64 %484, 30
  %490 = mul nuw nsw i64 %489, %483
  %t3069 = add nuw nsw i64 %488, %490
  %t3070 = mul i64 %485, %483
  %491 = mul i64 %t3070, %411
  %492 = icmp ult i64 %491, 2147483648
  %493 = and i64 %t3070, 4294967292
  %494 = mul nuw i64 %493, %411
  %495 = lshr i64 %494, 32
  %496 = mul i64 %t3069, %411
  %497 = add i64 %496, %495
  %498 = or i64 %497, %t3069
  %499 = icmp ult i64 %498, 4294967296
  %500 = and i1 %492, %499
  br i1 %500, label %"assert succeeded116", label %"assert failed115", !prof !5

"assert failed115":                               ; preds = %"consume f4"
  %501 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.12, i64 %491, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded116":                            ; preds = %"consume f4"
  %502 = add nuw nsw i64 %491, 4
  %503 = call ptr @halide_malloc(ptr null, i64 %502)
  %.not518 = icmp eq ptr %503, null
  br i1 %.not518, label %"assert failed117", label %"produce f5", !prof !4

"assert failed117":                               ; preds = %"assert succeeded116"
  %504 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f5":                                     ; preds = %"assert succeeded116"
  %505 = add nsw i32 %376, 1
  store i32 %a772, ptr %10, align 8
  %506 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 1
  store i32 %f4.stride.1, ptr %506, align 4
  %507 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 2
  store i32 %f4.v3.extent_realized.s, ptr %507, align 8
  %508 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 3
  store i32 %f4.v3.min_realized, ptr %508, align 4
  %509 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 4
  store i32 %f4.v4.min_realized, ptr %509, align 8
  %510 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 5
  store i32 %b556, ptr %510, align 4
  %511 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 6
  store i32 %a416, ptr %511, align 8
  %512 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 7
  store i32 %b539, ptr %512, align 4
  %513 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 8
  store i32 %a392, ptr %513, align 8
  %514 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %514, align 4
  %515 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 10
  store i32 %f5.stride.1, ptr %515, align 8
  %516 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 11
  store i32 %f5.v3.extent_realized.s, ptr %516, align 4
  %517 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 12
  store i32 %f5.v3.min_realized, ptr %517, align 8
  %518 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 13
  store i32 %f5.v4.min_realized, ptr %518, align 4
  %519 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 14
  store ptr %424, ptr %519, align 8
  %520 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 15
  store ptr null, ptr %520, align 8
  %521 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 16
  store ptr %503, ptr %521, align 8
  %522 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 17
  store ptr null, ptr %522, align 8
  %523 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f5.s0.v4.v4, i32 0, i32 %505, ptr nonnull %10)
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %"consume f5", label %call_destructor.exit210.thread374, !prof !5

"consume f5":                                     ; preds = %"produce f5"
  %b440 = add nsw i32 %b539, -31
  %525 = call i32 @llvm.smin.i32(i32 %b440, i32 %a535)
  %526 = shl nsw i32 %525, 1
  %b438 = add nsw i32 %526, -1
  %a435 = call i32 @llvm.smin.i32(i32 %b438, i32 %a255)
  %f72.v4.min_realized = call i32 @llvm.smin.i32(i32 %b135, i32 %a435)
  %527 = sub nsw i32 %b539, %a535
  %528 = ashr i32 %527, 5
  %529 = and i32 %527, -32
  %530 = add nsw i32 %a535, 31
  %a448 = add i32 %530, %529
  %531 = call i32 @llvm.smin.i32(i32 %b539, i32 %a448)
  %532 = shl nsw i32 %531, 1
  %a447 = add nsw i32 %532, 2
  %b447 = call i32 @llvm.smax.i32(i32 %a447, i32 %b272)
  %533 = call i32 @llvm.smax.i32(i32 %t1938, i32 %b447)
  %534 = call i32 @llvm.smin.i32(i32 %b280, i32 %a552)
  %535 = shl nsw i32 %534, 1
  %a451 = add nsw i32 %535, -1
  %.not153 = icmp slt i32 %b279, %535
  %a450 = select i1 %.not153, i32 %b279, i32 %a451
  %f72.v3.min_realized = call i32 @llvm.smin.i32(i32 %b165, i32 %a450)
  %536 = sub nsw i32 %b556, %a552
  %537 = and i32 %536, -8
  %538 = add nsw i32 %a552, 7
  %a465 = add i32 %538, %537
  %539 = call i32 @llvm.smin.i32(i32 %b556, i32 %a465)
  %540 = shl nsw i32 %539, 1
  %a464 = add nsw i32 %540, 2
  %b464 = call i32 @llvm.smax.i32(i32 %a464, i32 %b300)
  %541 = call i32 @llvm.smax.i32(i32 %t1943, i32 %b464)
  %f72.v3.extent_realized.s = sub nsw i32 %541, %f72.v3.min_realized
  %f72.v4.extent_realized.s = sub i32 1, %f72.v4.min_realized
  %542 = add i32 %f72.v4.extent_realized.s, %533
  %543 = zext i32 %542 to i64
  %544 = add nsw i32 %f72.v3.extent_realized.s, 1
  %545 = zext i32 %544 to i64
  %546 = shl nuw nsw i64 %545, 2
  %547 = mul i64 %546, %543
  %548 = icmp ult i64 %547, 2147483648
  %549 = and i64 %546, 4294967292
  %550 = mul nuw i64 %549, %543
  %551 = lshr i64 %550, 32
  %552 = lshr i64 %545, 30
  %553 = mul nuw nsw i64 %552, %543
  %554 = add nuw nsw i64 %551, %553
  %555 = icmp ult i64 %554, 4294967296
  %556 = and i1 %548, %555
  br i1 %556, label %"assert succeeded122", label %"assert failed121", !prof !5

"assert failed121":                               ; preds = %"consume f5"
  %557 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.13, i64 %547, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded122":                            ; preds = %"consume f5"
  %558 = add nuw nsw i64 %547, 4
  %559 = call ptr @halide_malloc(ptr null, i64 %558)
  %.not519 = icmp eq ptr %559, null
  br i1 %.not519, label %"assert failed123", label %"produce f72", !prof !4

"assert failed123":                               ; preds = %"assert succeeded122"
  %560 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f72":                                    ; preds = %"assert succeeded122"
  %561 = add nsw i32 %294, 33
  %562 = ashr i32 %561, 5
  store i32 %f2.v3.extent_realized.s, ptr %9, align 8
  %563 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 1
  store i32 %f2.v3.min_realized, ptr %563, align 4
  %564 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 2
  store i32 %f2.v4.min_realized, ptr %564, align 8
  %565 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 3
  store i32 %b465, ptr %565, align 4
  %566 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 4
  store i32 %f72.s0.v3.min.s, ptr %566, align 8
  %567 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 5
  store i32 %b448, ptr %567, align 4
  %568 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 6
  store i32 %f72.s0.v4.min.s, ptr %568, align 8
  %569 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 7
  store i32 %f72.v3.extent_realized.s, ptr %569, align 4
  %570 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 8
  store i32 %f72.v3.min_realized, ptr %570, align 8
  %571 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 9
  store i32 %f72.v4.min_realized, ptr %571, align 4
  %572 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 10
  store ptr %340, ptr %572, align 8
  %573 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 11
  store ptr null, ptr %573, align 8
  %574 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 12
  store ptr %559, ptr %574, align 8
  %575 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 13
  store ptr null, ptr %575, align 8
  %576 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f72.s0.v4.v4, i32 0, i32 %562, ptr nonnull %9)
  %577 = icmp eq i32 %576, 0
  br i1 %577, label %"consume f72", label %call_destructor.exit210.thread374, !prof !5

"consume f72":                                    ; preds = %"produce f72"
  %b480 = add nsw i32 %b695, -7
  %578 = call i32 @llvm.smin.i32(i32 %b480, i32 %a574)
  %579 = shl nsw i32 %578, 1
  %a477 = add nsw i32 %579, -1
  %580 = add nsw i32 %b89, -14
  %b479 = ashr i32 %580, 3
  %.not154 = icmp slt i32 %b479, %579
  %a476 = select i1 %.not154, i32 %b479, i32 %a477
  %b478 = ashr i32 %453, 3
  %a475 = call i32 @llvm.smin.i32(i32 %b478, i32 %a476)
  %f6.v4.min_realized = call i32 @llvm.smin.i32(i32 %451, i32 %a475)
  %581 = sub nsw i32 %b695, %a574
  %582 = ashr i32 %581, 3
  %583 = and i32 %581, -8
  %584 = add nsw i32 %a574, 7
  %a490 = add i32 %584, %583
  %585 = call i32 @llvm.smin.i32(i32 %b695, i32 %a490)
  %586 = shl nsw i32 %585, 1
  %a489 = add nsw i32 %586, 2
  %587 = add nsw i32 %b94, 14
  %b491 = ashr i32 %587, 3
  %a488 = call i32 @llvm.smax.i32(i32 %a489, i32 %b491)
  %b490 = ashr i32 %461, 3
  %b488 = call i32 @llvm.smax.i32(i32 %a488, i32 %b490)
  %588 = call i32 @llvm.smax.i32(i32 %459, i32 %b488)
  %b499 = add nsw i32 %b709, -7
  %589 = call i32 @llvm.smin.i32(i32 %b499, i32 %a595)
  %590 = shl nsw i32 %589, 1
  %a496 = add nsw i32 %590, -1
  %a498 = add nsw i32 %b74, -14
  %b500 = add nsw i32 %b79, -42
  %591 = call i32 @llvm.smin.i32(i32 %b500, i32 %a498)
  %b498 = ashr i32 %591, 3
  %.not155 = icmp slt i32 %b498, %590
  %a495 = select i1 %.not155, i32 %b498, i32 %a496
  %592 = ashr i32 %466, 3
  %b497 = add nsw i32 %592, -1
  %a494 = call i32 @llvm.smin.i32(i32 %b497, i32 %a495)
  %a493 = call i32 @llvm.smin.i32(i32 %592, i32 %a494)
  %f6.v3.min_realized = call i32 @llvm.smin.i32(i32 %464, i32 %a493)
  %593 = sub nsw i32 %b709, %a595
  %594 = and i32 %593, -8
  %595 = add nsw i32 %a595, 7
  %a515 = add i32 %595, %594
  %596 = call i32 @llvm.smin.i32(i32 %b709, i32 %a515)
  %597 = shl nsw i32 %596, 1
  %a514 = add nsw i32 %597, 2
  %598 = ashr i32 %a498, 3
  %599 = add nsw i32 %b79, 14
  %600 = ashr i32 %599, 3
  %601 = sub nsw i32 %600, %598
  %602 = and i32 %601, -8
  %a516 = add nsw i32 %602, %598
  %b518 = ashr i32 %b500, 3
  %603 = call i32 @llvm.smin.i32(i32 %b518, i32 %a516)
  %b516 = add nsw i32 %603, 7
  %a513 = call i32 @llvm.smax.i32(i32 %a514, i32 %b516)
  %604 = add nsw i32 %478, 9
  %b515 = ashr i32 %604, 1
  %a512 = call i32 @llvm.smax.i32(i32 %a513, i32 %b515)
  %b514 = ashr i32 %b423, 1
  %b512 = call i32 @llvm.smax.i32(i32 %a512, i32 %b514)
  %605 = call i32 @llvm.smax.i32(i32 %471, i32 %b512)
  %f6.v3.extent_realized.s = sub nsw i32 %605, %f6.v3.min_realized
  %606 = add nsw i32 %f6.v3.extent_realized.s, 1
  %f6.stride.1 = mul nsw i32 %606, %400
  %f6.v4.extent_realized.s = sub i32 1, %f6.v4.min_realized
  %607 = add i32 %f6.v4.extent_realized.s, %588
  %608 = zext i32 %607 to i64
  %609 = zext i32 %606 to i64
  %610 = shl nuw nsw i64 %609, 2
  %611 = and i64 %610, 4294967292
  %612 = mul nuw i64 %611, %608
  %613 = lshr i64 %612, 32
  %614 = lshr i64 %609, 30
  %615 = mul nuw nsw i64 %614, %608
  %t3071 = add nuw nsw i64 %613, %615
  %t3072 = mul i64 %610, %608
  %616 = mul i64 %t3072, %411
  %617 = icmp ult i64 %616, 2147483648
  %618 = and i64 %t3072, 4294967292
  %619 = mul nuw i64 %618, %411
  %620 = lshr i64 %619, 32
  %621 = mul i64 %t3071, %411
  %622 = add i64 %621, %620
  %623 = or i64 %622, %t3071
  %624 = icmp ult i64 %623, 4294967296
  %625 = and i1 %617, %624
  br i1 %625, label %"assert succeeded128", label %"assert failed127", !prof !5

"assert failed127":                               ; preds = %"consume f72"
  %626 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.14, i64 %616, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded128":                            ; preds = %"consume f72"
  %627 = add nuw nsw i64 %616, 4
  %628 = call ptr @halide_malloc(ptr null, i64 %627)
  %.not520 = icmp eq ptr %628, null
  br i1 %.not520, label %"assert failed129", label %"produce f6", !prof !4

"assert failed129":                               ; preds = %"assert succeeded128"
  %629 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f6":                                     ; preds = %"assert succeeded128"
  %630 = add nsw i32 %456, 1
  store i32 %a772, ptr %8, align 8
  %631 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 1
  store i32 %f5.stride.1, ptr %631, align 4
  %632 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 2
  store i32 %f5.v3.extent_realized.s, ptr %632, align 8
  %633 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 3
  store i32 %f5.v3.min_realized, ptr %633, align 4
  %634 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 4
  store i32 %f5.v4.min_realized, ptr %634, align 8
  %635 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 5
  store i32 %b641, ptr %635, align 4
  %636 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 6
  store i32 %a509, ptr %636, align 8
  %637 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 7
  store i32 %b624, ptr %637, align 4
  %638 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 8
  store i32 %a485, ptr %638, align 8
  %639 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %639, align 4
  %640 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 10
  store i32 %f6.stride.1, ptr %640, align 8
  %641 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 11
  store i32 %f6.v3.extent_realized.s, ptr %641, align 4
  %642 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 12
  store i32 %f6.v3.min_realized, ptr %642, align 8
  %643 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 13
  store i32 %f6.v4.min_realized, ptr %643, align 4
  %644 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 14
  store ptr %503, ptr %644, align 8
  %645 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 15
  store ptr null, ptr %645, align 8
  %646 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 16
  store ptr %628, ptr %646, align 8
  %647 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 17
  store ptr null, ptr %647, align 8
  %648 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f6.s0.v4.v4, i32 0, i32 %630, ptr nonnull %8)
  %649 = icmp eq i32 %648, 0
  br i1 %649, label %"consume f6", label %call_destructor.exit210.thread374, !prof !5

"consume f6":                                     ; preds = %"produce f6"
  %b532 = add nsw i32 %b624, -31
  %650 = call i32 @llvm.smin.i32(i32 %b532, i32 %a620)
  %651 = shl nsw i32 %650, 1
  %a529 = add nsw i32 %651, -1
  %.not156 = icmp slt i32 %b384, %651
  %a528 = select i1 %.not156, i32 %b384, i32 %a529
  %f73.v4.min_realized = call i32 @llvm.smin.i32(i32 %525, i32 %a528)
  %652 = sub nsw i32 %b624, %a620
  %653 = ashr i32 %652, 5
  %654 = and i32 %652, -32
  %655 = add nsw i32 %a620, 31
  %a539 = add i32 %655, %654
  %656 = call i32 @llvm.smin.i32(i32 %b624, i32 %a539)
  %657 = shl nsw i32 %656, 1
  %a538 = add nsw i32 %657, 2
  %b538 = call i32 @llvm.smax.i32(i32 %a538, i32 %b398)
  %658 = call i32 @llvm.smax.i32(i32 %531, i32 %b538)
  %659 = call i32 @llvm.smin.i32(i32 %b406, i32 %a637)
  %660 = shl nsw i32 %659, 1
  %a542 = add nsw i32 %660, -1
  %.not157 = icmp slt i32 %b405, %660
  %a541 = select i1 %.not157, i32 %b405, i32 %a542
  %f73.v3.min_realized = call i32 @llvm.smin.i32(i32 %534, i32 %a541)
  %661 = sub nsw i32 %b641, %a637
  %662 = and i32 %661, -8
  %663 = add nsw i32 %a637, 7
  %a556 = add i32 %663, %662
  %664 = call i32 @llvm.smin.i32(i32 %b641, i32 %a556)
  %665 = shl nsw i32 %664, 1
  %a555 = add nsw i32 %665, 2
  %b555 = call i32 @llvm.smax.i32(i32 %a555, i32 %b423)
  %666 = call i32 @llvm.smax.i32(i32 %539, i32 %b555)
  %f73.v3.extent_realized.s = sub nsw i32 %666, %f73.v3.min_realized
  %f73.v4.extent_realized.s = sub i32 1, %f73.v4.min_realized
  %667 = add i32 %f73.v4.extent_realized.s, %658
  %668 = zext i32 %667 to i64
  %669 = add nsw i32 %f73.v3.extent_realized.s, 1
  %670 = zext i32 %669 to i64
  %671 = shl nuw nsw i64 %670, 2
  %672 = mul i64 %671, %668
  %673 = icmp ult i64 %672, 2147483648
  %674 = and i64 %671, 4294967292
  %675 = mul nuw i64 %674, %668
  %676 = lshr i64 %675, 32
  %677 = lshr i64 %670, 30
  %678 = mul nuw nsw i64 %677, %668
  %679 = add nuw nsw i64 %676, %678
  %680 = icmp ult i64 %679, 4294967296
  %681 = and i1 %673, %680
  br i1 %681, label %"assert succeeded134", label %"assert failed133", !prof !5

"assert failed133":                               ; preds = %"consume f6"
  %682 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.15, i64 %672, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded134":                            ; preds = %"consume f6"
  %683 = add nuw nsw i64 %672, 4
  %684 = call ptr @halide_malloc(ptr null, i64 %683)
  %.not521 = icmp eq ptr %684, null
  br i1 %.not521, label %"assert failed135", label %"produce f73", !prof !4

"assert failed135":                               ; preds = %"assert succeeded134"
  %685 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f73":                                    ; preds = %"assert succeeded134"
  %686 = add nsw i32 %528, 1
  store i32 %f72.v3.extent_realized.s, ptr %7, align 8
  %687 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 1
  store i32 %f72.v3.min_realized, ptr %687, align 4
  %688 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 2
  store i32 %f72.v4.min_realized, ptr %688, align 8
  %689 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 3
  store i32 %b556, ptr %689, align 4
  %690 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 4
  store i32 %a552, ptr %690, align 8
  %691 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 5
  store i32 %b539, ptr %691, align 4
  %692 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 6
  store i32 %a535, ptr %692, align 8
  %693 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 7
  store i32 %f73.v3.extent_realized.s, ptr %693, align 4
  %694 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 8
  store i32 %f73.v3.min_realized, ptr %694, align 8
  %695 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 9
  store i32 %f73.v4.min_realized, ptr %695, align 4
  %696 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 10
  store ptr %559, ptr %696, align 8
  %697 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 11
  store ptr null, ptr %697, align 8
  %698 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 12
  store ptr %684, ptr %698, align 8
  %699 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 13
  store ptr null, ptr %699, align 8
  %700 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f73.s0.v4.v4, i32 0, i32 %686, ptr nonnull %7)
  %701 = icmp eq i32 %700, 0
  br i1 %701, label %"consume f73", label %call_destructor.exit210.thread374, !prof !5

"consume f73":                                    ; preds = %"produce f73"
  %702 = add nsw i32 %b89, -30
  %b570 = ashr i32 %702, 4
  %.not158 = icmp slt i32 %b570, %87
  %a567 = select i1 %.not158, i32 %b570, i32 %b31
  %b569 = ashr i32 %580, 4
  %a566 = call i32 @llvm.smin.i32(i32 %b569, i32 %a567)
  %f7.v4.min_realized = call i32 @llvm.smin.i32(i32 %578, i32 %a566)
  %703 = add nsw i32 %b94, 30
  %b580 = ashr i32 %703, 4
  %a577 = call i32 @llvm.smax.i32(i32 %b18, i32 %b580)
  %b579 = ashr i32 %587, 4
  %b577 = call i32 @llvm.smax.i32(i32 %a577, i32 %b579)
  %704 = call i32 @llvm.smax.i32(i32 %585, i32 %b577)
  %a585 = add nsw i32 %b74, -30
  %b587 = add nsw i32 %b79, -82
  %705 = call i32 @llvm.smin.i32(i32 %b587, i32 %a585)
  %b586 = ashr i32 %705, 4
  %.not159 = icmp slt i32 %b586, %88
  %a583 = select i1 %.not159, i32 %b586, i32 %b33
  %706 = ashr i32 %591, 4
  %b585 = add nsw i32 %706, -1
  %a582 = call i32 @llvm.smin.i32(i32 %b585, i32 %a583)
  %a581 = call i32 @llvm.smin.i32(i32 %706, i32 %a582)
  %f7.v3.min_realized = call i32 @llvm.smin.i32(i32 %589, i32 %a581)
  %707 = ashr i32 %a585, 4
  %708 = add nsw i32 %b79, 30
  %709 = ashr i32 %708, 4
  %710 = sub nsw i32 %709, %707
  %711 = and i32 %710, -8
  %a601 = add nsw i32 %711, %707
  %b603 = ashr i32 %b587, 4
  %712 = call i32 @llvm.smin.i32(i32 %b603, i32 %a601)
  %b602 = add nsw i32 %712, 7
  %a599 = call i32 @llvm.smax.i32(i32 %b20, i32 %b602)
  %713 = add nsw i32 %603, 9
  %b601 = ashr i32 %713, 1
  %a598 = call i32 @llvm.smax.i32(i32 %a599, i32 %b601)
  %b600 = ashr i32 %b516, 1
  %b598 = call i32 @llvm.smax.i32(i32 %a598, i32 %b600)
  %714 = call i32 @llvm.smax.i32(i32 %596, i32 %b598)
  %f7.v3.extent_realized.s = sub nsw i32 %714, %f7.v3.min_realized
  %715 = add nsw i32 %f7.v3.extent_realized.s, 1
  %f7.stride.1 = mul nsw i32 %715, %400
  %f7.v4.extent_realized.s = sub i32 1, %f7.v4.min_realized
  %716 = add i32 %f7.v4.extent_realized.s, %704
  %717 = zext i32 %716 to i64
  %718 = zext i32 %715 to i64
  %719 = shl nuw nsw i64 %718, 2
  %720 = and i64 %719, 4294967292
  %721 = mul nuw i64 %720, %717
  %722 = lshr i64 %721, 32
  %723 = lshr i64 %718, 30
  %724 = mul nuw nsw i64 %723, %717
  %t3073 = add nuw nsw i64 %722, %724
  %t3074 = mul i64 %719, %717
  %725 = mul i64 %t3074, %411
  %726 = icmp ult i64 %725, 2147483648
  %727 = and i64 %t3074, 4294967292
  %728 = mul nuw i64 %727, %411
  %729 = lshr i64 %728, 32
  %730 = mul i64 %t3073, %411
  %731 = add i64 %730, %729
  %732 = or i64 %731, %t3073
  %733 = icmp ult i64 %732, 4294967296
  %734 = and i1 %726, %733
  br i1 %734, label %"assert succeeded140", label %"assert failed139", !prof !5

"assert failed139":                               ; preds = %"consume f73"
  %735 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.16, i64 %725, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded140":                            ; preds = %"consume f73"
  %736 = add nuw nsw i64 %725, 4
  %737 = call ptr @halide_malloc(ptr null, i64 %736)
  %.not522 = icmp eq ptr %737, null
  br i1 %.not522, label %"assert failed141", label %"produce f7", !prof !4

"assert failed141":                               ; preds = %"assert succeeded140"
  %738 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f7":                                     ; preds = %"assert succeeded140"
  %739 = add nsw i32 %582, 1
  store i32 %a772, ptr %6, align 8
  %740 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 1
  store i32 %f6.stride.1, ptr %740, align 4
  %741 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 2
  store i32 %f6.v3.extent_realized.s, ptr %741, align 8
  %742 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 3
  store i32 %f6.v3.min_realized, ptr %742, align 4
  %743 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 4
  store i32 %f6.v4.min_realized, ptr %743, align 8
  %744 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 5
  store i32 %b709, ptr %744, align 4
  %745 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 6
  store i32 %a595, ptr %745, align 8
  %746 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 7
  store i32 %b695, ptr %746, align 4
  %747 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 8
  store i32 %a574, ptr %747, align 8
  %748 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %748, align 4
  %749 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 10
  store i32 %f7.stride.1, ptr %749, align 8
  %750 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 11
  store i32 %f7.v3.extent_realized.s, ptr %750, align 4
  %751 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 12
  store i32 %f7.v3.min_realized, ptr %751, align 8
  %752 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 13
  store i32 %f7.v4.min_realized, ptr %752, align 4
  %753 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 14
  store ptr %628, ptr %753, align 8
  %754 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 15
  store ptr null, ptr %754, align 8
  %755 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 16
  store ptr %737, ptr %755, align 8
  %756 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 17
  store ptr null, ptr %756, align 8
  %757 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f7.s0.v4.v4, i32 0, i32 %739, ptr nonnull %6)
  %758 = icmp eq i32 %757, 0
  br i1 %758, label %"consume f7", label %call_destructor.exit210.thread374, !prof !5

"consume f7":                                     ; preds = %"produce f7"
  %b617 = add nsw i32 %b695, -31
  %759 = call i32 @llvm.smin.i32(i32 %b617, i32 %a691)
  %760 = shl nsw i32 %759, 1
  %a614 = add nsw i32 %760, -1
  %.not160 = icmp slt i32 %b479, %760
  %a613 = select i1 %.not160, i32 %b479, i32 %a614
  %f74.v4.min_realized = call i32 @llvm.smin.i32(i32 %650, i32 %a613)
  %761 = sub nsw i32 %b695, %a691
  %762 = ashr i32 %761, 5
  %763 = and i32 %761, -32
  %764 = add nsw i32 %a691, 31
  %a624 = add i32 %764, %763
  %765 = call i32 @llvm.smin.i32(i32 %b695, i32 %a624)
  %766 = shl nsw i32 %765, 1
  %a623 = add nsw i32 %766, 2
  %b623 = call i32 @llvm.smax.i32(i32 %a623, i32 %b491)
  %767 = call i32 @llvm.smax.i32(i32 %656, i32 %b623)
  %768 = call i32 @llvm.smin.i32(i32 %b499, i32 %a705)
  %769 = shl nsw i32 %768, 1
  %a627 = add nsw i32 %769, -1
  %.not161 = icmp slt i32 %b498, %769
  %a626 = select i1 %.not161, i32 %b498, i32 %a627
  %f74.v3.min_realized = call i32 @llvm.smin.i32(i32 %659, i32 %a626)
  %770 = sub nsw i32 %b709, %a705
  %771 = and i32 %770, -8
  %772 = add nsw i32 %a705, 7
  %a641 = add i32 %772, %771
  %773 = call i32 @llvm.smin.i32(i32 %b709, i32 %a641)
  %774 = shl nsw i32 %773, 1
  %a640 = add nsw i32 %774, 2
  %b640 = call i32 @llvm.smax.i32(i32 %a640, i32 %b516)
  %775 = call i32 @llvm.smax.i32(i32 %664, i32 %b640)
  %f74.v3.extent_realized.s = sub nsw i32 %775, %f74.v3.min_realized
  %f74.v4.extent_realized.s = sub i32 1, %f74.v4.min_realized
  %776 = add i32 %f74.v4.extent_realized.s, %767
  %777 = zext i32 %776 to i64
  %778 = add nsw i32 %f74.v3.extent_realized.s, 1
  %779 = zext i32 %778 to i64
  %780 = shl nuw nsw i64 %779, 2
  %781 = mul i64 %780, %777
  %782 = icmp ult i64 %781, 2147483648
  %783 = and i64 %780, 4294967292
  %784 = mul nuw i64 %783, %777
  %785 = lshr i64 %784, 32
  %786 = lshr i64 %779, 30
  %787 = mul nuw nsw i64 %786, %777
  %788 = add nuw nsw i64 %785, %787
  %789 = icmp ult i64 %788, 4294967296
  %790 = and i1 %782, %789
  br i1 %790, label %"assert succeeded146", label %"assert failed145", !prof !5

"assert failed145":                               ; preds = %"consume f7"
  %791 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.17, i64 %781, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded146":                            ; preds = %"consume f7"
  %792 = add nuw nsw i64 %781, 4
  %793 = call ptr @halide_malloc(ptr null, i64 %792)
  %.not523 = icmp eq ptr %793, null
  br i1 %.not523, label %"assert failed147", label %"produce f74", !prof !4

"assert failed147":                               ; preds = %"assert succeeded146"
  %794 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f74":                                    ; preds = %"assert succeeded146"
  %795 = add nsw i32 %653, 1
  store i32 %f73.v3.extent_realized.s, ptr %5, align 8
  %796 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 1
  store i32 %f73.v3.min_realized, ptr %796, align 4
  %797 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 2
  store i32 %f73.v4.min_realized, ptr %797, align 8
  %798 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 3
  store i32 %b641, ptr %798, align 4
  %799 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 4
  store i32 %a637, ptr %799, align 8
  %800 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 5
  store i32 %b624, ptr %800, align 4
  %801 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 6
  store i32 %a620, ptr %801, align 8
  %802 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 7
  store i32 %f74.v3.extent_realized.s, ptr %802, align 4
  %803 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 8
  store i32 %f74.v3.min_realized, ptr %803, align 8
  %804 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 9
  store i32 %f74.v4.min_realized, ptr %804, align 4
  %805 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 10
  store ptr %684, ptr %805, align 8
  %806 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 11
  store ptr null, ptr %806, align 8
  %807 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 12
  store ptr %793, ptr %807, align 8
  %808 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 13
  store ptr null, ptr %808, align 8
  %809 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f74.s0.v4.v4, i32 0, i32 %795, ptr nonnull %5)
  %810 = icmp eq i32 %809, 0
  br i1 %810, label %"consume f74", label %call_destructor.exit210.thread374, !prof !5

"consume f74":                                    ; preds = %"produce f74"
  %.not162 = icmp slt i32 %a7, %77
  %a653 = select i1 %.not162, i32 %a7, i32 %b23
  %811 = add nsw i32 %b89, -62
  %b655 = ashr i32 %811, 5
  %a652 = call i32 @llvm.smin.i32(i32 %b655, i32 %a653)
  %b654 = ashr i32 %702, 5
  %a651 = call i32 @llvm.smin.i32(i32 %b654, i32 %a652)
  %f8.v4.min_realized = call i32 @llvm.smin.i32(i32 %b658, i32 %a651)
  %812 = add nsw i32 %b94, 62
  %b664 = ashr i32 %812, 5
  %a661 = call i32 @llvm.smax.i32(i32 %b735, i32 %b664)
  %b663 = ashr i32 %703, 5
  %a660 = call i32 @llvm.smax.i32(i32 %a661, i32 %b663)
  %813 = call i32 @llvm.smax.i32(i32 %a660, i32 %b735)
  %f8.v4.extent_realized.s = sub nsw i32 %813, %f8.v4.min_realized
  %.not163 = icmp slt i32 %a9, %78
  %a668 = select i1 %.not163, i32 %a9, i32 %b25
  %814 = ashr i32 %705, 5
  %b670 = add nsw i32 %814, -1
  %a667 = call i32 @llvm.smin.i32(i32 %b670, i32 %a668)
  %a666 = call i32 @llvm.smin.i32(i32 %814, i32 %a667)
  %f8.v3.min_realized = call i32 @llvm.smin.i32(i32 %b675, i32 %a666)
  %815 = add nsw i32 %712, 9
  %b681 = ashr i32 %815, 1
  %a678 = call i32 @llvm.smax.i32(i32 %b739, i32 %b681)
  %b680 = ashr i32 %b602, 1
  %a677 = call i32 @llvm.smax.i32(i32 %a678, i32 %b680)
  %816 = call i32 @llvm.smax.i32(i32 %a677, i32 %b739)
  %f8.v3.extent_realized.s = sub nsw i32 %816, %f8.v3.min_realized
  %817 = add nsw i32 %f8.v4.extent_realized.s, 1
  %818 = add nsw i32 %f8.v3.extent_realized.s, 1
  %f8.stride.2 = mul nsw i32 %818, %817
  %819 = zext i32 %817 to i64
  %820 = zext i32 %818 to i64
  %821 = shl nuw nsw i64 %820, 2
  %822 = and i64 %821, 4294967292
  %823 = mul nuw i64 %822, %819
  %824 = lshr i64 %823, 32
  %825 = lshr i64 %820, 30
  %826 = mul nuw nsw i64 %825, %819
  %t3075 = add nuw nsw i64 %824, %826
  %t3076 = mul i64 %821, %819
  %827 = mul i64 %t3076, %411
  %828 = icmp ult i64 %827, 2147483648
  %829 = and i64 %t3076, 4294967292
  %830 = mul nuw i64 %829, %411
  %831 = lshr i64 %830, 32
  %832 = mul i64 %t3075, %411
  %833 = add i64 %832, %831
  %834 = or i64 %833, %t3075
  %835 = icmp ult i64 %834, 4294967296
  %836 = and i1 %828, %835
  br i1 %836, label %"assert succeeded152", label %"assert failed151", !prof !5

"assert failed151":                               ; preds = %"consume f74"
  %837 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.18, i64 %827, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded152":                            ; preds = %"consume f74"
  %838 = add nuw nsw i64 %827, 4
  %839 = call ptr @halide_malloc(ptr null, i64 %838)
  %.not524 = icmp eq ptr %839, null
  br i1 %.not524, label %"assert failed153", label %"produce f8", !prof !4

"assert failed153":                               ; preds = %"assert succeeded152"
  %840 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f8":                                     ; preds = %"assert succeeded152"
  %841 = add nsw i32 %f4.s0.v6.loop_extent.s, 2
  store i32 %a772, ptr %4, align 8
  %842 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 1
  store i32 %f7.stride.1, ptr %842, align 4
  %843 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 2
  store i32 %f7.v3.extent_realized.s, ptr %843, align 8
  %844 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 3
  store i32 %f7.v3.min_realized, ptr %844, align 4
  %845 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 4
  store i32 %f7.v4.min_realized, ptr %845, align 8
  %846 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 5
  store i32 %b739, ptr %846, align 4
  %847 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 6
  store i32 %b675, ptr %847, align 8
  %848 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 7
  store i32 %b735, ptr %848, align 4
  %849 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 8
  store i32 %b658, ptr %849, align 8
  %850 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 9
  store i32 %f8.stride.2, ptr %850, align 4
  %851 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 10
  store i32 %f8.v3.extent_realized.s, ptr %851, align 8
  %852 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 11
  store i32 %f8.v3.min_realized, ptr %852, align 4
  %853 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 12
  store i32 %f8.v4.min_realized, ptr %853, align 8
  %854 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 13
  store ptr %737, ptr %854, align 8
  %855 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 14
  store ptr null, ptr %855, align 8
  %856 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 15
  store ptr %839, ptr %856, align 8
  %857 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 16
  store ptr null, ptr %857, align 8
  %858 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f8.s0.v6, i32 %111, i32 %841, ptr nonnull %4)
  %859 = icmp eq i32 %858, 0
  br i1 %859, label %"consume f8", label %call_destructor.exit210.thread374, !prof !5

"consume f8":                                     ; preds = %"produce f8"
  %.not164 = icmp slt i32 %b570, %72
  %a686 = select i1 %.not164, i32 %b570, i32 %b19
  %f75.v4.min_realized = call i32 @llvm.smin.i32(i32 %759, i32 %a686)
  %860 = call i32 @llvm.smax.i32(i32 %765, i32 %a577)
  %.not165 = icmp slt i32 %b586, %76
  %a696 = select i1 %.not165, i32 %b586, i32 %b21
  %f75.v3.min_realized = call i32 @llvm.smin.i32(i32 %768, i32 %a696)
  %861 = call i32 @llvm.smax.i32(i32 %773, i32 %a599)
  %f75.v3.extent_realized.s = sub nsw i32 %861, %f75.v3.min_realized
  %f75.v4.extent_realized.s = sub i32 1, %f75.v4.min_realized
  %862 = add i32 %f75.v4.extent_realized.s, %860
  %863 = zext i32 %862 to i64
  %864 = add nsw i32 %f75.v3.extent_realized.s, 1
  %865 = zext i32 %864 to i64
  %866 = shl nuw nsw i64 %865, 2
  %867 = mul i64 %866, %863
  %868 = icmp ult i64 %867, 2147483648
  %869 = and i64 %866, 4294967292
  %870 = mul nuw i64 %869, %863
  %871 = lshr i64 %870, 32
  %872 = lshr i64 %865, 30
  %873 = mul nuw nsw i64 %872, %863
  %874 = add nuw nsw i64 %871, %873
  %875 = icmp ult i64 %874, 4294967296
  %876 = and i1 %868, %875
  br i1 %876, label %"assert succeeded158", label %"assert failed157", !prof !5

"assert failed157":                               ; preds = %"consume f8"
  %877 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.19, i64 %867, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded158":                            ; preds = %"consume f8"
  %878 = add nuw nsw i64 %867, 4
  %879 = call ptr @halide_malloc(ptr null, i64 %878)
  %.not525 = icmp eq ptr %879, null
  br i1 %.not525, label %"assert failed159", label %"produce f75", !prof !4

"assert failed159":                               ; preds = %"assert succeeded158"
  %880 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f75":                                    ; preds = %"assert succeeded158"
  %881 = add nsw i32 %762, 1
  store i32 %f74.v3.extent_realized.s, ptr %3, align 8
  %882 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 1
  store i32 %f74.v3.min_realized, ptr %882, align 4
  %883 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 2
  store i32 %f74.v4.min_realized, ptr %883, align 8
  %884 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 3
  store i32 %b709, ptr %884, align 4
  %885 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 4
  store i32 %a705, ptr %885, align 8
  %886 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 5
  store i32 %b695, ptr %886, align 4
  %887 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 6
  store i32 %a691, ptr %887, align 8
  %888 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 7
  store i32 %f75.v3.extent_realized.s, ptr %888, align 4
  %889 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 8
  store i32 %f75.v3.min_realized, ptr %889, align 8
  %890 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 9
  store i32 %f75.v4.min_realized, ptr %890, align 4
  %891 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 10
  store ptr %793, ptr %891, align 8
  %892 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 11
  store ptr null, ptr %892, align 8
  %893 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 12
  store ptr %879, ptr %893, align 8
  %894 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 13
  store ptr null, ptr %894, align 8
  %895 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f75.s0.v4.v4, i32 0, i32 %881, ptr nonnull %3)
  %896 = icmp eq i32 %895, 0
  br i1 %896, label %"consume f75", label %call_destructor.exit210.thread374, !prof !5

"consume f75":                                    ; preds = %"produce f75"
  %.not166 = icmp slt i32 %a1, %44
  %a719 = select i1 %.not166, i32 %a1, i32 %b3
  %a718 = call i32 @llvm.smin.i32(i32 %b14, i32 %a719)
  %f9.v4.min_realized = call i32 @llvm.smin.i32(i32 %b720, i32 %a718)
  %b723 = ashr i32 %59, 6
  %f9.v4.extent_realized.s.s = call i32 @llvm.smax.i32(i32 %b750, i32 %b723)
  %.not167 = icmp slt i32 %a3, %53
  %a723 = select i1 %.not167, i32 %a3, i32 %b5
  %a722 = call i32 @llvm.smin.i32(i32 %b17, i32 %a723)
  %f9.v3.min_realized = call i32 @llvm.smin.i32(i32 %b724, i32 %a722)
  %b727 = ashr i32 %63, 6
  %f9.v3.extent_realized.s.s = call i32 @llvm.smax.i32(i32 %b753, i32 %b727)
  %897 = sub nsw i32 %f9.v4.extent_realized.s.s, %f9.v4.min_realized
  %898 = add nsw i32 %897, 1
  %899 = sub nsw i32 %f9.v3.extent_realized.s.s, %f9.v3.min_realized
  %900 = add nsw i32 %899, 1
  %f9.stride.2 = mul nsw i32 %898, %900
  %901 = zext i32 %898 to i64
  %902 = zext i32 %900 to i64
  %903 = shl nuw nsw i64 %902, 2
  %904 = and i64 %903, 4294967292
  %905 = mul nuw i64 %904, %901
  %906 = lshr i64 %905, 32
  %907 = lshr i64 %902, 30
  %908 = mul nuw nsw i64 %907, %901
  %t3079 = add nuw nsw i64 %906, %908
  %t3080 = mul i64 %903, %901
  %909 = mul i64 %t3080, %411
  %910 = icmp ult i64 %909, 2147483648
  %911 = and i64 %t3080, 4294967292
  %912 = mul nuw i64 %911, %411
  %913 = lshr i64 %912, 32
  %914 = mul i64 %t3079, %411
  %915 = add i64 %914, %913
  %916 = or i64 %915, %t3079
  %917 = icmp ult i64 %916, 4294967296
  %918 = and i1 %910, %917
  br i1 %918, label %"assert succeeded164", label %"assert failed163", !prof !5

"assert failed163":                               ; preds = %"consume f75"
  %919 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.20, i64 %909, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded164":                            ; preds = %"consume f75"
  %920 = add nuw nsw i64 %909, 4
  %921 = call ptr @halide_malloc(ptr null, i64 %920)
  %.not526 = icmp eq ptr %921, null
  br i1 %.not526, label %"assert failed165", label %"produce f9", !prof !4

"assert failed165":                               ; preds = %"assert succeeded164"
  %922 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f9":                                     ; preds = %"assert succeeded164"
  store i32 %a772, ptr %2, align 8
  %923 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 1
  store i32 %f8.stride.2, ptr %923, align 4
  %924 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 2
  store i32 %f8.v3.extent_realized.s, ptr %924, align 8
  %925 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 3
  store i32 %f8.v3.min_realized, ptr %925, align 4
  %926 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 4
  store i32 %f8.v4.min_realized, ptr %926, align 8
  %927 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 5
  store i32 %b753, ptr %927, align 4
  %928 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 6
  store i32 %b724, ptr %928, align 8
  %929 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 7
  store i32 %b750, ptr %929, align 4
  %930 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 8
  store i32 %b720, ptr %930, align 8
  %931 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 9
  store i32 %f9.stride.2, ptr %931, align 4
  %932 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 10
  store i32 %f9.v3.extent_realized.s.s, ptr %932, align 8
  %933 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 11
  store i32 %f9.v3.min_realized, ptr %933, align 4
  %934 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 12
  store i32 %f9.v4.min_realized, ptr %934, align 8
  %935 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 13
  store ptr %839, ptr %935, align 8
  %936 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 14
  store ptr null, ptr %936, align 8
  %937 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 15
  store ptr %921, ptr %937, align 8
  %938 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 16
  store ptr null, ptr %938, align 8
  %939 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f9.s0.v6, i32 %111, i32 %841, ptr nonnull %2)
  %940 = icmp eq i32 %939, 0
  br i1 %940, label %"consume f9", label %call_destructor.exit210.thread374, !prof !5

"consume f9":                                     ; preds = %"produce f9"
  %t3082 = sub i32 1, %b733
  %941 = add i32 %t3082, %b735
  %942 = zext i32 %941 to i64
  %t3081 = add i32 %b739, 1
  %943 = sub i32 %t3081, %b737
  %944 = zext i32 %943 to i64
  %945 = shl nuw nsw i64 %944, 2
  %946 = mul i64 %945, %942
  %947 = icmp ult i64 %946, 2147483648
  %948 = and i64 %945, 4294967292
  %949 = mul nuw i64 %948, %942
  %950 = lshr i64 %949, 32
  %951 = lshr i64 %944, 30
  %952 = mul nuw nsw i64 %951, %942
  %953 = add nuw nsw i64 %950, %952
  %954 = icmp ult i64 %953, 4294967296
  %955 = and i1 %947, %954
  br i1 %955, label %"assert succeeded170", label %"assert failed169", !prof !5

"assert failed169":                               ; preds = %"consume f9"
  %956 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.21, i64 %946, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded170":                            ; preds = %"consume f9"
  %957 = add nuw nsw i64 %946, 4
  %958 = call ptr @halide_malloc(ptr null, i64 %957)
  %.not527 = icmp eq ptr %958, null
  br i1 %.not527, label %"assert failed171", label %"produce f76", !prof !4

"assert failed171":                               ; preds = %"assert succeeded170"
  %959 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f76":                                    ; preds = %"assert succeeded170"
  %960 = add i32 %b735, 1
  %961 = icmp slt i32 %b733, %960
  br i1 %961, label %"for f76.s0.v4.preheader", label %"consume f76", !prof !5

"for f76.s0.v4.preheader":                        ; preds = %"produce f76"
  %962 = sext i32 %b739 to i64
  %963 = sext i32 %b737 to i64
  %964 = sub nsw i64 1, %963
  %965 = add nsw i64 %964, %962
  %966 = shl nsw i64 %965, 2
  %967 = sub i32 1, %f75.v3.min_realized
  %968 = add i32 %967, %861
  %969 = shl i32 %968, 1
  %970 = icmp sgt i32 %t3081, %b737
  br i1 %970, label %"for f76.s0.v4.us.preheader", label %"consume f76", !prof !5

"for f76.s0.v4.us.preheader":                     ; preds = %"for f76.s0.v4.preheader"
  %971 = xor i32 %f75.v4.min_realized, -1
  %972 = add i32 %72, %971
  %973 = mul i32 %968, %972
  %974 = sub i32 %973, %f75.v3.min_realized
  %975 = sub i32 %72, %f75.v4.min_realized
  %976 = mul i32 %968, %975
  %977 = sub i32 %976, %f75.v3.min_realized
  %978 = or i32 %72, 1
  %979 = sub i32 %978, %f75.v4.min_realized
  %980 = mul i32 %968, %979
  %981 = sub i32 %980, %f75.v3.min_realized
  %982 = add i32 %72, 2
  %983 = sub i32 %982, %f75.v4.min_realized
  %984 = mul i32 %968, %983
  %985 = sub i32 %984, %f75.v3.min_realized
  %986 = sub i32 %b739, %b737
  %987 = add i32 %984, %76
  %988 = sub i32 %987, %f75.v3.min_realized
  %989 = shl i32 %864, 1
  %990 = add i32 %980, %76
  %991 = sub i32 %990, %f75.v3.min_realized
  %992 = add i32 %976, %76
  %993 = sub i32 %992, %f75.v3.min_realized
  %994 = add i32 %973, %76
  %995 = sub i32 %994, %f75.v3.min_realized
  %996 = sub i32 %b739, %b737
  %997 = zext i32 %996 to i64
  %998 = add nuw nsw i64 %997, 1
  %min.iters.check836 = icmp ult i32 %996, 3
  %mul.result = shl i32 %986, 1
  %mul.result826 = shl i32 %986, 1
  %mul.overflow827 = icmp slt i32 %986, 0
  %mul.result829 = shl i32 %986, 1
  %mul.result832 = shl i32 %986, 1
  %n.vec839 = and i64 %998, -4
  %.cast840 = trunc i64 %n.vec839 to i32
  %999 = shl i32 %.cast840, 1
  %.cast843 = trunc i64 %n.vec839 to i32
  %1000 = shl i32 %.cast843, 1
  %.cast846 = trunc i64 %n.vec839 to i32
  %1001 = shl i32 %.cast846, 1
  %.cast849 = trunc i64 %n.vec839 to i32
  %1002 = shl i32 %.cast849, 1
  %1003 = shl nuw nsw i64 %n.vec839, 2
  %.cast854 = trunc i64 %n.vec839 to i32
  %ind.end855 = sub i32 %943, %.cast854
  %1004 = getelementptr float, ptr %879, i64 -1
  %1005 = getelementptr float, ptr %879, i64 -1
  %1006 = getelementptr float, ptr %879, i64 -1
  %1007 = getelementptr float, ptr %879, i64 -1
  %1008 = getelementptr float, ptr %879, i64 -1
  %1009 = getelementptr float, ptr %879, i64 -1
  %1010 = getelementptr float, ptr %879, i64 -1
  %1011 = getelementptr float, ptr %879, i64 -1
  %cmp.n857 = icmp eq i64 %998, %n.vec839
  br label %"for f76.s0.v4.us"

"for f76.s0.v4.us":                               ; preds = %"for f76.s0.v4.us.preheader", %"end for f76.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f76.s0.v4.us.preheader" ], [ %indvar.next, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv474.us = phi i32 [ %974, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next475.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv470.us = phi i32 [ %977, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next471.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv466.us = phi i32 [ %981, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next467.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv462.us = phi i32 [ %985, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next463.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv456.us = phi ptr [ %958, %"for f76.s0.v4.us.preheader" ], [ %scevgep458.us, %"end for f76.s0.v3.loopexit.us" ]
  %f76.s0.v4.us = phi i32 [ %b733, %"for f76.s0.v4.us.preheader" ], [ %1150, %"end for f76.s0.v3.loopexit.us" ]
  br i1 %min.iters.check836, label %"for f76.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f76.s0.v4.us"
  %1012 = mul i32 %989, %indvar
  %1013 = add i32 %995, %1012
  %1014 = add i32 %993, %1012
  %1015 = add i32 %991, %1012
  %1016 = add i32 %988, %1012
  %1017 = add i32 %1016, %mul.result
  %1018 = icmp slt i32 %1017, %1016
  %1019 = add i32 %1015, %mul.result826
  %1020 = icmp slt i32 %1019, %1015
  %1021 = or i1 %1020, %mul.overflow827
  %1022 = add i32 %1014, %mul.result829
  %1023 = icmp slt i32 %1022, %1014
  %1024 = add i32 %1013, %mul.result832
  %1025 = icmp slt i32 %1024, %1013
  %1026 = or i1 %1018, %1021
  %1027 = or i1 %1023, %1026
  %1028 = or i1 %1025, %1027
  br i1 %1028, label %"for f76.s0.v3.us.preheader", label %vector.ph837

vector.ph837:                                     ; preds = %vector.scevcheck
  %ind.end841 = add i32 %lsr.iv474.us, %999
  %ind.end844 = add i32 %lsr.iv470.us, %1000
  %ind.end847 = add i32 %lsr.iv466.us, %1001
  %ind.end850 = add i32 %lsr.iv462.us, %1002
  %ind.end852 = getelementptr i8, ptr %lsr.iv456.us, i64 %1003
  br label %vector.body858

vector.body858:                                   ; preds = %vector.body858, %vector.ph837
  %index859 = phi i64 [ 0, %vector.ph837 ], [ %index.next890, %vector.body858 ]
  %1029 = shl i64 %index859, 2
  %next.gep = getelementptr i8, ptr %lsr.iv456.us, i64 %1029
  %.cast860 = trunc i64 %index859 to i32
  %1030 = shl i32 %.cast860, 1
  %offset.idx861 = add i32 %lsr.iv462.us, %1030
  %.cast862 = trunc i64 %index859 to i32
  %1031 = shl i32 %.cast862, 1
  %offset.idx863 = add i32 %lsr.iv466.us, %1031
  %.cast864 = trunc i64 %index859 to i32
  %1032 = shl i32 %.cast864, 1
  %offset.idx865 = add i32 %lsr.iv470.us, %1032
  %.cast866 = trunc i64 %index859 to i32
  %1033 = shl i32 %.cast866, 1
  %offset.idx867 = add i32 %lsr.iv474.us, %1033
  %1034 = add i32 %offset.idx867, %76
  %1035 = add i32 %offset.idx865, %76
  %1036 = add i32 %offset.idx863, %76
  %1037 = add i32 %offset.idx861, %76
  %1038 = sext i32 %1037 to i64
  %1039 = add nsw i64 %1038, 2
  %1040 = getelementptr float, ptr %1004, i64 %1039
  %wide.vec = load <8 x float>, ptr %1040, align 4, !tbaa !13
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec868 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1041 = getelementptr float, ptr %1005, i64 %1038
  %wide.vec869 = load <8 x float>, ptr %1041, align 4, !tbaa !13
  %strided.vec870 = shufflevector <8 x float> %wide.vec869, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec871 = shufflevector <8 x float> %wide.vec869, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1042 = fadd <4 x float> %strided.vec, %strided.vec871
  %1043 = fmul <4 x float> %1042, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1044 = fadd <4 x float> %strided.vec870, %1043
  %1045 = fadd <4 x float> %strided.vec868, %1044
  %1046 = fmul <4 x float> %1045, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1047 = sext i32 %1036 to i64
  %1048 = add nsw i64 %1047, 2
  %1049 = getelementptr float, ptr %1006, i64 %1048
  %wide.vec872 = load <8 x float>, ptr %1049, align 4, !tbaa !13
  %strided.vec873 = shufflevector <8 x float> %wide.vec872, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec874 = shufflevector <8 x float> %wide.vec872, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1050 = getelementptr float, ptr %1007, i64 %1047
  %wide.vec875 = load <8 x float>, ptr %1050, align 4, !tbaa !13
  %strided.vec876 = shufflevector <8 x float> %wide.vec875, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec877 = shufflevector <8 x float> %wide.vec875, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1051 = fadd <4 x float> %strided.vec873, %strided.vec877
  %1052 = fmul <4 x float> %1051, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1053 = fadd <4 x float> %strided.vec876, %1052
  %1054 = fadd <4 x float> %strided.vec874, %1053
  %1055 = sext i32 %1035 to i64
  %1056 = add nsw i64 %1055, 2
  %1057 = getelementptr float, ptr %1008, i64 %1056
  %wide.vec878 = load <8 x float>, ptr %1057, align 4, !tbaa !13
  %strided.vec879 = shufflevector <8 x float> %wide.vec878, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec880 = shufflevector <8 x float> %wide.vec878, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1058 = getelementptr float, ptr %1009, i64 %1055
  %wide.vec881 = load <8 x float>, ptr %1058, align 4, !tbaa !13
  %strided.vec882 = shufflevector <8 x float> %wide.vec881, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec883 = shufflevector <8 x float> %wide.vec881, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1059 = fadd <4 x float> %strided.vec879, %strided.vec883
  %1060 = fmul <4 x float> %1059, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1061 = fadd <4 x float> %strided.vec882, %1060
  %1062 = fadd <4 x float> %strided.vec880, %1061
  %1063 = fadd <4 x float> %1054, %1062
  %1064 = fmul <4 x float> %1063, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1065 = sext i32 %1034 to i64
  %1066 = add nsw i64 %1065, 2
  %1067 = getelementptr float, ptr %1010, i64 %1066
  %wide.vec884 = load <8 x float>, ptr %1067, align 4, !tbaa !13
  %strided.vec885 = shufflevector <8 x float> %wide.vec884, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec886 = shufflevector <8 x float> %wide.vec884, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1068 = getelementptr float, ptr %1011, i64 %1065
  %wide.vec887 = load <8 x float>, ptr %1068, align 4, !tbaa !13
  %strided.vec888 = shufflevector <8 x float> %wide.vec887, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec889 = shufflevector <8 x float> %wide.vec887, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1069 = fadd <4 x float> %strided.vec885, %strided.vec889
  %1070 = fmul <4 x float> %1069, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1071 = fadd <4 x float> %strided.vec888, %1070
  %1072 = fadd <4 x float> %strided.vec886, %1071
  %1073 = fmul <4 x float> %1072, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1074 = fadd <4 x float> %1064, %1073
  %1075 = fadd <4 x float> %1046, %1074
  %1076 = fmul <4 x float> %1075, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %1076, ptr %next.gep, align 4, !tbaa !15
  %index.next890 = add nuw i64 %index859, 4
  %1077 = icmp eq i64 %index.next890, %n.vec839
  br i1 %1077, label %middle.block834, label %vector.body858, !llvm.loop !17

middle.block834:                                  ; preds = %vector.body858
  br i1 %cmp.n857, label %"end for f76.s0.v3.loopexit.us", label %"for f76.s0.v3.us.preheader"

"for f76.s0.v3.us.preheader":                     ; preds = %vector.scevcheck, %"for f76.s0.v4.us", %middle.block834
  %lsr.iv476.us.ph = phi i32 [ %lsr.iv474.us, %vector.scevcheck ], [ %lsr.iv474.us, %"for f76.s0.v4.us" ], [ %ind.end841, %middle.block834 ]
  %lsr.iv472.us.ph = phi i32 [ %lsr.iv470.us, %vector.scevcheck ], [ %lsr.iv470.us, %"for f76.s0.v4.us" ], [ %ind.end844, %middle.block834 ]
  %lsr.iv468.us.ph = phi i32 [ %lsr.iv466.us, %vector.scevcheck ], [ %lsr.iv466.us, %"for f76.s0.v4.us" ], [ %ind.end847, %middle.block834 ]
  %lsr.iv464.us.ph = phi i32 [ %lsr.iv462.us, %vector.scevcheck ], [ %lsr.iv462.us, %"for f76.s0.v4.us" ], [ %ind.end850, %middle.block834 ]
  %lsr.iv459.us.ph = phi ptr [ %lsr.iv456.us, %vector.scevcheck ], [ %lsr.iv456.us, %"for f76.s0.v4.us" ], [ %ind.end852, %middle.block834 ]
  %lsr.iv453.us.ph = phi i32 [ %943, %vector.scevcheck ], [ %943, %"for f76.s0.v4.us" ], [ %ind.end855, %middle.block834 ]
  br label %"for f76.s0.v3.us"

"for f76.s0.v3.us":                               ; preds = %"for f76.s0.v3.us.preheader", %"for f76.s0.v3.us"
  %lsr.iv476.us = phi i32 [ %lsr.iv.next477.us, %"for f76.s0.v3.us" ], [ %lsr.iv476.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv472.us = phi i32 [ %lsr.iv.next473.us, %"for f76.s0.v3.us" ], [ %lsr.iv472.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv468.us = phi i32 [ %lsr.iv.next469.us, %"for f76.s0.v3.us" ], [ %lsr.iv468.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv464.us = phi i32 [ %lsr.iv.next465.us, %"for f76.s0.v3.us" ], [ %lsr.iv464.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv459.us = phi ptr [ %scevgep460.us, %"for f76.s0.v3.us" ], [ %lsr.iv459.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv453.us = phi i32 [ %lsr.iv.next454.us, %"for f76.s0.v3.us" ], [ %lsr.iv453.us.ph, %"for f76.s0.v3.us.preheader" ]
  %1078 = add i32 %lsr.iv476.us, %76
  %1079 = add i32 %lsr.iv472.us, %76
  %1080 = add i32 %lsr.iv468.us, %76
  %1081 = add i32 %lsr.iv464.us, %76
  %1082 = sext i32 %1081 to i64
  %1083 = add nsw i64 %1082, 2
  %1084 = getelementptr inbounds float, ptr %879, i64 %1083
  %1085 = load float, ptr %1084, align 4, !tbaa !13
  %1086 = getelementptr inbounds float, ptr %879, i64 %1082
  %1087 = load <2 x float>, ptr %1086, align 4, !tbaa !13
  %shift = shufflevector <2 x float> %1087, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1088 = fadd <2 x float> %shift, %1087
  %1089 = extractelement <2 x float> %1088, i64 0
  %1090 = fmul float %1089, 3.000000e+00
  %1091 = add nsw i64 %1082, -1
  %1092 = getelementptr inbounds float, ptr %879, i64 %1091
  %1093 = sext i32 %1080 to i64
  %1094 = add nsw i64 %1093, 2
  %1095 = getelementptr inbounds float, ptr %879, i64 %1094
  %1096 = getelementptr inbounds float, ptr %879, i64 %1093
  %1097 = load <2 x float>, ptr %1096, align 4, !tbaa !13
  %shift1041 = shufflevector <2 x float> %1097, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1098 = fadd <2 x float> %shift1041, %1097
  %1099 = extractelement <2 x float> %1098, i64 0
  %1100 = fmul float %1099, 3.000000e+00
  %1101 = add nsw i64 %1093, -1
  %1102 = getelementptr inbounds float, ptr %879, i64 %1101
  %1103 = load float, ptr %1102, align 4, !tbaa !13
  %1104 = fadd float %1103, %1100
  %1105 = sext i32 %1079 to i64
  %1106 = add nsw i64 %1105, 2
  %1107 = getelementptr inbounds float, ptr %879, i64 %1106
  %1108 = load float, ptr %1107, align 4, !tbaa !13
  %1109 = getelementptr inbounds float, ptr %879, i64 %1105
  %1110 = load <2 x float>, ptr %1109, align 4, !tbaa !13
  %shift1042 = shufflevector <2 x float> %1110, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1111 = fadd <2 x float> %shift1042, %1110
  %1112 = extractelement <2 x float> %1111, i64 0
  %1113 = fmul float %1112, 3.000000e+00
  %1114 = add nsw i64 %1105, -1
  %1115 = getelementptr inbounds float, ptr %879, i64 %1114
  %1116 = load float, ptr %1115, align 4, !tbaa !13
  %1117 = fadd float %1116, %1113
  %1118 = fadd float %1108, %1117
  %1119 = load float, ptr %1092, align 4, !tbaa !13
  %1120 = load float, ptr %1095, align 4, !tbaa !13
  %1121 = insertelement <2 x float> poison, float %1119, i64 0
  %1122 = insertelement <2 x float> %1121, float %1120, i64 1
  %1123 = insertelement <2 x float> poison, float %1090, i64 0
  %1124 = insertelement <2 x float> %1123, float %1104, i64 1
  %1125 = fadd <2 x float> %1122, %1124
  %1126 = insertelement <2 x float> poison, float %1085, i64 0
  %1127 = insertelement <2 x float> %1126, float %1118, i64 1
  %1128 = fadd <2 x float> %1127, %1125
  %1129 = fmul <2 x float> %1128, <float 1.250000e-01, float 3.750000e-01>
  %1130 = sext i32 %1078 to i64
  %1131 = add nsw i64 %1130, 2
  %1132 = getelementptr inbounds float, ptr %879, i64 %1131
  %1133 = load float, ptr %1132, align 4, !tbaa !13
  %1134 = getelementptr inbounds float, ptr %879, i64 %1130
  %1135 = load <2 x float>, ptr %1134, align 4, !tbaa !13
  %shift1043 = shufflevector <2 x float> %1135, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1136 = fadd <2 x float> %shift1043, %1135
  %1137 = extractelement <2 x float> %1136, i64 0
  %1138 = fmul float %1137, 3.000000e+00
  %1139 = add nsw i64 %1130, -1
  %1140 = getelementptr inbounds float, ptr %879, i64 %1139
  %1141 = load float, ptr %1140, align 4, !tbaa !13
  %1142 = fadd float %1141, %1138
  %1143 = fadd float %1133, %1142
  %1144 = fmul float %1143, 1.250000e-01
  %1145 = extractelement <2 x float> %1129, i64 1
  %1146 = fadd float %1145, %1144
  %1147 = extractelement <2 x float> %1129, i64 0
  %1148 = fadd float %1147, %1146
  %1149 = fmul float %1148, 1.250000e-01
  store float %1149, ptr %lsr.iv459.us, align 4, !tbaa !15
  %lsr.iv.next454.us = add i32 %lsr.iv453.us, -1
  %scevgep460.us = getelementptr i8, ptr %lsr.iv459.us, i64 4
  %lsr.iv.next465.us = add i32 %lsr.iv464.us, 2
  %lsr.iv.next469.us = add i32 %lsr.iv468.us, 2
  %lsr.iv.next473.us = add i32 %lsr.iv472.us, 2
  %lsr.iv.next477.us = add i32 %lsr.iv476.us, 2
  %.not131.us = icmp eq i32 %lsr.iv.next454.us, 0
  br i1 %.not131.us, label %"end for f76.s0.v3.loopexit.us", label %"for f76.s0.v3.us", !llvm.loop !18

"end for f76.s0.v3.loopexit.us":                  ; preds = %"for f76.s0.v3.us", %middle.block834
  %1150 = add nsw i32 %f76.s0.v4.us, 1
  %scevgep458.us = getelementptr i1, ptr %lsr.iv456.us, i64 %966
  %lsr.iv.next463.us = add i32 %lsr.iv462.us, %969
  %lsr.iv.next467.us = add i32 %lsr.iv466.us, %969
  %lsr.iv.next471.us = add i32 %lsr.iv470.us, %969
  %lsr.iv.next475.us = add i32 %lsr.iv474.us, %969
  %.not130.us = icmp eq i32 %f76.s0.v4.us, %b735
  %indvar.next = add i32 %indvar, 1
  br i1 %.not130.us, label %"consume f76", label %"for f76.s0.v4.us"

"consume f76":                                    ; preds = %"end for f76.s0.v3.loopexit.us", %"for f76.s0.v4.preheader", %"produce f76"
  %f10.v4.extent_realized.s = sub nsw i32 %39, %43
  %f10.v3.extent_realized.s = sub nsw i32 %48, %52
  %1151 = add nsw i32 %f10.v4.extent_realized.s, 1
  %1152 = add nsw i32 %f10.v3.extent_realized.s, 1
  %f10.stride.2 = mul nsw i32 %1151, %1152
  %1153 = zext i32 %1151 to i64
  %1154 = zext i32 %1152 to i64
  %1155 = shl nuw nsw i64 %1154, 2
  %1156 = and i64 %1155, 4294967292
  %1157 = mul nuw i64 %1156, %1153
  %1158 = lshr i64 %1157, 32
  %1159 = lshr i64 %1154, 30
  %1160 = mul nuw nsw i64 %1159, %1153
  %t3083 = add nuw nsw i64 %1158, %1160
  %t3084 = mul i64 %1155, %1153
  %1161 = zext i32 %841 to i64
  %1162 = mul i64 %t3084, %1161
  %1163 = icmp ult i64 %1162, 2147483648
  %1164 = and i64 %t3084, 4294967292
  %1165 = mul nuw i64 %1164, %1161
  %1166 = lshr i64 %1165, 32
  %1167 = mul i64 %t3083, %1161
  %1168 = add i64 %1167, %1166
  %1169 = or i64 %1168, %t3083
  %1170 = icmp ult i64 %1169, 4294967296
  %1171 = and i1 %1163, %1170
  br i1 %1171, label %"assert succeeded174", label %"assert failed173", !prof !5

"assert failed173":                               ; preds = %"consume f76"
  %1172 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.22, i64 %1162, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded174":                            ; preds = %"consume f76"
  %1173 = add nuw nsw i64 %1162, 4
  %1174 = call ptr @halide_malloc(ptr null, i64 %1173)
  %.not528 = icmp eq ptr %1174, null
  br i1 %.not528, label %"assert failed175", label %"produce f10", !prof !4

"assert failed175":                               ; preds = %"assert succeeded174"
  %1175 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f10":                                    ; preds = %"assert succeeded174"
  store i32 %a772, ptr %1, align 8
  %1176 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 1
  store i32 %f10.stride.2, ptr %1176, align 4
  %1177 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 2
  store i32 %f10.v3.extent_realized.s, ptr %1177, align 8
  %1178 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 3
  store i32 %f10.v4.extent_realized.s, ptr %1178, align 4
  %1179 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 4
  store i32 %f9.stride.2, ptr %1179, align 8
  %1180 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 5
  store i32 %f9.v3.extent_realized.s.s, ptr %1180, align 4
  %1181 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 6
  store i32 %f9.v3.min_realized, ptr %1181, align 8
  %1182 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 7
  store i32 %f9.v4.min_realized, ptr %1182, align 4
  %1183 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 8
  store i32 %a286, ptr %1183, align 8
  %1184 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 9
  store i32 %a114, ptr %1184, align 4
  %1185 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 10
  store ptr %1174, ptr %1185, align 8
  %1186 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 11
  store ptr null, ptr %1186, align 8
  %1187 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 12
  store ptr %921, ptr %1187, align 8
  %1188 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 13
  store ptr null, ptr %1188, align 8
  %1189 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f10.s0.v6, i32 %111, i32 %841, ptr nonnull %1)
  %1190 = icmp eq i32 %1189, 0
  br i1 %1190, label %"consume f10", label %call_destructor.exit210.thread374, !prof !5

"consume f10":                                    ; preds = %"produce f10"
  %t3086 = sub i32 1, %b748
  %1191 = add i32 %t3086, %b750
  %1192 = zext i32 %1191 to i64
  %t3085 = add i32 %b753, 1
  %1193 = sub i32 %t3085, %b751
  %1194 = zext i32 %1193 to i64
  %1195 = shl nuw nsw i64 %1194, 2
  %1196 = mul i64 %1195, %1192
  %1197 = icmp ult i64 %1196, 2147483648
  %1198 = and i64 %1195, 4294967292
  %1199 = mul nuw i64 %1198, %1192
  %1200 = lshr i64 %1199, 32
  %1201 = lshr i64 %1194, 30
  %1202 = mul nuw nsw i64 %1201, %1192
  %1203 = add nuw nsw i64 %1200, %1202
  %1204 = icmp ult i64 %1203, 4294967296
  %1205 = and i1 %1197, %1204
  br i1 %1205, label %"assert succeeded180", label %"assert failed179", !prof !5

"assert failed179":                               ; preds = %"consume f10"
  %1206 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.23, i64 %1196, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded180":                            ; preds = %"consume f10"
  %1207 = add nuw nsw i64 %1196, 4
  %1208 = call ptr @halide_malloc(ptr null, i64 %1207)
  %.not529 = icmp eq ptr %1208, null
  br i1 %.not529, label %"assert failed181", label %"produce f77", !prof !4

"assert failed181":                               ; preds = %"assert succeeded180"
  %1209 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f77":                                    ; preds = %"assert succeeded180"
  %.not108 = icmp slt i32 %b750, %b748
  br i1 %.not108, label %"consume f77", label %"for f77.s0.v4.preheader", !prof !4

"for f77.s0.v4.preheader":                        ; preds = %"produce f77"
  %1210 = sext i32 %b753 to i64
  %1211 = sext i32 %b751 to i64
  %1212 = sub nsw i64 1, %1211
  %1213 = add nsw i64 %1212, %1210
  %1214 = shl nsw i64 %1213, 2
  %1215 = shl i32 %943, 1
  %.not127 = icmp slt i32 %b753, %b751
  br i1 %.not127, label %"consume f77", label %"for f77.s0.v4.preheader554", !prof !4

"for f77.s0.v4.preheader554":                     ; preds = %"for f77.s0.v4.preheader"
  %1216 = xor i32 %b733, -1
  %1217 = add i32 %62, %1216
  %1218 = mul i32 %943, %1217
  %1219 = sub i32 %1218, %b737
  %1220 = sub i32 %62, %b733
  %1221 = mul i32 %943, %1220
  %1222 = sub i32 %1221, %b737
  %1223 = or i32 %62, 1
  %1224 = sub i32 %1223, %b733
  %1225 = mul i32 %943, %1224
  %1226 = sub i32 %1225, %b737
  %1227 = add nsw i32 %62, 2
  %1228 = sub i32 %1227, %b733
  %1229 = mul i32 %943, %1228
  %1230 = sub i32 %1229, %b737
  %1231 = sub i32 %b753, %b751
  %1232 = add i32 %1229, %66
  %1233 = sub i32 %1232, %b737
  %1234 = shl i32 %943, 1
  %1235 = add i32 %1225, %66
  %1236 = sub i32 %1235, %b737
  %1237 = add i32 %1221, %66
  %1238 = sub i32 %1237, %b737
  %1239 = add i32 %1218, %66
  %1240 = sub i32 %1239, %b737
  %1241 = sub i32 %b753, %b751
  %1242 = zext i32 %1241 to i64
  %1243 = add nuw nsw i64 %1242, 1
  %min.iters.check908 = icmp ult i32 %1241, 3
  %mul.result895 = shl i32 %1231, 1
  %mul.result898 = shl i32 %1231, 1
  %mul.overflow899 = icmp slt i32 %1231, 0
  %mul.result901 = shl i32 %1231, 1
  %mul.result904 = shl i32 %1231, 1
  %n.vec911 = and i64 %1243, -4
  %.cast912 = trunc i64 %n.vec911 to i32
  %1244 = shl i32 %.cast912, 1
  %.cast915 = trunc i64 %n.vec911 to i32
  %1245 = shl i32 %.cast915, 1
  %.cast918 = trunc i64 %n.vec911 to i32
  %1246 = shl i32 %.cast918, 1
  %.cast921 = trunc i64 %n.vec911 to i32
  %1247 = shl i32 %.cast921, 1
  %1248 = shl nuw nsw i64 %n.vec911, 2
  %.cast926 = trunc i64 %n.vec911 to i32
  %ind.end927 = sub i32 %1193, %.cast926
  %1249 = getelementptr float, ptr %958, i64 -1
  %1250 = getelementptr float, ptr %958, i64 -1
  %1251 = getelementptr float, ptr %958, i64 -1
  %1252 = getelementptr float, ptr %958, i64 -1
  %1253 = getelementptr float, ptr %958, i64 -1
  %1254 = getelementptr float, ptr %958, i64 -1
  %1255 = getelementptr float, ptr %958, i64 -1
  %1256 = getelementptr float, ptr %958, i64 -1
  %cmp.n929 = icmp eq i64 %1243, %n.vec911
  br label %"for f77.s0.v4"

"for f77.s0.v4":                                  ; preds = %"for f77.s0.v4.preheader554", %"end for f77.s0.v3.loopexit"
  %indvar892 = phi i32 [ 0, %"for f77.s0.v4.preheader554" ], [ %indvar.next893, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv449 = phi i32 [ %1219, %"for f77.s0.v4.preheader554" ], [ %lsr.iv.next450, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv445 = phi i32 [ %1222, %"for f77.s0.v4.preheader554" ], [ %lsr.iv.next446, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv441 = phi i32 [ %1226, %"for f77.s0.v4.preheader554" ], [ %lsr.iv.next442, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv437 = phi i32 [ %1230, %"for f77.s0.v4.preheader554" ], [ %lsr.iv.next438, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv431 = phi ptr [ %1208, %"for f77.s0.v4.preheader554" ], [ %scevgep433, %"end for f77.s0.v3.loopexit" ]
  %f77.s0.v4 = phi i32 [ %b748, %"for f77.s0.v4.preheader554" ], [ %1395, %"end for f77.s0.v3.loopexit" ]
  br i1 %min.iters.check908, label %"for f77.s0.v3.preheader", label %vector.scevcheck891

vector.scevcheck891:                              ; preds = %"for f77.s0.v4"
  %1257 = mul i32 %1234, %indvar892
  %1258 = add i32 %1240, %1257
  %1259 = add i32 %1238, %1257
  %1260 = add i32 %1236, %1257
  %1261 = add i32 %1233, %1257
  %1262 = add i32 %1261, %mul.result895
  %1263 = icmp slt i32 %1262, %1261
  %1264 = add i32 %1260, %mul.result898
  %1265 = icmp slt i32 %1264, %1260
  %1266 = or i1 %1265, %mul.overflow899
  %1267 = add i32 %1259, %mul.result901
  %1268 = icmp slt i32 %1267, %1259
  %1269 = add i32 %1258, %mul.result904
  %1270 = icmp slt i32 %1269, %1258
  %1271 = or i1 %1263, %1266
  %1272 = or i1 %1268, %1271
  %1273 = or i1 %1270, %1272
  br i1 %1273, label %"for f77.s0.v3.preheader", label %vector.ph909

vector.ph909:                                     ; preds = %vector.scevcheck891
  %ind.end913 = add i32 %lsr.iv449, %1244
  %ind.end916 = add i32 %lsr.iv445, %1245
  %ind.end919 = add i32 %lsr.iv441, %1246
  %ind.end922 = add i32 %lsr.iv437, %1247
  %ind.end924 = getelementptr i8, ptr %lsr.iv431, i64 %1248
  br label %vector.body930

vector.body930:                                   ; preds = %vector.body930, %vector.ph909
  %index931 = phi i64 [ 0, %vector.ph909 ], [ %index.next965, %vector.body930 ]
  %1274 = shl i64 %index931, 2
  %next.gep932 = getelementptr i8, ptr %lsr.iv431, i64 %1274
  %.cast933 = trunc i64 %index931 to i32
  %1275 = shl i32 %.cast933, 1
  %offset.idx934 = add i32 %lsr.iv437, %1275
  %.cast935 = trunc i64 %index931 to i32
  %1276 = shl i32 %.cast935, 1
  %offset.idx936 = add i32 %lsr.iv441, %1276
  %.cast937 = trunc i64 %index931 to i32
  %1277 = shl i32 %.cast937, 1
  %offset.idx938 = add i32 %lsr.iv445, %1277
  %.cast939 = trunc i64 %index931 to i32
  %1278 = shl i32 %.cast939, 1
  %offset.idx940 = add i32 %lsr.iv449, %1278
  %1279 = add i32 %offset.idx940, %66
  %1280 = add i32 %offset.idx938, %66
  %1281 = add i32 %offset.idx936, %66
  %1282 = add i32 %offset.idx934, %66
  %1283 = sext i32 %1282 to i64
  %1284 = add nsw i64 %1283, 2
  %1285 = getelementptr float, ptr %1249, i64 %1284
  %wide.vec941 = load <8 x float>, ptr %1285, align 4, !tbaa !15
  %strided.vec942 = shufflevector <8 x float> %wide.vec941, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec943 = shufflevector <8 x float> %wide.vec941, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1286 = getelementptr float, ptr %1250, i64 %1283
  %wide.vec944 = load <8 x float>, ptr %1286, align 4, !tbaa !15
  %strided.vec945 = shufflevector <8 x float> %wide.vec944, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec946 = shufflevector <8 x float> %wide.vec944, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1287 = fadd <4 x float> %strided.vec942, %strided.vec946
  %1288 = fmul <4 x float> %1287, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1289 = fadd <4 x float> %strided.vec945, %1288
  %1290 = fadd <4 x float> %strided.vec943, %1289
  %1291 = fmul <4 x float> %1290, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1292 = sext i32 %1281 to i64
  %1293 = add nsw i64 %1292, 2
  %1294 = getelementptr float, ptr %1251, i64 %1293
  %wide.vec947 = load <8 x float>, ptr %1294, align 4, !tbaa !15
  %strided.vec948 = shufflevector <8 x float> %wide.vec947, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec949 = shufflevector <8 x float> %wide.vec947, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1295 = getelementptr float, ptr %1252, i64 %1292
  %wide.vec950 = load <8 x float>, ptr %1295, align 4, !tbaa !15
  %strided.vec951 = shufflevector <8 x float> %wide.vec950, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec952 = shufflevector <8 x float> %wide.vec950, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1296 = fadd <4 x float> %strided.vec948, %strided.vec952
  %1297 = fmul <4 x float> %1296, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1298 = fadd <4 x float> %strided.vec951, %1297
  %1299 = fadd <4 x float> %strided.vec949, %1298
  %1300 = sext i32 %1280 to i64
  %1301 = add nsw i64 %1300, 2
  %1302 = getelementptr float, ptr %1253, i64 %1301
  %wide.vec953 = load <8 x float>, ptr %1302, align 4, !tbaa !15
  %strided.vec954 = shufflevector <8 x float> %wide.vec953, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec955 = shufflevector <8 x float> %wide.vec953, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1303 = getelementptr float, ptr %1254, i64 %1300
  %wide.vec956 = load <8 x float>, ptr %1303, align 4, !tbaa !15
  %strided.vec957 = shufflevector <8 x float> %wide.vec956, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec958 = shufflevector <8 x float> %wide.vec956, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1304 = fadd <4 x float> %strided.vec954, %strided.vec958
  %1305 = fmul <4 x float> %1304, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1306 = fadd <4 x float> %strided.vec957, %1305
  %1307 = fadd <4 x float> %strided.vec955, %1306
  %1308 = fadd <4 x float> %1299, %1307
  %1309 = fmul <4 x float> %1308, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1310 = sext i32 %1279 to i64
  %1311 = add nsw i64 %1310, 2
  %1312 = getelementptr float, ptr %1255, i64 %1311
  %wide.vec959 = load <8 x float>, ptr %1312, align 4, !tbaa !15
  %strided.vec960 = shufflevector <8 x float> %wide.vec959, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec961 = shufflevector <8 x float> %wide.vec959, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1313 = getelementptr float, ptr %1256, i64 %1310
  %wide.vec962 = load <8 x float>, ptr %1313, align 4, !tbaa !15
  %strided.vec963 = shufflevector <8 x float> %wide.vec962, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec964 = shufflevector <8 x float> %wide.vec962, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1314 = fadd <4 x float> %strided.vec960, %strided.vec964
  %1315 = fmul <4 x float> %1314, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1316 = fadd <4 x float> %strided.vec963, %1315
  %1317 = fadd <4 x float> %strided.vec961, %1316
  %1318 = fmul <4 x float> %1317, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1319 = fadd <4 x float> %1309, %1318
  %1320 = fadd <4 x float> %1291, %1319
  %1321 = fmul <4 x float> %1320, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %1321, ptr %next.gep932, align 4, !tbaa !19
  %index.next965 = add nuw i64 %index931, 4
  %1322 = icmp eq i64 %index.next965, %n.vec911
  br i1 %1322, label %middle.block906, label %vector.body930, !llvm.loop !21

middle.block906:                                  ; preds = %vector.body930
  br i1 %cmp.n929, label %"end for f77.s0.v3.loopexit", label %"for f77.s0.v3.preheader"

"for f77.s0.v3.preheader":                        ; preds = %vector.scevcheck891, %"for f77.s0.v4", %middle.block906
  %lsr.iv451.ph = phi i32 [ %lsr.iv449, %vector.scevcheck891 ], [ %lsr.iv449, %"for f77.s0.v4" ], [ %ind.end913, %middle.block906 ]
  %lsr.iv447.ph = phi i32 [ %lsr.iv445, %vector.scevcheck891 ], [ %lsr.iv445, %"for f77.s0.v4" ], [ %ind.end916, %middle.block906 ]
  %lsr.iv443.ph = phi i32 [ %lsr.iv441, %vector.scevcheck891 ], [ %lsr.iv441, %"for f77.s0.v4" ], [ %ind.end919, %middle.block906 ]
  %lsr.iv439.ph = phi i32 [ %lsr.iv437, %vector.scevcheck891 ], [ %lsr.iv437, %"for f77.s0.v4" ], [ %ind.end922, %middle.block906 ]
  %lsr.iv434.ph = phi ptr [ %lsr.iv431, %vector.scevcheck891 ], [ %lsr.iv431, %"for f77.s0.v4" ], [ %ind.end924, %middle.block906 ]
  %lsr.iv428.ph = phi i32 [ %1193, %vector.scevcheck891 ], [ %1193, %"for f77.s0.v4" ], [ %ind.end927, %middle.block906 ]
  br label %"for f77.s0.v3"

"for f77.s0.v3":                                  ; preds = %"for f77.s0.v3.preheader", %"for f77.s0.v3"
  %lsr.iv451 = phi i32 [ %lsr.iv.next452, %"for f77.s0.v3" ], [ %lsr.iv451.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv447 = phi i32 [ %lsr.iv.next448, %"for f77.s0.v3" ], [ %lsr.iv447.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv443 = phi i32 [ %lsr.iv.next444, %"for f77.s0.v3" ], [ %lsr.iv443.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv439 = phi i32 [ %lsr.iv.next440, %"for f77.s0.v3" ], [ %lsr.iv439.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv434 = phi ptr [ %scevgep435, %"for f77.s0.v3" ], [ %lsr.iv434.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv428 = phi i32 [ %lsr.iv.next429, %"for f77.s0.v3" ], [ %lsr.iv428.ph, %"for f77.s0.v3.preheader" ]
  %1323 = add i32 %lsr.iv451, %66
  %1324 = add i32 %lsr.iv447, %66
  %1325 = add i32 %lsr.iv443, %66
  %1326 = add i32 %lsr.iv439, %66
  %1327 = sext i32 %1326 to i64
  %1328 = add nsw i64 %1327, 2
  %1329 = getelementptr inbounds float, ptr %958, i64 %1328
  %1330 = load float, ptr %1329, align 4, !tbaa !15
  %1331 = getelementptr inbounds float, ptr %958, i64 %1327
  %1332 = load <2 x float>, ptr %1331, align 4, !tbaa !15
  %shift1044 = shufflevector <2 x float> %1332, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1333 = fadd <2 x float> %shift1044, %1332
  %1334 = extractelement <2 x float> %1333, i64 0
  %1335 = fmul float %1334, 3.000000e+00
  %1336 = add nsw i64 %1327, -1
  %1337 = getelementptr inbounds float, ptr %958, i64 %1336
  %1338 = sext i32 %1325 to i64
  %1339 = add nsw i64 %1338, 2
  %1340 = getelementptr inbounds float, ptr %958, i64 %1339
  %1341 = getelementptr inbounds float, ptr %958, i64 %1338
  %1342 = load <2 x float>, ptr %1341, align 4, !tbaa !15
  %shift1045 = shufflevector <2 x float> %1342, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1343 = fadd <2 x float> %shift1045, %1342
  %1344 = extractelement <2 x float> %1343, i64 0
  %1345 = fmul float %1344, 3.000000e+00
  %1346 = add nsw i64 %1338, -1
  %1347 = getelementptr inbounds float, ptr %958, i64 %1346
  %1348 = load float, ptr %1347, align 4, !tbaa !15
  %1349 = fadd float %1348, %1345
  %1350 = sext i32 %1324 to i64
  %1351 = add nsw i64 %1350, 2
  %1352 = getelementptr inbounds float, ptr %958, i64 %1351
  %1353 = load float, ptr %1352, align 4, !tbaa !15
  %1354 = getelementptr inbounds float, ptr %958, i64 %1350
  %1355 = load <2 x float>, ptr %1354, align 4, !tbaa !15
  %shift1046 = shufflevector <2 x float> %1355, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1356 = fadd <2 x float> %shift1046, %1355
  %1357 = extractelement <2 x float> %1356, i64 0
  %1358 = fmul float %1357, 3.000000e+00
  %1359 = add nsw i64 %1350, -1
  %1360 = getelementptr inbounds float, ptr %958, i64 %1359
  %1361 = load float, ptr %1360, align 4, !tbaa !15
  %1362 = fadd float %1361, %1358
  %1363 = fadd float %1353, %1362
  %1364 = load float, ptr %1337, align 4, !tbaa !15
  %1365 = load float, ptr %1340, align 4, !tbaa !15
  %1366 = insertelement <2 x float> poison, float %1364, i64 0
  %1367 = insertelement <2 x float> %1366, float %1365, i64 1
  %1368 = insertelement <2 x float> poison, float %1335, i64 0
  %1369 = insertelement <2 x float> %1368, float %1349, i64 1
  %1370 = fadd <2 x float> %1367, %1369
  %1371 = insertelement <2 x float> poison, float %1330, i64 0
  %1372 = insertelement <2 x float> %1371, float %1363, i64 1
  %1373 = fadd <2 x float> %1372, %1370
  %1374 = fmul <2 x float> %1373, <float 1.250000e-01, float 3.750000e-01>
  %1375 = sext i32 %1323 to i64
  %1376 = add nsw i64 %1375, 2
  %1377 = getelementptr inbounds float, ptr %958, i64 %1376
  %1378 = load float, ptr %1377, align 4, !tbaa !15
  %1379 = getelementptr inbounds float, ptr %958, i64 %1375
  %1380 = load <2 x float>, ptr %1379, align 4, !tbaa !15
  %shift1047 = shufflevector <2 x float> %1380, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1381 = fadd <2 x float> %shift1047, %1380
  %1382 = extractelement <2 x float> %1381, i64 0
  %1383 = fmul float %1382, 3.000000e+00
  %1384 = add nsw i64 %1375, -1
  %1385 = getelementptr inbounds float, ptr %958, i64 %1384
  %1386 = load float, ptr %1385, align 4, !tbaa !15
  %1387 = fadd float %1386, %1383
  %1388 = fadd float %1378, %1387
  %1389 = fmul float %1388, 1.250000e-01
  %1390 = extractelement <2 x float> %1374, i64 1
  %1391 = fadd float %1390, %1389
  %1392 = extractelement <2 x float> %1374, i64 0
  %1393 = fadd float %1392, %1391
  %1394 = fmul float %1393, 1.250000e-01
  store float %1394, ptr %lsr.iv434, align 4, !tbaa !19
  %lsr.iv.next429 = add i32 %lsr.iv428, -1
  %scevgep435 = getelementptr i8, ptr %lsr.iv434, i64 4
  %lsr.iv.next440 = add i32 %lsr.iv439, 2
  %lsr.iv.next444 = add i32 %lsr.iv443, 2
  %lsr.iv.next448 = add i32 %lsr.iv447, 2
  %lsr.iv.next452 = add i32 %lsr.iv451, 2
  %.not129 = icmp eq i32 %lsr.iv.next429, 0
  br i1 %.not129, label %"end for f77.s0.v3.loopexit", label %"for f77.s0.v3", !llvm.loop !22

"end for f77.s0.v3.loopexit":                     ; preds = %"for f77.s0.v3", %middle.block906
  %1395 = add nsw i32 %f77.s0.v4, 1
  %scevgep433 = getelementptr i1, ptr %lsr.iv431, i64 %1214
  %lsr.iv.next438 = add i32 %lsr.iv437, %1215
  %lsr.iv.next442 = add i32 %lsr.iv441, %1215
  %lsr.iv.next446 = add i32 %lsr.iv445, %1215
  %lsr.iv.next450 = add i32 %lsr.iv449, %1215
  %.not128 = icmp eq i32 %f77.s0.v4, %b750
  %indvar.next893 = add i32 %indvar892, 1
  br i1 %.not128, label %"consume f77", label %"for f77.s0.v4"

"consume f77":                                    ; preds = %"end for f77.s0.v3.loopexit", %"for f77.s0.v4.preheader", %"produce f77"
  %1396 = icmp ult i64 %t3084, 2147483648
  %1397 = icmp ult i64 %t3083, 4294967296
  %1398 = and i1 %1396, %1397
  br i1 %1398, label %"assert succeeded184", label %"assert failed183", !prof !5

"assert failed183":                               ; preds = %"consume f77"
  %1399 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.24, i64 %t3084, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded184":                            ; preds = %"consume f77"
  %1400 = add nuw nsw i64 %t3084, 4
  %1401 = call ptr @halide_malloc(ptr null, i64 %1400)
  %.not530 = icmp eq ptr %1401, null
  br i1 %.not530, label %"assert failed185", label %"produce f78", !prof !4

"assert failed185":                               ; preds = %"assert succeeded184"
  %1402 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f78":                                    ; preds = %"assert succeeded184"
  %1403 = add nsw i32 %39, 1
  %.not109 = icmp slt i32 %39, %43
  br i1 %.not109, label %"assert succeeded188.thread", label %"for f78.s0.v4.preheader", !prof !4

"for f78.s0.v4.preheader":                        ; preds = %"produce f78"
  %1404 = add nsw i32 %48, 1
  %1405 = sub nsw i32 %1404, %52
  %1406 = sext i32 %1152 to i64
  %1407 = sext i32 %43 to i64
  %1408 = shl i32 %1193, 1
  %.not124 = icmp slt i32 %48, %52
  %1409 = sext i32 %52 to i64
  br i1 %.not124, label %"assert succeeded188.thread817", label %"for f78.s0.v4.preheader552", !prof !4

"for f78.s0.v4.preheader552":                     ; preds = %"for f78.s0.v4.preheader"
  %1410 = xor i32 %b748, -1
  %1411 = add i32 %44, %1410
  %1412 = mul i32 %1193, %1411
  %1413 = sub i32 %1412, %b751
  %1414 = sub i32 %44, %b748
  %1415 = mul i32 %1193, %1414
  %1416 = sub i32 %1415, %b751
  %1417 = or i32 %44, 1
  %1418 = sub i32 %1417, %b748
  %1419 = mul i32 %1193, %1418
  %1420 = sub i32 %1419, %b751
  %1421 = add nsw i32 %44, 2
  %1422 = sub i32 %1421, %b748
  %1423 = mul i32 %1193, %1422
  %1424 = sub i32 %1423, %b751
  %1425 = add i32 %1423, %53
  %1426 = sub i32 %1425, %b751
  %1427 = shl i32 %1193, 1
  %1428 = add i32 %1419, %53
  %1429 = sub i32 %1428, %b751
  %1430 = add i32 %1415, %53
  %1431 = sub i32 %1430, %b751
  %1432 = add i32 %1412, %53
  %1433 = sub i32 %1432, %b751
  %1434 = zext i32 %f10.v3.extent_realized.s to i64
  %1435 = add nuw nsw i64 %1434, 1
  %min.iters.check983 = icmp ult i32 %f10.v3.extent_realized.s, 3
  %mul.result970 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.result973 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.overflow974 = icmp slt i32 %f10.v3.extent_realized.s, 0
  %mul.result976 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.result979 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %n.vec986 = and i64 %1435, -4
  %.cast987 = trunc i64 %n.vec986 to i32
  %1436 = shl i32 %.cast987, 1
  %.cast990 = trunc i64 %n.vec986 to i32
  %1437 = shl i32 %.cast990, 1
  %.cast993 = trunc i64 %n.vec986 to i32
  %1438 = shl i32 %.cast993, 1
  %.cast996 = trunc i64 %n.vec986 to i32
  %1439 = shl i32 %.cast996, 1
  %ind.end999 = add nsw i64 %n.vec986, %1409
  %.cast1001 = trunc i64 %n.vec986 to i32
  %ind.end1002 = sub i32 %1405, %.cast1001
  %1440 = getelementptr float, ptr %1208, i64 -1
  %1441 = getelementptr float, ptr %1208, i64 -1
  %1442 = getelementptr float, ptr %1208, i64 -1
  %1443 = getelementptr float, ptr %1208, i64 -1
  %1444 = getelementptr float, ptr %1208, i64 -1
  %1445 = getelementptr float, ptr %1208, i64 -1
  %1446 = getelementptr float, ptr %1208, i64 -1
  %1447 = getelementptr float, ptr %1208, i64 -1
  %cmp.n1004 = icmp eq i64 %1435, %n.vec986
  br label %"for f78.s0.v4"

"for f78.s0.v4":                                  ; preds = %"for f78.s0.v4.preheader552", %"end for f78.s0.v3.loopexit"
  %indvar967 = phi i32 [ 0, %"for f78.s0.v4.preheader552" ], [ %indvar.next968, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv422 = phi i32 [ %1413, %"for f78.s0.v4.preheader552" ], [ %lsr.iv.next423, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv418 = phi i32 [ %1416, %"for f78.s0.v4.preheader552" ], [ %lsr.iv.next419, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv414 = phi i32 [ %1420, %"for f78.s0.v4.preheader552" ], [ %lsr.iv.next415, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv410 = phi i32 [ %1424, %"for f78.s0.v4.preheader552" ], [ %lsr.iv.next411, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv406 = phi i64 [ %1407, %"for f78.s0.v4.preheader552" ], [ %lsr.iv.next407, %"end for f78.s0.v3.loopexit" ]
  %1448 = sub nsw i64 %lsr.iv406, %1407
  %1449 = mul nsw i64 %1448, %1406
  %1450 = sub i64 %1449, %1409
  br i1 %min.iters.check983, label %"for f78.s0.v3.preheader", label %vector.scevcheck966

vector.scevcheck966:                              ; preds = %"for f78.s0.v4"
  %1451 = mul i32 %1427, %indvar967
  %1452 = add i32 %1433, %1451
  %1453 = add i32 %1431, %1451
  %1454 = add i32 %1429, %1451
  %1455 = add i32 %1426, %1451
  %1456 = add i32 %1455, %mul.result970
  %1457 = icmp slt i32 %1456, %1455
  %1458 = add i32 %1454, %mul.result973
  %1459 = icmp slt i32 %1458, %1454
  %1460 = or i1 %1459, %mul.overflow974
  %1461 = add i32 %1453, %mul.result976
  %1462 = icmp slt i32 %1461, %1453
  %1463 = add i32 %1452, %mul.result979
  %1464 = icmp slt i32 %1463, %1452
  %1465 = or i1 %1457, %1460
  %1466 = or i1 %1462, %1465
  %1467 = or i1 %1464, %1466
  br i1 %1467, label %"for f78.s0.v3.preheader", label %vector.ph984

vector.ph984:                                     ; preds = %vector.scevcheck966
  %ind.end988 = add i32 %lsr.iv422, %1436
  %ind.end991 = add i32 %lsr.iv418, %1437
  %ind.end994 = add i32 %lsr.iv414, %1438
  %ind.end997 = add i32 %lsr.iv410, %1439
  br label %vector.body1005

vector.body1005:                                  ; preds = %vector.body1005, %vector.ph984
  %index1006 = phi i64 [ 0, %vector.ph984 ], [ %index.next1040, %vector.body1005 ]
  %.cast1008 = trunc i64 %index1006 to i32
  %1468 = shl i32 %.cast1008, 1
  %offset.idx1009 = add i32 %lsr.iv410, %1468
  %.cast1010 = trunc i64 %index1006 to i32
  %1469 = shl i32 %.cast1010, 1
  %offset.idx1011 = add i32 %lsr.iv414, %1469
  %.cast1012 = trunc i64 %index1006 to i32
  %1470 = shl i32 %.cast1012, 1
  %offset.idx1013 = add i32 %lsr.iv418, %1470
  %.cast1014 = trunc i64 %index1006 to i32
  %1471 = shl i32 %.cast1014, 1
  %offset.idx1015 = add i32 %lsr.iv422, %1471
  %1472 = add i32 %offset.idx1015, %53
  %1473 = add i32 %offset.idx1013, %53
  %1474 = add i32 %offset.idx1011, %53
  %1475 = add i32 %offset.idx1009, %53
  %1476 = sext i32 %1475 to i64
  %1477 = add nsw i64 %1476, 2
  %1478 = getelementptr float, ptr %1440, i64 %1477
  %wide.vec1016 = load <8 x float>, ptr %1478, align 4, !tbaa !19
  %strided.vec1017 = shufflevector <8 x float> %wide.vec1016, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1018 = shufflevector <8 x float> %wide.vec1016, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1479 = getelementptr float, ptr %1441, i64 %1476
  %wide.vec1019 = load <8 x float>, ptr %1479, align 4, !tbaa !19
  %strided.vec1020 = shufflevector <8 x float> %wide.vec1019, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1021 = shufflevector <8 x float> %wide.vec1019, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1480 = fadd <4 x float> %strided.vec1017, %strided.vec1021
  %1481 = fmul <4 x float> %1480, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1482 = fadd <4 x float> %strided.vec1020, %1481
  %1483 = fadd <4 x float> %strided.vec1018, %1482
  %1484 = fmul <4 x float> %1483, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1485 = sext i32 %1474 to i64
  %1486 = add nsw i64 %1485, 2
  %1487 = getelementptr float, ptr %1442, i64 %1486
  %wide.vec1022 = load <8 x float>, ptr %1487, align 4, !tbaa !19
  %strided.vec1023 = shufflevector <8 x float> %wide.vec1022, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1024 = shufflevector <8 x float> %wide.vec1022, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1488 = getelementptr float, ptr %1443, i64 %1485
  %wide.vec1025 = load <8 x float>, ptr %1488, align 4, !tbaa !19
  %strided.vec1026 = shufflevector <8 x float> %wide.vec1025, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1027 = shufflevector <8 x float> %wide.vec1025, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1489 = fadd <4 x float> %strided.vec1023, %strided.vec1027
  %1490 = fmul <4 x float> %1489, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1491 = fadd <4 x float> %strided.vec1026, %1490
  %1492 = fadd <4 x float> %strided.vec1024, %1491
  %1493 = sext i32 %1473 to i64
  %1494 = add nsw i64 %1493, 2
  %1495 = getelementptr float, ptr %1444, i64 %1494
  %wide.vec1028 = load <8 x float>, ptr %1495, align 4, !tbaa !19
  %strided.vec1029 = shufflevector <8 x float> %wide.vec1028, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1030 = shufflevector <8 x float> %wide.vec1028, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1496 = getelementptr float, ptr %1445, i64 %1493
  %wide.vec1031 = load <8 x float>, ptr %1496, align 4, !tbaa !19
  %strided.vec1032 = shufflevector <8 x float> %wide.vec1031, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1033 = shufflevector <8 x float> %wide.vec1031, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1497 = fadd <4 x float> %strided.vec1029, %strided.vec1033
  %1498 = fmul <4 x float> %1497, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1499 = fadd <4 x float> %strided.vec1032, %1498
  %1500 = fadd <4 x float> %strided.vec1030, %1499
  %1501 = fadd <4 x float> %1492, %1500
  %1502 = fmul <4 x float> %1501, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1503 = sext i32 %1472 to i64
  %1504 = add nsw i64 %1503, 2
  %1505 = getelementptr float, ptr %1446, i64 %1504
  %wide.vec1034 = load <8 x float>, ptr %1505, align 4, !tbaa !19
  %strided.vec1035 = shufflevector <8 x float> %wide.vec1034, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1036 = shufflevector <8 x float> %wide.vec1034, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1506 = getelementptr float, ptr %1447, i64 %1503
  %wide.vec1037 = load <8 x float>, ptr %1506, align 4, !tbaa !19
  %strided.vec1038 = shufflevector <8 x float> %wide.vec1037, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1039 = shufflevector <8 x float> %wide.vec1037, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1507 = fadd <4 x float> %strided.vec1035, %strided.vec1039
  %1508 = fmul <4 x float> %1507, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1509 = fadd <4 x float> %strided.vec1038, %1508
  %1510 = fadd <4 x float> %strided.vec1036, %1509
  %1511 = fmul <4 x float> %1510, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1512 = fadd <4 x float> %1502, %1511
  %1513 = fadd <4 x float> %1484, %1512
  %1514 = fmul <4 x float> %1513, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1515 = add i64 %index1006, %1449
  %1516 = getelementptr inbounds float, ptr %1401, i64 %1515
  store <4 x float> %1514, ptr %1516, align 4, !tbaa !23
  %index.next1040 = add nuw i64 %index1006, 4
  %1517 = icmp eq i64 %index.next1040, %n.vec986
  br i1 %1517, label %middle.block981, label %vector.body1005, !llvm.loop !25

middle.block981:                                  ; preds = %vector.body1005
  br i1 %cmp.n1004, label %"end for f78.s0.v3.loopexit", label %"for f78.s0.v3.preheader"

"for f78.s0.v3.preheader":                        ; preds = %vector.scevcheck966, %"for f78.s0.v4", %middle.block981
  %lsr.iv424.ph = phi i32 [ %lsr.iv422, %vector.scevcheck966 ], [ %lsr.iv422, %"for f78.s0.v4" ], [ %ind.end988, %middle.block981 ]
  %lsr.iv420.ph = phi i32 [ %lsr.iv418, %vector.scevcheck966 ], [ %lsr.iv418, %"for f78.s0.v4" ], [ %ind.end991, %middle.block981 ]
  %lsr.iv416.ph = phi i32 [ %lsr.iv414, %vector.scevcheck966 ], [ %lsr.iv414, %"for f78.s0.v4" ], [ %ind.end994, %middle.block981 ]
  %lsr.iv412.ph = phi i32 [ %lsr.iv410, %vector.scevcheck966 ], [ %lsr.iv410, %"for f78.s0.v4" ], [ %ind.end997, %middle.block981 ]
  %lsr.iv408.ph = phi i64 [ %1409, %vector.scevcheck966 ], [ %1409, %"for f78.s0.v4" ], [ %ind.end999, %middle.block981 ]
  %lsr.iv404.ph = phi i32 [ %1405, %vector.scevcheck966 ], [ %1405, %"for f78.s0.v4" ], [ %ind.end1002, %middle.block981 ]
  br label %"for f78.s0.v3"

"for f78.s0.v3":                                  ; preds = %"for f78.s0.v3.preheader", %"for f78.s0.v3"
  %lsr.iv424 = phi i32 [ %lsr.iv.next425, %"for f78.s0.v3" ], [ %lsr.iv424.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv420 = phi i32 [ %lsr.iv.next421, %"for f78.s0.v3" ], [ %lsr.iv420.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv416 = phi i32 [ %lsr.iv.next417, %"for f78.s0.v3" ], [ %lsr.iv416.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv412 = phi i32 [ %lsr.iv.next413, %"for f78.s0.v3" ], [ %lsr.iv412.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv408 = phi i64 [ %lsr.iv.next409, %"for f78.s0.v3" ], [ %lsr.iv408.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv404 = phi i32 [ %lsr.iv.next405, %"for f78.s0.v3" ], [ %lsr.iv404.ph, %"for f78.s0.v3.preheader" ]
  %1518 = add i32 %lsr.iv424, %53
  %1519 = add i32 %lsr.iv420, %53
  %1520 = add i32 %lsr.iv416, %53
  %1521 = add i32 %lsr.iv412, %53
  %1522 = sext i32 %1521 to i64
  %1523 = add nsw i64 %1522, 2
  %1524 = getelementptr inbounds float, ptr %1208, i64 %1523
  %1525 = load float, ptr %1524, align 4, !tbaa !19
  %1526 = getelementptr inbounds float, ptr %1208, i64 %1522
  %1527 = load <2 x float>, ptr %1526, align 4, !tbaa !19
  %shift1048 = shufflevector <2 x float> %1527, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1528 = fadd <2 x float> %shift1048, %1527
  %1529 = extractelement <2 x float> %1528, i64 0
  %1530 = fmul float %1529, 3.000000e+00
  %1531 = add nsw i64 %1522, -1
  %1532 = getelementptr inbounds float, ptr %1208, i64 %1531
  %1533 = sext i32 %1520 to i64
  %1534 = add nsw i64 %1533, 2
  %1535 = getelementptr inbounds float, ptr %1208, i64 %1534
  %1536 = getelementptr inbounds float, ptr %1208, i64 %1533
  %1537 = load <2 x float>, ptr %1536, align 4, !tbaa !19
  %shift1049 = shufflevector <2 x float> %1537, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1538 = fadd <2 x float> %shift1049, %1537
  %1539 = extractelement <2 x float> %1538, i64 0
  %1540 = fmul float %1539, 3.000000e+00
  %1541 = add nsw i64 %1533, -1
  %1542 = getelementptr inbounds float, ptr %1208, i64 %1541
  %1543 = load float, ptr %1542, align 4, !tbaa !19
  %1544 = fadd float %1543, %1540
  %1545 = sext i32 %1519 to i64
  %1546 = add nsw i64 %1545, 2
  %1547 = getelementptr inbounds float, ptr %1208, i64 %1546
  %1548 = load float, ptr %1547, align 4, !tbaa !19
  %1549 = getelementptr inbounds float, ptr %1208, i64 %1545
  %1550 = load <2 x float>, ptr %1549, align 4, !tbaa !19
  %shift1050 = shufflevector <2 x float> %1550, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1551 = fadd <2 x float> %shift1050, %1550
  %1552 = extractelement <2 x float> %1551, i64 0
  %1553 = fmul float %1552, 3.000000e+00
  %1554 = add nsw i64 %1545, -1
  %1555 = getelementptr inbounds float, ptr %1208, i64 %1554
  %1556 = load float, ptr %1555, align 4, !tbaa !19
  %1557 = fadd float %1556, %1553
  %1558 = fadd float %1548, %1557
  %1559 = load float, ptr %1532, align 4, !tbaa !19
  %1560 = load float, ptr %1535, align 4, !tbaa !19
  %1561 = insertelement <2 x float> poison, float %1559, i64 0
  %1562 = insertelement <2 x float> %1561, float %1560, i64 1
  %1563 = insertelement <2 x float> poison, float %1530, i64 0
  %1564 = insertelement <2 x float> %1563, float %1544, i64 1
  %1565 = fadd <2 x float> %1562, %1564
  %1566 = insertelement <2 x float> poison, float %1525, i64 0
  %1567 = insertelement <2 x float> %1566, float %1558, i64 1
  %1568 = fadd <2 x float> %1567, %1565
  %1569 = fmul <2 x float> %1568, <float 1.250000e-01, float 3.750000e-01>
  %1570 = sext i32 %1518 to i64
  %1571 = add nsw i64 %1570, 2
  %1572 = getelementptr inbounds float, ptr %1208, i64 %1571
  %1573 = load float, ptr %1572, align 4, !tbaa !19
  %1574 = getelementptr inbounds float, ptr %1208, i64 %1570
  %1575 = load <2 x float>, ptr %1574, align 4, !tbaa !19
  %shift1051 = shufflevector <2 x float> %1575, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1576 = fadd <2 x float> %shift1051, %1575
  %1577 = extractelement <2 x float> %1576, i64 0
  %1578 = fmul float %1577, 3.000000e+00
  %1579 = add nsw i64 %1570, -1
  %1580 = getelementptr inbounds float, ptr %1208, i64 %1579
  %1581 = load float, ptr %1580, align 4, !tbaa !19
  %1582 = fadd float %1581, %1578
  %1583 = fadd float %1573, %1582
  %1584 = fmul float %1583, 1.250000e-01
  %1585 = extractelement <2 x float> %1569, i64 1
  %1586 = fadd float %1585, %1584
  %1587 = extractelement <2 x float> %1569, i64 0
  %1588 = fadd float %1587, %1586
  %1589 = fmul float %1588, 1.250000e-01
  %1590 = add i64 %1450, %lsr.iv408
  %1591 = getelementptr inbounds float, ptr %1401, i64 %1590
  store float %1589, ptr %1591, align 4, !tbaa !23
  %lsr.iv.next405 = add i32 %lsr.iv404, -1
  %lsr.iv.next409 = add nsw i64 %lsr.iv408, 1
  %lsr.iv.next413 = add i32 %lsr.iv412, 2
  %lsr.iv.next417 = add i32 %lsr.iv416, 2
  %lsr.iv.next421 = add i32 %lsr.iv420, 2
  %lsr.iv.next425 = add i32 %lsr.iv424, 2
  %.not126 = icmp eq i32 %lsr.iv.next405, 0
  br i1 %.not126, label %"end for f78.s0.v3.loopexit", label %"for f78.s0.v3", !llvm.loop !26

"end for f78.s0.v3.loopexit":                     ; preds = %"for f78.s0.v3", %middle.block981
  %lsr.iv.next407 = add nsw i64 %lsr.iv406, 1
  %lsr426 = trunc i64 %lsr.iv.next407 to i32
  %lsr.iv.next411 = add i32 %lsr.iv410, %1408
  %lsr.iv.next415 = add i32 %lsr.iv414, %1408
  %lsr.iv.next419 = add i32 %lsr.iv418, %1408
  %lsr.iv.next423 = add i32 %lsr.iv422, %1408
  %.not125 = icmp eq i32 %1403, %lsr426
  %indvar.next968 = add i32 %indvar967, 1
  br i1 %.not125, label %"assert succeeded188", label %"for f78.s0.v4"

"assert succeeded188":                            ; preds = %"end for f78.s0.v3.loopexit"
  %1592 = call ptr @halide_malloc(ptr null, i64 %1400)
  %.not531 = icmp eq ptr %1592, null
  br i1 %.not531, label %call_destructor.exit210, label %"for f132.s0.v4.preheader", !prof !4

"assert succeeded188.thread817":                  ; preds = %"for f78.s0.v4.preheader"
  %1593 = call ptr @halide_malloc(ptr null, i64 %1400)
  %.not531818 = icmp eq ptr %1593, null
  br i1 %.not531818, label %call_destructor.exit210, label %if.then.i298, !prof !4

"assert succeeded188.thread":                     ; preds = %"produce f78"
  %1594 = call ptr @halide_malloc(ptr null, i64 %1400)
  %.not534 = icmp eq ptr %1594, null
  br i1 %.not534, label %call_destructor.exit210, label %if.then.i298, !prof !4

"for f132.s0.v4.preheader":                       ; preds = %"assert succeeded188"
  %1595 = sext i32 %f10.stride.2 to i64
  br i1 %.not124, label %if.then.i298, label %"for f132.s0.v4", !prof !4

"for f132.s0.v4":                                 ; preds = %"for f132.s0.v4.preheader", %"end for f132.s0.v3.loopexit"
  %lsr.iv395 = phi i64 [ %lsr.iv.next396, %"end for f132.s0.v3.loopexit" ], [ %1407, %"for f132.s0.v4.preheader" ]
  %lsr403 = trunc i64 %lsr.iv395 to i32
  %1596 = sub nsw i32 %lsr403, %43
  %1597 = mul i32 %1596, %1405
  %1598 = sub i32 %1597, %52
  %1599 = sub nsw i64 %lsr.iv395, %1407
  %1600 = mul nsw i64 %1599, %1406
  %1601 = sub i64 %1600, %1409
  br label %"for f132.s0.v3"

if.then.i298:                                     ; preds = %"end for f132.s0.v3.loopexit", %"assert succeeded188.thread817", %"for f132.s0.v4.preheader", %"assert succeeded188.thread"
  %1602 = phi ptr [ %1594, %"assert succeeded188.thread" ], [ %1592, %"for f132.s0.v4.preheader" ], [ %1593, %"assert succeeded188.thread817" ], [ %1592, %"end for f132.s0.v3.loopexit" ]
  call void @halide_free(ptr null, ptr nonnull %1401) #7
  %f131.v3.extent_realized.s = sub nsw i32 %a2, %a3
  %f131.v4.extent_realized.s = sub nsw i32 1, %a1
  %1603 = add nsw i32 %f131.v4.extent_realized.s, %a0
  %1604 = zext i32 %1603 to i64
  %1605 = add nsw i32 %f131.v3.extent_realized.s, 1
  %1606 = zext i32 %1605 to i64
  %1607 = shl nuw nsw i64 %1606, 2
  %1608 = mul i64 %1607, %1604
  %1609 = icmp ult i64 %1608, 2147483648
  %1610 = and i64 %1607, 4294967292
  %1611 = mul nuw i64 %1610, %1604
  %1612 = lshr i64 %1611, 32
  %1613 = lshr i64 %1606, 30
  %1614 = mul nuw nsw i64 %1613, %1604
  %1615 = add nuw nsw i64 %1612, %1614
  %1616 = icmp ult i64 %1615, 4294967296
  %1617 = and i1 %1609, %1616
  br i1 %1617, label %"assert succeeded192", label %"assert failed191", !prof !5

"for f132.s0.v3":                                 ; preds = %"for f132.s0.v3", %"for f132.s0.v4"
  %lsr.iv397 = phi i64 [ %1409, %"for f132.s0.v4" ], [ %lsr.iv.next398, %"for f132.s0.v3" ]
  %lsr.iv393 = phi i32 [ %1405, %"for f132.s0.v4" ], [ %lsr.iv.next394, %"for f132.s0.v3" ]
  %1618 = trunc i64 %lsr.iv397 to i32
  %tmp401 = add i32 %1598, %1618
  %1619 = sext i32 %tmp401 to i64
  %1620 = getelementptr inbounds float, ptr %1401, i64 %1619
  %1621 = load float, ptr %1620, align 4, !tbaa !23
  %t2188 = fmul float %1621, %55
  %a752 = fptosi float %t2188 to i32
  %a755 = call i32 @llvm.smin.i32(i32 %b6, i32 %a752)
  %1622 = call i32 @llvm.smax.i32(i32 %a755, i32 0)
  %1623 = sitofp i32 %1622 to float
  %t2190 = fsub float %t2188, %1623
  %t2191 = sub nsw i32 %1622, %111
  %1624 = sext i32 %t2191 to i64
  %1625 = add nsw i64 %1624, 1
  %1626 = mul nsw i64 %1625, %1595
  %1627 = add nsw i64 %1626, %1619
  %1628 = getelementptr inbounds float, ptr %1174, i64 %1627
  %1629 = load float, ptr %1628, align 4, !tbaa !27
  %1630 = fmul float %1629, %t2190
  %1631 = mul nsw i64 %1624, %1595
  %1632 = add nsw i64 %1631, %1619
  %1633 = getelementptr inbounds float, ptr %1174, i64 %1632
  %1634 = load float, ptr %1633, align 4, !tbaa !27
  %1635 = fsub float 1.000000e+00, %t2190
  %1636 = fmul float %1634, %1635
  %1637 = fadd float %1630, %1636
  %1638 = add i64 %1601, %lsr.iv397
  %1639 = getelementptr inbounds float, ptr %1592, i64 %1638
  store float %1637, ptr %1639, align 4, !tbaa !29
  %lsr.iv.next394 = add i32 %lsr.iv393, -1
  %lsr.iv.next398 = add nsw i64 %lsr.iv397, 1
  %.not122 = icmp eq i32 %lsr.iv.next394, 0
  br i1 %.not122, label %"end for f132.s0.v3.loopexit", label %"for f132.s0.v3"

"end for f132.s0.v3.loopexit":                    ; preds = %"for f132.s0.v3"
  %lsr.iv.next396 = add nsw i64 %lsr.iv395, 1
  %lsr402 = trunc i64 %lsr.iv.next396 to i32
  %.not121 = icmp eq i32 %1403, %lsr402
  br i1 %.not121, label %if.then.i298, label %"for f132.s0.v4"

"assert failed191":                               ; preds = %if.then.i298
  %1640 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.26, i64 %1608, i64 2147483647) #4
  br label %call_destructor.exit205

"assert succeeded192":                            ; preds = %if.then.i298
  %1641 = add nuw nsw i64 %1608, 4
  %1642 = call ptr @halide_malloc(ptr null, i64 %1641)
  %.not532 = icmp eq ptr %1642, null
  br i1 %.not532, label %"assert failed193", label %"produce f131", !prof !4

"assert failed193":                               ; preds = %"assert succeeded192"
  %1643 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit205

"produce f131":                                   ; preds = %"assert succeeded192"
  %1644 = add nsw i32 %a0, 1
  %.not110 = icmp slt i32 %a0, %a1
  br i1 %.not110, label %"consume f131", label %"for f131.s0.v4.preheader", !prof !4

"for f131.s0.v4.preheader":                       ; preds = %"produce f131"
  %1645 = sub nsw i32 1, %a3
  %1646 = add nsw i32 %1645, %a2
  %1647 = sext i32 %1605 to i64
  %1648 = sext i32 %a1 to i64
  %1649 = add i32 %f9.v3.extent_realized.s.s, 1
  %1650 = sub i32 %1649, %f9.v3.min_realized
  %1651 = sext i32 %b753 to i64
  %1652 = sext i32 %b751 to i64
  %1653 = sub nsw i64 1, %1652
  %1654 = add nsw i64 %1653, %1651
  %.not116 = icmp slt i32 %a2, %a3
  %1655 = sext i32 %a3 to i64
  %1656 = xor i32 %43, -1
  %1657 = sext i32 %f10.stride.2 to i64
  %1658 = sext i32 %f9.stride.2 to i64
  br i1 %.not116, label %"consume f131", label %"for f131.s0.v4.preheader548", !prof !4

"for f131.s0.v4.preheader548":                    ; preds = %"for f131.s0.v4.preheader"
  %1659 = sext i32 %b748 to i64
  %1660 = sub nsw i64 %1648, %1659
  %1661 = mul i64 %1654, %1660
  %1662 = sub i64 %1661, %1652
  %1663 = sub i32 %a1, %f9.v4.min_realized
  %1664 = mul i32 %1650, %1663
  %1665 = sub i32 %1664, %f9.v3.min_realized
  br label %"for f131.s0.v4"

"for f131.s0.v4":                                 ; preds = %"for f131.s0.v4.preheader548", %"end for f131.s0.v3.loopexit"
  %lsr.iv385 = phi i64 [ %lsr.iv.next386, %"end for f131.s0.v3.loopexit" ], [ %1662, %"for f131.s0.v4.preheader548" ]
  %lsr.iv378 = phi i32 [ %lsr.iv.next379, %"end for f131.s0.v3.loopexit" ], [ %1665, %"for f131.s0.v4.preheader548" ]
  %lsr.iv374 = phi i64 [ %lsr.iv.next375, %"end for f131.s0.v3.loopexit" ], [ %1648, %"for f131.s0.v4.preheader548" ]
  %lsr392 = trunc i64 %lsr.iv374 to i32
  %1666 = add i32 %lsr.iv378, %a3
  %1667 = add i64 %lsr.iv385, %1655
  %1668 = shl i64 %1667, 2
  %scevgep387 = getelementptr i8, ptr %1208, i64 %1668
  %1669 = shl i32 %lsr392, 1
  %1670 = and i32 %1669, 2
  %1671 = ashr i32 %lsr392, 1
  %1672 = add nsw i32 %1671, %1656
  %1673 = add nsw i32 %1672, %1670
  %t2196 = mul nsw i32 %1673, %1152
  %1674 = sub nsw i32 %1671, %43
  %t2200 = mul nsw i32 %1674, %1152
  %1675 = sext i32 %t2200 to i64
  %1676 = sext i32 %t2196 to i64
  %1677 = sub nsw i64 %lsr.iv374, %1648
  %1678 = mul nsw i64 %1677, %1647
  %1679 = sub i64 %1678, %1655
  br label %"for f131.s0.v3"

"for f131.s0.v3":                                 ; preds = %"for f131.s0.v3", %"for f131.s0.v4"
  %lsr.iv388 = phi ptr [ %scevgep387, %"for f131.s0.v4" ], [ %scevgep389, %"for f131.s0.v3" ]
  %lsr.iv380 = phi i32 [ %1666, %"for f131.s0.v4" ], [ %lsr.iv.next381, %"for f131.s0.v3" ]
  %lsr.iv376 = phi i64 [ %1655, %"for f131.s0.v4" ], [ %lsr.iv.next377, %"for f131.s0.v3" ]
  %lsr.iv372 = phi i32 [ %1646, %"for f131.s0.v4" ], [ %lsr.iv.next373, %"for f131.s0.v3" ]
  %1680 = load float, ptr %lsr.iv388, align 4, !tbaa !19
  %t2192 = fmul float %1680, %55
  %a756 = fptosi float %t2192 to i32
  %a759 = call i32 @llvm.smin.i32(i32 %b6, i32 %a756)
  %1681 = call i32 @llvm.smax.i32(i32 %a759, i32 0)
  %1682 = sitofp i32 %1681 to float
  %t2194 = fsub float %t2192, %1682
  %tmp384 = trunc i64 %lsr.iv376 to i32
  %1683 = shl i32 %tmp384, 1
  %1684 = and i32 %1683, 2
  %1685 = ashr i32 %tmp384, 1
  %1686 = sub nsw i32 %1685, %52
  %t2195 = add nsw i32 %1686, %1684
  %t2204 = sub nsw i32 %1681, %111
  %1687 = sext i32 %t2204 to i64
  %1688 = add nsw i64 %1687, 1
  %1689 = mul nsw i64 %1688, %1657
  %1690 = sext i32 %1686 to i64
  %1691 = add nsw i64 %1690, %1675
  %1692 = add nsw i64 %1689, %1691
  %1693 = getelementptr inbounds float, ptr %1174, i64 %1692
  %1694 = sext i32 %t2195 to i64
  %1695 = add nsw i64 %1694, %1675
  %1696 = add nsw i64 %1695, -1
  %1697 = add nsw i64 %1696, %1689
  %1698 = getelementptr inbounds float, ptr %1174, i64 %1697
  %1699 = add nsw i64 %1690, %1676
  %1700 = add nsw i64 %1689, %1699
  %1701 = getelementptr inbounds float, ptr %1174, i64 %1700
  %1702 = add nsw i64 %1694, %1676
  %1703 = add nsw i64 %1702, -1
  %1704 = add nsw i64 %1703, %1689
  %1705 = getelementptr inbounds float, ptr %1174, i64 %1704
  %1706 = load float, ptr %1693, align 4, !tbaa !27
  %1707 = load float, ptr %1698, align 4, !tbaa !27
  %1708 = load float, ptr %1701, align 4, !tbaa !27
  %1709 = insertelement <2 x float> poison, float %1707, i64 0
  %1710 = insertelement <2 x float> %1709, float %1708, i64 1
  %1711 = fmul <2 x float> %1710, <float 2.500000e-01, float 7.500000e-01>
  %1712 = load float, ptr %1705, align 4, !tbaa !27
  %1713 = insertelement <2 x float> poison, float %1706, i64 0
  %1714 = insertelement <2 x float> %1713, float %1712, i64 1
  %1715 = fmul <2 x float> %1714, <float 7.500000e-01, float 2.500000e-01>
  %1716 = fadd <2 x float> %1711, %1715
  %1717 = fmul <2 x float> %1716, <float 7.500000e-01, float 2.500000e-01>
  %shift1052 = shufflevector <2 x float> %1717, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1718 = fadd <2 x float> %1717, %shift1052
  %1719 = extractelement <2 x float> %1718, i64 0
  %1720 = mul nsw i64 %1688, %1658
  %1721 = sext i32 %lsr.iv380 to i64
  %1722 = add nsw i64 %1720, %1721
  %1723 = getelementptr inbounds float, ptr %921, i64 %1722
  %1724 = load float, ptr %1723, align 4, !tbaa !31
  %1725 = fsub float %1724, %1719
  %1726 = fmul float %t2194, %1725
  %1727 = mul nsw i64 %1687, %1657
  %1728 = add nsw i64 %1727, %1691
  %1729 = getelementptr inbounds float, ptr %1174, i64 %1728
  %1730 = add nsw i64 %1696, %1727
  %1731 = getelementptr inbounds float, ptr %1174, i64 %1730
  %1732 = add nsw i64 %1727, %1699
  %1733 = getelementptr inbounds float, ptr %1174, i64 %1732
  %1734 = add nsw i64 %1703, %1727
  %1735 = getelementptr inbounds float, ptr %1174, i64 %1734
  %1736 = load float, ptr %1729, align 4, !tbaa !27
  %1737 = load float, ptr %1731, align 4, !tbaa !27
  %1738 = load float, ptr %1733, align 4, !tbaa !27
  %1739 = insertelement <2 x float> poison, float %1737, i64 0
  %1740 = insertelement <2 x float> %1739, float %1738, i64 1
  %1741 = fmul <2 x float> %1740, <float 2.500000e-01, float 7.500000e-01>
  %1742 = load float, ptr %1735, align 4, !tbaa !27
  %1743 = insertelement <2 x float> poison, float %1736, i64 0
  %1744 = insertelement <2 x float> %1743, float %1742, i64 1
  %1745 = fmul <2 x float> %1744, <float 7.500000e-01, float 2.500000e-01>
  %1746 = fadd <2 x float> %1741, %1745
  %1747 = fmul <2 x float> %1746, <float 7.500000e-01, float 2.500000e-01>
  %shift1053 = shufflevector <2 x float> %1747, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1748 = fadd <2 x float> %1747, %shift1053
  %1749 = extractelement <2 x float> %1748, i64 0
  %1750 = mul nsw i64 %1687, %1658
  %1751 = add nsw i64 %1750, %1721
  %1752 = getelementptr inbounds float, ptr %921, i64 %1751
  %1753 = load float, ptr %1752, align 4, !tbaa !31
  %1754 = fsub float %1753, %1749
  %1755 = fsub float 1.000000e+00, %t2194
  %1756 = fmul float %1755, %1754
  %1757 = fadd float %1726, %1756
  %1758 = getelementptr inbounds float, ptr %1602, i64 %1691
  %1759 = getelementptr inbounds float, ptr %1602, i64 %1696
  %1760 = getelementptr inbounds float, ptr %1602, i64 %1699
  %1761 = getelementptr inbounds float, ptr %1602, i64 %1703
  %1762 = load float, ptr %1758, align 4, !tbaa !29
  %1763 = load float, ptr %1759, align 4, !tbaa !29
  %1764 = load float, ptr %1760, align 4, !tbaa !29
  %1765 = insertelement <2 x float> poison, float %1763, i64 0
  %1766 = insertelement <2 x float> %1765, float %1764, i64 1
  %1767 = fmul <2 x float> %1766, <float 2.500000e-01, float 7.500000e-01>
  %1768 = load float, ptr %1761, align 4, !tbaa !29
  %1769 = insertelement <2 x float> poison, float %1762, i64 0
  %1770 = insertelement <2 x float> %1769, float %1768, i64 1
  %1771 = fmul <2 x float> %1770, <float 7.500000e-01, float 2.500000e-01>
  %1772 = fadd <2 x float> %1767, %1771
  %1773 = fmul <2 x float> %1772, <float 7.500000e-01, float 2.500000e-01>
  %shift1054 = shufflevector <2 x float> %1773, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1774 = fadd <2 x float> %1773, %shift1054
  %1775 = extractelement <2 x float> %1774, i64 0
  %1776 = fadd float %1757, %1775
  %1777 = add i64 %1679, %lsr.iv376
  %1778 = getelementptr inbounds float, ptr %1642, i64 %1777
  store float %1776, ptr %1778, align 4, !tbaa !33
  %lsr.iv.next373 = add i32 %lsr.iv372, -1
  %lsr.iv.next377 = add nsw i64 %lsr.iv376, 1
  %lsr.iv.next381 = add i32 %lsr.iv380, 1
  %scevgep389 = getelementptr i8, ptr %lsr.iv388, i64 4
  %.not118 = icmp eq i32 %lsr.iv.next373, 0
  br i1 %.not118, label %"end for f131.s0.v3.loopexit", label %"for f131.s0.v3"

"end for f131.s0.v3.loopexit":                    ; preds = %"for f131.s0.v3"
  %lsr.iv.next375 = add nsw i64 %lsr.iv374, 1
  %lsr391 = trunc i64 %lsr.iv.next375 to i32
  %lsr.iv.next379 = add i32 %lsr.iv378, %1650
  %lsr.iv.next386 = add i64 %lsr.iv385, %1654
  %.not117 = icmp eq i32 %1644, %lsr391
  br i1 %.not117, label %"consume f131", label %"for f131.s0.v4"

"consume f131":                                   ; preds = %"end for f131.s0.v3.loopexit", %"for f131.s0.v4.preheader", %"produce f131"
  call void @halide_free(ptr null, ptr nonnull %1174) #7
  call void @halide_free(ptr null, ptr nonnull %1208) #7
  call void @halide_free(ptr null, ptr nonnull %1602) #7
  %1779 = call i32 @llvm.smax.i32(i32 %812, i32 %59)
  %1780 = ashr i32 %1779, 5
  %.not170 = icmp slt i32 %a9, %814
  %f130.v3.min_realized = select i1 %.not170, i32 %a9, i32 %b670
  %1781 = call i32 @llvm.smax.i32(i32 %b681, i32 %a8)
  %f130.v3.extent_realized.s = sub nsw i32 %1781, %f130.v3.min_realized
  %f130.v4.extent_realized.s = sub nsw i32 1, %b655
  %1782 = add nsw i32 %f130.v4.extent_realized.s, %1780
  %1783 = zext i32 %1782 to i64
  %1784 = add nsw i32 %f130.v3.extent_realized.s, 1
  %1785 = zext i32 %1784 to i64
  %1786 = shl nuw nsw i64 %1785, 2
  %1787 = mul i64 %1786, %1783
  %1788 = icmp ult i64 %1787, 2147483648
  %1789 = and i64 %1786, 4294967292
  %1790 = mul nuw i64 %1789, %1783
  %1791 = lshr i64 %1790, 32
  %1792 = lshr i64 %1785, 30
  %1793 = mul nuw nsw i64 %1792, %1783
  %1794 = add nuw nsw i64 %1791, %1793
  %1795 = icmp ult i64 %1794, 4294967296
  %1796 = and i1 %1788, %1795
  br i1 %1796, label %"assert succeeded196", label %"assert failed195", !prof !5

"assert failed195":                               ; preds = %"consume f131"
  %1797 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.27, i64 %1787, i64 2147483647) #4
  br label %call_destructor.exit

"assert succeeded196":                            ; preds = %"consume f131"
  %1798 = add nuw nsw i64 %1787, 4
  %1799 = call ptr @halide_malloc(ptr null, i64 %1798)
  %.not533 = icmp eq ptr %1799, null
  br i1 %.not533, label %"assert failed197", label %"produce f130", !prof !4

"assert failed197":                               ; preds = %"assert succeeded196"
  %1800 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit

"produce f130":                                   ; preds = %"assert succeeded196"
  %1801 = add nsw i32 %a6, 1
  %.not111 = icmp sgt i32 %a7, %a6
  br i1 %.not111, label %"end for f130.s0.v4", label %"for f130.s0.v4.preheader", !prof !4

"for f130.s0.v4.preheader":                       ; preds = %"produce f130"
  %1802 = sub nsw i32 1, %a9
  %1803 = add nsw i32 %1802, %a8
  %narrow = mul nsw i32 %f130.v3.min_realized, -4
  %1804 = sext i32 %narrow to i64
  %scevgep = getelementptr i8, ptr %1799, i64 %1804
  %1805 = sext i32 %f130.v3.extent_realized.s to i64
  %1806 = shl nsw i64 %1805, 2
  %1807 = add nsw i64 %1806, 4
  %1808 = sub i32 1, %f8.v3.min_realized
  %1809 = add i32 %1808, %816
  %1810 = sext i32 %b739 to i64
  %1811 = sext i32 %b737 to i64
  %1812 = sub nsw i64 1, %1811
  %1813 = add nsw i64 %1812, %1810
  %.not112 = icmp sgt i32 %a9, %a8
  %1814 = sext i32 %a9 to i64
  %1815 = xor i32 %a1, -1
  %1816 = xor i32 %f9.v4.min_realized, -1
  %1817 = sext i32 %f9.stride.2 to i64
  %1818 = sext i32 %f9.v3.min_realized to i64
  %1819 = sext i32 %f8.stride.2 to i64
  %1820 = sext i32 %b655 to i64
  br i1 %.not112, label %"end for f130.s0.v4", label %"for f130.s0.v4.preheader546", !prof !4

"for f130.s0.v4.preheader546":                    ; preds = %"for f130.s0.v4.preheader"
  %1821 = sext i32 %a7 to i64
  %1822 = sext i32 %b733 to i64
  %1823 = sub nsw i64 %1821, %1822
  %1824 = mul i64 %1813, %1823
  %1825 = sub i64 %1824, %1811
  %1826 = sub i32 %a7, %f8.v4.min_realized
  %1827 = mul i32 %1809, %1826
  %1828 = sub i32 %1827, %f8.v3.min_realized
  br label %"for f130.s0.v4"

"for f130.s0.v4":                                 ; preds = %"for f130.s0.v4.preheader546", %"end for f130.s0.v3.loopexit"
  %lsr.iv363 = phi i64 [ %lsr.iv.next364, %"end for f130.s0.v3.loopexit" ], [ %1825, %"for f130.s0.v4.preheader546" ]
  %lsr.iv358 = phi i32 [ %lsr.iv.next359, %"end for f130.s0.v3.loopexit" ], [ %1828, %"for f130.s0.v4.preheader546" ]
  %lsr.iv348 = phi i64 [ %lsr.iv.next349, %"end for f130.s0.v3.loopexit" ], [ %1821, %"for f130.s0.v4.preheader546" ]
  %lsr371 = trunc i64 %lsr.iv348 to i32
  %1829 = add i32 %lsr.iv358, %a9
  %1830 = add i64 %lsr.iv363, %1814
  %1831 = shl i64 %1830, 2
  %scevgep365 = getelementptr i8, ptr %958, i64 %1831
  %1832 = shl i32 %lsr371, 1
  %1833 = and i32 %1832, 2
  %1834 = ashr i32 %lsr371, 1
  %t2210 = add nsw i32 %1833, %1834
  %1835 = add nsw i32 %t2210, %1815
  %t2216 = mul nsw i32 %1835, %1605
  %1836 = sub nsw i32 %1834, %a1
  %t2218 = mul nsw i32 %1836, %1605
  %1837 = add i32 %t2210, %1816
  %t2223 = mul nsw i32 %1837, %900
  %1838 = sub nsw i32 %1834, %f9.v4.min_realized
  %t2228 = mul nsw i32 %1838, %900
  %1839 = sext i32 %t2228 to i64
  %1840 = sext i32 %t2223 to i64
  %1841 = sext i32 %t2218 to i64
  %1842 = sext i32 %t2216 to i64
  %1843 = sub i64 %lsr.iv348, %1820
  %1844 = mul i64 %1843, %1807
  %scevgep350 = getelementptr i8, ptr %scevgep, i64 %1844
  br label %"for f130.s0.v3"

"end for f130.s0.v4":                             ; preds = %"end for f130.s0.v3.loopexit", %"for f130.s0.v4.preheader", %"produce f130"
  call void @halide_free(ptr null, ptr nonnull %921) #7
  call void @halide_free(ptr null, ptr nonnull %958) #7
  call void @halide_free(ptr null, ptr nonnull %1642) #7
  %1845 = sub nsw i32 %129, %a114
  %1846 = add nsw i32 %1845, 63
  %a775 = lshr i32 %1846, 6
  %1847 = icmp sgt i32 %1845, 0
  %1848 = select i1 %1847, i32 %a775, i32 0
  %1849 = add nsw i32 %local_laplacian.extent.1, 63
  %b776 = ashr i32 %1849, 6
  %local_laplacian.s0.v4.v264.prologue = call i32 @llvm.smin.i32(i32 %b776, i32 %1848)
  %1850 = sub nsw i32 %130, %a114
  %1851 = ashr i32 %1850, 6
  %a780 = add nsw i32 %1851, -1
  %1852 = call i32 @llvm.smin.i32(i32 %b88, i32 %b91)
  %1853 = sub nsw i32 %1852, %a114
  %b782 = ashr i32 %1853, 6
  %.not171 = icmp slt i32 %b782, %1851
  %a779 = select i1 %.not171, i32 %b782, i32 %a780
  %1854 = call i32 @llvm.smin.i32(i32 %137, i32 %a779)
  %b778 = add nsw i32 %1854, 1
  %local_laplacian.s0.v4.v264.epilogue = call i32 @llvm.smax.i32(i32 %local_laplacian.s0.v4.v264.prologue, i32 %b778)
  store float %beta, ptr %0, align 8
  %1855 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 1
  store i32 %b121, ptr %1855, align 4
  %1856 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 2
  store i32 %a772, ptr %1856, align 8
  %1857 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 3
  store i32 %f130.v3.extent_realized.s, ptr %1857, align 4
  %1858 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 4
  store i32 %f130.v3.min_realized, ptr %1858, align 8
  %1859 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 5
  store i32 %f2.v3.extent_realized.s, ptr %1859, align 4
  %1860 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 6
  store i32 %f2.v3.min_realized, ptr %1860, align 8
  %1861 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 7
  store i32 %f2.v4.min_realized, ptr %1861, align 4
  %1862 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 8
  store i32 %f4.stride.1, ptr %1862, align 8
  %1863 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 9
  store i32 %f4.v3.extent_realized.s, ptr %1863, align 4
  %1864 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 10
  store i32 %f4.v3.min_realized, ptr %1864, align 8
  %1865 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 11
  store i32 %f4.v4.min_realized, ptr %1865, align 4
  %1866 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 12
  store i32 %f5.stride.1, ptr %1866, align 8
  %1867 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 13
  store i32 %f5.v3.extent_realized.s, ptr %1867, align 4
  %1868 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 14
  store i32 %f5.v3.min_realized, ptr %1868, align 8
  %1869 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 15
  store i32 %f5.v4.min_realized, ptr %1869, align 4
  %1870 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 16
  store i32 %f6.stride.1, ptr %1870, align 8
  %1871 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 17
  store i32 %f6.v3.extent_realized.s, ptr %1871, align 4
  %1872 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 18
  store i32 %f6.v3.min_realized, ptr %1872, align 8
  %1873 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 19
  store i32 %f6.v4.min_realized, ptr %1873, align 4
  %1874 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 20
  store i32 %f7.stride.1, ptr %1874, align 8
  %1875 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 21
  store i32 %f7.v3.extent_realized.s, ptr %1875, align 4
  %1876 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 22
  store i32 %f7.v3.min_realized, ptr %1876, align 8
  %1877 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 23
  store i32 %f7.v4.min_realized, ptr %1877, align 4
  %1878 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 24
  store i32 %f72.v3.extent_realized.s, ptr %1878, align 8
  %1879 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 25
  store i32 %f72.v3.min_realized, ptr %1879, align 4
  %1880 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 26
  store i32 %f72.v4.min_realized, ptr %1880, align 8
  %1881 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 27
  store i32 %f73.v3.extent_realized.s, ptr %1881, align 4
  %1882 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 28
  store i32 %f73.v3.min_realized, ptr %1882, align 8
  %1883 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 29
  store i32 %f73.v4.min_realized, ptr %1883, align 4
  %1884 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 30
  store i32 %f74.v3.extent_realized.s, ptr %1884, align 8
  %1885 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 31
  store i32 %f74.v3.min_realized, ptr %1885, align 4
  %1886 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 32
  store i32 %f74.v4.min_realized, ptr %1886, align 8
  %1887 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 33
  store i32 %f75.v3.extent_realized.s, ptr %1887, align 4
  %1888 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 34
  store i32 %f75.v3.min_realized, ptr %1888, align 8
  %1889 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 35
  store i32 %f75.v4.min_realized, ptr %1889, align 4
  %1890 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 36
  store i32 %f8.stride.2, ptr %1890, align 8
  %1891 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 37
  store i32 %f8.v3.extent_realized.s, ptr %1891, align 4
  %1892 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 38
  store i32 %f8.v3.min_realized, ptr %1892, align 8
  %1893 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 39
  store i32 %f8.v4.min_realized, ptr %1893, align 4
  %1894 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 40
  store i32 %input.extent.0, ptr %1894, align 8
  %1895 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 41
  %1896 = shufflevector <2 x i32> %16, <2 x i32> %21, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %1896, ptr %1895, align 4
  %1897 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 45
  store i32 %b108, ptr %1897, align 4
  %1898 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 46
  store i32 %input.stride.1, ptr %1898, align 8
  %1899 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 47
  store i32 %input.stride.2, ptr %1899, align 4
  %1900 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 48
  store i32 %levels, ptr %1900, align 8
  %1901 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 49
  store i32 %local_laplacian.extent.0, ptr %1901, align 4
  %1902 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 50
  store i32 %local_laplacian.extent.1, ptr %1902, align 8
  %1903 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 51
  store i32 %local_laplacian.extent.2, ptr %1903, align 4
  %1904 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 52
  store i32 %a286, ptr %1904, align 8
  %1905 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 53
  store i32 %b74, ptr %1905, align 4
  %1906 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 54
  store i32 %a114, ptr %1906, align 8
  %1907 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 55
  store i32 %b89, ptr %1907, align 4
  %1908 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 56
  store i32 %a108, ptr %1908, align 8
  %1909 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 57
  store i32 %local_laplacian.s0.v4.v264.epilogue, ptr %1909, align 4
  %1910 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 58
  store i32 %local_laplacian.s0.v4.v264.prologue, ptr %1910, align 8
  %1911 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 59
  store i32 %local_laplacian.stride.1, ptr %1911, align 4
  %1912 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 60
  store i32 %local_laplacian.stride.2, ptr %1912, align 8
  %1913 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 61
  store ptr %209, ptr %1913, align 8
  %1914 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 62
  store ptr null, ptr %1914, align 8
  %1915 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 63
  store ptr %1799, ptr %1915, align 8
  %1916 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 64
  store ptr null, ptr %1916, align 8
  %1917 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 65
  store ptr %340, ptr %1917, align 8
  %1918 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 66
  store ptr null, ptr %1918, align 8
  %1919 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 67
  store ptr %424, ptr %1919, align 8
  %1920 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 68
  store ptr null, ptr %1920, align 8
  %1921 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 69
  store ptr %503, ptr %1921, align 8
  %1922 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 70
  store ptr null, ptr %1922, align 8
  %1923 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 71
  store ptr %628, ptr %1923, align 8
  %1924 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 72
  store ptr null, ptr %1924, align 8
  %1925 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 73
  store ptr %737, ptr %1925, align 8
  %1926 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 74
  store ptr null, ptr %1926, align 8
  %1927 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 75
  store ptr %559, ptr %1927, align 8
  %1928 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 76
  store ptr null, ptr %1928, align 8
  %1929 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 77
  store ptr %684, ptr %1929, align 8
  %1930 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 78
  store ptr null, ptr %1930, align 8
  %1931 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 79
  store ptr %793, ptr %1931, align 8
  %1932 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 80
  store ptr null, ptr %1932, align 8
  %1933 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 81
  store ptr %879, ptr %1933, align 8
  %1934 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 82
  store ptr null, ptr %1934, align 8
  %1935 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 83
  store ptr %839, ptr %1935, align 8
  %1936 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 84
  store ptr null, ptr %1936, align 8
  %1937 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 85
  store ptr %input.host, ptr %1937, align 8
  %1938 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 86
  store ptr %input.buffer, ptr %1938, align 8
  %1939 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 87
  store ptr %local_laplacian.host, ptr %1939, align 8
  %1940 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 88
  store ptr %local_laplacian.buffer, ptr %1940, align 8
  %1941 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_local_laplacian.s0.v4.v264, i32 0, i32 %b776, ptr nonnull %0)
  %1942 = icmp eq i32 %1941, 0
  br i1 %1942, label %if.then.i319, label %call_destructor.exit235.sink.split, !prof !5

"for f130.s0.v3":                                 ; preds = %"for f130.s0.v3", %"for f130.s0.v4"
  %lsr.iv366 = phi ptr [ %scevgep365, %"for f130.s0.v4" ], [ %scevgep367, %"for f130.s0.v3" ]
  %lsr.iv360 = phi i32 [ %1829, %"for f130.s0.v4" ], [ %lsr.iv.next361, %"for f130.s0.v3" ]
  %lsr.iv352 = phi i64 [ %1814, %"for f130.s0.v4" ], [ %lsr.iv.next353, %"for f130.s0.v3" ]
  %lsr.iv = phi i32 [ %1803, %"for f130.s0.v4" ], [ %lsr.iv.next, %"for f130.s0.v3" ]
  %tmp370 = trunc i64 %lsr.iv352 to i32
  %1943 = shl i32 %tmp370, 1
  %1944 = and i32 %1943, 2
  %1945 = ashr i32 %tmp370, 1
  %t2211 = add nsw i32 %1944, %1945
  %1946 = load float, ptr %lsr.iv366, align 4, !tbaa !15
  %t2212 = fmul float %1946, %55
  %a770 = fptosi float %t2212 to i32
  %a773 = call i32 @llvm.smin.i32(i32 %b6, i32 %a770)
  %1947 = call i32 @llvm.smax.i32(i32 %a773, i32 0)
  %1948 = sitofp i32 %1947 to float
  %t2214 = fsub float %t2212, %1948
  %t2215 = sub nsw i32 %t2211, %a3
  %t2217 = sub nsw i32 %1945, %a3
  %t2220 = sub nsw i32 %1947, %111
  %1949 = sext i32 %t2220 to i64
  %1950 = add nsw i64 %1949, 1
  %1951 = mul nsw i64 %1950, %1817
  %1952 = sext i32 %1945 to i64
  %1953 = sub nsw i64 %1952, %1818
  %1954 = add nsw i64 %1953, %1839
  %1955 = add nsw i64 %1951, %1954
  %1956 = getelementptr inbounds float, ptr %921, i64 %1955
  %1957 = sext i32 %t2211 to i64
  %1958 = sub nsw i64 %1957, %1818
  %1959 = add nsw i64 %1958, %1839
  %1960 = add nsw i64 %1959, -1
  %1961 = add nsw i64 %1960, %1951
  %1962 = getelementptr inbounds float, ptr %921, i64 %1961
  %1963 = add nsw i64 %1953, %1840
  %1964 = add nsw i64 %1951, %1963
  %1965 = getelementptr inbounds float, ptr %921, i64 %1964
  %1966 = add nsw i64 %1958, %1840
  %1967 = add nsw i64 %1966, -1
  %1968 = add nsw i64 %1967, %1951
  %1969 = getelementptr inbounds float, ptr %921, i64 %1968
  %1970 = load float, ptr %1956, align 4, !tbaa !31
  %1971 = load float, ptr %1962, align 4, !tbaa !31
  %1972 = load float, ptr %1965, align 4, !tbaa !31
  %1973 = insertelement <2 x float> poison, float %1971, i64 0
  %1974 = insertelement <2 x float> %1973, float %1972, i64 1
  %1975 = fmul <2 x float> %1974, <float 2.500000e-01, float 7.500000e-01>
  %1976 = load float, ptr %1969, align 4, !tbaa !31
  %1977 = insertelement <2 x float> poison, float %1970, i64 0
  %1978 = insertelement <2 x float> %1977, float %1976, i64 1
  %1979 = fmul <2 x float> %1978, <float 7.500000e-01, float 2.500000e-01>
  %1980 = fadd <2 x float> %1975, %1979
  %1981 = fmul <2 x float> %1980, <float 7.500000e-01, float 2.500000e-01>
  %shift1055 = shufflevector <2 x float> %1981, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %1982 = fadd <2 x float> %1981, %shift1055
  %1983 = extractelement <2 x float> %1982, i64 0
  %1984 = mul nsw i64 %1950, %1819
  %1985 = sext i32 %lsr.iv360 to i64
  %1986 = add nsw i64 %1984, %1985
  %1987 = getelementptr inbounds float, ptr %839, i64 %1986
  %1988 = load float, ptr %1987, align 4, !tbaa !35
  %1989 = fsub float %1988, %1983
  %1990 = fmul float %t2214, %1989
  %1991 = mul nsw i64 %1949, %1817
  %1992 = add nsw i64 %1991, %1954
  %1993 = getelementptr inbounds float, ptr %921, i64 %1992
  %1994 = add nsw i64 %1960, %1991
  %1995 = getelementptr inbounds float, ptr %921, i64 %1994
  %1996 = add nsw i64 %1991, %1963
  %1997 = getelementptr inbounds float, ptr %921, i64 %1996
  %1998 = add nsw i64 %1967, %1991
  %1999 = getelementptr inbounds float, ptr %921, i64 %1998
  %2000 = load float, ptr %1993, align 4, !tbaa !31
  %2001 = load float, ptr %1995, align 4, !tbaa !31
  %2002 = load float, ptr %1997, align 4, !tbaa !31
  %2003 = insertelement <2 x float> poison, float %2001, i64 0
  %2004 = insertelement <2 x float> %2003, float %2002, i64 1
  %2005 = fmul <2 x float> %2004, <float 2.500000e-01, float 7.500000e-01>
  %2006 = load float, ptr %1999, align 4, !tbaa !31
  %2007 = insertelement <2 x float> poison, float %2000, i64 0
  %2008 = insertelement <2 x float> %2007, float %2006, i64 1
  %2009 = fmul <2 x float> %2008, <float 7.500000e-01, float 2.500000e-01>
  %2010 = fadd <2 x float> %2005, %2009
  %2011 = fmul <2 x float> %2010, <float 7.500000e-01, float 2.500000e-01>
  %shift1056 = shufflevector <2 x float> %2011, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %2012 = fadd <2 x float> %2011, %shift1056
  %2013 = extractelement <2 x float> %2012, i64 0
  %2014 = mul nsw i64 %1949, %1819
  %2015 = add nsw i64 %2014, %1985
  %2016 = getelementptr inbounds float, ptr %839, i64 %2015
  %2017 = load float, ptr %2016, align 4, !tbaa !35
  %2018 = fsub float %2017, %2013
  %2019 = fsub float 1.000000e+00, %t2214
  %2020 = fmul float %2019, %2018
  %2021 = fadd float %1990, %2020
  %2022 = sext i32 %t2217 to i64
  %2023 = add nsw i64 %2022, %1841
  %2024 = getelementptr inbounds float, ptr %1642, i64 %2023
  %2025 = sext i32 %t2215 to i64
  %2026 = add nsw i64 %2025, -1
  %2027 = add nsw i64 %2026, %1841
  %2028 = getelementptr inbounds float, ptr %1642, i64 %2027
  %2029 = add nsw i64 %2022, %1842
  %2030 = getelementptr inbounds float, ptr %1642, i64 %2029
  %2031 = add nsw i64 %2026, %1842
  %2032 = getelementptr inbounds float, ptr %1642, i64 %2031
  %2033 = load float, ptr %2024, align 4, !tbaa !33
  %2034 = load float, ptr %2028, align 4, !tbaa !33
  %2035 = load float, ptr %2030, align 4, !tbaa !33
  %2036 = insertelement <2 x float> poison, float %2034, i64 0
  %2037 = insertelement <2 x float> %2036, float %2035, i64 1
  %2038 = fmul <2 x float> %2037, <float 2.500000e-01, float 7.500000e-01>
  %2039 = load float, ptr %2032, align 4, !tbaa !33
  %2040 = insertelement <2 x float> poison, float %2033, i64 0
  %2041 = insertelement <2 x float> %2040, float %2039, i64 1
  %2042 = fmul <2 x float> %2041, <float 7.500000e-01, float 2.500000e-01>
  %2043 = fadd <2 x float> %2038, %2042
  %2044 = fmul <2 x float> %2043, <float 7.500000e-01, float 2.500000e-01>
  %shift1057 = shufflevector <2 x float> %2044, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %2045 = fadd <2 x float> %2044, %shift1057
  %2046 = extractelement <2 x float> %2045, i64 0
  %2047 = fadd float %2021, %2046
  %scevgep354 = getelementptr float, ptr %scevgep350, i64 %lsr.iv352
  store float %2047, ptr %scevgep354, align 4, !tbaa !37
  %lsr.iv.next = add i32 %lsr.iv, -1
  %lsr.iv.next353 = add nsw i64 %lsr.iv352, 1
  %lsr.iv.next361 = add i32 %lsr.iv360, 1
  %scevgep367 = getelementptr i8, ptr %lsr.iv366, i64 4
  %.not114 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not114, label %"end for f130.s0.v3.loopexit", label %"for f130.s0.v3"

"end for f130.s0.v3.loopexit":                    ; preds = %"for f130.s0.v3"
  %lsr.iv.next349 = add nsw i64 %lsr.iv348, 1
  %lsr = trunc i64 %lsr.iv.next349 to i32
  %lsr.iv.next359 = add i32 %lsr.iv358, %1809
  %lsr.iv.next364 = add i64 %lsr.iv363, %1813
  %.not113 = icmp eq i32 %1801, %lsr
  br i1 %.not113, label %"end for f130.s0.v4", label %"for f130.s0.v4"

if.then.i319:                                     ; preds = %"end for f130.s0.v4"
  call void @halide_free(ptr null, ptr nonnull %209) #7
  call void @halide_free(ptr null, ptr nonnull %340) #7
  call void @halide_free(ptr null, ptr nonnull %424) #7
  call void @halide_free(ptr null, ptr nonnull %503) #7
  call void @halide_free(ptr null, ptr nonnull %559) #7
  call void @halide_free(ptr null, ptr nonnull %628) #7
  call void @halide_free(ptr null, ptr nonnull %684) #7
  call void @halide_free(ptr null, ptr nonnull %737) #7
  call void @halide_free(ptr null, ptr nonnull %793) #7
  call void @halide_free(ptr null, ptr nonnull %839) #7
  call void @halide_free(ptr null, ptr nonnull %879) #7
  call void @halide_free(ptr null, ptr nonnull %1799) #7
  br label %call_destructor.exit210.thread374
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f2.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f2.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
entry:
  %f2.s0.v3.max = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 1
  %1 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 2
  %f2.s0.v4.max = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 3
  %f2.s0.v4.min = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 4
  %f2.s0.v4.v4.epilogue = load i32, ptr %3, align 4
  %4 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 5
  %f2.s0.v4.v4.prologue = load i32, ptr %4, align 4
  %5 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 6
  %f2.v3.extent_realized.s = load i32, ptr %5, align 4
  %6 = sext i32 %f2.v3.extent_realized.s to i64
  %7 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 7
  %f2.v3.min_realized = load i32, ptr %7, align 4
  %8 = sext i32 %f2.v3.min_realized to i64
  %9 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 8
  %f2.v4.min_realized = load i32, ptr %9, align 4
  %10 = sext i32 %f2.v4.min_realized to i64
  %11 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 9
  %input.extent.0 = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 11
  %13 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 13
  %b240 = load i32, ptr %13, align 4
  %14 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 14
  %f2.s0.v3.min = load i32, ptr %0, align 4
  %15 = load <2 x i32>, ptr %12, align 4
  %b248 = load i32, ptr %14, align 4
  %16 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 15
  %input.stride.1 = load i32, ptr %16, align 4
  %17 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 16
  %input.stride.2 = load i32, ptr %17, align 4
  %18 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 17
  %f2.host = load ptr, ptr %18, align 8
  %19 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 19
  %input.host = load ptr, ptr %19, align 8
  %20 = icmp sgt i32 %f2.s0.v4.v4.epilogue, %f2.s0.v4.v4
  %21 = icmp sle i32 %f2.s0.v4.v4.prologue, %f2.s0.v4.v4
  %22 = and i1 %20, %21
  br i1 %22, label %"for f2.s0.v4.v280.preheader", label %"for f2.s0.v4.v2809.preheader"

"for f2.s0.v4.v280.preheader":                    ; preds = %entry
  %23 = sext i32 %input.stride.2 to i64
  %24 = sext i32 %b248 to i64
  %25 = extractelement <2 x i32> %15, i64 0
  %26 = sext i32 %25 to i64
  %27 = sext i32 %f2.s0.v3.min to i64
  %28 = shl nsw i32 %f2.s0.v4.v4, 5
  %a202 = add nsw i32 %f2.s0.v4.min, %28
  %b204 = add nsw i32 %f2.s0.v4.max, -31
  %f2.s0.v4.v280.base = tail call i32 @llvm.smin.i32(i32 %b204, i32 %a202)
  %29 = sext i32 %f2.s0.v4.v280.base to i64
  %30 = sub nsw i64 %29, %10
  %31 = add nsw i64 %6, 1
  %32 = mul nsw i64 %30, %31
  %33 = sub nsw i64 %27, %8
  %34 = add i64 %33, %32
  %scevgep = getelementptr float, ptr %f2.host, i64 %34
  %35 = shl nsw i64 %6, 2
  %36 = add nsw i64 %35, 4
  %37 = add nsw i64 %26, %24
  %38 = sub nsw i64 0, %37
  %smax = tail call i64 @llvm.smax.i64(i64 %38, i64 -1)
  %39 = xor i64 %smax, -1
  %smax29 = tail call i64 @llvm.smax.i64(i64 %39, i64 %24)
  %40 = mul nsw i64 %smax29, %23
  %41 = mul i32 %input.stride.1, %b240
  %42 = extractelement <2 x i32> %15, i64 1
  %43 = add i32 %41, %42
  %44 = mul i32 %input.stride.2, %b248
  %45 = add i32 %43, %44
  %46 = sext i32 %45 to i64
  %47 = sub nsw i64 %40, %46
  %48 = mul i32 %input.stride.1, %f2.s0.v4.v280.base
  %49 = add i32 %48, %f2.s0.v3.min
  %smax37 = tail call i64 @llvm.smax.i64(i64 %38, i64 -2)
  %50 = xor i64 %smax37, -1
  %smax38 = tail call i64 @llvm.smax.i64(i64 %50, i64 %24)
  %51 = mul nsw i64 %smax38, %23
  %52 = sub nsw i64 %51, %46
  %smax44 = tail call i64 @llvm.smax.i64(i64 %38, i64 -3)
  %53 = xor i64 %smax44, -1
  %smax45 = tail call i64 @llvm.smax.i64(i64 %53, i64 %24)
  %54 = mul nsw i64 %smax45, %23
  %55 = sub nsw i64 %54, %46
  %56 = insertelement <2 x i32> poison, i32 %b248, i64 0
  %57 = insertelement <2 x i32> %56, i32 %f2.s0.v3.min, i64 1
  %58 = add nsw <2 x i32> %15, %57
  %59 = sub nsw <2 x i32> %15, %57
  %60 = shufflevector <2 x i32> %58, <2 x i32> %59, <4 x i32> <i32 0, i32 0, i32 0, i32 3>
  %61 = extractelement <2 x i32> %59, i64 1
  %62 = add nsw i32 %61, 7
  %a204 = lshr i32 %62, 3
  %63 = sub nsw i32 %f2.s0.v3.max, %f2.s0.v3.min
  %64 = ashr i32 %63, 3
  %b205 = add nsw i32 %64, 1
  %65 = add nsw i32 %42, %input.extent.0
  %66 = sub nsw i32 %65, %f2.s0.v3.min
  %67 = ashr i32 %66, 3
  %a210 = add nsw i32 %67, -1
  %68 = add nsw i32 %63, -7
  %b212 = ashr i32 %68, 3
  %.not13 = icmp slt i32 %b212, %67
  %a209 = select i1 %.not13, i32 %b212, i32 %a210
  %a211 = add nsw i32 %f2.s0.v3.max, -7
  %b213 = add nsw i32 %65, -1
  %69 = tail call i32 @llvm.smin.i32(i32 %b213, i32 %a211)
  %70 = sub nsw i32 %69, %f2.s0.v3.min
  %b211 = ashr i32 %70, 3
  %a208 = tail call i32 @llvm.smin.i32(i32 %b211, i32 %a209)
  %71 = tail call i32 @llvm.smin.i32(i32 %64, i32 %a208)
  %b207 = add nsw i32 %71, 1
  %72 = insertelement <8 x i32> undef, i32 %b213, i64 0
  %b216 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %b215 = shufflevector <2 x i32> %15, <2 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %73 = extractelement <2 x i32> %58, i64 0
  %a216 = add nsw i32 %73, -1
  %74 = icmp sgt <4 x i32> %60, <i32 0, i32 1, i32 2, i32 0>
  %75 = extractelement <4 x i1> %74, i64 3
  %76 = select i1 %75, i32 %a204, i32 0
  %.not12 = icmp slt i32 %64, %76
  %f2.s0.v3.v3.prologue = select i1 %.not12, i32 %b205, i32 %76
  %f2.s0.v3.v3.epilogue = tail call i32 @llvm.smax.i32(i32 %f2.s0.v3.v3.prologue, i32 %b207)
  %77 = icmp sgt i32 %f2.s0.v3.v3.prologue, 0
  %.not14 = icmp sgt i32 %f2.s0.v3.v3.prologue, %71
  %.not4 = icmp slt i32 %64, %f2.s0.v3.v3.epilogue
  %78 = extractelement <4 x i1> %74, i64 2
  %a215 = select i1 %78, i32 2, i32 %a216
  %79 = tail call i32 @llvm.smax.i32(i32 %a215, i32 %b248)
  %80 = mul nsw i32 %79, %input.stride.2
  %.scalar = sub i32 %80, %45
  %81 = insertelement <8 x i32> undef, i32 %.scalar, i64 0
  %82 = shufflevector <8 x i32> %81, <8 x i32> poison, <8 x i32> zeroinitializer
  %83 = extractelement <4 x i1> %74, i64 1
  %84 = select i1 %83, i32 0, i32 %a216
  %85 = zext i1 %83 to i32
  %a217 = or i32 %84, %85
  %86 = tail call i32 @llvm.smax.i32(i32 %a217, i32 %b248)
  %87 = mul nsw i32 %86, %input.stride.2
  %.scalar30 = sub i32 %87, %45
  %88 = insertelement <8 x i32> undef, i32 %.scalar30, i64 0
  %89 = shufflevector <8 x i32> %88, <8 x i32> poison, <8 x i32> zeroinitializer
  %90 = extractelement <4 x i1> %74, i64 0
  %91 = select i1 %90, i32 0, i32 %a216
  %92 = tail call i32 @llvm.smax.i32(i32 %91, i32 %b248)
  %93 = mul nsw i32 %92, %input.stride.2
  %.scalar31 = sub i32 %93, %45
  %94 = insertelement <8 x i32> undef, i32 %.scalar31, i64 0
  %95 = shufflevector <8 x i32> %94, <8 x i32> poison, <8 x i32> zeroinitializer
  %96 = sub nsw i32 %f2.s0.v3.v3.epilogue, %f2.s0.v3.v3.prologue
  %97 = sext i32 %f2.s0.v3.v3.prologue to i64
  %98 = shl nsw i64 %97, 3
  %99 = shl i32 %f2.s0.v3.v3.prologue, 3
  %100 = sub nsw i32 %b205, %f2.s0.v3.v3.epilogue
  %101 = shl i32 %f2.s0.v3.v3.epilogue, 3
  %102 = add i32 %101, %f2.s0.v3.min
  br label %"for f2.s0.v4.v280"

"for f2.s0.v4.v2809.preheader":                   ; preds = %entry
  %103 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 10
  %input.extent.1 = load i32, ptr %103, align 4
  %104 = shl nsw i32 %f2.s0.v4.v4, 5
  %a236 = add nsw i32 %f2.s0.v4.min, %104
  %b238 = add nsw i32 %f2.s0.v4.max, -31
  %f2.s0.v4.v280.base8 = tail call i32 @llvm.smin.i32(i32 %b238, i32 %a236)
  %105 = sub nsw i32 %f2.s0.v3.max, %f2.s0.v3.min
  %106 = lshr i32 %105, 3
  %107 = add nuw nsw i32 %106, 1
  %108 = icmp sgt i32 %105, -1
  %b239 = add nsw i32 %f2.s0.v3.max, -7
  %109 = add i32 %input.extent.1, -1
  %b241 = add i32 %109, %b240
  %110 = extractelement <2 x i32> %15, i64 1
  %111 = add nsw i32 %110, %input.extent.0
  %112 = add nsw i32 %111, -1
  %113 = insertelement <8 x i32> undef, i32 %112, i64 0
  %b243 = shufflevector <8 x i32> %113, <8 x i32> undef, <8 x i32> zeroinitializer
  %b242 = shufflevector <2 x i32> %15, <2 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %114 = mul nsw i32 %input.stride.2, %b248
  %115 = mul nsw i32 %input.stride.1, %b240
  %116 = add nsw i32 %115, %110
  %t1960.s = add nsw i32 %116, %114
  %117 = extractelement <2 x i32> %15, i64 0
  %118 = add nsw i32 %b248, %117
  %a243 = add nsw i32 %118, -1
  %.inv11 = icmp sgt i32 %118, 2
  %a242 = select i1 %.inv11, i32 2, i32 %a243
  %119 = tail call i32 @llvm.smax.i32(i32 %a242, i32 %b248)
  %120 = mul nsw i32 %119, %input.stride.2
  %.scalar35 = sub i32 %120, %t1960.s
  %121 = insertelement <8 x i32> undef, i32 %.scalar35, i64 0
  %122 = shufflevector <8 x i32> %121, <8 x i32> poison, <8 x i32> zeroinitializer
  %123 = icmp sgt i32 %118, 1
  %124 = select i1 %123, i32 0, i32 %a243
  %125 = zext i1 %123 to i32
  %a244 = or i32 %124, %125
  %126 = tail call i32 @llvm.smax.i32(i32 %a244, i32 %b248)
  %127 = mul nsw i32 %126, %input.stride.2
  %.scalar36 = sub i32 %127, %t1960.s
  %128 = insertelement <8 x i32> undef, i32 %.scalar36, i64 0
  %129 = shufflevector <8 x i32> %128, <8 x i32> poison, <8 x i32> zeroinitializer
  %.inv = icmp sgt i32 %118, 0
  %130 = select i1 %.inv, i32 0, i32 %a243
  %131 = tail call i32 @llvm.smax.i32(i32 %130, i32 %b248)
  %132 = mul nsw i32 %131, %input.stride.2
  %.scalar37 = sub i32 %132, %t1960.s
  %133 = insertelement <8 x i32> undef, i32 %.scalar37, i64 0
  %134 = shufflevector <8 x i32> %133, <8 x i32> poison, <8 x i32> zeroinitializer
  %135 = add nsw i64 %6, 1
  %136 = sext i32 %f2.s0.v4.v280.base8 to i64
  %137 = sub nsw i64 %136, %10
  br i1 %108, label %"for f2.s0.v4.v2809.us", label %destructor_block, !prof !5

"for f2.s0.v4.v2809.us":                          ; preds = %"for f2.s0.v4.v2809.preheader", %"end for f2.s0.v3.v313.loopexit.us"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f2.s0.v3.v313.loopexit.us" ], [ 0, %"for f2.s0.v4.v2809.preheader" ]
  %138 = trunc i64 %indvars.iv to i32
  %a239.us = add nsw i32 %f2.s0.v4.v280.base8, %138
  %a238.us = tail call i32 @llvm.smin.i32(i32 %b241, i32 %a239.us)
  %139 = tail call i32 @llvm.smax.i32(i32 %a238.us, i32 %b240)
  %140 = mul nsw i32 %139, %input.stride.1
  %141 = insertelement <8 x i32> undef, i32 %140, i64 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = add nsw i64 %137, %indvars.iv
  %144 = mul nsw i64 %143, %135
  %145 = sub i64 %144, %8
  br label %"for f2.s0.v3.v312.us"

"for f2.s0.v3.v312.us":                           ; preds = %"for f2.s0.v4.v2809.us", %"for f2.s0.v3.v312.us"
  %lsr.iv57.us = phi i32 [ %lsr.iv.next58.us, %"for f2.s0.v3.v312.us" ], [ %f2.s0.v3.min, %"for f2.s0.v4.v2809.us" ]
  %lsr.iv55.us = phi i32 [ %lsr.iv.next56.us, %"for f2.s0.v3.v312.us" ], [ %107, %"for f2.s0.v4.v2809.us" ]
  %f2.s0.v3.v283.base15.us = tail call i32 @llvm.smin.i32(i32 %b239, i32 %lsr.iv57.us)
  %146 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base15.us, i64 0
  %147 = shufflevector <8 x i32> %146, <8 x i32> undef, <8 x i32> zeroinitializer
  %a241.us = add nsw <8 x i32> %147, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a240.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b243, <8 x i32> %a241.us)
  %148 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a240.us, <8 x i32> %b242)
  %t1958.us = add nsw <8 x i32> %148, %142
  %149 = add <8 x i32> %122, %t1958.us
  %150 = shufflevector <8 x i32> %149, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %151 = sext <4 x i32> %150 to <4 x i64>
  %152 = extractelement <4 x i64> %151, i64 0
  %153 = getelementptr inbounds i16, ptr %input.host, i64 %152
  %154 = load i16, ptr %153, align 2, !tbaa !39
  %155 = insertelement <8 x i16> undef, i16 %154, i64 0
  %156 = extractelement <4 x i64> %151, i64 1
  %157 = getelementptr inbounds i16, ptr %input.host, i64 %156
  %158 = load i16, ptr %157, align 2, !tbaa !39
  %159 = insertelement <8 x i16> %155, i16 %158, i64 1
  %160 = extractelement <4 x i64> %151, i64 2
  %161 = getelementptr inbounds i16, ptr %input.host, i64 %160
  %162 = load i16, ptr %161, align 2, !tbaa !39
  %163 = insertelement <8 x i16> %159, i16 %162, i64 2
  %164 = extractelement <4 x i64> %151, i64 3
  %165 = getelementptr inbounds i16, ptr %input.host, i64 %164
  %166 = load i16, ptr %165, align 2, !tbaa !39
  %167 = insertelement <8 x i16> %163, i16 %166, i64 3
  %168 = shufflevector <8 x i32> %149, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %169 = sext <4 x i32> %168 to <4 x i64>
  %170 = extractelement <4 x i64> %169, i64 0
  %171 = getelementptr inbounds i16, ptr %input.host, i64 %170
  %172 = load i16, ptr %171, align 2, !tbaa !39
  %173 = insertelement <8 x i16> %167, i16 %172, i64 4
  %174 = extractelement <4 x i64> %169, i64 1
  %175 = getelementptr inbounds i16, ptr %input.host, i64 %174
  %176 = load i16, ptr %175, align 2, !tbaa !39
  %177 = insertelement <8 x i16> %173, i16 %176, i64 5
  %178 = extractelement <4 x i64> %169, i64 2
  %179 = getelementptr inbounds i16, ptr %input.host, i64 %178
  %180 = load i16, ptr %179, align 2, !tbaa !39
  %181 = insertelement <8 x i16> %177, i16 %180, i64 6
  %182 = extractelement <4 x i64> %169, i64 3
  %183 = getelementptr inbounds i16, ptr %input.host, i64 %182
  %184 = load i16, ptr %183, align 2, !tbaa !39
  %185 = insertelement <8 x i16> %181, i16 %184, i64 7
  %186 = uitofp <8 x i16> %185 to <8 x float>
  %187 = fmul <8 x float> %186, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %188 = add <8 x i32> %129, %t1958.us
  %189 = shufflevector <8 x i32> %188, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %190 = sext <4 x i32> %189 to <4 x i64>
  %191 = extractelement <4 x i64> %190, i64 0
  %192 = getelementptr inbounds i16, ptr %input.host, i64 %191
  %193 = load i16, ptr %192, align 2, !tbaa !39
  %194 = insertelement <8 x i16> undef, i16 %193, i64 0
  %195 = extractelement <4 x i64> %190, i64 1
  %196 = getelementptr inbounds i16, ptr %input.host, i64 %195
  %197 = load i16, ptr %196, align 2, !tbaa !39
  %198 = insertelement <8 x i16> %194, i16 %197, i64 1
  %199 = extractelement <4 x i64> %190, i64 2
  %200 = getelementptr inbounds i16, ptr %input.host, i64 %199
  %201 = load i16, ptr %200, align 2, !tbaa !39
  %202 = insertelement <8 x i16> %198, i16 %201, i64 2
  %203 = extractelement <4 x i64> %190, i64 3
  %204 = getelementptr inbounds i16, ptr %input.host, i64 %203
  %205 = load i16, ptr %204, align 2, !tbaa !39
  %206 = insertelement <8 x i16> %202, i16 %205, i64 3
  %207 = shufflevector <8 x i32> %188, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %208 = sext <4 x i32> %207 to <4 x i64>
  %209 = extractelement <4 x i64> %208, i64 0
  %210 = getelementptr inbounds i16, ptr %input.host, i64 %209
  %211 = load i16, ptr %210, align 2, !tbaa !39
  %212 = insertelement <8 x i16> %206, i16 %211, i64 4
  %213 = extractelement <4 x i64> %208, i64 1
  %214 = getelementptr inbounds i16, ptr %input.host, i64 %213
  %215 = load i16, ptr %214, align 2, !tbaa !39
  %216 = insertelement <8 x i16> %212, i16 %215, i64 5
  %217 = extractelement <4 x i64> %208, i64 2
  %218 = getelementptr inbounds i16, ptr %input.host, i64 %217
  %219 = load i16, ptr %218, align 2, !tbaa !39
  %220 = insertelement <8 x i16> %216, i16 %219, i64 6
  %221 = extractelement <4 x i64> %208, i64 3
  %222 = getelementptr inbounds i16, ptr %input.host, i64 %221
  %223 = load i16, ptr %222, align 2, !tbaa !39
  %224 = insertelement <8 x i16> %220, i16 %223, i64 7
  %225 = uitofp <8 x i16> %224 to <8 x float>
  %226 = fmul <8 x float> %225, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %227 = add <8 x i32> %134, %t1958.us
  %228 = shufflevector <8 x i32> %227, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %229 = sext <4 x i32> %228 to <4 x i64>
  %230 = extractelement <4 x i64> %229, i64 0
  %231 = getelementptr inbounds i16, ptr %input.host, i64 %230
  %232 = load i16, ptr %231, align 2, !tbaa !39
  %233 = insertelement <8 x i16> undef, i16 %232, i64 0
  %234 = extractelement <4 x i64> %229, i64 1
  %235 = getelementptr inbounds i16, ptr %input.host, i64 %234
  %236 = load i16, ptr %235, align 2, !tbaa !39
  %237 = insertelement <8 x i16> %233, i16 %236, i64 1
  %238 = extractelement <4 x i64> %229, i64 2
  %239 = getelementptr inbounds i16, ptr %input.host, i64 %238
  %240 = load i16, ptr %239, align 2, !tbaa !39
  %241 = insertelement <8 x i16> %237, i16 %240, i64 2
  %242 = extractelement <4 x i64> %229, i64 3
  %243 = getelementptr inbounds i16, ptr %input.host, i64 %242
  %244 = load i16, ptr %243, align 2, !tbaa !39
  %245 = insertelement <8 x i16> %241, i16 %244, i64 3
  %246 = shufflevector <8 x i32> %227, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %247 = sext <4 x i32> %246 to <4 x i64>
  %248 = extractelement <4 x i64> %247, i64 0
  %249 = getelementptr inbounds i16, ptr %input.host, i64 %248
  %250 = load i16, ptr %249, align 2, !tbaa !39
  %251 = insertelement <8 x i16> %245, i16 %250, i64 4
  %252 = extractelement <4 x i64> %247, i64 1
  %253 = getelementptr inbounds i16, ptr %input.host, i64 %252
  %254 = load i16, ptr %253, align 2, !tbaa !39
  %255 = insertelement <8 x i16> %251, i16 %254, i64 5
  %256 = extractelement <4 x i64> %247, i64 2
  %257 = getelementptr inbounds i16, ptr %input.host, i64 %256
  %258 = load i16, ptr %257, align 2, !tbaa !39
  %259 = insertelement <8 x i16> %255, i16 %258, i64 6
  %260 = extractelement <4 x i64> %247, i64 3
  %261 = getelementptr inbounds i16, ptr %input.host, i64 %260
  %262 = load i16, ptr %261, align 2, !tbaa !39
  %263 = insertelement <8 x i16> %259, i16 %262, i64 7
  %264 = uitofp <8 x i16> %263 to <8 x float>
  %265 = fmul <8 x float> %264, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %266 = fadd <8 x float> %226, %265
  %267 = fadd <8 x float> %187, %266
  %268 = sext i32 %f2.s0.v3.v283.base15.us to i64
  %269 = add i64 %145, %268
  %270 = getelementptr inbounds float, ptr %f2.host, i64 %269
  store <8 x float> %267, ptr %270, align 4, !tbaa !41
  %lsr.iv.next56.us = add nsw i32 %lsr.iv55.us, -1
  %lsr.iv.next58.us = add i32 %lsr.iv57.us, 8
  %.not3.us = icmp eq i32 %lsr.iv.next56.us, 0
  br i1 %.not3.us, label %"end for f2.s0.v3.v313.loopexit.us", label %"for f2.s0.v3.v312.us"

"end for f2.s0.v3.v313.loopexit.us":              ; preds = %"for f2.s0.v3.v312.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not.us = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not.us, label %destructor_block, label %"for f2.s0.v4.v2809.us"

"for f2.s0.v4.v280":                              ; preds = %"end for f2.s0.v3.v35", %"for f2.s0.v4.v280.preheader"
  %indvars.iv27 = phi i64 [ %indvars.iv.next28, %"end for f2.s0.v3.v35" ], [ 0, %"for f2.s0.v4.v280.preheader" ]
  %lsr.iv30 = phi i32 [ %lsr.iv.next31, %"end for f2.s0.v3.v35" ], [ %49, %"for f2.s0.v4.v280.preheader" ]
  %lsr.iv20 = phi ptr [ %scevgep22, %"end for f2.s0.v3.v35" ], [ %scevgep, %"for f2.s0.v4.v280.preheader" ]
  br i1 %77, label %"for f2.s0.v3.v3.preheader", label %"end for f2.s0.v3.v3", !prof !5

"for f2.s0.v3.v3.preheader":                      ; preds = %"for f2.s0.v4.v280"
  %271 = trunc i64 %indvars.iv27 to i32
  %272 = add nsw i32 %f2.s0.v4.v280.base, %271
  %273 = mul nsw i32 %272, %input.stride.1
  %274 = insertelement <8 x i32> undef, i32 %273, i64 0
  %275 = shufflevector <8 x i32> %274, <8 x i32> undef, <8 x i32> zeroinitializer
  %276 = add nsw i64 %30, %indvars.iv27
  %277 = mul nsw i64 %276, %31
  %278 = sub i64 %277, %8
  br label %"for f2.s0.v3.v3"

"for f2.s0.v3.v3":                                ; preds = %"for f2.s0.v3.v3.preheader", %"for f2.s0.v3.v3"
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f2.s0.v3.v3" ], [ %f2.s0.v3.min, %"for f2.s0.v3.v3.preheader" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f2.s0.v3.v3" ], [ %f2.s0.v3.v3.prologue, %"for f2.s0.v3.v3.preheader" ]
  %f2.s0.v3.v283.base = tail call i32 @llvm.smin.i32(i32 %a211, i32 %lsr.iv16)
  %279 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base, i64 0
  %280 = shufflevector <8 x i32> %279, <8 x i32> undef, <8 x i32> zeroinitializer
  %a214 = add nsw <8 x i32> %280, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a213 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b216, <8 x i32> %a214)
  %281 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a213, <8 x i32> %b215)
  %t1949 = add nsw <8 x i32> %281, %275
  %282 = add <8 x i32> %82, %t1949
  %283 = shufflevector <8 x i32> %282, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %284 = sext <4 x i32> %283 to <4 x i64>
  %285 = extractelement <4 x i64> %284, i64 0
  %286 = getelementptr inbounds i16, ptr %input.host, i64 %285
  %287 = load i16, ptr %286, align 2, !tbaa !39
  %288 = insertelement <8 x i16> undef, i16 %287, i64 0
  %289 = extractelement <4 x i64> %284, i64 1
  %290 = getelementptr inbounds i16, ptr %input.host, i64 %289
  %291 = load i16, ptr %290, align 2, !tbaa !39
  %292 = insertelement <8 x i16> %288, i16 %291, i64 1
  %293 = extractelement <4 x i64> %284, i64 2
  %294 = getelementptr inbounds i16, ptr %input.host, i64 %293
  %295 = load i16, ptr %294, align 2, !tbaa !39
  %296 = insertelement <8 x i16> %292, i16 %295, i64 2
  %297 = extractelement <4 x i64> %284, i64 3
  %298 = getelementptr inbounds i16, ptr %input.host, i64 %297
  %299 = load i16, ptr %298, align 2, !tbaa !39
  %300 = insertelement <8 x i16> %296, i16 %299, i64 3
  %301 = shufflevector <8 x i32> %282, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %302 = sext <4 x i32> %301 to <4 x i64>
  %303 = extractelement <4 x i64> %302, i64 0
  %304 = getelementptr inbounds i16, ptr %input.host, i64 %303
  %305 = load i16, ptr %304, align 2, !tbaa !39
  %306 = insertelement <8 x i16> %300, i16 %305, i64 4
  %307 = extractelement <4 x i64> %302, i64 1
  %308 = getelementptr inbounds i16, ptr %input.host, i64 %307
  %309 = load i16, ptr %308, align 2, !tbaa !39
  %310 = insertelement <8 x i16> %306, i16 %309, i64 5
  %311 = extractelement <4 x i64> %302, i64 2
  %312 = getelementptr inbounds i16, ptr %input.host, i64 %311
  %313 = load i16, ptr %312, align 2, !tbaa !39
  %314 = insertelement <8 x i16> %310, i16 %313, i64 6
  %315 = extractelement <4 x i64> %302, i64 3
  %316 = getelementptr inbounds i16, ptr %input.host, i64 %315
  %317 = load i16, ptr %316, align 2, !tbaa !39
  %318 = insertelement <8 x i16> %314, i16 %317, i64 7
  %319 = uitofp <8 x i16> %318 to <8 x float>
  %320 = fmul <8 x float> %319, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %321 = add <8 x i32> %89, %t1949
  %322 = shufflevector <8 x i32> %321, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %323 = sext <4 x i32> %322 to <4 x i64>
  %324 = extractelement <4 x i64> %323, i64 0
  %325 = getelementptr inbounds i16, ptr %input.host, i64 %324
  %326 = load i16, ptr %325, align 2, !tbaa !39
  %327 = insertelement <8 x i16> undef, i16 %326, i64 0
  %328 = extractelement <4 x i64> %323, i64 1
  %329 = getelementptr inbounds i16, ptr %input.host, i64 %328
  %330 = load i16, ptr %329, align 2, !tbaa !39
  %331 = insertelement <8 x i16> %327, i16 %330, i64 1
  %332 = extractelement <4 x i64> %323, i64 2
  %333 = getelementptr inbounds i16, ptr %input.host, i64 %332
  %334 = load i16, ptr %333, align 2, !tbaa !39
  %335 = insertelement <8 x i16> %331, i16 %334, i64 2
  %336 = extractelement <4 x i64> %323, i64 3
  %337 = getelementptr inbounds i16, ptr %input.host, i64 %336
  %338 = load i16, ptr %337, align 2, !tbaa !39
  %339 = insertelement <8 x i16> %335, i16 %338, i64 3
  %340 = shufflevector <8 x i32> %321, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %341 = sext <4 x i32> %340 to <4 x i64>
  %342 = extractelement <4 x i64> %341, i64 0
  %343 = getelementptr inbounds i16, ptr %input.host, i64 %342
  %344 = load i16, ptr %343, align 2, !tbaa !39
  %345 = insertelement <8 x i16> %339, i16 %344, i64 4
  %346 = extractelement <4 x i64> %341, i64 1
  %347 = getelementptr inbounds i16, ptr %input.host, i64 %346
  %348 = load i16, ptr %347, align 2, !tbaa !39
  %349 = insertelement <8 x i16> %345, i16 %348, i64 5
  %350 = extractelement <4 x i64> %341, i64 2
  %351 = getelementptr inbounds i16, ptr %input.host, i64 %350
  %352 = load i16, ptr %351, align 2, !tbaa !39
  %353 = insertelement <8 x i16> %349, i16 %352, i64 6
  %354 = extractelement <4 x i64> %341, i64 3
  %355 = getelementptr inbounds i16, ptr %input.host, i64 %354
  %356 = load i16, ptr %355, align 2, !tbaa !39
  %357 = insertelement <8 x i16> %353, i16 %356, i64 7
  %358 = uitofp <8 x i16> %357 to <8 x float>
  %359 = fmul <8 x float> %358, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %360 = add <8 x i32> %95, %t1949
  %361 = shufflevector <8 x i32> %360, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %362 = sext <4 x i32> %361 to <4 x i64>
  %363 = extractelement <4 x i64> %362, i64 0
  %364 = getelementptr inbounds i16, ptr %input.host, i64 %363
  %365 = load i16, ptr %364, align 2, !tbaa !39
  %366 = insertelement <8 x i16> undef, i16 %365, i64 0
  %367 = extractelement <4 x i64> %362, i64 1
  %368 = getelementptr inbounds i16, ptr %input.host, i64 %367
  %369 = load i16, ptr %368, align 2, !tbaa !39
  %370 = insertelement <8 x i16> %366, i16 %369, i64 1
  %371 = extractelement <4 x i64> %362, i64 2
  %372 = getelementptr inbounds i16, ptr %input.host, i64 %371
  %373 = load i16, ptr %372, align 2, !tbaa !39
  %374 = insertelement <8 x i16> %370, i16 %373, i64 2
  %375 = extractelement <4 x i64> %362, i64 3
  %376 = getelementptr inbounds i16, ptr %input.host, i64 %375
  %377 = load i16, ptr %376, align 2, !tbaa !39
  %378 = insertelement <8 x i16> %374, i16 %377, i64 3
  %379 = shufflevector <8 x i32> %360, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %380 = sext <4 x i32> %379 to <4 x i64>
  %381 = extractelement <4 x i64> %380, i64 0
  %382 = getelementptr inbounds i16, ptr %input.host, i64 %381
  %383 = load i16, ptr %382, align 2, !tbaa !39
  %384 = insertelement <8 x i16> %378, i16 %383, i64 4
  %385 = extractelement <4 x i64> %380, i64 1
  %386 = getelementptr inbounds i16, ptr %input.host, i64 %385
  %387 = load i16, ptr %386, align 2, !tbaa !39
  %388 = insertelement <8 x i16> %384, i16 %387, i64 5
  %389 = extractelement <4 x i64> %380, i64 2
  %390 = getelementptr inbounds i16, ptr %input.host, i64 %389
  %391 = load i16, ptr %390, align 2, !tbaa !39
  %392 = insertelement <8 x i16> %388, i16 %391, i64 6
  %393 = extractelement <4 x i64> %380, i64 3
  %394 = getelementptr inbounds i16, ptr %input.host, i64 %393
  %395 = load i16, ptr %394, align 2, !tbaa !39
  %396 = insertelement <8 x i16> %392, i16 %395, i64 7
  %397 = uitofp <8 x i16> %396 to <8 x float>
  %398 = fmul <8 x float> %397, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %399 = fadd <8 x float> %359, %398
  %400 = fadd <8 x float> %320, %399
  %401 = sext i32 %f2.s0.v3.v283.base to i64
  %402 = add i64 %278, %401
  %403 = getelementptr inbounds float, ptr %f2.host, i64 %402
  store <8 x float> %400, ptr %403, align 4, !tbaa !41
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %lsr.iv.next17 = add i32 %lsr.iv16, 8
  %.not10 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not10, label %"end for f2.s0.v3.v3", label %"for f2.s0.v3.v3"

"end for f2.s0.v3.v3":                            ; preds = %"for f2.s0.v3.v3", %"for f2.s0.v4.v280"
  br i1 %.not14, label %"end for f2.s0.v3.v32", label %"for f2.s0.v3.v31.preheader", !prof !4

"for f2.s0.v3.v31.preheader":                     ; preds = %"end for f2.s0.v3.v3"
  %scevgep23 = getelementptr float, ptr %lsr.iv20, i64 %98
  %404 = add i32 %lsr.iv30, %99
  %405 = sext i32 %404 to i64
  %406 = add nsw i64 %47, %405
  %scevgep32 = getelementptr i16, ptr %input.host, i64 %406
  %407 = add nsw i64 %52, %405
  %scevgep39 = getelementptr i16, ptr %input.host, i64 %407
  %408 = add nsw i64 %55, %405
  %scevgep46 = getelementptr i16, ptr %input.host, i64 %408
  br label %"for f2.s0.v3.v31"

"for f2.s0.v3.v31":                               ; preds = %"for f2.s0.v3.v31", %"for f2.s0.v3.v31.preheader"
  %lsr.iv25 = phi i64 [ 0, %"for f2.s0.v3.v31.preheader" ], [ %lsr.iv.next26, %"for f2.s0.v3.v31" ]
  %lsr.iv18 = phi i32 [ %96, %"for f2.s0.v3.v31.preheader" ], [ %lsr.iv.next19, %"for f2.s0.v3.v31" ]
  %uglygep49 = getelementptr i8, ptr %scevgep46, i64 %lsr.iv25
  %409 = load <8 x i16>, ptr %uglygep49, align 2, !tbaa !39
  %410 = uitofp <8 x i16> %409 to <8 x float>
  %411 = fmul <8 x float> %410, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %uglygep42 = getelementptr i8, ptr %scevgep39, i64 %lsr.iv25
  %412 = load <8 x i16>, ptr %uglygep42, align 2, !tbaa !39
  %413 = uitofp <8 x i16> %412 to <8 x float>
  %414 = fmul <8 x float> %413, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %uglygep35 = getelementptr i8, ptr %scevgep32, i64 %lsr.iv25
  %415 = load <8 x i16>, ptr %uglygep35, align 2, !tbaa !39
  %416 = uitofp <8 x i16> %415 to <8 x float>
  %417 = fmul <8 x float> %416, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %418 = fadd <8 x float> %414, %417
  %419 = fadd <8 x float> %411, %418
  %420 = shl nuw i64 %lsr.iv25, 1
  %uglygep = getelementptr i8, ptr %scevgep23, i64 %420
  store <8 x float> %419, ptr %uglygep, align 4, !tbaa !41
  %lsr.iv.next19 = add i32 %lsr.iv18, -1
  %lsr.iv.next26 = add nuw nsw i64 %lsr.iv25, 16
  %.not8 = icmp eq i32 %lsr.iv.next19, 0
  br i1 %.not8, label %"end for f2.s0.v3.v32", label %"for f2.s0.v3.v31"

"end for f2.s0.v3.v32":                           ; preds = %"for f2.s0.v3.v31", %"end for f2.s0.v3.v3"
  br i1 %.not4, label %"end for f2.s0.v3.v35", label %"for f2.s0.v3.v34.preheader", !prof !4

"for f2.s0.v3.v34.preheader":                     ; preds = %"end for f2.s0.v3.v32"
  %421 = trunc i64 %indvars.iv27 to i32
  %422 = add nsw i32 %f2.s0.v4.v280.base, %421
  %423 = mul nsw i32 %422, %input.stride.1
  %424 = insertelement <8 x i32> undef, i32 %423, i64 0
  %425 = shufflevector <8 x i32> %424, <8 x i32> undef, <8 x i32> zeroinitializer
  %426 = add nsw i64 %30, %indvars.iv27
  %427 = mul nsw i64 %426, %31
  %428 = sub i64 %427, %8
  br label %"for f2.s0.v3.v34"

"for f2.s0.v3.v34":                               ; preds = %"for f2.s0.v3.v34", %"for f2.s0.v3.v34.preheader"
  %lsr.iv53 = phi i32 [ %102, %"for f2.s0.v3.v34.preheader" ], [ %lsr.iv.next54, %"for f2.s0.v3.v34" ]
  %lsr.iv51 = phi i32 [ %100, %"for f2.s0.v3.v34.preheader" ], [ %lsr.iv.next52, %"for f2.s0.v3.v34" ]
  %f2.s0.v3.v283.base7 = tail call i32 @llvm.smin.i32(i32 %a211, i32 %lsr.iv53)
  %429 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base7, i64 0
  %430 = shufflevector <8 x i32> %429, <8 x i32> undef, <8 x i32> zeroinitializer
  %a229 = add nsw <8 x i32> %430, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a228 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b216, <8 x i32> %a229)
  %431 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a228, <8 x i32> %b215)
  %t1955 = add nsw <8 x i32> %431, %425
  %432 = add <8 x i32> %82, %t1955
  %433 = shufflevector <8 x i32> %432, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %434 = sext <4 x i32> %433 to <4 x i64>
  %435 = extractelement <4 x i64> %434, i64 0
  %436 = getelementptr inbounds i16, ptr %input.host, i64 %435
  %437 = load i16, ptr %436, align 2, !tbaa !39
  %438 = insertelement <8 x i16> undef, i16 %437, i64 0
  %439 = extractelement <4 x i64> %434, i64 1
  %440 = getelementptr inbounds i16, ptr %input.host, i64 %439
  %441 = load i16, ptr %440, align 2, !tbaa !39
  %442 = insertelement <8 x i16> %438, i16 %441, i64 1
  %443 = extractelement <4 x i64> %434, i64 2
  %444 = getelementptr inbounds i16, ptr %input.host, i64 %443
  %445 = load i16, ptr %444, align 2, !tbaa !39
  %446 = insertelement <8 x i16> %442, i16 %445, i64 2
  %447 = extractelement <4 x i64> %434, i64 3
  %448 = getelementptr inbounds i16, ptr %input.host, i64 %447
  %449 = load i16, ptr %448, align 2, !tbaa !39
  %450 = insertelement <8 x i16> %446, i16 %449, i64 3
  %451 = shufflevector <8 x i32> %432, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %452 = sext <4 x i32> %451 to <4 x i64>
  %453 = extractelement <4 x i64> %452, i64 0
  %454 = getelementptr inbounds i16, ptr %input.host, i64 %453
  %455 = load i16, ptr %454, align 2, !tbaa !39
  %456 = insertelement <8 x i16> %450, i16 %455, i64 4
  %457 = extractelement <4 x i64> %452, i64 1
  %458 = getelementptr inbounds i16, ptr %input.host, i64 %457
  %459 = load i16, ptr %458, align 2, !tbaa !39
  %460 = insertelement <8 x i16> %456, i16 %459, i64 5
  %461 = extractelement <4 x i64> %452, i64 2
  %462 = getelementptr inbounds i16, ptr %input.host, i64 %461
  %463 = load i16, ptr %462, align 2, !tbaa !39
  %464 = insertelement <8 x i16> %460, i16 %463, i64 6
  %465 = extractelement <4 x i64> %452, i64 3
  %466 = getelementptr inbounds i16, ptr %input.host, i64 %465
  %467 = load i16, ptr %466, align 2, !tbaa !39
  %468 = insertelement <8 x i16> %464, i16 %467, i64 7
  %469 = uitofp <8 x i16> %468 to <8 x float>
  %470 = fmul <8 x float> %469, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %471 = add <8 x i32> %89, %t1955
  %472 = shufflevector <8 x i32> %471, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %473 = sext <4 x i32> %472 to <4 x i64>
  %474 = extractelement <4 x i64> %473, i64 0
  %475 = getelementptr inbounds i16, ptr %input.host, i64 %474
  %476 = load i16, ptr %475, align 2, !tbaa !39
  %477 = insertelement <8 x i16> undef, i16 %476, i64 0
  %478 = extractelement <4 x i64> %473, i64 1
  %479 = getelementptr inbounds i16, ptr %input.host, i64 %478
  %480 = load i16, ptr %479, align 2, !tbaa !39
  %481 = insertelement <8 x i16> %477, i16 %480, i64 1
  %482 = extractelement <4 x i64> %473, i64 2
  %483 = getelementptr inbounds i16, ptr %input.host, i64 %482
  %484 = load i16, ptr %483, align 2, !tbaa !39
  %485 = insertelement <8 x i16> %481, i16 %484, i64 2
  %486 = extractelement <4 x i64> %473, i64 3
  %487 = getelementptr inbounds i16, ptr %input.host, i64 %486
  %488 = load i16, ptr %487, align 2, !tbaa !39
  %489 = insertelement <8 x i16> %485, i16 %488, i64 3
  %490 = shufflevector <8 x i32> %471, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %491 = sext <4 x i32> %490 to <4 x i64>
  %492 = extractelement <4 x i64> %491, i64 0
  %493 = getelementptr inbounds i16, ptr %input.host, i64 %492
  %494 = load i16, ptr %493, align 2, !tbaa !39
  %495 = insertelement <8 x i16> %489, i16 %494, i64 4
  %496 = extractelement <4 x i64> %491, i64 1
  %497 = getelementptr inbounds i16, ptr %input.host, i64 %496
  %498 = load i16, ptr %497, align 2, !tbaa !39
  %499 = insertelement <8 x i16> %495, i16 %498, i64 5
  %500 = extractelement <4 x i64> %491, i64 2
  %501 = getelementptr inbounds i16, ptr %input.host, i64 %500
  %502 = load i16, ptr %501, align 2, !tbaa !39
  %503 = insertelement <8 x i16> %499, i16 %502, i64 6
  %504 = extractelement <4 x i64> %491, i64 3
  %505 = getelementptr inbounds i16, ptr %input.host, i64 %504
  %506 = load i16, ptr %505, align 2, !tbaa !39
  %507 = insertelement <8 x i16> %503, i16 %506, i64 7
  %508 = uitofp <8 x i16> %507 to <8 x float>
  %509 = fmul <8 x float> %508, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %510 = add <8 x i32> %95, %t1955
  %511 = shufflevector <8 x i32> %510, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %512 = sext <4 x i32> %511 to <4 x i64>
  %513 = extractelement <4 x i64> %512, i64 0
  %514 = getelementptr inbounds i16, ptr %input.host, i64 %513
  %515 = load i16, ptr %514, align 2, !tbaa !39
  %516 = insertelement <8 x i16> undef, i16 %515, i64 0
  %517 = extractelement <4 x i64> %512, i64 1
  %518 = getelementptr inbounds i16, ptr %input.host, i64 %517
  %519 = load i16, ptr %518, align 2, !tbaa !39
  %520 = insertelement <8 x i16> %516, i16 %519, i64 1
  %521 = extractelement <4 x i64> %512, i64 2
  %522 = getelementptr inbounds i16, ptr %input.host, i64 %521
  %523 = load i16, ptr %522, align 2, !tbaa !39
  %524 = insertelement <8 x i16> %520, i16 %523, i64 2
  %525 = extractelement <4 x i64> %512, i64 3
  %526 = getelementptr inbounds i16, ptr %input.host, i64 %525
  %527 = load i16, ptr %526, align 2, !tbaa !39
  %528 = insertelement <8 x i16> %524, i16 %527, i64 3
  %529 = shufflevector <8 x i32> %510, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %530 = sext <4 x i32> %529 to <4 x i64>
  %531 = extractelement <4 x i64> %530, i64 0
  %532 = getelementptr inbounds i16, ptr %input.host, i64 %531
  %533 = load i16, ptr %532, align 2, !tbaa !39
  %534 = insertelement <8 x i16> %528, i16 %533, i64 4
  %535 = extractelement <4 x i64> %530, i64 1
  %536 = getelementptr inbounds i16, ptr %input.host, i64 %535
  %537 = load i16, ptr %536, align 2, !tbaa !39
  %538 = insertelement <8 x i16> %534, i16 %537, i64 5
  %539 = extractelement <4 x i64> %530, i64 2
  %540 = getelementptr inbounds i16, ptr %input.host, i64 %539
  %541 = load i16, ptr %540, align 2, !tbaa !39
  %542 = insertelement <8 x i16> %538, i16 %541, i64 6
  %543 = extractelement <4 x i64> %530, i64 3
  %544 = getelementptr inbounds i16, ptr %input.host, i64 %543
  %545 = load i16, ptr %544, align 2, !tbaa !39
  %546 = insertelement <8 x i16> %542, i16 %545, i64 7
  %547 = uitofp <8 x i16> %546 to <8 x float>
  %548 = fmul <8 x float> %547, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %549 = fadd <8 x float> %509, %548
  %550 = fadd <8 x float> %470, %549
  %551 = sext i32 %f2.s0.v3.v283.base7 to i64
  %552 = add i64 %428, %551
  %553 = getelementptr inbounds float, ptr %f2.host, i64 %552
  store <8 x float> %550, ptr %553, align 4, !tbaa !41
  %lsr.iv.next52 = add i32 %lsr.iv51, -1
  %lsr.iv.next54 = add i32 %lsr.iv53, 8
  %.not7 = icmp eq i32 %lsr.iv.next52, 0
  br i1 %.not7, label %"end for f2.s0.v3.v35", label %"for f2.s0.v3.v34"

"end for f2.s0.v3.v35":                           ; preds = %"for f2.s0.v3.v34", %"end for f2.s0.v3.v32"
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %scevgep22 = getelementptr i1, ptr %lsr.iv20, i64 %36
  %lsr.iv.next31 = add i32 %lsr.iv30, %input.stride.1
  %.not5 = icmp eq i64 %indvars.iv.next28, 32
  br i1 %.not5, label %destructor_block, label %"for f2.s0.v4.v280"

destructor_block:                                 ; preds = %"end for f2.s0.v3.v313.loopexit.us", %"end for f2.s0.v3.v35", %"for f2.s0.v4.v2809.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f4.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f4.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f4.s0.v4.v296.preheader":
  %beta = load float, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 1
  %f0.v3.min_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 2
  %a304 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 3
  %f2.v3.extent_realized.s = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 4
  %f2.v3.min_realized = load i32, ptr %3, align 4
  %4 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 5
  %f2.v4.min_realized = load i32, ptr %4, align 4
  %5 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 6
  %f4.s0.v3.max = load i32, ptr %5, align 4
  %6 = sext i32 %f4.s0.v3.max to i64
  %7 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 7
  %f4.s0.v3.min.s = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 8
  %f4.s0.v4.max = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 9
  %f4.s0.v4.min.s = load i32, ptr %9, align 4
  %10 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 10
  %f4.s0.v6.loop_extent.s = load i32, ptr %10, align 4
  %11 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 11
  %f4.stride.1 = load i32, ptr %11, align 4
  %12 = sext i32 %f4.stride.1 to i64
  %13 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 12
  %f4.v3.extent_realized.s = load i32, ptr %13, align 4
  %14 = sext i32 %f4.v3.extent_realized.s to i64
  %15 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 13
  %f4.v3.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f4.v3.min_realized to i64
  %17 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 14
  %f4.v4.min_realized = load i32, ptr %17, align 4
  %18 = sext i32 %f4.v4.min_realized to i64
  %19 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 15
  %levels = load i32, ptr %19, align 4
  %20 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 16
  %f0.host = load ptr, ptr %20, align 8
  %21 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 18
  %f2.host = load ptr, ptr %21, align 8
  %22 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 20
  %f4.host = load ptr, ptr %22, align 8
  %23 = shl nsw i32 %f4.s0.v4.v4, 3
  %24 = add nsw i32 %f4.s0.v4.min.s, %23
  %a303 = add nsw i32 %24, -1
  %b305 = add nsw i32 %f4.s0.v4.max, -7
  %.not8 = icmp slt i32 %b305, %24
  %f4.s0.v4.v296.base = select i1 %.not8, i32 %b305, i32 %a303
  %25 = sext i32 %f4.s0.v4.v296.base to i64
  %26 = sub nsw i64 %25, %18
  %27 = shl nsw i64 %12, 2
  %28 = add nsw i64 %14, 1
  %29 = tail call i32 @llvm.smax.i32(i32 %a304, i32 0)
  %smax = zext i32 %29 to i64
  %30 = shl nsw i64 %14, 2
  %31 = add nsw i64 %30, 4
  %32 = shl i32 %f4.s0.v3.min.s, 1
  %33 = add i32 %f2.v3.extent_realized.s, 1
  %34 = shl i32 %f2.v3.extent_realized.s, 1
  %35 = add i32 %34, 2
  %36 = icmp sgt i32 %f4.s0.v6.loop_extent.s, -2
  %37 = sub nsw i32 %f4.s0.v3.max, %f4.s0.v3.min.s
  %38 = add nsw i32 %37, 2
  %a305 = lshr i32 %38, 3
  %39 = icmp sgt i32 %37, 5
  %40 = select i1 %39, i32 %a305, i32 0
  %.not9 = icmp eq i32 %40, 0
  %41 = add nsw i32 %37, 9
  %42 = ashr i32 %41, 3
  %43 = icmp sgt i32 %42, %40
  %44 = add nsw i32 %levels, -1
  %45 = sitofp i32 %44 to float
  %46 = fdiv float 1.000000e+00, %45
  %47 = insertelement <8 x float> undef, float %45, i64 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = shl nsw i32 %levels, 8
  %50 = add nsw i32 %49, -256
  %51 = insertelement <8 x i32> undef, i32 %50, i64 0
  %b309 = shufflevector <8 x i32> %51, <8 x i32> undef, <8 x i32> zeroinitializer
  %52 = insertelement <8 x float> undef, float %beta, i64 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = shl nsw i32 %f4.s0.v3.max, 1
  %55 = sub nsw i32 %54, %f2.v3.min_realized
  %56 = add nsw i64 %6, -7
  %57 = sub nsw i64 %56, %16
  br i1 %36, label %"for f4.s0.v4.v296.us.preheader", label %destructor_block, !prof !5

"for f4.s0.v4.v296.us.preheader":                 ; preds = %"for f4.s0.v4.v296.preheader"
  %58 = add nuw i32 %29, 2
  %59 = add i32 %58, %f4.s0.v6.loop_extent.s
  %60 = shl i32 %f4.s0.v4.v296.base, 1
  %61 = xor i32 %f2.v4.min_realized, -1
  %62 = add i32 %60, %61
  %63 = mul i32 %62, %33
  %64 = sub i32 %63, %f2.v3.min_realized
  %65 = sub i32 %60, %f2.v4.min_realized
  %66 = mul i32 %65, %33
  %67 = sub i32 %66, %f2.v3.min_realized
  %68 = sub i32 1, %f2.v4.min_realized
  %69 = add i32 %68, %60
  %70 = mul i32 %69, %33
  %71 = sub i32 %70, %f2.v3.min_realized
  %72 = sub i32 2, %f2.v4.min_realized
  %73 = add i32 %72, %60
  %74 = mul i32 %73, %33
  %75 = sub i32 %74, %f2.v3.min_realized
  %76 = xor i64 %16, -1
  %77 = sext i32 %f4.s0.v3.min.s to i64
  %78 = add nsw i64 %76, %77
  %79 = mul nsw i64 %26, %12
  %80 = add i64 %78, %79
  %scevgep = getelementptr float, ptr %f4.host, i64 %80
  %81 = zext i32 %59 to i64
  br label %"for f4.s0.v4.v296.us"

"for f4.s0.v4.v296.us":                           ; preds = %"for f4.s0.v4.v296.us.preheader", %"end for f4.s0.v6.loopexit.us"
  %indvars.iv14 = phi i64 [ 0, %"for f4.s0.v4.v296.us.preheader" ], [ %indvars.iv.next15, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %64, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next27.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %67, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next23.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %71, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next19.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %75, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next15.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f4.s0.v4.v296.us.preheader" ], [ %scevgep6.us, %"end for f4.s0.v6.loopexit.us" ]
  %82 = trunc i64 %indvars.iv14 to i32
  %83 = add i32 %f4.s0.v4.v296.base, %82
  %84 = shl nsw i32 %83, 1
  %85 = sub nsw i32 %84, %f2.v4.min_realized
  %86 = add nsw i32 %85, -1
  %87 = mul nsw i32 %86, %33
  %t1996.us = add nsw i32 %87, %55
  %88 = sext i32 %t1996.us to i64
  %89 = add nsw i64 %88, -16
  %90 = getelementptr inbounds float, ptr %f2.host, i64 %89
  %91 = add nsw i64 %88, -8
  %92 = getelementptr inbounds float, ptr %f2.host, i64 %91
  %93 = add nsw i64 %88, -14
  %94 = getelementptr inbounds float, ptr %f2.host, i64 %93
  %95 = add nsw i64 %88, -6
  %96 = getelementptr inbounds float, ptr %f2.host, i64 %95
  %97 = add nsw i64 %88, -12
  %98 = getelementptr inbounds float, ptr %f2.host, i64 %97
  %99 = add nsw i64 %88, -4
  %100 = getelementptr inbounds float, ptr %f2.host, i64 %99
  %101 = mul nsw i32 %85, %33
  %t2001.us = add nsw i32 %101, %55
  %102 = sext i32 %t2001.us to i64
  %103 = add nsw i64 %102, -16
  %104 = getelementptr inbounds float, ptr %f2.host, i64 %103
  %105 = add nsw i64 %102, -8
  %106 = getelementptr inbounds float, ptr %f2.host, i64 %105
  %107 = add nsw i64 %102, -14
  %108 = getelementptr inbounds float, ptr %f2.host, i64 %107
  %109 = add nsw i64 %102, -6
  %110 = getelementptr inbounds float, ptr %f2.host, i64 %109
  %111 = add nsw i64 %102, -12
  %112 = getelementptr inbounds float, ptr %f2.host, i64 %111
  %113 = add nsw i64 %102, -4
  %114 = getelementptr inbounds float, ptr %f2.host, i64 %113
  %115 = add nsw i32 %85, 1
  %116 = mul nsw i32 %115, %33
  %t2006.us = add nsw i32 %116, %55
  %117 = sext i32 %t2006.us to i64
  %118 = add nsw i64 %117, -16
  %119 = getelementptr inbounds float, ptr %f2.host, i64 %118
  %120 = add nsw i64 %117, -8
  %121 = getelementptr inbounds float, ptr %f2.host, i64 %120
  %122 = add nsw i64 %117, -14
  %123 = getelementptr inbounds float, ptr %f2.host, i64 %122
  %124 = add nsw i64 %117, -6
  %125 = getelementptr inbounds float, ptr %f2.host, i64 %124
  %126 = add nsw i64 %117, -12
  %127 = getelementptr inbounds float, ptr %f2.host, i64 %126
  %128 = add nsw i64 %117, -4
  %129 = getelementptr inbounds float, ptr %f2.host, i64 %128
  %130 = add nsw i32 %85, 2
  %131 = mul nsw i32 %130, %33
  %t2011.us = add nsw i32 %131, %55
  %132 = sext i32 %t2011.us to i64
  %133 = add nsw i64 %132, -16
  %134 = getelementptr inbounds float, ptr %f2.host, i64 %133
  %135 = add nsw i64 %132, -8
  %136 = getelementptr inbounds float, ptr %f2.host, i64 %135
  %137 = add nsw i64 %132, -14
  %138 = getelementptr inbounds float, ptr %f2.host, i64 %137
  %139 = add nsw i64 %132, -6
  %140 = getelementptr inbounds float, ptr %f2.host, i64 %139
  %141 = add nsw i64 %132, -12
  %142 = getelementptr inbounds float, ptr %f2.host, i64 %141
  %143 = add nsw i64 %132, -4
  %144 = getelementptr inbounds float, ptr %f2.host, i64 %143
  %145 = add nsw i64 %26, %indvars.iv14
  %146 = mul nsw i64 %145, %12
  %147 = add i64 %57, %146
  br label %"for f4.s0.v6.us"

"for f4.s0.v6.us":                                ; preds = %"for f4.s0.v4.v296.us", %"end for f4.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f4.s0.v4.v296.us" ], [ %indvars.iv.next, %"end for f4.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f4.s0.v4.v296.us" ], [ %scevgep10.us, %"end for f4.s0.v3.v32.us" ]
  br i1 %.not9, label %"end for f4.s0.v3.v3.us", label %"for f4.s0.v3.v3.preheader.us", !prof !4

"for f4.s0.v3.v3.us":                             ; preds = %"for f4.s0.v3.v3.preheader.us", %"for f4.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f4.s0.v3.v3.us" ], [ %a305, %"for f4.s0.v3.v3.preheader.us" ]
  %148 = add i32 %lsr.iv28.us, %32
  %149 = sext i32 %148 to i64
  %150 = add nsw i64 %149, -4
  %151 = getelementptr inbounds float, ptr %f2.host, i64 %150
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !41
  %153 = add nsw i64 %149, 4
  %154 = getelementptr inbounds float, ptr %f2.host, i64 %153
  %155 = load <8 x float>, ptr %154, align 4, !tbaa !41
  %t1973.us = shufflevector <8 x float> %152, <8 x float> %155, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %156 = add nsw i64 %149, -2
  %157 = getelementptr inbounds float, ptr %f2.host, i64 %156
  %158 = load <8 x float>, ptr %157, align 4, !tbaa !41
  %159 = add nsw i64 %149, 6
  %160 = getelementptr inbounds float, ptr %f2.host, i64 %159
  %161 = load <8 x float>, ptr %160, align 4, !tbaa !41
  %t1974.us = shufflevector <8 x float> %158, <8 x float> %161, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1975.us = shufflevector <8 x float> %158, <8 x float> %161, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %162 = getelementptr inbounds float, ptr %f2.host, i64 %149
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !41
  %164 = add nsw i64 %149, 8
  %165 = getelementptr inbounds float, ptr %f2.host, i64 %164
  %166 = load <8 x float>, ptr %165, align 4, !tbaa !41
  %t1976.us = shufflevector <8 x float> %163, <8 x float> %166, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %167 = add i32 %lsr.iv24.us, %32
  %168 = sext i32 %167 to i64
  %169 = add nsw i64 %168, -4
  %170 = getelementptr inbounds float, ptr %f2.host, i64 %169
  %171 = load <8 x float>, ptr %170, align 4, !tbaa !41
  %172 = add nsw i64 %168, 4
  %173 = getelementptr inbounds float, ptr %f2.host, i64 %172
  %174 = load <8 x float>, ptr %173, align 4, !tbaa !41
  %t1978.us = shufflevector <8 x float> %171, <8 x float> %174, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %175 = add nsw i64 %168, -2
  %176 = getelementptr inbounds float, ptr %f2.host, i64 %175
  %177 = load <8 x float>, ptr %176, align 4, !tbaa !41
  %178 = add nsw i64 %168, 6
  %179 = getelementptr inbounds float, ptr %f2.host, i64 %178
  %180 = load <8 x float>, ptr %179, align 4, !tbaa !41
  %t1979.us = shufflevector <8 x float> %177, <8 x float> %180, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1980.us = shufflevector <8 x float> %177, <8 x float> %180, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %181 = getelementptr inbounds float, ptr %f2.host, i64 %168
  %182 = load <8 x float>, ptr %181, align 4, !tbaa !41
  %183 = add nsw i64 %168, 8
  %184 = getelementptr inbounds float, ptr %f2.host, i64 %183
  %185 = load <8 x float>, ptr %184, align 4, !tbaa !41
  %t1981.us = shufflevector <8 x float> %182, <8 x float> %185, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %186 = add i32 %lsr.iv20.us, %32
  %187 = sext i32 %186 to i64
  %188 = add nsw i64 %187, -4
  %189 = getelementptr inbounds float, ptr %f2.host, i64 %188
  %190 = load <8 x float>, ptr %189, align 4, !tbaa !41
  %191 = add nsw i64 %187, 4
  %192 = getelementptr inbounds float, ptr %f2.host, i64 %191
  %193 = load <8 x float>, ptr %192, align 4, !tbaa !41
  %t1983.us = shufflevector <8 x float> %190, <8 x float> %193, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %194 = add nsw i64 %187, -2
  %195 = getelementptr inbounds float, ptr %f2.host, i64 %194
  %196 = load <8 x float>, ptr %195, align 4, !tbaa !41
  %197 = add nsw i64 %187, 6
  %198 = getelementptr inbounds float, ptr %f2.host, i64 %197
  %199 = load <8 x float>, ptr %198, align 4, !tbaa !41
  %t1984.us = shufflevector <8 x float> %196, <8 x float> %199, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1985.us = shufflevector <8 x float> %196, <8 x float> %199, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %200 = getelementptr inbounds float, ptr %f2.host, i64 %187
  %201 = load <8 x float>, ptr %200, align 4, !tbaa !41
  %202 = add nsw i64 %187, 8
  %203 = getelementptr inbounds float, ptr %f2.host, i64 %202
  %204 = load <8 x float>, ptr %203, align 4, !tbaa !41
  %t1986.us = shufflevector <8 x float> %201, <8 x float> %204, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %205 = add i32 %lsr.iv16.us, %32
  %206 = sext i32 %205 to i64
  %207 = add nsw i64 %206, -4
  %208 = getelementptr inbounds float, ptr %f2.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !41
  %210 = add nsw i64 %206, 4
  %211 = getelementptr inbounds float, ptr %f2.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !41
  %t1988.us = shufflevector <8 x float> %209, <8 x float> %212, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %213 = add nsw i64 %206, -2
  %214 = getelementptr inbounds float, ptr %f2.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !41
  %216 = add nsw i64 %206, 6
  %217 = getelementptr inbounds float, ptr %f2.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !41
  %t1989.us = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1990.us = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %219 = getelementptr inbounds float, ptr %f2.host, i64 %206
  %220 = load <8 x float>, ptr %219, align 4, !tbaa !41
  %221 = add nsw i64 %206, 8
  %222 = getelementptr inbounds float, ptr %f2.host, i64 %221
  %223 = load <8 x float>, ptr %222, align 4, !tbaa !41
  %t1991.us = shufflevector <8 x float> %220, <8 x float> %223, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %224 = fmul <8 x float> %48, %t1991.us
  %225 = fmul <8 x float> %224, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a307.us = fptosi <8 x float> %225 to <8 x i32>
  %a306.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a307.us)
  %226 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a306.us, <8 x i32> zeroinitializer)
  %227 = sub <8 x i32> %226, %1749
  %228 = add nsw <8 x i32> %227, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %229 = shufflevector <8 x i32> %228, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %230 = sext <4 x i32> %229 to <4 x i64>
  %231 = extractelement <4 x i64> %230, i64 0
  %232 = getelementptr inbounds float, ptr %f0.host, i64 %231
  %233 = load float, ptr %232, align 4, !tbaa !6
  %234 = insertelement <8 x float> undef, float %233, i64 0
  %235 = extractelement <4 x i64> %230, i64 1
  %236 = getelementptr inbounds float, ptr %f0.host, i64 %235
  %237 = load float, ptr %236, align 4, !tbaa !6
  %238 = insertelement <8 x float> %234, float %237, i64 1
  %239 = extractelement <4 x i64> %230, i64 2
  %240 = getelementptr inbounds float, ptr %f0.host, i64 %239
  %241 = load float, ptr %240, align 4, !tbaa !6
  %242 = insertelement <8 x float> %238, float %241, i64 2
  %243 = extractelement <4 x i64> %230, i64 3
  %244 = getelementptr inbounds float, ptr %f0.host, i64 %243
  %245 = load float, ptr %244, align 4, !tbaa !6
  %246 = insertelement <8 x float> %242, float %245, i64 3
  %247 = shufflevector <8 x i32> %228, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %248 = sext <4 x i32> %247 to <4 x i64>
  %249 = extractelement <4 x i64> %248, i64 0
  %250 = getelementptr inbounds float, ptr %f0.host, i64 %249
  %251 = load float, ptr %250, align 4, !tbaa !6
  %252 = insertelement <8 x float> %246, float %251, i64 4
  %253 = extractelement <4 x i64> %248, i64 1
  %254 = getelementptr inbounds float, ptr %f0.host, i64 %253
  %255 = load float, ptr %254, align 4, !tbaa !6
  %256 = insertelement <8 x float> %252, float %255, i64 5
  %257 = extractelement <4 x i64> %248, i64 2
  %258 = getelementptr inbounds float, ptr %f0.host, i64 %257
  %259 = load float, ptr %258, align 4, !tbaa !6
  %260 = insertelement <8 x float> %256, float %259, i64 6
  %261 = extractelement <4 x i64> %248, i64 3
  %262 = getelementptr inbounds float, ptr %f0.host, i64 %261
  %263 = load float, ptr %262, align 4, !tbaa !6
  %264 = insertelement <8 x float> %260, float %263, i64 7
  %265 = fsub <8 x float> %t1991.us, %1751
  %266 = fmul <8 x float> %53, %265
  %267 = fadd <8 x float> %1751, %266
  %268 = fadd <8 x float> %267, %264
  %269 = fmul <8 x float> %48, %t1990.us
  %270 = fmul <8 x float> %269, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a309.us = fptosi <8 x float> %270 to <8 x i32>
  %a308.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a309.us)
  %271 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a308.us, <8 x i32> zeroinitializer)
  %272 = sub <8 x i32> %271, %1749
  %273 = add nsw <8 x i32> %272, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %274 = shufflevector <8 x i32> %273, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %275 = sext <4 x i32> %274 to <4 x i64>
  %276 = extractelement <4 x i64> %275, i64 0
  %277 = getelementptr inbounds float, ptr %f0.host, i64 %276
  %278 = load float, ptr %277, align 4, !tbaa !6
  %279 = insertelement <8 x float> undef, float %278, i64 0
  %280 = extractelement <4 x i64> %275, i64 1
  %281 = getelementptr inbounds float, ptr %f0.host, i64 %280
  %282 = load float, ptr %281, align 4, !tbaa !6
  %283 = insertelement <8 x float> %279, float %282, i64 1
  %284 = extractelement <4 x i64> %275, i64 2
  %285 = getelementptr inbounds float, ptr %f0.host, i64 %284
  %286 = load float, ptr %285, align 4, !tbaa !6
  %287 = insertelement <8 x float> %283, float %286, i64 2
  %288 = extractelement <4 x i64> %275, i64 3
  %289 = getelementptr inbounds float, ptr %f0.host, i64 %288
  %290 = load float, ptr %289, align 4, !tbaa !6
  %291 = insertelement <8 x float> %287, float %290, i64 3
  %292 = shufflevector <8 x i32> %273, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %293 = sext <4 x i32> %292 to <4 x i64>
  %294 = extractelement <4 x i64> %293, i64 0
  %295 = getelementptr inbounds float, ptr %f0.host, i64 %294
  %296 = load float, ptr %295, align 4, !tbaa !6
  %297 = insertelement <8 x float> %291, float %296, i64 4
  %298 = extractelement <4 x i64> %293, i64 1
  %299 = getelementptr inbounds float, ptr %f0.host, i64 %298
  %300 = load float, ptr %299, align 4, !tbaa !6
  %301 = insertelement <8 x float> %297, float %300, i64 5
  %302 = extractelement <4 x i64> %293, i64 2
  %303 = getelementptr inbounds float, ptr %f0.host, i64 %302
  %304 = load float, ptr %303, align 4, !tbaa !6
  %305 = insertelement <8 x float> %301, float %304, i64 6
  %306 = extractelement <4 x i64> %293, i64 3
  %307 = getelementptr inbounds float, ptr %f0.host, i64 %306
  %308 = load float, ptr %307, align 4, !tbaa !6
  %309 = insertelement <8 x float> %305, float %308, i64 7
  %310 = fsub <8 x float> %t1990.us, %1751
  %311 = fmul <8 x float> %53, %310
  %312 = fadd <8 x float> %1751, %311
  %313 = fadd <8 x float> %312, %309
  %314 = fmul <8 x float> %48, %t1989.us
  %315 = fmul <8 x float> %314, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a311.us = fptosi <8 x float> %315 to <8 x i32>
  %a310.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a311.us)
  %316 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a310.us, <8 x i32> zeroinitializer)
  %317 = sub <8 x i32> %316, %1749
  %318 = add nsw <8 x i32> %317, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %319 = shufflevector <8 x i32> %318, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %320 = sext <4 x i32> %319 to <4 x i64>
  %321 = extractelement <4 x i64> %320, i64 0
  %322 = getelementptr inbounds float, ptr %f0.host, i64 %321
  %323 = load float, ptr %322, align 4, !tbaa !6
  %324 = insertelement <8 x float> undef, float %323, i64 0
  %325 = extractelement <4 x i64> %320, i64 1
  %326 = getelementptr inbounds float, ptr %f0.host, i64 %325
  %327 = load float, ptr %326, align 4, !tbaa !6
  %328 = insertelement <8 x float> %324, float %327, i64 1
  %329 = extractelement <4 x i64> %320, i64 2
  %330 = getelementptr inbounds float, ptr %f0.host, i64 %329
  %331 = load float, ptr %330, align 4, !tbaa !6
  %332 = insertelement <8 x float> %328, float %331, i64 2
  %333 = extractelement <4 x i64> %320, i64 3
  %334 = getelementptr inbounds float, ptr %f0.host, i64 %333
  %335 = load float, ptr %334, align 4, !tbaa !6
  %336 = insertelement <8 x float> %332, float %335, i64 3
  %337 = shufflevector <8 x i32> %318, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %338 = sext <4 x i32> %337 to <4 x i64>
  %339 = extractelement <4 x i64> %338, i64 0
  %340 = getelementptr inbounds float, ptr %f0.host, i64 %339
  %341 = load float, ptr %340, align 4, !tbaa !6
  %342 = insertelement <8 x float> %336, float %341, i64 4
  %343 = extractelement <4 x i64> %338, i64 1
  %344 = getelementptr inbounds float, ptr %f0.host, i64 %343
  %345 = load float, ptr %344, align 4, !tbaa !6
  %346 = insertelement <8 x float> %342, float %345, i64 5
  %347 = extractelement <4 x i64> %338, i64 2
  %348 = getelementptr inbounds float, ptr %f0.host, i64 %347
  %349 = load float, ptr %348, align 4, !tbaa !6
  %350 = insertelement <8 x float> %346, float %349, i64 6
  %351 = extractelement <4 x i64> %338, i64 3
  %352 = getelementptr inbounds float, ptr %f0.host, i64 %351
  %353 = load float, ptr %352, align 4, !tbaa !6
  %354 = insertelement <8 x float> %350, float %353, i64 7
  %355 = fsub <8 x float> %t1989.us, %1751
  %356 = fmul <8 x float> %53, %355
  %357 = fadd <8 x float> %1751, %356
  %358 = fadd <8 x float> %357, %354
  %359 = fadd <8 x float> %313, %358
  %360 = fmul <8 x float> %359, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %361 = fmul <8 x float> %48, %t1988.us
  %362 = fmul <8 x float> %361, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a313.us = fptosi <8 x float> %362 to <8 x i32>
  %a312.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a313.us)
  %363 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a312.us, <8 x i32> zeroinitializer)
  %364 = sub <8 x i32> %363, %1749
  %365 = add nsw <8 x i32> %364, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %366 = shufflevector <8 x i32> %365, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %367 = sext <4 x i32> %366 to <4 x i64>
  %368 = extractelement <4 x i64> %367, i64 0
  %369 = getelementptr inbounds float, ptr %f0.host, i64 %368
  %370 = load float, ptr %369, align 4, !tbaa !6
  %371 = insertelement <8 x float> undef, float %370, i64 0
  %372 = extractelement <4 x i64> %367, i64 1
  %373 = getelementptr inbounds float, ptr %f0.host, i64 %372
  %374 = load float, ptr %373, align 4, !tbaa !6
  %375 = insertelement <8 x float> %371, float %374, i64 1
  %376 = extractelement <4 x i64> %367, i64 2
  %377 = getelementptr inbounds float, ptr %f0.host, i64 %376
  %378 = load float, ptr %377, align 4, !tbaa !6
  %379 = insertelement <8 x float> %375, float %378, i64 2
  %380 = extractelement <4 x i64> %367, i64 3
  %381 = getelementptr inbounds float, ptr %f0.host, i64 %380
  %382 = load float, ptr %381, align 4, !tbaa !6
  %383 = insertelement <8 x float> %379, float %382, i64 3
  %384 = shufflevector <8 x i32> %365, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %385 = sext <4 x i32> %384 to <4 x i64>
  %386 = extractelement <4 x i64> %385, i64 0
  %387 = getelementptr inbounds float, ptr %f0.host, i64 %386
  %388 = load float, ptr %387, align 4, !tbaa !6
  %389 = insertelement <8 x float> %383, float %388, i64 4
  %390 = extractelement <4 x i64> %385, i64 1
  %391 = getelementptr inbounds float, ptr %f0.host, i64 %390
  %392 = load float, ptr %391, align 4, !tbaa !6
  %393 = insertelement <8 x float> %389, float %392, i64 5
  %394 = extractelement <4 x i64> %385, i64 2
  %395 = getelementptr inbounds float, ptr %f0.host, i64 %394
  %396 = load float, ptr %395, align 4, !tbaa !6
  %397 = insertelement <8 x float> %393, float %396, i64 6
  %398 = extractelement <4 x i64> %385, i64 3
  %399 = getelementptr inbounds float, ptr %f0.host, i64 %398
  %400 = load float, ptr %399, align 4, !tbaa !6
  %401 = insertelement <8 x float> %397, float %400, i64 7
  %402 = fsub <8 x float> %t1988.us, %1751
  %403 = fmul <8 x float> %53, %402
  %404 = fadd <8 x float> %1751, %403
  %405 = fadd <8 x float> %404, %401
  %406 = fadd <8 x float> %360, %405
  %407 = fadd <8 x float> %268, %406
  %408 = fmul <8 x float> %407, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %409 = fmul <8 x float> %48, %t1986.us
  %410 = fmul <8 x float> %409, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a315.us = fptosi <8 x float> %410 to <8 x i32>
  %a314.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a315.us)
  %411 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a314.us, <8 x i32> zeroinitializer)
  %412 = sub <8 x i32> %411, %1749
  %413 = add nsw <8 x i32> %412, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %414 = shufflevector <8 x i32> %413, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %415 = sext <4 x i32> %414 to <4 x i64>
  %416 = extractelement <4 x i64> %415, i64 0
  %417 = getelementptr inbounds float, ptr %f0.host, i64 %416
  %418 = load float, ptr %417, align 4, !tbaa !6
  %419 = insertelement <8 x float> undef, float %418, i64 0
  %420 = extractelement <4 x i64> %415, i64 1
  %421 = getelementptr inbounds float, ptr %f0.host, i64 %420
  %422 = load float, ptr %421, align 4, !tbaa !6
  %423 = insertelement <8 x float> %419, float %422, i64 1
  %424 = extractelement <4 x i64> %415, i64 2
  %425 = getelementptr inbounds float, ptr %f0.host, i64 %424
  %426 = load float, ptr %425, align 4, !tbaa !6
  %427 = insertelement <8 x float> %423, float %426, i64 2
  %428 = extractelement <4 x i64> %415, i64 3
  %429 = getelementptr inbounds float, ptr %f0.host, i64 %428
  %430 = load float, ptr %429, align 4, !tbaa !6
  %431 = insertelement <8 x float> %427, float %430, i64 3
  %432 = shufflevector <8 x i32> %413, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %433 = sext <4 x i32> %432 to <4 x i64>
  %434 = extractelement <4 x i64> %433, i64 0
  %435 = getelementptr inbounds float, ptr %f0.host, i64 %434
  %436 = load float, ptr %435, align 4, !tbaa !6
  %437 = insertelement <8 x float> %431, float %436, i64 4
  %438 = extractelement <4 x i64> %433, i64 1
  %439 = getelementptr inbounds float, ptr %f0.host, i64 %438
  %440 = load float, ptr %439, align 4, !tbaa !6
  %441 = insertelement <8 x float> %437, float %440, i64 5
  %442 = extractelement <4 x i64> %433, i64 2
  %443 = getelementptr inbounds float, ptr %f0.host, i64 %442
  %444 = load float, ptr %443, align 4, !tbaa !6
  %445 = insertelement <8 x float> %441, float %444, i64 6
  %446 = extractelement <4 x i64> %433, i64 3
  %447 = getelementptr inbounds float, ptr %f0.host, i64 %446
  %448 = load float, ptr %447, align 4, !tbaa !6
  %449 = insertelement <8 x float> %445, float %448, i64 7
  %450 = fsub <8 x float> %t1986.us, %1751
  %451 = fmul <8 x float> %53, %450
  %452 = fadd <8 x float> %1751, %451
  %453 = fadd <8 x float> %452, %449
  %454 = fmul <8 x float> %48, %t1985.us
  %455 = fmul <8 x float> %454, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a317.us = fptosi <8 x float> %455 to <8 x i32>
  %a316.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a317.us)
  %456 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a316.us, <8 x i32> zeroinitializer)
  %457 = sub <8 x i32> %456, %1749
  %458 = add nsw <8 x i32> %457, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %459 = shufflevector <8 x i32> %458, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %460 = sext <4 x i32> %459 to <4 x i64>
  %461 = extractelement <4 x i64> %460, i64 0
  %462 = getelementptr inbounds float, ptr %f0.host, i64 %461
  %463 = load float, ptr %462, align 4, !tbaa !6
  %464 = insertelement <8 x float> undef, float %463, i64 0
  %465 = extractelement <4 x i64> %460, i64 1
  %466 = getelementptr inbounds float, ptr %f0.host, i64 %465
  %467 = load float, ptr %466, align 4, !tbaa !6
  %468 = insertelement <8 x float> %464, float %467, i64 1
  %469 = extractelement <4 x i64> %460, i64 2
  %470 = getelementptr inbounds float, ptr %f0.host, i64 %469
  %471 = load float, ptr %470, align 4, !tbaa !6
  %472 = insertelement <8 x float> %468, float %471, i64 2
  %473 = extractelement <4 x i64> %460, i64 3
  %474 = getelementptr inbounds float, ptr %f0.host, i64 %473
  %475 = load float, ptr %474, align 4, !tbaa !6
  %476 = insertelement <8 x float> %472, float %475, i64 3
  %477 = shufflevector <8 x i32> %458, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %478 = sext <4 x i32> %477 to <4 x i64>
  %479 = extractelement <4 x i64> %478, i64 0
  %480 = getelementptr inbounds float, ptr %f0.host, i64 %479
  %481 = load float, ptr %480, align 4, !tbaa !6
  %482 = insertelement <8 x float> %476, float %481, i64 4
  %483 = extractelement <4 x i64> %478, i64 1
  %484 = getelementptr inbounds float, ptr %f0.host, i64 %483
  %485 = load float, ptr %484, align 4, !tbaa !6
  %486 = insertelement <8 x float> %482, float %485, i64 5
  %487 = extractelement <4 x i64> %478, i64 2
  %488 = getelementptr inbounds float, ptr %f0.host, i64 %487
  %489 = load float, ptr %488, align 4, !tbaa !6
  %490 = insertelement <8 x float> %486, float %489, i64 6
  %491 = extractelement <4 x i64> %478, i64 3
  %492 = getelementptr inbounds float, ptr %f0.host, i64 %491
  %493 = load float, ptr %492, align 4, !tbaa !6
  %494 = insertelement <8 x float> %490, float %493, i64 7
  %495 = fsub <8 x float> %t1985.us, %1751
  %496 = fmul <8 x float> %53, %495
  %497 = fadd <8 x float> %1751, %496
  %498 = fadd <8 x float> %497, %494
  %499 = fmul <8 x float> %48, %t1984.us
  %500 = fmul <8 x float> %499, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a319.us = fptosi <8 x float> %500 to <8 x i32>
  %a318.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a319.us)
  %501 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a318.us, <8 x i32> zeroinitializer)
  %502 = sub <8 x i32> %501, %1749
  %503 = add nsw <8 x i32> %502, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %504 = shufflevector <8 x i32> %503, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %505 = sext <4 x i32> %504 to <4 x i64>
  %506 = extractelement <4 x i64> %505, i64 0
  %507 = getelementptr inbounds float, ptr %f0.host, i64 %506
  %508 = load float, ptr %507, align 4, !tbaa !6
  %509 = insertelement <8 x float> undef, float %508, i64 0
  %510 = extractelement <4 x i64> %505, i64 1
  %511 = getelementptr inbounds float, ptr %f0.host, i64 %510
  %512 = load float, ptr %511, align 4, !tbaa !6
  %513 = insertelement <8 x float> %509, float %512, i64 1
  %514 = extractelement <4 x i64> %505, i64 2
  %515 = getelementptr inbounds float, ptr %f0.host, i64 %514
  %516 = load float, ptr %515, align 4, !tbaa !6
  %517 = insertelement <8 x float> %513, float %516, i64 2
  %518 = extractelement <4 x i64> %505, i64 3
  %519 = getelementptr inbounds float, ptr %f0.host, i64 %518
  %520 = load float, ptr %519, align 4, !tbaa !6
  %521 = insertelement <8 x float> %517, float %520, i64 3
  %522 = shufflevector <8 x i32> %503, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %523 = sext <4 x i32> %522 to <4 x i64>
  %524 = extractelement <4 x i64> %523, i64 0
  %525 = getelementptr inbounds float, ptr %f0.host, i64 %524
  %526 = load float, ptr %525, align 4, !tbaa !6
  %527 = insertelement <8 x float> %521, float %526, i64 4
  %528 = extractelement <4 x i64> %523, i64 1
  %529 = getelementptr inbounds float, ptr %f0.host, i64 %528
  %530 = load float, ptr %529, align 4, !tbaa !6
  %531 = insertelement <8 x float> %527, float %530, i64 5
  %532 = extractelement <4 x i64> %523, i64 2
  %533 = getelementptr inbounds float, ptr %f0.host, i64 %532
  %534 = load float, ptr %533, align 4, !tbaa !6
  %535 = insertelement <8 x float> %531, float %534, i64 6
  %536 = extractelement <4 x i64> %523, i64 3
  %537 = getelementptr inbounds float, ptr %f0.host, i64 %536
  %538 = load float, ptr %537, align 4, !tbaa !6
  %539 = insertelement <8 x float> %535, float %538, i64 7
  %540 = fsub <8 x float> %t1984.us, %1751
  %541 = fmul <8 x float> %53, %540
  %542 = fadd <8 x float> %1751, %541
  %543 = fadd <8 x float> %542, %539
  %544 = fadd <8 x float> %498, %543
  %545 = fmul <8 x float> %544, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %546 = fmul <8 x float> %48, %t1983.us
  %547 = fmul <8 x float> %546, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a321.us = fptosi <8 x float> %547 to <8 x i32>
  %a320.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a321.us)
  %548 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a320.us, <8 x i32> zeroinitializer)
  %549 = sub <8 x i32> %548, %1749
  %550 = add nsw <8 x i32> %549, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %551 = shufflevector <8 x i32> %550, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %552 = sext <4 x i32> %551 to <4 x i64>
  %553 = extractelement <4 x i64> %552, i64 0
  %554 = getelementptr inbounds float, ptr %f0.host, i64 %553
  %555 = load float, ptr %554, align 4, !tbaa !6
  %556 = insertelement <8 x float> undef, float %555, i64 0
  %557 = extractelement <4 x i64> %552, i64 1
  %558 = getelementptr inbounds float, ptr %f0.host, i64 %557
  %559 = load float, ptr %558, align 4, !tbaa !6
  %560 = insertelement <8 x float> %556, float %559, i64 1
  %561 = extractelement <4 x i64> %552, i64 2
  %562 = getelementptr inbounds float, ptr %f0.host, i64 %561
  %563 = load float, ptr %562, align 4, !tbaa !6
  %564 = insertelement <8 x float> %560, float %563, i64 2
  %565 = extractelement <4 x i64> %552, i64 3
  %566 = getelementptr inbounds float, ptr %f0.host, i64 %565
  %567 = load float, ptr %566, align 4, !tbaa !6
  %568 = insertelement <8 x float> %564, float %567, i64 3
  %569 = shufflevector <8 x i32> %550, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %570 = sext <4 x i32> %569 to <4 x i64>
  %571 = extractelement <4 x i64> %570, i64 0
  %572 = getelementptr inbounds float, ptr %f0.host, i64 %571
  %573 = load float, ptr %572, align 4, !tbaa !6
  %574 = insertelement <8 x float> %568, float %573, i64 4
  %575 = extractelement <4 x i64> %570, i64 1
  %576 = getelementptr inbounds float, ptr %f0.host, i64 %575
  %577 = load float, ptr %576, align 4, !tbaa !6
  %578 = insertelement <8 x float> %574, float %577, i64 5
  %579 = extractelement <4 x i64> %570, i64 2
  %580 = getelementptr inbounds float, ptr %f0.host, i64 %579
  %581 = load float, ptr %580, align 4, !tbaa !6
  %582 = insertelement <8 x float> %578, float %581, i64 6
  %583 = extractelement <4 x i64> %570, i64 3
  %584 = getelementptr inbounds float, ptr %f0.host, i64 %583
  %585 = load float, ptr %584, align 4, !tbaa !6
  %586 = insertelement <8 x float> %582, float %585, i64 7
  %587 = fsub <8 x float> %t1983.us, %1751
  %588 = fmul <8 x float> %53, %587
  %589 = fadd <8 x float> %1751, %588
  %590 = fadd <8 x float> %589, %586
  %591 = fadd <8 x float> %545, %590
  %592 = fadd <8 x float> %453, %591
  %593 = fmul <8 x float> %48, %t1981.us
  %594 = fmul <8 x float> %593, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a323.us = fptosi <8 x float> %594 to <8 x i32>
  %a322.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a323.us)
  %595 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a322.us, <8 x i32> zeroinitializer)
  %596 = sub <8 x i32> %595, %1749
  %597 = add nsw <8 x i32> %596, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %598 = shufflevector <8 x i32> %597, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %599 = sext <4 x i32> %598 to <4 x i64>
  %600 = extractelement <4 x i64> %599, i64 0
  %601 = getelementptr inbounds float, ptr %f0.host, i64 %600
  %602 = load float, ptr %601, align 4, !tbaa !6
  %603 = insertelement <8 x float> undef, float %602, i64 0
  %604 = extractelement <4 x i64> %599, i64 1
  %605 = getelementptr inbounds float, ptr %f0.host, i64 %604
  %606 = load float, ptr %605, align 4, !tbaa !6
  %607 = insertelement <8 x float> %603, float %606, i64 1
  %608 = extractelement <4 x i64> %599, i64 2
  %609 = getelementptr inbounds float, ptr %f0.host, i64 %608
  %610 = load float, ptr %609, align 4, !tbaa !6
  %611 = insertelement <8 x float> %607, float %610, i64 2
  %612 = extractelement <4 x i64> %599, i64 3
  %613 = getelementptr inbounds float, ptr %f0.host, i64 %612
  %614 = load float, ptr %613, align 4, !tbaa !6
  %615 = insertelement <8 x float> %611, float %614, i64 3
  %616 = shufflevector <8 x i32> %597, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %617 = sext <4 x i32> %616 to <4 x i64>
  %618 = extractelement <4 x i64> %617, i64 0
  %619 = getelementptr inbounds float, ptr %f0.host, i64 %618
  %620 = load float, ptr %619, align 4, !tbaa !6
  %621 = insertelement <8 x float> %615, float %620, i64 4
  %622 = extractelement <4 x i64> %617, i64 1
  %623 = getelementptr inbounds float, ptr %f0.host, i64 %622
  %624 = load float, ptr %623, align 4, !tbaa !6
  %625 = insertelement <8 x float> %621, float %624, i64 5
  %626 = extractelement <4 x i64> %617, i64 2
  %627 = getelementptr inbounds float, ptr %f0.host, i64 %626
  %628 = load float, ptr %627, align 4, !tbaa !6
  %629 = insertelement <8 x float> %625, float %628, i64 6
  %630 = extractelement <4 x i64> %617, i64 3
  %631 = getelementptr inbounds float, ptr %f0.host, i64 %630
  %632 = load float, ptr %631, align 4, !tbaa !6
  %633 = insertelement <8 x float> %629, float %632, i64 7
  %634 = fsub <8 x float> %t1981.us, %1751
  %635 = fmul <8 x float> %53, %634
  %636 = fadd <8 x float> %1751, %635
  %637 = fadd <8 x float> %636, %633
  %638 = fmul <8 x float> %48, %t1980.us
  %639 = fmul <8 x float> %638, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a325.us = fptosi <8 x float> %639 to <8 x i32>
  %a324.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a325.us)
  %640 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a324.us, <8 x i32> zeroinitializer)
  %641 = sub <8 x i32> %640, %1749
  %642 = add nsw <8 x i32> %641, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %643 = shufflevector <8 x i32> %642, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %644 = sext <4 x i32> %643 to <4 x i64>
  %645 = extractelement <4 x i64> %644, i64 0
  %646 = getelementptr inbounds float, ptr %f0.host, i64 %645
  %647 = load float, ptr %646, align 4, !tbaa !6
  %648 = insertelement <8 x float> undef, float %647, i64 0
  %649 = extractelement <4 x i64> %644, i64 1
  %650 = getelementptr inbounds float, ptr %f0.host, i64 %649
  %651 = load float, ptr %650, align 4, !tbaa !6
  %652 = insertelement <8 x float> %648, float %651, i64 1
  %653 = extractelement <4 x i64> %644, i64 2
  %654 = getelementptr inbounds float, ptr %f0.host, i64 %653
  %655 = load float, ptr %654, align 4, !tbaa !6
  %656 = insertelement <8 x float> %652, float %655, i64 2
  %657 = extractelement <4 x i64> %644, i64 3
  %658 = getelementptr inbounds float, ptr %f0.host, i64 %657
  %659 = load float, ptr %658, align 4, !tbaa !6
  %660 = insertelement <8 x float> %656, float %659, i64 3
  %661 = shufflevector <8 x i32> %642, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %662 = sext <4 x i32> %661 to <4 x i64>
  %663 = extractelement <4 x i64> %662, i64 0
  %664 = getelementptr inbounds float, ptr %f0.host, i64 %663
  %665 = load float, ptr %664, align 4, !tbaa !6
  %666 = insertelement <8 x float> %660, float %665, i64 4
  %667 = extractelement <4 x i64> %662, i64 1
  %668 = getelementptr inbounds float, ptr %f0.host, i64 %667
  %669 = load float, ptr %668, align 4, !tbaa !6
  %670 = insertelement <8 x float> %666, float %669, i64 5
  %671 = extractelement <4 x i64> %662, i64 2
  %672 = getelementptr inbounds float, ptr %f0.host, i64 %671
  %673 = load float, ptr %672, align 4, !tbaa !6
  %674 = insertelement <8 x float> %670, float %673, i64 6
  %675 = extractelement <4 x i64> %662, i64 3
  %676 = getelementptr inbounds float, ptr %f0.host, i64 %675
  %677 = load float, ptr %676, align 4, !tbaa !6
  %678 = insertelement <8 x float> %674, float %677, i64 7
  %679 = fsub <8 x float> %t1980.us, %1751
  %680 = fmul <8 x float> %53, %679
  %681 = fadd <8 x float> %1751, %680
  %682 = fadd <8 x float> %681, %678
  %683 = fmul <8 x float> %48, %t1979.us
  %684 = fmul <8 x float> %683, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a327.us = fptosi <8 x float> %684 to <8 x i32>
  %a326.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a327.us)
  %685 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a326.us, <8 x i32> zeroinitializer)
  %686 = sub <8 x i32> %685, %1749
  %687 = add nsw <8 x i32> %686, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %688 = shufflevector <8 x i32> %687, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %689 = sext <4 x i32> %688 to <4 x i64>
  %690 = extractelement <4 x i64> %689, i64 0
  %691 = getelementptr inbounds float, ptr %f0.host, i64 %690
  %692 = load float, ptr %691, align 4, !tbaa !6
  %693 = insertelement <8 x float> undef, float %692, i64 0
  %694 = extractelement <4 x i64> %689, i64 1
  %695 = getelementptr inbounds float, ptr %f0.host, i64 %694
  %696 = load float, ptr %695, align 4, !tbaa !6
  %697 = insertelement <8 x float> %693, float %696, i64 1
  %698 = extractelement <4 x i64> %689, i64 2
  %699 = getelementptr inbounds float, ptr %f0.host, i64 %698
  %700 = load float, ptr %699, align 4, !tbaa !6
  %701 = insertelement <8 x float> %697, float %700, i64 2
  %702 = extractelement <4 x i64> %689, i64 3
  %703 = getelementptr inbounds float, ptr %f0.host, i64 %702
  %704 = load float, ptr %703, align 4, !tbaa !6
  %705 = insertelement <8 x float> %701, float %704, i64 3
  %706 = shufflevector <8 x i32> %687, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %707 = sext <4 x i32> %706 to <4 x i64>
  %708 = extractelement <4 x i64> %707, i64 0
  %709 = getelementptr inbounds float, ptr %f0.host, i64 %708
  %710 = load float, ptr %709, align 4, !tbaa !6
  %711 = insertelement <8 x float> %705, float %710, i64 4
  %712 = extractelement <4 x i64> %707, i64 1
  %713 = getelementptr inbounds float, ptr %f0.host, i64 %712
  %714 = load float, ptr %713, align 4, !tbaa !6
  %715 = insertelement <8 x float> %711, float %714, i64 5
  %716 = extractelement <4 x i64> %707, i64 2
  %717 = getelementptr inbounds float, ptr %f0.host, i64 %716
  %718 = load float, ptr %717, align 4, !tbaa !6
  %719 = insertelement <8 x float> %715, float %718, i64 6
  %720 = extractelement <4 x i64> %707, i64 3
  %721 = getelementptr inbounds float, ptr %f0.host, i64 %720
  %722 = load float, ptr %721, align 4, !tbaa !6
  %723 = insertelement <8 x float> %719, float %722, i64 7
  %724 = fsub <8 x float> %t1979.us, %1751
  %725 = fmul <8 x float> %53, %724
  %726 = fadd <8 x float> %1751, %725
  %727 = fadd <8 x float> %726, %723
  %728 = fadd <8 x float> %682, %727
  %729 = fmul <8 x float> %728, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %730 = fmul <8 x float> %48, %t1978.us
  %731 = fmul <8 x float> %730, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a329.us = fptosi <8 x float> %731 to <8 x i32>
  %a328.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a329.us)
  %732 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a328.us, <8 x i32> zeroinitializer)
  %733 = sub <8 x i32> %732, %1749
  %734 = add nsw <8 x i32> %733, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %735 = shufflevector <8 x i32> %734, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %736 = sext <4 x i32> %735 to <4 x i64>
  %737 = extractelement <4 x i64> %736, i64 0
  %738 = getelementptr inbounds float, ptr %f0.host, i64 %737
  %739 = load float, ptr %738, align 4, !tbaa !6
  %740 = insertelement <8 x float> undef, float %739, i64 0
  %741 = extractelement <4 x i64> %736, i64 1
  %742 = getelementptr inbounds float, ptr %f0.host, i64 %741
  %743 = load float, ptr %742, align 4, !tbaa !6
  %744 = insertelement <8 x float> %740, float %743, i64 1
  %745 = extractelement <4 x i64> %736, i64 2
  %746 = getelementptr inbounds float, ptr %f0.host, i64 %745
  %747 = load float, ptr %746, align 4, !tbaa !6
  %748 = insertelement <8 x float> %744, float %747, i64 2
  %749 = extractelement <4 x i64> %736, i64 3
  %750 = getelementptr inbounds float, ptr %f0.host, i64 %749
  %751 = load float, ptr %750, align 4, !tbaa !6
  %752 = insertelement <8 x float> %748, float %751, i64 3
  %753 = shufflevector <8 x i32> %734, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %754 = sext <4 x i32> %753 to <4 x i64>
  %755 = extractelement <4 x i64> %754, i64 0
  %756 = getelementptr inbounds float, ptr %f0.host, i64 %755
  %757 = load float, ptr %756, align 4, !tbaa !6
  %758 = insertelement <8 x float> %752, float %757, i64 4
  %759 = extractelement <4 x i64> %754, i64 1
  %760 = getelementptr inbounds float, ptr %f0.host, i64 %759
  %761 = load float, ptr %760, align 4, !tbaa !6
  %762 = insertelement <8 x float> %758, float %761, i64 5
  %763 = extractelement <4 x i64> %754, i64 2
  %764 = getelementptr inbounds float, ptr %f0.host, i64 %763
  %765 = load float, ptr %764, align 4, !tbaa !6
  %766 = insertelement <8 x float> %762, float %765, i64 6
  %767 = extractelement <4 x i64> %754, i64 3
  %768 = getelementptr inbounds float, ptr %f0.host, i64 %767
  %769 = load float, ptr %768, align 4, !tbaa !6
  %770 = insertelement <8 x float> %766, float %769, i64 7
  %771 = fsub <8 x float> %t1978.us, %1751
  %772 = fmul <8 x float> %53, %771
  %773 = fadd <8 x float> %1751, %772
  %774 = fadd <8 x float> %773, %770
  %775 = fadd <8 x float> %729, %774
  %776 = fadd <8 x float> %637, %775
  %777 = fadd <8 x float> %592, %776
  %778 = fmul <8 x float> %777, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %779 = fmul <8 x float> %48, %t1976.us
  %780 = fmul <8 x float> %779, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a331.us = fptosi <8 x float> %780 to <8 x i32>
  %a330.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a331.us)
  %781 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a330.us, <8 x i32> zeroinitializer)
  %782 = sub <8 x i32> %781, %1749
  %783 = add nsw <8 x i32> %782, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %784 = shufflevector <8 x i32> %783, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %785 = sext <4 x i32> %784 to <4 x i64>
  %786 = extractelement <4 x i64> %785, i64 0
  %787 = getelementptr inbounds float, ptr %f0.host, i64 %786
  %788 = load float, ptr %787, align 4, !tbaa !6
  %789 = insertelement <8 x float> undef, float %788, i64 0
  %790 = extractelement <4 x i64> %785, i64 1
  %791 = getelementptr inbounds float, ptr %f0.host, i64 %790
  %792 = load float, ptr %791, align 4, !tbaa !6
  %793 = insertelement <8 x float> %789, float %792, i64 1
  %794 = extractelement <4 x i64> %785, i64 2
  %795 = getelementptr inbounds float, ptr %f0.host, i64 %794
  %796 = load float, ptr %795, align 4, !tbaa !6
  %797 = insertelement <8 x float> %793, float %796, i64 2
  %798 = extractelement <4 x i64> %785, i64 3
  %799 = getelementptr inbounds float, ptr %f0.host, i64 %798
  %800 = load float, ptr %799, align 4, !tbaa !6
  %801 = insertelement <8 x float> %797, float %800, i64 3
  %802 = shufflevector <8 x i32> %783, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %803 = sext <4 x i32> %802 to <4 x i64>
  %804 = extractelement <4 x i64> %803, i64 0
  %805 = getelementptr inbounds float, ptr %f0.host, i64 %804
  %806 = load float, ptr %805, align 4, !tbaa !6
  %807 = insertelement <8 x float> %801, float %806, i64 4
  %808 = extractelement <4 x i64> %803, i64 1
  %809 = getelementptr inbounds float, ptr %f0.host, i64 %808
  %810 = load float, ptr %809, align 4, !tbaa !6
  %811 = insertelement <8 x float> %807, float %810, i64 5
  %812 = extractelement <4 x i64> %803, i64 2
  %813 = getelementptr inbounds float, ptr %f0.host, i64 %812
  %814 = load float, ptr %813, align 4, !tbaa !6
  %815 = insertelement <8 x float> %811, float %814, i64 6
  %816 = extractelement <4 x i64> %803, i64 3
  %817 = getelementptr inbounds float, ptr %f0.host, i64 %816
  %818 = load float, ptr %817, align 4, !tbaa !6
  %819 = insertelement <8 x float> %815, float %818, i64 7
  %820 = fsub <8 x float> %t1976.us, %1751
  %821 = fmul <8 x float> %53, %820
  %822 = fadd <8 x float> %1751, %821
  %823 = fadd <8 x float> %822, %819
  %824 = fmul <8 x float> %48, %t1975.us
  %825 = fmul <8 x float> %824, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a333.us = fptosi <8 x float> %825 to <8 x i32>
  %a332.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a333.us)
  %826 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a332.us, <8 x i32> zeroinitializer)
  %827 = sub <8 x i32> %826, %1749
  %828 = add nsw <8 x i32> %827, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %829 = shufflevector <8 x i32> %828, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %830 = sext <4 x i32> %829 to <4 x i64>
  %831 = extractelement <4 x i64> %830, i64 0
  %832 = getelementptr inbounds float, ptr %f0.host, i64 %831
  %833 = load float, ptr %832, align 4, !tbaa !6
  %834 = insertelement <8 x float> undef, float %833, i64 0
  %835 = extractelement <4 x i64> %830, i64 1
  %836 = getelementptr inbounds float, ptr %f0.host, i64 %835
  %837 = load float, ptr %836, align 4, !tbaa !6
  %838 = insertelement <8 x float> %834, float %837, i64 1
  %839 = extractelement <4 x i64> %830, i64 2
  %840 = getelementptr inbounds float, ptr %f0.host, i64 %839
  %841 = load float, ptr %840, align 4, !tbaa !6
  %842 = insertelement <8 x float> %838, float %841, i64 2
  %843 = extractelement <4 x i64> %830, i64 3
  %844 = getelementptr inbounds float, ptr %f0.host, i64 %843
  %845 = load float, ptr %844, align 4, !tbaa !6
  %846 = insertelement <8 x float> %842, float %845, i64 3
  %847 = shufflevector <8 x i32> %828, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %848 = sext <4 x i32> %847 to <4 x i64>
  %849 = extractelement <4 x i64> %848, i64 0
  %850 = getelementptr inbounds float, ptr %f0.host, i64 %849
  %851 = load float, ptr %850, align 4, !tbaa !6
  %852 = insertelement <8 x float> %846, float %851, i64 4
  %853 = extractelement <4 x i64> %848, i64 1
  %854 = getelementptr inbounds float, ptr %f0.host, i64 %853
  %855 = load float, ptr %854, align 4, !tbaa !6
  %856 = insertelement <8 x float> %852, float %855, i64 5
  %857 = extractelement <4 x i64> %848, i64 2
  %858 = getelementptr inbounds float, ptr %f0.host, i64 %857
  %859 = load float, ptr %858, align 4, !tbaa !6
  %860 = insertelement <8 x float> %856, float %859, i64 6
  %861 = extractelement <4 x i64> %848, i64 3
  %862 = getelementptr inbounds float, ptr %f0.host, i64 %861
  %863 = load float, ptr %862, align 4, !tbaa !6
  %864 = insertelement <8 x float> %860, float %863, i64 7
  %865 = fsub <8 x float> %t1975.us, %1751
  %866 = fmul <8 x float> %53, %865
  %867 = fadd <8 x float> %1751, %866
  %868 = fadd <8 x float> %867, %864
  %869 = fmul <8 x float> %48, %t1974.us
  %870 = fmul <8 x float> %869, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a335.us = fptosi <8 x float> %870 to <8 x i32>
  %a334.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a335.us)
  %871 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a334.us, <8 x i32> zeroinitializer)
  %872 = sub <8 x i32> %871, %1749
  %873 = add nsw <8 x i32> %872, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %874 = shufflevector <8 x i32> %873, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %875 = sext <4 x i32> %874 to <4 x i64>
  %876 = extractelement <4 x i64> %875, i64 0
  %877 = getelementptr inbounds float, ptr %f0.host, i64 %876
  %878 = load float, ptr %877, align 4, !tbaa !6
  %879 = insertelement <8 x float> undef, float %878, i64 0
  %880 = extractelement <4 x i64> %875, i64 1
  %881 = getelementptr inbounds float, ptr %f0.host, i64 %880
  %882 = load float, ptr %881, align 4, !tbaa !6
  %883 = insertelement <8 x float> %879, float %882, i64 1
  %884 = extractelement <4 x i64> %875, i64 2
  %885 = getelementptr inbounds float, ptr %f0.host, i64 %884
  %886 = load float, ptr %885, align 4, !tbaa !6
  %887 = insertelement <8 x float> %883, float %886, i64 2
  %888 = extractelement <4 x i64> %875, i64 3
  %889 = getelementptr inbounds float, ptr %f0.host, i64 %888
  %890 = load float, ptr %889, align 4, !tbaa !6
  %891 = insertelement <8 x float> %887, float %890, i64 3
  %892 = shufflevector <8 x i32> %873, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %893 = sext <4 x i32> %892 to <4 x i64>
  %894 = extractelement <4 x i64> %893, i64 0
  %895 = getelementptr inbounds float, ptr %f0.host, i64 %894
  %896 = load float, ptr %895, align 4, !tbaa !6
  %897 = insertelement <8 x float> %891, float %896, i64 4
  %898 = extractelement <4 x i64> %893, i64 1
  %899 = getelementptr inbounds float, ptr %f0.host, i64 %898
  %900 = load float, ptr %899, align 4, !tbaa !6
  %901 = insertelement <8 x float> %897, float %900, i64 5
  %902 = extractelement <4 x i64> %893, i64 2
  %903 = getelementptr inbounds float, ptr %f0.host, i64 %902
  %904 = load float, ptr %903, align 4, !tbaa !6
  %905 = insertelement <8 x float> %901, float %904, i64 6
  %906 = extractelement <4 x i64> %893, i64 3
  %907 = getelementptr inbounds float, ptr %f0.host, i64 %906
  %908 = load float, ptr %907, align 4, !tbaa !6
  %909 = insertelement <8 x float> %905, float %908, i64 7
  %910 = fsub <8 x float> %t1974.us, %1751
  %911 = fmul <8 x float> %53, %910
  %912 = fadd <8 x float> %1751, %911
  %913 = fadd <8 x float> %912, %909
  %914 = fadd <8 x float> %868, %913
  %915 = fmul <8 x float> %914, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %916 = fmul <8 x float> %48, %t1973.us
  %917 = fmul <8 x float> %916, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a337.us = fptosi <8 x float> %917 to <8 x i32>
  %a336.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a337.us)
  %918 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a336.us, <8 x i32> zeroinitializer)
  %919 = sub <8 x i32> %918, %1749
  %920 = add nsw <8 x i32> %919, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %921 = shufflevector <8 x i32> %920, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %922 = sext <4 x i32> %921 to <4 x i64>
  %923 = extractelement <4 x i64> %922, i64 0
  %924 = getelementptr inbounds float, ptr %f0.host, i64 %923
  %925 = load float, ptr %924, align 4, !tbaa !6
  %926 = insertelement <8 x float> undef, float %925, i64 0
  %927 = extractelement <4 x i64> %922, i64 1
  %928 = getelementptr inbounds float, ptr %f0.host, i64 %927
  %929 = load float, ptr %928, align 4, !tbaa !6
  %930 = insertelement <8 x float> %926, float %929, i64 1
  %931 = extractelement <4 x i64> %922, i64 2
  %932 = getelementptr inbounds float, ptr %f0.host, i64 %931
  %933 = load float, ptr %932, align 4, !tbaa !6
  %934 = insertelement <8 x float> %930, float %933, i64 2
  %935 = extractelement <4 x i64> %922, i64 3
  %936 = getelementptr inbounds float, ptr %f0.host, i64 %935
  %937 = load float, ptr %936, align 4, !tbaa !6
  %938 = insertelement <8 x float> %934, float %937, i64 3
  %939 = shufflevector <8 x i32> %920, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %940 = sext <4 x i32> %939 to <4 x i64>
  %941 = extractelement <4 x i64> %940, i64 0
  %942 = getelementptr inbounds float, ptr %f0.host, i64 %941
  %943 = load float, ptr %942, align 4, !tbaa !6
  %944 = insertelement <8 x float> %938, float %943, i64 4
  %945 = extractelement <4 x i64> %940, i64 1
  %946 = getelementptr inbounds float, ptr %f0.host, i64 %945
  %947 = load float, ptr %946, align 4, !tbaa !6
  %948 = insertelement <8 x float> %944, float %947, i64 5
  %949 = extractelement <4 x i64> %940, i64 2
  %950 = getelementptr inbounds float, ptr %f0.host, i64 %949
  %951 = load float, ptr %950, align 4, !tbaa !6
  %952 = insertelement <8 x float> %948, float %951, i64 6
  %953 = extractelement <4 x i64> %940, i64 3
  %954 = getelementptr inbounds float, ptr %f0.host, i64 %953
  %955 = load float, ptr %954, align 4, !tbaa !6
  %956 = insertelement <8 x float> %952, float %955, i64 7
  %957 = fsub <8 x float> %t1973.us, %1751
  %958 = fmul <8 x float> %53, %957
  %959 = fadd <8 x float> %1751, %958
  %960 = fadd <8 x float> %959, %956
  %961 = fadd <8 x float> %915, %960
  %962 = fadd <8 x float> %823, %961
  %963 = fmul <8 x float> %962, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %964 = fadd <8 x float> %778, %963
  %965 = fadd <8 x float> %408, %964
  %966 = fmul <8 x float> %965, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %966, ptr %lsr.iv11.us, align 4, !tbaa !43
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not7.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not7.us, label %"end for f4.s0.v3.v3.us", label %"for f4.s0.v3.v3.us"

"end for f4.s0.v3.v3.us":                         ; preds = %"for f4.s0.v3.v3.us", %"for f4.s0.v6.us"
  br i1 %43, label %"for f4.s0.v3.v31.preheader.us", label %"end for f4.s0.v3.v32.us", !prof !5

"end for f4.s0.v3.v32.us":                        ; preds = %"for f4.s0.v3.v31.preheader.us", %"end for f4.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %31
  %.not5.us = icmp eq i64 %indvars.iv.next, %81
  br i1 %.not5.us, label %"end for f4.s0.v6.loopexit.us", label %"for f4.s0.v6.us"

"for f4.s0.v3.v31.preheader.us":                  ; preds = %"end for f4.s0.v3.v3.us"
  %967 = load <8 x float>, ptr %90, align 4, !tbaa !41
  %968 = load <8 x float>, ptr %92, align 4, !tbaa !41
  %t1997.us = shufflevector <8 x float> %967, <8 x float> %968, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %969 = load <8 x float>, ptr %94, align 4, !tbaa !41
  %970 = load <8 x float>, ptr %96, align 4, !tbaa !41
  %t1998.us = shufflevector <8 x float> %969, <8 x float> %970, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1999.us = shufflevector <8 x float> %969, <8 x float> %970, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %971 = load <8 x float>, ptr %98, align 4, !tbaa !41
  %972 = load <8 x float>, ptr %100, align 4, !tbaa !41
  %t2000.us = shufflevector <8 x float> %971, <8 x float> %972, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %973 = load <8 x float>, ptr %104, align 4, !tbaa !41
  %974 = load <8 x float>, ptr %106, align 4, !tbaa !41
  %t2002.us = shufflevector <8 x float> %973, <8 x float> %974, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %975 = load <8 x float>, ptr %108, align 4, !tbaa !41
  %976 = load <8 x float>, ptr %110, align 4, !tbaa !41
  %t2003.us = shufflevector <8 x float> %975, <8 x float> %976, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2004.us = shufflevector <8 x float> %975, <8 x float> %976, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %977 = load <8 x float>, ptr %112, align 4, !tbaa !41
  %978 = load <8 x float>, ptr %114, align 4, !tbaa !41
  %t2005.us = shufflevector <8 x float> %977, <8 x float> %978, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %979 = load <8 x float>, ptr %119, align 4, !tbaa !41
  %980 = load <8 x float>, ptr %121, align 4, !tbaa !41
  %t2007.us = shufflevector <8 x float> %979, <8 x float> %980, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %981 = load <8 x float>, ptr %123, align 4, !tbaa !41
  %982 = load <8 x float>, ptr %125, align 4, !tbaa !41
  %t2008.us = shufflevector <8 x float> %981, <8 x float> %982, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2009.us = shufflevector <8 x float> %981, <8 x float> %982, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %983 = load <8 x float>, ptr %127, align 4, !tbaa !41
  %984 = load <8 x float>, ptr %129, align 4, !tbaa !41
  %t2010.us = shufflevector <8 x float> %983, <8 x float> %984, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %985 = load <8 x float>, ptr %134, align 4, !tbaa !41
  %986 = load <8 x float>, ptr %136, align 4, !tbaa !41
  %t2012.us = shufflevector <8 x float> %985, <8 x float> %986, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %987 = load <8 x float>, ptr %138, align 4, !tbaa !41
  %988 = load <8 x float>, ptr %140, align 4, !tbaa !41
  %t2013.us = shufflevector <8 x float> %987, <8 x float> %988, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2014.us = shufflevector <8 x float> %987, <8 x float> %988, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %989 = load <8 x float>, ptr %142, align 4, !tbaa !41
  %990 = load <8 x float>, ptr %144, align 4, !tbaa !41
  %t2015.us = shufflevector <8 x float> %989, <8 x float> %990, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %991 = trunc i64 %indvars.iv to i32
  %992 = sitofp i32 %991 to float
  %t2016.s.us = fmul float %46, %992
  %993 = shl nsw i32 %991, 8
  %994 = fmul <8 x float> %48, %t2015.us
  %995 = fmul <8 x float> %994, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a342.us = fptosi <8 x float> %995 to <8 x i32>
  %a341.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a342.us)
  %996 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a341.us, <8 x i32> zeroinitializer)
  %.scalar = add i32 %993, %f0.v3.min_realized.s
  %997 = insertelement <8 x i32> undef, i32 %.scalar, i64 0
  %998 = shufflevector <8 x i32> %997, <8 x i32> poison, <8 x i32> zeroinitializer
  %999 = sub <8 x i32> %996, %998
  %1000 = add nsw <8 x i32> %999, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1001 = shufflevector <8 x i32> %1000, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1002 = sext <4 x i32> %1001 to <4 x i64>
  %1003 = extractelement <4 x i64> %1002, i64 0
  %1004 = getelementptr inbounds float, ptr %f0.host, i64 %1003
  %1005 = load float, ptr %1004, align 4, !tbaa !6
  %1006 = insertelement <8 x float> undef, float %1005, i64 0
  %1007 = extractelement <4 x i64> %1002, i64 1
  %1008 = getelementptr inbounds float, ptr %f0.host, i64 %1007
  %1009 = load float, ptr %1008, align 4, !tbaa !6
  %1010 = insertelement <8 x float> %1006, float %1009, i64 1
  %1011 = extractelement <4 x i64> %1002, i64 2
  %1012 = getelementptr inbounds float, ptr %f0.host, i64 %1011
  %1013 = load float, ptr %1012, align 4, !tbaa !6
  %1014 = insertelement <8 x float> %1010, float %1013, i64 2
  %1015 = extractelement <4 x i64> %1002, i64 3
  %1016 = getelementptr inbounds float, ptr %f0.host, i64 %1015
  %1017 = load float, ptr %1016, align 4, !tbaa !6
  %1018 = insertelement <8 x float> %1014, float %1017, i64 3
  %1019 = shufflevector <8 x i32> %1000, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1020 = sext <4 x i32> %1019 to <4 x i64>
  %1021 = extractelement <4 x i64> %1020, i64 0
  %1022 = getelementptr inbounds float, ptr %f0.host, i64 %1021
  %1023 = load float, ptr %1022, align 4, !tbaa !6
  %1024 = insertelement <8 x float> %1018, float %1023, i64 4
  %1025 = extractelement <4 x i64> %1020, i64 1
  %1026 = getelementptr inbounds float, ptr %f0.host, i64 %1025
  %1027 = load float, ptr %1026, align 4, !tbaa !6
  %1028 = insertelement <8 x float> %1024, float %1027, i64 5
  %1029 = extractelement <4 x i64> %1020, i64 2
  %1030 = getelementptr inbounds float, ptr %f0.host, i64 %1029
  %1031 = load float, ptr %1030, align 4, !tbaa !6
  %1032 = insertelement <8 x float> %1028, float %1031, i64 6
  %1033 = extractelement <4 x i64> %1020, i64 3
  %1034 = getelementptr inbounds float, ptr %f0.host, i64 %1033
  %1035 = load float, ptr %1034, align 4, !tbaa !6
  %1036 = insertelement <8 x float> %1032, float %1035, i64 7
  %1037 = insertelement <8 x float> undef, float %t2016.s.us, i64 0
  %1038 = shufflevector <8 x float> %1037, <8 x float> undef, <8 x i32> zeroinitializer
  %1039 = fsub <8 x float> %t2015.us, %1038
  %1040 = fmul <8 x float> %53, %1039
  %1041 = fadd <8 x float> %1038, %1040
  %1042 = fadd <8 x float> %1041, %1036
  %1043 = fmul <8 x float> %48, %t2014.us
  %1044 = fmul <8 x float> %1043, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a344.us = fptosi <8 x float> %1044 to <8 x i32>
  %a343.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a344.us)
  %1045 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a343.us, <8 x i32> zeroinitializer)
  %1046 = sub <8 x i32> %1045, %998
  %1047 = add nsw <8 x i32> %1046, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1048 = shufflevector <8 x i32> %1047, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1049 = sext <4 x i32> %1048 to <4 x i64>
  %1050 = extractelement <4 x i64> %1049, i64 0
  %1051 = getelementptr inbounds float, ptr %f0.host, i64 %1050
  %1052 = load float, ptr %1051, align 4, !tbaa !6
  %1053 = insertelement <8 x float> undef, float %1052, i64 0
  %1054 = extractelement <4 x i64> %1049, i64 1
  %1055 = getelementptr inbounds float, ptr %f0.host, i64 %1054
  %1056 = load float, ptr %1055, align 4, !tbaa !6
  %1057 = insertelement <8 x float> %1053, float %1056, i64 1
  %1058 = extractelement <4 x i64> %1049, i64 2
  %1059 = getelementptr inbounds float, ptr %f0.host, i64 %1058
  %1060 = load float, ptr %1059, align 4, !tbaa !6
  %1061 = insertelement <8 x float> %1057, float %1060, i64 2
  %1062 = extractelement <4 x i64> %1049, i64 3
  %1063 = getelementptr inbounds float, ptr %f0.host, i64 %1062
  %1064 = load float, ptr %1063, align 4, !tbaa !6
  %1065 = insertelement <8 x float> %1061, float %1064, i64 3
  %1066 = shufflevector <8 x i32> %1047, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1067 = sext <4 x i32> %1066 to <4 x i64>
  %1068 = extractelement <4 x i64> %1067, i64 0
  %1069 = getelementptr inbounds float, ptr %f0.host, i64 %1068
  %1070 = load float, ptr %1069, align 4, !tbaa !6
  %1071 = insertelement <8 x float> %1065, float %1070, i64 4
  %1072 = extractelement <4 x i64> %1067, i64 1
  %1073 = getelementptr inbounds float, ptr %f0.host, i64 %1072
  %1074 = load float, ptr %1073, align 4, !tbaa !6
  %1075 = insertelement <8 x float> %1071, float %1074, i64 5
  %1076 = extractelement <4 x i64> %1067, i64 2
  %1077 = getelementptr inbounds float, ptr %f0.host, i64 %1076
  %1078 = load float, ptr %1077, align 4, !tbaa !6
  %1079 = insertelement <8 x float> %1075, float %1078, i64 6
  %1080 = extractelement <4 x i64> %1067, i64 3
  %1081 = getelementptr inbounds float, ptr %f0.host, i64 %1080
  %1082 = load float, ptr %1081, align 4, !tbaa !6
  %1083 = insertelement <8 x float> %1079, float %1082, i64 7
  %1084 = fsub <8 x float> %t2014.us, %1038
  %1085 = fmul <8 x float> %53, %1084
  %1086 = fadd <8 x float> %1038, %1085
  %1087 = fadd <8 x float> %1086, %1083
  %1088 = fmul <8 x float> %48, %t2013.us
  %1089 = fmul <8 x float> %1088, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a346.us = fptosi <8 x float> %1089 to <8 x i32>
  %a345.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a346.us)
  %1090 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a345.us, <8 x i32> zeroinitializer)
  %1091 = sub <8 x i32> %1090, %998
  %1092 = add nsw <8 x i32> %1091, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1093 = shufflevector <8 x i32> %1092, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1094 = sext <4 x i32> %1093 to <4 x i64>
  %1095 = extractelement <4 x i64> %1094, i64 0
  %1096 = getelementptr inbounds float, ptr %f0.host, i64 %1095
  %1097 = load float, ptr %1096, align 4, !tbaa !6
  %1098 = insertelement <8 x float> undef, float %1097, i64 0
  %1099 = extractelement <4 x i64> %1094, i64 1
  %1100 = getelementptr inbounds float, ptr %f0.host, i64 %1099
  %1101 = load float, ptr %1100, align 4, !tbaa !6
  %1102 = insertelement <8 x float> %1098, float %1101, i64 1
  %1103 = extractelement <4 x i64> %1094, i64 2
  %1104 = getelementptr inbounds float, ptr %f0.host, i64 %1103
  %1105 = load float, ptr %1104, align 4, !tbaa !6
  %1106 = insertelement <8 x float> %1102, float %1105, i64 2
  %1107 = extractelement <4 x i64> %1094, i64 3
  %1108 = getelementptr inbounds float, ptr %f0.host, i64 %1107
  %1109 = load float, ptr %1108, align 4, !tbaa !6
  %1110 = insertelement <8 x float> %1106, float %1109, i64 3
  %1111 = shufflevector <8 x i32> %1092, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1112 = sext <4 x i32> %1111 to <4 x i64>
  %1113 = extractelement <4 x i64> %1112, i64 0
  %1114 = getelementptr inbounds float, ptr %f0.host, i64 %1113
  %1115 = load float, ptr %1114, align 4, !tbaa !6
  %1116 = insertelement <8 x float> %1110, float %1115, i64 4
  %1117 = extractelement <4 x i64> %1112, i64 1
  %1118 = getelementptr inbounds float, ptr %f0.host, i64 %1117
  %1119 = load float, ptr %1118, align 4, !tbaa !6
  %1120 = insertelement <8 x float> %1116, float %1119, i64 5
  %1121 = extractelement <4 x i64> %1112, i64 2
  %1122 = getelementptr inbounds float, ptr %f0.host, i64 %1121
  %1123 = load float, ptr %1122, align 4, !tbaa !6
  %1124 = insertelement <8 x float> %1120, float %1123, i64 6
  %1125 = extractelement <4 x i64> %1112, i64 3
  %1126 = getelementptr inbounds float, ptr %f0.host, i64 %1125
  %1127 = load float, ptr %1126, align 4, !tbaa !6
  %1128 = insertelement <8 x float> %1124, float %1127, i64 7
  %1129 = fsub <8 x float> %t2013.us, %1038
  %1130 = fmul <8 x float> %53, %1129
  %1131 = fadd <8 x float> %1038, %1130
  %1132 = fadd <8 x float> %1131, %1128
  %1133 = fadd <8 x float> %1087, %1132
  %1134 = fmul <8 x float> %1133, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1135 = fmul <8 x float> %48, %t2012.us
  %1136 = fmul <8 x float> %1135, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a348.us = fptosi <8 x float> %1136 to <8 x i32>
  %a347.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a348.us)
  %1137 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a347.us, <8 x i32> zeroinitializer)
  %1138 = sub <8 x i32> %1137, %998
  %1139 = add nsw <8 x i32> %1138, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1140 = shufflevector <8 x i32> %1139, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1141 = sext <4 x i32> %1140 to <4 x i64>
  %1142 = extractelement <4 x i64> %1141, i64 0
  %1143 = getelementptr inbounds float, ptr %f0.host, i64 %1142
  %1144 = load float, ptr %1143, align 4, !tbaa !6
  %1145 = insertelement <8 x float> undef, float %1144, i64 0
  %1146 = extractelement <4 x i64> %1141, i64 1
  %1147 = getelementptr inbounds float, ptr %f0.host, i64 %1146
  %1148 = load float, ptr %1147, align 4, !tbaa !6
  %1149 = insertelement <8 x float> %1145, float %1148, i64 1
  %1150 = extractelement <4 x i64> %1141, i64 2
  %1151 = getelementptr inbounds float, ptr %f0.host, i64 %1150
  %1152 = load float, ptr %1151, align 4, !tbaa !6
  %1153 = insertelement <8 x float> %1149, float %1152, i64 2
  %1154 = extractelement <4 x i64> %1141, i64 3
  %1155 = getelementptr inbounds float, ptr %f0.host, i64 %1154
  %1156 = load float, ptr %1155, align 4, !tbaa !6
  %1157 = insertelement <8 x float> %1153, float %1156, i64 3
  %1158 = shufflevector <8 x i32> %1139, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1159 = sext <4 x i32> %1158 to <4 x i64>
  %1160 = extractelement <4 x i64> %1159, i64 0
  %1161 = getelementptr inbounds float, ptr %f0.host, i64 %1160
  %1162 = load float, ptr %1161, align 4, !tbaa !6
  %1163 = insertelement <8 x float> %1157, float %1162, i64 4
  %1164 = extractelement <4 x i64> %1159, i64 1
  %1165 = getelementptr inbounds float, ptr %f0.host, i64 %1164
  %1166 = load float, ptr %1165, align 4, !tbaa !6
  %1167 = insertelement <8 x float> %1163, float %1166, i64 5
  %1168 = extractelement <4 x i64> %1159, i64 2
  %1169 = getelementptr inbounds float, ptr %f0.host, i64 %1168
  %1170 = load float, ptr %1169, align 4, !tbaa !6
  %1171 = insertelement <8 x float> %1167, float %1170, i64 6
  %1172 = extractelement <4 x i64> %1159, i64 3
  %1173 = getelementptr inbounds float, ptr %f0.host, i64 %1172
  %1174 = load float, ptr %1173, align 4, !tbaa !6
  %1175 = insertelement <8 x float> %1171, float %1174, i64 7
  %1176 = fsub <8 x float> %t2012.us, %1038
  %1177 = fmul <8 x float> %53, %1176
  %1178 = fadd <8 x float> %1038, %1177
  %1179 = fadd <8 x float> %1178, %1175
  %1180 = fadd <8 x float> %1134, %1179
  %1181 = fadd <8 x float> %1042, %1180
  %1182 = fmul <8 x float> %1181, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1183 = fmul <8 x float> %48, %t2010.us
  %1184 = fmul <8 x float> %1183, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a350.us = fptosi <8 x float> %1184 to <8 x i32>
  %a349.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a350.us)
  %1185 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a349.us, <8 x i32> zeroinitializer)
  %1186 = sub <8 x i32> %1185, %998
  %1187 = add nsw <8 x i32> %1186, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1188 = shufflevector <8 x i32> %1187, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1189 = sext <4 x i32> %1188 to <4 x i64>
  %1190 = extractelement <4 x i64> %1189, i64 0
  %1191 = getelementptr inbounds float, ptr %f0.host, i64 %1190
  %1192 = load float, ptr %1191, align 4, !tbaa !6
  %1193 = insertelement <8 x float> undef, float %1192, i64 0
  %1194 = extractelement <4 x i64> %1189, i64 1
  %1195 = getelementptr inbounds float, ptr %f0.host, i64 %1194
  %1196 = load float, ptr %1195, align 4, !tbaa !6
  %1197 = insertelement <8 x float> %1193, float %1196, i64 1
  %1198 = extractelement <4 x i64> %1189, i64 2
  %1199 = getelementptr inbounds float, ptr %f0.host, i64 %1198
  %1200 = load float, ptr %1199, align 4, !tbaa !6
  %1201 = insertelement <8 x float> %1197, float %1200, i64 2
  %1202 = extractelement <4 x i64> %1189, i64 3
  %1203 = getelementptr inbounds float, ptr %f0.host, i64 %1202
  %1204 = load float, ptr %1203, align 4, !tbaa !6
  %1205 = insertelement <8 x float> %1201, float %1204, i64 3
  %1206 = shufflevector <8 x i32> %1187, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1207 = sext <4 x i32> %1206 to <4 x i64>
  %1208 = extractelement <4 x i64> %1207, i64 0
  %1209 = getelementptr inbounds float, ptr %f0.host, i64 %1208
  %1210 = load float, ptr %1209, align 4, !tbaa !6
  %1211 = insertelement <8 x float> %1205, float %1210, i64 4
  %1212 = extractelement <4 x i64> %1207, i64 1
  %1213 = getelementptr inbounds float, ptr %f0.host, i64 %1212
  %1214 = load float, ptr %1213, align 4, !tbaa !6
  %1215 = insertelement <8 x float> %1211, float %1214, i64 5
  %1216 = extractelement <4 x i64> %1207, i64 2
  %1217 = getelementptr inbounds float, ptr %f0.host, i64 %1216
  %1218 = load float, ptr %1217, align 4, !tbaa !6
  %1219 = insertelement <8 x float> %1215, float %1218, i64 6
  %1220 = extractelement <4 x i64> %1207, i64 3
  %1221 = getelementptr inbounds float, ptr %f0.host, i64 %1220
  %1222 = load float, ptr %1221, align 4, !tbaa !6
  %1223 = insertelement <8 x float> %1219, float %1222, i64 7
  %1224 = fsub <8 x float> %t2010.us, %1038
  %1225 = fmul <8 x float> %53, %1224
  %1226 = fadd <8 x float> %1038, %1225
  %1227 = fadd <8 x float> %1226, %1223
  %1228 = fmul <8 x float> %48, %t2009.us
  %1229 = fmul <8 x float> %1228, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a352.us = fptosi <8 x float> %1229 to <8 x i32>
  %a351.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a352.us)
  %1230 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a351.us, <8 x i32> zeroinitializer)
  %1231 = sub <8 x i32> %1230, %998
  %1232 = add nsw <8 x i32> %1231, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1233 = shufflevector <8 x i32> %1232, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1234 = sext <4 x i32> %1233 to <4 x i64>
  %1235 = extractelement <4 x i64> %1234, i64 0
  %1236 = getelementptr inbounds float, ptr %f0.host, i64 %1235
  %1237 = load float, ptr %1236, align 4, !tbaa !6
  %1238 = insertelement <8 x float> undef, float %1237, i64 0
  %1239 = extractelement <4 x i64> %1234, i64 1
  %1240 = getelementptr inbounds float, ptr %f0.host, i64 %1239
  %1241 = load float, ptr %1240, align 4, !tbaa !6
  %1242 = insertelement <8 x float> %1238, float %1241, i64 1
  %1243 = extractelement <4 x i64> %1234, i64 2
  %1244 = getelementptr inbounds float, ptr %f0.host, i64 %1243
  %1245 = load float, ptr %1244, align 4, !tbaa !6
  %1246 = insertelement <8 x float> %1242, float %1245, i64 2
  %1247 = extractelement <4 x i64> %1234, i64 3
  %1248 = getelementptr inbounds float, ptr %f0.host, i64 %1247
  %1249 = load float, ptr %1248, align 4, !tbaa !6
  %1250 = insertelement <8 x float> %1246, float %1249, i64 3
  %1251 = shufflevector <8 x i32> %1232, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1252 = sext <4 x i32> %1251 to <4 x i64>
  %1253 = extractelement <4 x i64> %1252, i64 0
  %1254 = getelementptr inbounds float, ptr %f0.host, i64 %1253
  %1255 = load float, ptr %1254, align 4, !tbaa !6
  %1256 = insertelement <8 x float> %1250, float %1255, i64 4
  %1257 = extractelement <4 x i64> %1252, i64 1
  %1258 = getelementptr inbounds float, ptr %f0.host, i64 %1257
  %1259 = load float, ptr %1258, align 4, !tbaa !6
  %1260 = insertelement <8 x float> %1256, float %1259, i64 5
  %1261 = extractelement <4 x i64> %1252, i64 2
  %1262 = getelementptr inbounds float, ptr %f0.host, i64 %1261
  %1263 = load float, ptr %1262, align 4, !tbaa !6
  %1264 = insertelement <8 x float> %1260, float %1263, i64 6
  %1265 = extractelement <4 x i64> %1252, i64 3
  %1266 = getelementptr inbounds float, ptr %f0.host, i64 %1265
  %1267 = load float, ptr %1266, align 4, !tbaa !6
  %1268 = insertelement <8 x float> %1264, float %1267, i64 7
  %1269 = fsub <8 x float> %t2009.us, %1038
  %1270 = fmul <8 x float> %53, %1269
  %1271 = fadd <8 x float> %1038, %1270
  %1272 = fadd <8 x float> %1271, %1268
  %1273 = fmul <8 x float> %48, %t2008.us
  %1274 = fmul <8 x float> %1273, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a354.us = fptosi <8 x float> %1274 to <8 x i32>
  %a353.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a354.us)
  %1275 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a353.us, <8 x i32> zeroinitializer)
  %1276 = sub <8 x i32> %1275, %998
  %1277 = add nsw <8 x i32> %1276, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1278 = shufflevector <8 x i32> %1277, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1279 = sext <4 x i32> %1278 to <4 x i64>
  %1280 = extractelement <4 x i64> %1279, i64 0
  %1281 = getelementptr inbounds float, ptr %f0.host, i64 %1280
  %1282 = load float, ptr %1281, align 4, !tbaa !6
  %1283 = insertelement <8 x float> undef, float %1282, i64 0
  %1284 = extractelement <4 x i64> %1279, i64 1
  %1285 = getelementptr inbounds float, ptr %f0.host, i64 %1284
  %1286 = load float, ptr %1285, align 4, !tbaa !6
  %1287 = insertelement <8 x float> %1283, float %1286, i64 1
  %1288 = extractelement <4 x i64> %1279, i64 2
  %1289 = getelementptr inbounds float, ptr %f0.host, i64 %1288
  %1290 = load float, ptr %1289, align 4, !tbaa !6
  %1291 = insertelement <8 x float> %1287, float %1290, i64 2
  %1292 = extractelement <4 x i64> %1279, i64 3
  %1293 = getelementptr inbounds float, ptr %f0.host, i64 %1292
  %1294 = load float, ptr %1293, align 4, !tbaa !6
  %1295 = insertelement <8 x float> %1291, float %1294, i64 3
  %1296 = shufflevector <8 x i32> %1277, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1297 = sext <4 x i32> %1296 to <4 x i64>
  %1298 = extractelement <4 x i64> %1297, i64 0
  %1299 = getelementptr inbounds float, ptr %f0.host, i64 %1298
  %1300 = load float, ptr %1299, align 4, !tbaa !6
  %1301 = insertelement <8 x float> %1295, float %1300, i64 4
  %1302 = extractelement <4 x i64> %1297, i64 1
  %1303 = getelementptr inbounds float, ptr %f0.host, i64 %1302
  %1304 = load float, ptr %1303, align 4, !tbaa !6
  %1305 = insertelement <8 x float> %1301, float %1304, i64 5
  %1306 = extractelement <4 x i64> %1297, i64 2
  %1307 = getelementptr inbounds float, ptr %f0.host, i64 %1306
  %1308 = load float, ptr %1307, align 4, !tbaa !6
  %1309 = insertelement <8 x float> %1305, float %1308, i64 6
  %1310 = extractelement <4 x i64> %1297, i64 3
  %1311 = getelementptr inbounds float, ptr %f0.host, i64 %1310
  %1312 = load float, ptr %1311, align 4, !tbaa !6
  %1313 = insertelement <8 x float> %1309, float %1312, i64 7
  %1314 = fsub <8 x float> %t2008.us, %1038
  %1315 = fmul <8 x float> %53, %1314
  %1316 = fadd <8 x float> %1038, %1315
  %1317 = fadd <8 x float> %1316, %1313
  %1318 = fadd <8 x float> %1272, %1317
  %1319 = fmul <8 x float> %1318, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1320 = fmul <8 x float> %48, %t2007.us
  %1321 = fmul <8 x float> %1320, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a356.us = fptosi <8 x float> %1321 to <8 x i32>
  %a355.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a356.us)
  %1322 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a355.us, <8 x i32> zeroinitializer)
  %1323 = sub <8 x i32> %1322, %998
  %1324 = add nsw <8 x i32> %1323, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1325 = shufflevector <8 x i32> %1324, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1326 = sext <4 x i32> %1325 to <4 x i64>
  %1327 = extractelement <4 x i64> %1326, i64 0
  %1328 = getelementptr inbounds float, ptr %f0.host, i64 %1327
  %1329 = load float, ptr %1328, align 4, !tbaa !6
  %1330 = insertelement <8 x float> undef, float %1329, i64 0
  %1331 = extractelement <4 x i64> %1326, i64 1
  %1332 = getelementptr inbounds float, ptr %f0.host, i64 %1331
  %1333 = load float, ptr %1332, align 4, !tbaa !6
  %1334 = insertelement <8 x float> %1330, float %1333, i64 1
  %1335 = extractelement <4 x i64> %1326, i64 2
  %1336 = getelementptr inbounds float, ptr %f0.host, i64 %1335
  %1337 = load float, ptr %1336, align 4, !tbaa !6
  %1338 = insertelement <8 x float> %1334, float %1337, i64 2
  %1339 = extractelement <4 x i64> %1326, i64 3
  %1340 = getelementptr inbounds float, ptr %f0.host, i64 %1339
  %1341 = load float, ptr %1340, align 4, !tbaa !6
  %1342 = insertelement <8 x float> %1338, float %1341, i64 3
  %1343 = shufflevector <8 x i32> %1324, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1344 = sext <4 x i32> %1343 to <4 x i64>
  %1345 = extractelement <4 x i64> %1344, i64 0
  %1346 = getelementptr inbounds float, ptr %f0.host, i64 %1345
  %1347 = load float, ptr %1346, align 4, !tbaa !6
  %1348 = insertelement <8 x float> %1342, float %1347, i64 4
  %1349 = extractelement <4 x i64> %1344, i64 1
  %1350 = getelementptr inbounds float, ptr %f0.host, i64 %1349
  %1351 = load float, ptr %1350, align 4, !tbaa !6
  %1352 = insertelement <8 x float> %1348, float %1351, i64 5
  %1353 = extractelement <4 x i64> %1344, i64 2
  %1354 = getelementptr inbounds float, ptr %f0.host, i64 %1353
  %1355 = load float, ptr %1354, align 4, !tbaa !6
  %1356 = insertelement <8 x float> %1352, float %1355, i64 6
  %1357 = extractelement <4 x i64> %1344, i64 3
  %1358 = getelementptr inbounds float, ptr %f0.host, i64 %1357
  %1359 = load float, ptr %1358, align 4, !tbaa !6
  %1360 = insertelement <8 x float> %1356, float %1359, i64 7
  %1361 = fsub <8 x float> %t2007.us, %1038
  %1362 = fmul <8 x float> %53, %1361
  %1363 = fadd <8 x float> %1038, %1362
  %1364 = fadd <8 x float> %1363, %1360
  %1365 = fadd <8 x float> %1319, %1364
  %1366 = fadd <8 x float> %1227, %1365
  %1367 = fmul <8 x float> %48, %t2005.us
  %1368 = fmul <8 x float> %1367, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a358.us = fptosi <8 x float> %1368 to <8 x i32>
  %a357.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a358.us)
  %1369 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a357.us, <8 x i32> zeroinitializer)
  %1370 = sub <8 x i32> %1369, %998
  %1371 = add nsw <8 x i32> %1370, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1372 = shufflevector <8 x i32> %1371, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1373 = sext <4 x i32> %1372 to <4 x i64>
  %1374 = extractelement <4 x i64> %1373, i64 0
  %1375 = getelementptr inbounds float, ptr %f0.host, i64 %1374
  %1376 = load float, ptr %1375, align 4, !tbaa !6
  %1377 = insertelement <8 x float> undef, float %1376, i64 0
  %1378 = extractelement <4 x i64> %1373, i64 1
  %1379 = getelementptr inbounds float, ptr %f0.host, i64 %1378
  %1380 = load float, ptr %1379, align 4, !tbaa !6
  %1381 = insertelement <8 x float> %1377, float %1380, i64 1
  %1382 = extractelement <4 x i64> %1373, i64 2
  %1383 = getelementptr inbounds float, ptr %f0.host, i64 %1382
  %1384 = load float, ptr %1383, align 4, !tbaa !6
  %1385 = insertelement <8 x float> %1381, float %1384, i64 2
  %1386 = extractelement <4 x i64> %1373, i64 3
  %1387 = getelementptr inbounds float, ptr %f0.host, i64 %1386
  %1388 = load float, ptr %1387, align 4, !tbaa !6
  %1389 = insertelement <8 x float> %1385, float %1388, i64 3
  %1390 = shufflevector <8 x i32> %1371, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1391 = sext <4 x i32> %1390 to <4 x i64>
  %1392 = extractelement <4 x i64> %1391, i64 0
  %1393 = getelementptr inbounds float, ptr %f0.host, i64 %1392
  %1394 = load float, ptr %1393, align 4, !tbaa !6
  %1395 = insertelement <8 x float> %1389, float %1394, i64 4
  %1396 = extractelement <4 x i64> %1391, i64 1
  %1397 = getelementptr inbounds float, ptr %f0.host, i64 %1396
  %1398 = load float, ptr %1397, align 4, !tbaa !6
  %1399 = insertelement <8 x float> %1395, float %1398, i64 5
  %1400 = extractelement <4 x i64> %1391, i64 2
  %1401 = getelementptr inbounds float, ptr %f0.host, i64 %1400
  %1402 = load float, ptr %1401, align 4, !tbaa !6
  %1403 = insertelement <8 x float> %1399, float %1402, i64 6
  %1404 = extractelement <4 x i64> %1391, i64 3
  %1405 = getelementptr inbounds float, ptr %f0.host, i64 %1404
  %1406 = load float, ptr %1405, align 4, !tbaa !6
  %1407 = insertelement <8 x float> %1403, float %1406, i64 7
  %1408 = fsub <8 x float> %t2005.us, %1038
  %1409 = fmul <8 x float> %53, %1408
  %1410 = fadd <8 x float> %1038, %1409
  %1411 = fadd <8 x float> %1410, %1407
  %1412 = fmul <8 x float> %48, %t2004.us
  %1413 = fmul <8 x float> %1412, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a360.us = fptosi <8 x float> %1413 to <8 x i32>
  %a359.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a360.us)
  %1414 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a359.us, <8 x i32> zeroinitializer)
  %1415 = sub <8 x i32> %1414, %998
  %1416 = add nsw <8 x i32> %1415, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1417 = shufflevector <8 x i32> %1416, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1418 = sext <4 x i32> %1417 to <4 x i64>
  %1419 = extractelement <4 x i64> %1418, i64 0
  %1420 = getelementptr inbounds float, ptr %f0.host, i64 %1419
  %1421 = load float, ptr %1420, align 4, !tbaa !6
  %1422 = insertelement <8 x float> undef, float %1421, i64 0
  %1423 = extractelement <4 x i64> %1418, i64 1
  %1424 = getelementptr inbounds float, ptr %f0.host, i64 %1423
  %1425 = load float, ptr %1424, align 4, !tbaa !6
  %1426 = insertelement <8 x float> %1422, float %1425, i64 1
  %1427 = extractelement <4 x i64> %1418, i64 2
  %1428 = getelementptr inbounds float, ptr %f0.host, i64 %1427
  %1429 = load float, ptr %1428, align 4, !tbaa !6
  %1430 = insertelement <8 x float> %1426, float %1429, i64 2
  %1431 = extractelement <4 x i64> %1418, i64 3
  %1432 = getelementptr inbounds float, ptr %f0.host, i64 %1431
  %1433 = load float, ptr %1432, align 4, !tbaa !6
  %1434 = insertelement <8 x float> %1430, float %1433, i64 3
  %1435 = shufflevector <8 x i32> %1416, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1436 = sext <4 x i32> %1435 to <4 x i64>
  %1437 = extractelement <4 x i64> %1436, i64 0
  %1438 = getelementptr inbounds float, ptr %f0.host, i64 %1437
  %1439 = load float, ptr %1438, align 4, !tbaa !6
  %1440 = insertelement <8 x float> %1434, float %1439, i64 4
  %1441 = extractelement <4 x i64> %1436, i64 1
  %1442 = getelementptr inbounds float, ptr %f0.host, i64 %1441
  %1443 = load float, ptr %1442, align 4, !tbaa !6
  %1444 = insertelement <8 x float> %1440, float %1443, i64 5
  %1445 = extractelement <4 x i64> %1436, i64 2
  %1446 = getelementptr inbounds float, ptr %f0.host, i64 %1445
  %1447 = load float, ptr %1446, align 4, !tbaa !6
  %1448 = insertelement <8 x float> %1444, float %1447, i64 6
  %1449 = extractelement <4 x i64> %1436, i64 3
  %1450 = getelementptr inbounds float, ptr %f0.host, i64 %1449
  %1451 = load float, ptr %1450, align 4, !tbaa !6
  %1452 = insertelement <8 x float> %1448, float %1451, i64 7
  %1453 = fsub <8 x float> %t2004.us, %1038
  %1454 = fmul <8 x float> %53, %1453
  %1455 = fadd <8 x float> %1038, %1454
  %1456 = fadd <8 x float> %1455, %1452
  %1457 = fmul <8 x float> %48, %t2003.us
  %1458 = fmul <8 x float> %1457, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a362.us = fptosi <8 x float> %1458 to <8 x i32>
  %a361.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a362.us)
  %1459 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a361.us, <8 x i32> zeroinitializer)
  %1460 = sub <8 x i32> %1459, %998
  %1461 = add nsw <8 x i32> %1460, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1462 = shufflevector <8 x i32> %1461, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1463 = sext <4 x i32> %1462 to <4 x i64>
  %1464 = extractelement <4 x i64> %1463, i64 0
  %1465 = getelementptr inbounds float, ptr %f0.host, i64 %1464
  %1466 = load float, ptr %1465, align 4, !tbaa !6
  %1467 = insertelement <8 x float> undef, float %1466, i64 0
  %1468 = extractelement <4 x i64> %1463, i64 1
  %1469 = getelementptr inbounds float, ptr %f0.host, i64 %1468
  %1470 = load float, ptr %1469, align 4, !tbaa !6
  %1471 = insertelement <8 x float> %1467, float %1470, i64 1
  %1472 = extractelement <4 x i64> %1463, i64 2
  %1473 = getelementptr inbounds float, ptr %f0.host, i64 %1472
  %1474 = load float, ptr %1473, align 4, !tbaa !6
  %1475 = insertelement <8 x float> %1471, float %1474, i64 2
  %1476 = extractelement <4 x i64> %1463, i64 3
  %1477 = getelementptr inbounds float, ptr %f0.host, i64 %1476
  %1478 = load float, ptr %1477, align 4, !tbaa !6
  %1479 = insertelement <8 x float> %1475, float %1478, i64 3
  %1480 = shufflevector <8 x i32> %1461, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1481 = sext <4 x i32> %1480 to <4 x i64>
  %1482 = extractelement <4 x i64> %1481, i64 0
  %1483 = getelementptr inbounds float, ptr %f0.host, i64 %1482
  %1484 = load float, ptr %1483, align 4, !tbaa !6
  %1485 = insertelement <8 x float> %1479, float %1484, i64 4
  %1486 = extractelement <4 x i64> %1481, i64 1
  %1487 = getelementptr inbounds float, ptr %f0.host, i64 %1486
  %1488 = load float, ptr %1487, align 4, !tbaa !6
  %1489 = insertelement <8 x float> %1485, float %1488, i64 5
  %1490 = extractelement <4 x i64> %1481, i64 2
  %1491 = getelementptr inbounds float, ptr %f0.host, i64 %1490
  %1492 = load float, ptr %1491, align 4, !tbaa !6
  %1493 = insertelement <8 x float> %1489, float %1492, i64 6
  %1494 = extractelement <4 x i64> %1481, i64 3
  %1495 = getelementptr inbounds float, ptr %f0.host, i64 %1494
  %1496 = load float, ptr %1495, align 4, !tbaa !6
  %1497 = insertelement <8 x float> %1493, float %1496, i64 7
  %1498 = fsub <8 x float> %t2003.us, %1038
  %1499 = fmul <8 x float> %53, %1498
  %1500 = fadd <8 x float> %1038, %1499
  %1501 = fadd <8 x float> %1500, %1497
  %1502 = fadd <8 x float> %1456, %1501
  %1503 = fmul <8 x float> %1502, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1504 = fmul <8 x float> %48, %t2002.us
  %1505 = fmul <8 x float> %1504, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a364.us = fptosi <8 x float> %1505 to <8 x i32>
  %a363.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a364.us)
  %1506 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a363.us, <8 x i32> zeroinitializer)
  %1507 = sub <8 x i32> %1506, %998
  %1508 = add nsw <8 x i32> %1507, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1509 = shufflevector <8 x i32> %1508, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1510 = sext <4 x i32> %1509 to <4 x i64>
  %1511 = extractelement <4 x i64> %1510, i64 0
  %1512 = getelementptr inbounds float, ptr %f0.host, i64 %1511
  %1513 = load float, ptr %1512, align 4, !tbaa !6
  %1514 = insertelement <8 x float> undef, float %1513, i64 0
  %1515 = extractelement <4 x i64> %1510, i64 1
  %1516 = getelementptr inbounds float, ptr %f0.host, i64 %1515
  %1517 = load float, ptr %1516, align 4, !tbaa !6
  %1518 = insertelement <8 x float> %1514, float %1517, i64 1
  %1519 = extractelement <4 x i64> %1510, i64 2
  %1520 = getelementptr inbounds float, ptr %f0.host, i64 %1519
  %1521 = load float, ptr %1520, align 4, !tbaa !6
  %1522 = insertelement <8 x float> %1518, float %1521, i64 2
  %1523 = extractelement <4 x i64> %1510, i64 3
  %1524 = getelementptr inbounds float, ptr %f0.host, i64 %1523
  %1525 = load float, ptr %1524, align 4, !tbaa !6
  %1526 = insertelement <8 x float> %1522, float %1525, i64 3
  %1527 = shufflevector <8 x i32> %1508, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1528 = sext <4 x i32> %1527 to <4 x i64>
  %1529 = extractelement <4 x i64> %1528, i64 0
  %1530 = getelementptr inbounds float, ptr %f0.host, i64 %1529
  %1531 = load float, ptr %1530, align 4, !tbaa !6
  %1532 = insertelement <8 x float> %1526, float %1531, i64 4
  %1533 = extractelement <4 x i64> %1528, i64 1
  %1534 = getelementptr inbounds float, ptr %f0.host, i64 %1533
  %1535 = load float, ptr %1534, align 4, !tbaa !6
  %1536 = insertelement <8 x float> %1532, float %1535, i64 5
  %1537 = extractelement <4 x i64> %1528, i64 2
  %1538 = getelementptr inbounds float, ptr %f0.host, i64 %1537
  %1539 = load float, ptr %1538, align 4, !tbaa !6
  %1540 = insertelement <8 x float> %1536, float %1539, i64 6
  %1541 = extractelement <4 x i64> %1528, i64 3
  %1542 = getelementptr inbounds float, ptr %f0.host, i64 %1541
  %1543 = load float, ptr %1542, align 4, !tbaa !6
  %1544 = insertelement <8 x float> %1540, float %1543, i64 7
  %1545 = fsub <8 x float> %t2002.us, %1038
  %1546 = fmul <8 x float> %53, %1545
  %1547 = fadd <8 x float> %1038, %1546
  %1548 = fadd <8 x float> %1547, %1544
  %1549 = fadd <8 x float> %1503, %1548
  %1550 = fadd <8 x float> %1411, %1549
  %1551 = fadd <8 x float> %1366, %1550
  %1552 = fmul <8 x float> %1551, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1553 = fmul <8 x float> %48, %t2000.us
  %1554 = fmul <8 x float> %1553, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a366.us = fptosi <8 x float> %1554 to <8 x i32>
  %a365.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a366.us)
  %1555 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a365.us, <8 x i32> zeroinitializer)
  %1556 = sub <8 x i32> %1555, %998
  %1557 = add nsw <8 x i32> %1556, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1558 = shufflevector <8 x i32> %1557, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1559 = sext <4 x i32> %1558 to <4 x i64>
  %1560 = extractelement <4 x i64> %1559, i64 0
  %1561 = getelementptr inbounds float, ptr %f0.host, i64 %1560
  %1562 = load float, ptr %1561, align 4, !tbaa !6
  %1563 = insertelement <8 x float> undef, float %1562, i64 0
  %1564 = extractelement <4 x i64> %1559, i64 1
  %1565 = getelementptr inbounds float, ptr %f0.host, i64 %1564
  %1566 = load float, ptr %1565, align 4, !tbaa !6
  %1567 = insertelement <8 x float> %1563, float %1566, i64 1
  %1568 = extractelement <4 x i64> %1559, i64 2
  %1569 = getelementptr inbounds float, ptr %f0.host, i64 %1568
  %1570 = load float, ptr %1569, align 4, !tbaa !6
  %1571 = insertelement <8 x float> %1567, float %1570, i64 2
  %1572 = extractelement <4 x i64> %1559, i64 3
  %1573 = getelementptr inbounds float, ptr %f0.host, i64 %1572
  %1574 = load float, ptr %1573, align 4, !tbaa !6
  %1575 = insertelement <8 x float> %1571, float %1574, i64 3
  %1576 = shufflevector <8 x i32> %1557, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1577 = sext <4 x i32> %1576 to <4 x i64>
  %1578 = extractelement <4 x i64> %1577, i64 0
  %1579 = getelementptr inbounds float, ptr %f0.host, i64 %1578
  %1580 = load float, ptr %1579, align 4, !tbaa !6
  %1581 = insertelement <8 x float> %1575, float %1580, i64 4
  %1582 = extractelement <4 x i64> %1577, i64 1
  %1583 = getelementptr inbounds float, ptr %f0.host, i64 %1582
  %1584 = load float, ptr %1583, align 4, !tbaa !6
  %1585 = insertelement <8 x float> %1581, float %1584, i64 5
  %1586 = extractelement <4 x i64> %1577, i64 2
  %1587 = getelementptr inbounds float, ptr %f0.host, i64 %1586
  %1588 = load float, ptr %1587, align 4, !tbaa !6
  %1589 = insertelement <8 x float> %1585, float %1588, i64 6
  %1590 = extractelement <4 x i64> %1577, i64 3
  %1591 = getelementptr inbounds float, ptr %f0.host, i64 %1590
  %1592 = load float, ptr %1591, align 4, !tbaa !6
  %1593 = insertelement <8 x float> %1589, float %1592, i64 7
  %1594 = fsub <8 x float> %t2000.us, %1038
  %1595 = fmul <8 x float> %53, %1594
  %1596 = fadd <8 x float> %1038, %1595
  %1597 = fadd <8 x float> %1596, %1593
  %1598 = fmul <8 x float> %48, %t1999.us
  %1599 = fmul <8 x float> %1598, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a368.us = fptosi <8 x float> %1599 to <8 x i32>
  %a367.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a368.us)
  %1600 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a367.us, <8 x i32> zeroinitializer)
  %1601 = sub <8 x i32> %1600, %998
  %1602 = add nsw <8 x i32> %1601, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1603 = shufflevector <8 x i32> %1602, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1604 = sext <4 x i32> %1603 to <4 x i64>
  %1605 = extractelement <4 x i64> %1604, i64 0
  %1606 = getelementptr inbounds float, ptr %f0.host, i64 %1605
  %1607 = load float, ptr %1606, align 4, !tbaa !6
  %1608 = insertelement <8 x float> undef, float %1607, i64 0
  %1609 = extractelement <4 x i64> %1604, i64 1
  %1610 = getelementptr inbounds float, ptr %f0.host, i64 %1609
  %1611 = load float, ptr %1610, align 4, !tbaa !6
  %1612 = insertelement <8 x float> %1608, float %1611, i64 1
  %1613 = extractelement <4 x i64> %1604, i64 2
  %1614 = getelementptr inbounds float, ptr %f0.host, i64 %1613
  %1615 = load float, ptr %1614, align 4, !tbaa !6
  %1616 = insertelement <8 x float> %1612, float %1615, i64 2
  %1617 = extractelement <4 x i64> %1604, i64 3
  %1618 = getelementptr inbounds float, ptr %f0.host, i64 %1617
  %1619 = load float, ptr %1618, align 4, !tbaa !6
  %1620 = insertelement <8 x float> %1616, float %1619, i64 3
  %1621 = shufflevector <8 x i32> %1602, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1622 = sext <4 x i32> %1621 to <4 x i64>
  %1623 = extractelement <4 x i64> %1622, i64 0
  %1624 = getelementptr inbounds float, ptr %f0.host, i64 %1623
  %1625 = load float, ptr %1624, align 4, !tbaa !6
  %1626 = insertelement <8 x float> %1620, float %1625, i64 4
  %1627 = extractelement <4 x i64> %1622, i64 1
  %1628 = getelementptr inbounds float, ptr %f0.host, i64 %1627
  %1629 = load float, ptr %1628, align 4, !tbaa !6
  %1630 = insertelement <8 x float> %1626, float %1629, i64 5
  %1631 = extractelement <4 x i64> %1622, i64 2
  %1632 = getelementptr inbounds float, ptr %f0.host, i64 %1631
  %1633 = load float, ptr %1632, align 4, !tbaa !6
  %1634 = insertelement <8 x float> %1630, float %1633, i64 6
  %1635 = extractelement <4 x i64> %1622, i64 3
  %1636 = getelementptr inbounds float, ptr %f0.host, i64 %1635
  %1637 = load float, ptr %1636, align 4, !tbaa !6
  %1638 = insertelement <8 x float> %1634, float %1637, i64 7
  %1639 = fsub <8 x float> %t1999.us, %1038
  %1640 = fmul <8 x float> %53, %1639
  %1641 = fadd <8 x float> %1038, %1640
  %1642 = fadd <8 x float> %1641, %1638
  %1643 = fmul <8 x float> %48, %t1998.us
  %1644 = fmul <8 x float> %1643, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a370.us = fptosi <8 x float> %1644 to <8 x i32>
  %a369.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a370.us)
  %1645 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a369.us, <8 x i32> zeroinitializer)
  %1646 = sub <8 x i32> %1645, %998
  %1647 = add nsw <8 x i32> %1646, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1648 = shufflevector <8 x i32> %1647, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1649 = sext <4 x i32> %1648 to <4 x i64>
  %1650 = extractelement <4 x i64> %1649, i64 0
  %1651 = getelementptr inbounds float, ptr %f0.host, i64 %1650
  %1652 = load float, ptr %1651, align 4, !tbaa !6
  %1653 = insertelement <8 x float> undef, float %1652, i64 0
  %1654 = extractelement <4 x i64> %1649, i64 1
  %1655 = getelementptr inbounds float, ptr %f0.host, i64 %1654
  %1656 = load float, ptr %1655, align 4, !tbaa !6
  %1657 = insertelement <8 x float> %1653, float %1656, i64 1
  %1658 = extractelement <4 x i64> %1649, i64 2
  %1659 = getelementptr inbounds float, ptr %f0.host, i64 %1658
  %1660 = load float, ptr %1659, align 4, !tbaa !6
  %1661 = insertelement <8 x float> %1657, float %1660, i64 2
  %1662 = extractelement <4 x i64> %1649, i64 3
  %1663 = getelementptr inbounds float, ptr %f0.host, i64 %1662
  %1664 = load float, ptr %1663, align 4, !tbaa !6
  %1665 = insertelement <8 x float> %1661, float %1664, i64 3
  %1666 = shufflevector <8 x i32> %1647, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1667 = sext <4 x i32> %1666 to <4 x i64>
  %1668 = extractelement <4 x i64> %1667, i64 0
  %1669 = getelementptr inbounds float, ptr %f0.host, i64 %1668
  %1670 = load float, ptr %1669, align 4, !tbaa !6
  %1671 = insertelement <8 x float> %1665, float %1670, i64 4
  %1672 = extractelement <4 x i64> %1667, i64 1
  %1673 = getelementptr inbounds float, ptr %f0.host, i64 %1672
  %1674 = load float, ptr %1673, align 4, !tbaa !6
  %1675 = insertelement <8 x float> %1671, float %1674, i64 5
  %1676 = extractelement <4 x i64> %1667, i64 2
  %1677 = getelementptr inbounds float, ptr %f0.host, i64 %1676
  %1678 = load float, ptr %1677, align 4, !tbaa !6
  %1679 = insertelement <8 x float> %1675, float %1678, i64 6
  %1680 = extractelement <4 x i64> %1667, i64 3
  %1681 = getelementptr inbounds float, ptr %f0.host, i64 %1680
  %1682 = load float, ptr %1681, align 4, !tbaa !6
  %1683 = insertelement <8 x float> %1679, float %1682, i64 7
  %1684 = fsub <8 x float> %t1998.us, %1038
  %1685 = fmul <8 x float> %53, %1684
  %1686 = fadd <8 x float> %1038, %1685
  %1687 = fadd <8 x float> %1686, %1683
  %1688 = fadd <8 x float> %1642, %1687
  %1689 = fmul <8 x float> %1688, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1690 = fmul <8 x float> %48, %t1997.us
  %1691 = fmul <8 x float> %1690, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a372.us = fptosi <8 x float> %1691 to <8 x i32>
  %a371.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a372.us)
  %1692 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a371.us, <8 x i32> zeroinitializer)
  %1693 = sub <8 x i32> %1692, %998
  %1694 = add nsw <8 x i32> %1693, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1695 = shufflevector <8 x i32> %1694, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1696 = sext <4 x i32> %1695 to <4 x i64>
  %1697 = extractelement <4 x i64> %1696, i64 0
  %1698 = getelementptr inbounds float, ptr %f0.host, i64 %1697
  %1699 = load float, ptr %1698, align 4, !tbaa !6
  %1700 = insertelement <8 x float> undef, float %1699, i64 0
  %1701 = extractelement <4 x i64> %1696, i64 1
  %1702 = getelementptr inbounds float, ptr %f0.host, i64 %1701
  %1703 = load float, ptr %1702, align 4, !tbaa !6
  %1704 = insertelement <8 x float> %1700, float %1703, i64 1
  %1705 = extractelement <4 x i64> %1696, i64 2
  %1706 = getelementptr inbounds float, ptr %f0.host, i64 %1705
  %1707 = load float, ptr %1706, align 4, !tbaa !6
  %1708 = insertelement <8 x float> %1704, float %1707, i64 2
  %1709 = extractelement <4 x i64> %1696, i64 3
  %1710 = getelementptr inbounds float, ptr %f0.host, i64 %1709
  %1711 = load float, ptr %1710, align 4, !tbaa !6
  %1712 = insertelement <8 x float> %1708, float %1711, i64 3
  %1713 = shufflevector <8 x i32> %1694, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1714 = sext <4 x i32> %1713 to <4 x i64>
  %1715 = extractelement <4 x i64> %1714, i64 0
  %1716 = getelementptr inbounds float, ptr %f0.host, i64 %1715
  %1717 = load float, ptr %1716, align 4, !tbaa !6
  %1718 = insertelement <8 x float> %1712, float %1717, i64 4
  %1719 = extractelement <4 x i64> %1714, i64 1
  %1720 = getelementptr inbounds float, ptr %f0.host, i64 %1719
  %1721 = load float, ptr %1720, align 4, !tbaa !6
  %1722 = insertelement <8 x float> %1718, float %1721, i64 5
  %1723 = extractelement <4 x i64> %1714, i64 2
  %1724 = getelementptr inbounds float, ptr %f0.host, i64 %1723
  %1725 = load float, ptr %1724, align 4, !tbaa !6
  %1726 = insertelement <8 x float> %1722, float %1725, i64 6
  %1727 = extractelement <4 x i64> %1714, i64 3
  %1728 = getelementptr inbounds float, ptr %f0.host, i64 %1727
  %1729 = load float, ptr %1728, align 4, !tbaa !6
  %1730 = insertelement <8 x float> %1726, float %1729, i64 7
  %1731 = fsub <8 x float> %t1997.us, %1038
  %1732 = fmul <8 x float> %53, %1731
  %1733 = fadd <8 x float> %1038, %1732
  %1734 = fadd <8 x float> %1733, %1730
  %1735 = fadd <8 x float> %1689, %1734
  %1736 = fadd <8 x float> %1597, %1735
  %1737 = fmul <8 x float> %1736, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1738 = fadd <8 x float> %1552, %1737
  %1739 = fadd <8 x float> %1182, %1738
  %1740 = fmul <8 x float> %1739, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1741 = sub nuw nsw i64 %indvars.iv, %smax
  %1742 = mul nsw i64 %1741, %28
  %1743 = add i64 %147, %1742
  %1744 = getelementptr inbounds float, ptr %f4.host, i64 %1743
  store <8 x float> %1740, ptr %1744, align 4, !tbaa !43
  br label %"end for f4.s0.v3.v32.us"

"for f4.s0.v3.v3.preheader.us":                   ; preds = %"for f4.s0.v6.us"
  %1745 = trunc i64 %indvars.iv to i32
  %1746 = sitofp i32 %1745 to float
  %t1992.s.us = fmul float %46, %1746
  %1747 = shl nsw i32 %1745, 8
  %.scalar17 = add i32 %1747, %f0.v3.min_realized.s
  %1748 = insertelement <8 x i32> undef, i32 %.scalar17, i64 0
  %1749 = shufflevector <8 x i32> %1748, <8 x i32> poison, <8 x i32> zeroinitializer
  %1750 = insertelement <8 x float> undef, float %t1992.s.us, i64 0
  %1751 = shufflevector <8 x float> %1750, <8 x float> undef, <8 x i32> zeroinitializer
  br label %"for f4.s0.v3.v3.us"

"end for f4.s0.v6.loopexit.us":                   ; preds = %"end for f4.s0.v3.v32.us"
  %indvars.iv.next15 = add nuw nsw i64 %indvars.iv14, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %27
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %35
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %35
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %35
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %35
  %.not.us = icmp eq i64 %indvars.iv.next15, 8
  br i1 %.not.us, label %destructor_block, label %"for f4.s0.v4.v296.us"

destructor_block:                                 ; preds = %"end for f4.s0.v6.loopexit.us", %"for f4.s0.v4.v296.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f5.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f5.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f5.s0.v4.v316.preheader":
  %a433 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 1
  %f4.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 3
  %f4.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 4
  %f4.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 5
  %f5.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f5.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 6
  %f5.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 7
  %f5.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 8
  %f5.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 9
  %f5.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 10
  %f5.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f5.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 11
  %f5.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f5.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 12
  %f5.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f5.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 13
  %f5.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f5.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 14
  %f4.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 16
  %f5.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f5.s0.v4.v4, 3
  %a426 = add nsw i32 %f5.s0.v4.min, %19
  %b428 = add nsw i32 %f5.s0.v4.max, -7
  %f5.s0.v4.v316.base = tail call i32 @llvm.smin.i32(i32 %b428, i32 %a426)
  %20 = sext i32 %f5.s0.v4.v316.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a433, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f5.s0.v3.min, 1
  %28 = shl i32 %f4.stride.1, 1
  %29 = icmp sgt i32 %f5.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f5.s0.v3.max, %f5.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a428 = lshr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a428, i32 0
  %.not9 = icmp eq i32 %33, 0
  %34 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %34, %33
  %35 = shl nsw i32 %f5.s0.v3.max, 1
  %36 = sub nsw i32 %35, %f4.v3.min_realized
  %37 = add nsw i64 %4, -7
  %38 = sub nsw i64 %37, %14
  br i1 %29, label %"for f5.s0.v4.v316.us.preheader", label %destructor_block, !prof !5

"for f5.s0.v4.v316.us.preheader":                 ; preds = %"for f5.s0.v4.v316.preheader"
  %39 = add nuw i32 %24, 2
  %40 = add i32 %39, %f5.s0.v6.loop_extent.s
  %41 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 2
  %f4.v3.extent_realized.s = load i32, ptr %41, align 4
  %42 = add nsw i32 %f4.v3.extent_realized.s, 1
  %43 = shl i32 %f5.s0.v4.v316.base, 1
  %44 = xor i32 %f4.v4.min_realized, -1
  %45 = add i32 %43, %44
  %46 = mul i32 %45, %f4.stride.1
  %47 = sub i32 %46, %f4.v3.min_realized
  %48 = sub i32 %43, %f4.v4.min_realized
  %49 = mul i32 %48, %f4.stride.1
  %50 = sub i32 %49, %f4.v3.min_realized
  %51 = sub i32 1, %f4.v4.min_realized
  %52 = add i32 %51, %43
  %53 = mul i32 %52, %f4.stride.1
  %54 = sub i32 %53, %f4.v3.min_realized
  %55 = sub i32 2, %f4.v4.min_realized
  %56 = add i32 %55, %43
  %57 = mul i32 %56, %f4.stride.1
  %58 = sub i32 %57, %f4.v3.min_realized
  %59 = sext i32 %f5.s0.v3.min to i64
  %60 = sub nsw i64 %59, %14
  %61 = mul nsw i64 %21, %10
  %62 = add i64 %60, %61
  %scevgep = getelementptr float, ptr %f5.host, i64 %62
  %63 = zext i32 %24 to i64
  %64 = sext i32 %42 to i64
  %zext = zext i32 %40 to i64
  br label %"for f5.s0.v4.v316.us"

"for f5.s0.v4.v316.us":                           ; preds = %"for f5.s0.v4.v316.us.preheader", %"end for f5.s0.v6.loopexit.us"
  %indvars.iv17 = phi i64 [ 0, %"for f5.s0.v4.v316.us.preheader" ], [ %indvars.iv.next18, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %47, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next27.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %50, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next23.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %54, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next19.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %58, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next15.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f5.s0.v4.v316.us.preheader" ], [ %scevgep6.us, %"end for f5.s0.v6.loopexit.us" ]
  %65 = trunc i64 %indvars.iv17 to i32
  %66 = add i32 %f5.s0.v4.v316.base, %65
  %67 = shl nsw i32 %66, 1
  %68 = sub nsw i32 %67, %f4.v4.min_realized
  %69 = add nsw i32 %68, -1
  %70 = mul nsw i32 %69, %f4.stride.1
  %t2036.s.us = add nsw i32 %70, %36
  %71 = mul nsw i32 %68, %f4.stride.1
  %t2037.s.us = add nsw i32 %71, %36
  %72 = add nsw i32 %68, 1
  %73 = mul nsw i32 %72, %f4.stride.1
  %t2038.s.us = add nsw i32 %73, %36
  %74 = add nsw i32 %68, 2
  %75 = mul nsw i32 %74, %f4.stride.1
  %t2039.s.us = add nsw i32 %75, %36
  %76 = sext i32 %t2039.s.us to i64
  %77 = sext i32 %t2038.s.us to i64
  %78 = sext i32 %t2037.s.us to i64
  %79 = sext i32 %t2036.s.us to i64
  %80 = add nsw i64 %21, %indvars.iv17
  %81 = mul nsw i64 %80, %10
  %82 = add i64 %38, %81
  br label %"for f5.s0.v6.us"

"for f5.s0.v6.us":                                ; preds = %"for f5.s0.v4.v316.us", %"end for f5.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f5.s0.v4.v316.us" ], [ %indvars.iv.next, %"end for f5.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f5.s0.v4.v316.us" ], [ %scevgep10.us, %"end for f5.s0.v3.v32.us" ]
  br i1 %.not9, label %"end for f5.s0.v3.v3.us", label %"for f5.s0.v3.v3.preheader.us", !prof !4

"for f5.s0.v3.v3.us":                             ; preds = %"for f5.s0.v3.v3.preheader.us", %"for f5.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f5.s0.v3.v3.us" ], [ %a428, %"for f5.s0.v3.v3.preheader.us" ]
  %83 = add i32 %lsr.iv28.us, %27
  %84 = add i32 %lsr.iv24.us, %27
  %85 = add i32 %lsr.iv20.us, %27
  %86 = add i32 %lsr.iv16.us, %27
  %87 = sext i32 %86 to i64
  %88 = add nsw i64 %325, %87
  %89 = add nsw i64 %88, 2
  %90 = getelementptr inbounds float, ptr %f4.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !43
  %92 = add nsw i64 %88, 10
  %93 = getelementptr inbounds float, ptr %f4.host, i64 %92
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !43
  %95 = shufflevector <8 x float> %91, <8 x float> %94, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %96 = getelementptr inbounds float, ptr %f4.host, i64 %88
  %97 = load <8 x float>, ptr %96, align 4, !tbaa !43
  %98 = add nsw i64 %88, 8
  %99 = getelementptr inbounds float, ptr %f4.host, i64 %98
  %100 = load <8 x float>, ptr %99, align 4, !tbaa !43
  %101 = shufflevector <8 x float> %97, <8 x float> %100, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %102 = shufflevector <8 x float> %97, <8 x float> %100, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %103 = fadd <8 x float> %102, %101
  %104 = fmul <8 x float> %103, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %105 = add nsw i64 %88, -2
  %106 = getelementptr inbounds float, ptr %f4.host, i64 %105
  %107 = load <8 x float>, ptr %106, align 4, !tbaa !43
  %108 = add nsw i64 %88, 6
  %109 = getelementptr inbounds float, ptr %f4.host, i64 %108
  %110 = load <8 x float>, ptr %109, align 4, !tbaa !43
  %111 = shufflevector <8 x float> %107, <8 x float> %110, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %112 = fadd <8 x float> %111, %104
  %113 = fadd <8 x float> %95, %112
  %114 = fmul <8 x float> %113, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %115 = sext i32 %85 to i64
  %116 = add nsw i64 %325, %115
  %117 = add nsw i64 %116, 2
  %118 = getelementptr inbounds float, ptr %f4.host, i64 %117
  %119 = load <8 x float>, ptr %118, align 4, !tbaa !43
  %120 = add nsw i64 %116, 10
  %121 = getelementptr inbounds float, ptr %f4.host, i64 %120
  %122 = load <8 x float>, ptr %121, align 4, !tbaa !43
  %123 = shufflevector <8 x float> %119, <8 x float> %122, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %124 = getelementptr inbounds float, ptr %f4.host, i64 %116
  %125 = load <8 x float>, ptr %124, align 4, !tbaa !43
  %126 = add nsw i64 %116, 8
  %127 = getelementptr inbounds float, ptr %f4.host, i64 %126
  %128 = load <8 x float>, ptr %127, align 4, !tbaa !43
  %129 = shufflevector <8 x float> %125, <8 x float> %128, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %130 = shufflevector <8 x float> %125, <8 x float> %128, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %131 = fadd <8 x float> %130, %129
  %132 = fmul <8 x float> %131, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %133 = add nsw i64 %116, -2
  %134 = getelementptr inbounds float, ptr %f4.host, i64 %133
  %135 = load <8 x float>, ptr %134, align 4, !tbaa !43
  %136 = add nsw i64 %116, 6
  %137 = getelementptr inbounds float, ptr %f4.host, i64 %136
  %138 = load <8 x float>, ptr %137, align 4, !tbaa !43
  %139 = shufflevector <8 x float> %135, <8 x float> %138, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %140 = fadd <8 x float> %139, %132
  %141 = fadd <8 x float> %123, %140
  %142 = sext i32 %84 to i64
  %143 = add nsw i64 %325, %142
  %144 = add nsw i64 %143, 2
  %145 = getelementptr inbounds float, ptr %f4.host, i64 %144
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !43
  %147 = add nsw i64 %143, 10
  %148 = getelementptr inbounds float, ptr %f4.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !43
  %150 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %151 = getelementptr inbounds float, ptr %f4.host, i64 %143
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !43
  %153 = add nsw i64 %143, 8
  %154 = getelementptr inbounds float, ptr %f4.host, i64 %153
  %155 = load <8 x float>, ptr %154, align 4, !tbaa !43
  %156 = shufflevector <8 x float> %152, <8 x float> %155, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %157 = shufflevector <8 x float> %152, <8 x float> %155, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %158 = fadd <8 x float> %157, %156
  %159 = fmul <8 x float> %158, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %160 = add nsw i64 %143, -2
  %161 = getelementptr inbounds float, ptr %f4.host, i64 %160
  %162 = load <8 x float>, ptr %161, align 4, !tbaa !43
  %163 = add nsw i64 %143, 6
  %164 = getelementptr inbounds float, ptr %f4.host, i64 %163
  %165 = load <8 x float>, ptr %164, align 4, !tbaa !43
  %166 = shufflevector <8 x float> %162, <8 x float> %165, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %167 = fadd <8 x float> %166, %159
  %168 = fadd <8 x float> %150, %167
  %169 = fadd <8 x float> %141, %168
  %170 = fmul <8 x float> %169, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %171 = sext i32 %83 to i64
  %172 = add nsw i64 %325, %171
  %173 = add nsw i64 %172, 2
  %174 = getelementptr inbounds float, ptr %f4.host, i64 %173
  %175 = load <8 x float>, ptr %174, align 4, !tbaa !43
  %176 = add nsw i64 %172, 10
  %177 = getelementptr inbounds float, ptr %f4.host, i64 %176
  %178 = load <8 x float>, ptr %177, align 4, !tbaa !43
  %179 = shufflevector <8 x float> %175, <8 x float> %178, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %180 = getelementptr inbounds float, ptr %f4.host, i64 %172
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !43
  %182 = add nsw i64 %172, 8
  %183 = getelementptr inbounds float, ptr %f4.host, i64 %182
  %184 = load <8 x float>, ptr %183, align 4, !tbaa !43
  %185 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %186 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %187 = fadd <8 x float> %186, %185
  %188 = fmul <8 x float> %187, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %189 = add nsw i64 %172, -2
  %190 = getelementptr inbounds float, ptr %f4.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !43
  %192 = add nsw i64 %172, 6
  %193 = getelementptr inbounds float, ptr %f4.host, i64 %192
  %194 = load <8 x float>, ptr %193, align 4, !tbaa !43
  %195 = shufflevector <8 x float> %191, <8 x float> %194, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %196 = fadd <8 x float> %195, %188
  %197 = fadd <8 x float> %179, %196
  %198 = fmul <8 x float> %197, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %199 = fadd <8 x float> %170, %198
  %200 = fadd <8 x float> %114, %199
  %201 = fmul <8 x float> %200, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %201, ptr %lsr.iv11.us, align 4, !tbaa !45
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f5.s0.v3.v3.us", label %"for f5.s0.v3.v3.us"

"end for f5.s0.v3.v3.us":                         ; preds = %"for f5.s0.v3.v3.us", %"for f5.s0.v6.us"
  br i1 %.not5, label %"end for f5.s0.v3.v32.us", label %"for f5.s0.v3.v31.preheader.us", !prof !4

"end for f5.s0.v3.v32.us":                        ; preds = %"for f5.s0.v3.v31.preheader.us", %"end for f5.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %202 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %202, label %"end for f5.s0.v6.loopexit.us", label %"for f5.s0.v6.us"

"for f5.s0.v3.v31.preheader.us":                  ; preds = %"end for f5.s0.v3.v3.us"
  %203 = sub nuw nsw i64 %indvars.iv, %63
  %204 = mul nsw i64 %203, %64
  %205 = add nsw i64 %204, %76
  %206 = add nsw i64 %205, -12
  %207 = getelementptr inbounds float, ptr %f4.host, i64 %206
  %208 = load <8 x float>, ptr %207, align 4, !tbaa !43
  %209 = add nsw i64 %205, -4
  %210 = getelementptr inbounds float, ptr %f4.host, i64 %209
  %211 = load <8 x float>, ptr %210, align 4, !tbaa !43
  %212 = shufflevector <8 x float> %208, <8 x float> %211, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %213 = add nsw i64 %205, -14
  %214 = getelementptr inbounds float, ptr %f4.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !43
  %216 = add nsw i64 %205, -6
  %217 = getelementptr inbounds float, ptr %f4.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !43
  %219 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %220 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %221 = fadd <8 x float> %220, %219
  %222 = fmul <8 x float> %221, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %223 = add nsw i64 %205, -16
  %224 = getelementptr inbounds float, ptr %f4.host, i64 %223
  %225 = load <8 x float>, ptr %224, align 4, !tbaa !43
  %226 = add nsw i64 %205, -8
  %227 = getelementptr inbounds float, ptr %f4.host, i64 %226
  %228 = load <8 x float>, ptr %227, align 4, !tbaa !43
  %229 = shufflevector <8 x float> %225, <8 x float> %228, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %230 = fadd <8 x float> %229, %222
  %231 = fadd <8 x float> %212, %230
  %232 = fmul <8 x float> %231, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %233 = add nsw i64 %204, %77
  %234 = add nsw i64 %233, -12
  %235 = getelementptr inbounds float, ptr %f4.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !43
  %237 = add nsw i64 %233, -4
  %238 = getelementptr inbounds float, ptr %f4.host, i64 %237
  %239 = load <8 x float>, ptr %238, align 4, !tbaa !43
  %240 = shufflevector <8 x float> %236, <8 x float> %239, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %241 = add nsw i64 %233, -14
  %242 = getelementptr inbounds float, ptr %f4.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !43
  %244 = add nsw i64 %233, -6
  %245 = getelementptr inbounds float, ptr %f4.host, i64 %244
  %246 = load <8 x float>, ptr %245, align 4, !tbaa !43
  %247 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %248 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %249 = fadd <8 x float> %248, %247
  %250 = fmul <8 x float> %249, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %251 = add nsw i64 %233, -16
  %252 = getelementptr inbounds float, ptr %f4.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !43
  %254 = add nsw i64 %233, -8
  %255 = getelementptr inbounds float, ptr %f4.host, i64 %254
  %256 = load <8 x float>, ptr %255, align 4, !tbaa !43
  %257 = shufflevector <8 x float> %253, <8 x float> %256, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %258 = fadd <8 x float> %257, %250
  %259 = fadd <8 x float> %240, %258
  %260 = add nsw i64 %204, %78
  %261 = add nsw i64 %260, -12
  %262 = getelementptr inbounds float, ptr %f4.host, i64 %261
  %263 = load <8 x float>, ptr %262, align 4, !tbaa !43
  %264 = add nsw i64 %260, -4
  %265 = getelementptr inbounds float, ptr %f4.host, i64 %264
  %266 = load <8 x float>, ptr %265, align 4, !tbaa !43
  %267 = shufflevector <8 x float> %263, <8 x float> %266, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %268 = add nsw i64 %260, -14
  %269 = getelementptr inbounds float, ptr %f4.host, i64 %268
  %270 = load <8 x float>, ptr %269, align 4, !tbaa !43
  %271 = add nsw i64 %260, -6
  %272 = getelementptr inbounds float, ptr %f4.host, i64 %271
  %273 = load <8 x float>, ptr %272, align 4, !tbaa !43
  %274 = shufflevector <8 x float> %270, <8 x float> %273, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %275 = shufflevector <8 x float> %270, <8 x float> %273, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %276 = fadd <8 x float> %275, %274
  %277 = fmul <8 x float> %276, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %278 = add nsw i64 %260, -16
  %279 = getelementptr inbounds float, ptr %f4.host, i64 %278
  %280 = load <8 x float>, ptr %279, align 4, !tbaa !43
  %281 = add nsw i64 %260, -8
  %282 = getelementptr inbounds float, ptr %f4.host, i64 %281
  %283 = load <8 x float>, ptr %282, align 4, !tbaa !43
  %284 = shufflevector <8 x float> %280, <8 x float> %283, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %285 = fadd <8 x float> %284, %277
  %286 = fadd <8 x float> %267, %285
  %287 = fadd <8 x float> %259, %286
  %288 = fmul <8 x float> %287, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %289 = add nsw i64 %204, %79
  %290 = add nsw i64 %289, -12
  %291 = getelementptr inbounds float, ptr %f4.host, i64 %290
  %292 = load <8 x float>, ptr %291, align 4, !tbaa !43
  %293 = add nsw i64 %289, -4
  %294 = getelementptr inbounds float, ptr %f4.host, i64 %293
  %295 = load <8 x float>, ptr %294, align 4, !tbaa !43
  %296 = shufflevector <8 x float> %292, <8 x float> %295, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %297 = add nsw i64 %289, -14
  %298 = getelementptr inbounds float, ptr %f4.host, i64 %297
  %299 = load <8 x float>, ptr %298, align 4, !tbaa !43
  %300 = add nsw i64 %289, -6
  %301 = getelementptr inbounds float, ptr %f4.host, i64 %300
  %302 = load <8 x float>, ptr %301, align 4, !tbaa !43
  %303 = shufflevector <8 x float> %299, <8 x float> %302, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %304 = shufflevector <8 x float> %299, <8 x float> %302, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %305 = fadd <8 x float> %304, %303
  %306 = fmul <8 x float> %305, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %307 = add nsw i64 %289, -16
  %308 = getelementptr inbounds float, ptr %f4.host, i64 %307
  %309 = load <8 x float>, ptr %308, align 4, !tbaa !43
  %310 = add nsw i64 %289, -8
  %311 = getelementptr inbounds float, ptr %f4.host, i64 %310
  %312 = load <8 x float>, ptr %311, align 4, !tbaa !43
  %313 = shufflevector <8 x float> %309, <8 x float> %312, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %314 = fadd <8 x float> %313, %306
  %315 = fadd <8 x float> %296, %314
  %316 = fmul <8 x float> %315, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %317 = fadd <8 x float> %288, %316
  %318 = fadd <8 x float> %232, %317
  %319 = fmul <8 x float> %318, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %320 = sub nuw nsw i64 %indvars.iv, %smax
  %321 = mul nsw i64 %320, %23
  %322 = add i64 %82, %321
  %323 = getelementptr inbounds float, ptr %f5.host, i64 %322
  store <8 x float> %319, ptr %323, align 4, !tbaa !45
  br label %"end for f5.s0.v3.v32.us"

"for f5.s0.v3.v3.preheader.us":                   ; preds = %"for f5.s0.v6.us"
  %324 = sub nuw nsw i64 %indvars.iv, %63
  %325 = mul nsw i64 %324, %64
  br label %"for f5.s0.v3.v3.us"

"end for f5.s0.v6.loopexit.us":                   ; preds = %"end for f5.s0.v3.v32.us"
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next18, 8
  br i1 %.not.us, label %destructor_block, label %"for f5.s0.v4.v316.us"

destructor_block:                                 ; preds = %"end for f5.s0.v6.loopexit.us", %"for f5.s0.v4.v316.preheader"
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f72.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f72.s0.v4.v4, ptr noalias nocapture readonly %closure) #3 {
"for f72.s0.v4.v286.preheader":
  %f2.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 1
  %f2.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 2
  %f2.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 3
  %f72.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f72.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 4
  %f72.s0.v3.min.s = load i32, ptr %4, align 4
  %5 = sext i32 %f72.s0.v3.min.s to i64
  %6 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 5
  %f72.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 6
  %f72.s0.v4.min.s = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 7
  %f72.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f72.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 8
  %f72.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f72.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 9
  %f72.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f72.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 10
  %f2.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 12
  %f72.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f72.s0.v4.v4, 5
  %17 = add nsw i32 %f72.s0.v4.min.s, %16
  %a467 = add nsw i32 %17, -1
  %b469 = add nsw i32 %f72.s0.v4.max, -31
  %.not4 = icmp slt i32 %b469, %17
  %f72.s0.v4.v286.base = select i1 %.not4, i32 %b469, i32 %a467
  %18 = sext i32 %f72.s0.v4.v286.base to i64
  %19 = sub nsw i64 %18, %13
  %20 = add nsw i64 %9, 1
  %21 = mul nsw i64 %19, %20
  %22 = xor i64 %11, -1
  %23 = add nsw i64 %22, %5
  %24 = add i64 %23, %21
  %scevgep = getelementptr float, ptr %f72.host, i64 %24
  %25 = shl nsw i64 %9, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f72.s0.v3.min.s, 1
  %28 = shl i32 %f72.s0.v4.v286.base, 1
  %29 = sub i32 2, %f2.v4.min_realized
  %30 = add i32 %29, %28
  %31 = add i32 %f2.v3.extent_realized.s, 1
  %32 = mul i32 %30, %31
  %33 = sub i32 %32, %f2.v3.min_realized
  %34 = shl i32 %f2.v3.extent_realized.s, 1
  %35 = add i32 %34, 2
  %36 = sub i32 1, %f2.v4.min_realized
  %37 = add i32 %36, %28
  %38 = mul i32 %37, %31
  %39 = sub i32 %38, %f2.v3.min_realized
  %40 = sub i32 %28, %f2.v4.min_realized
  %41 = mul i32 %40, %31
  %42 = sub i32 %41, %f2.v3.min_realized
  %43 = xor i32 %f2.v4.min_realized, -1
  %44 = add i32 %28, %43
  %45 = mul i32 %44, %31
  %46 = sub i32 %45, %f2.v3.min_realized
  %47 = sub nsw i32 %f72.s0.v3.max, %f72.s0.v3.min.s
  %48 = add nsw i32 %47, 2
  %a468 = lshr i32 %48, 3
  %49 = icmp sgt i32 %47, 5
  %50 = select i1 %49, i32 %a468, i32 0
  %.not5 = icmp eq i32 %50, 0
  %51 = add nsw i32 %47, 9
  %52 = ashr i32 %51, 3
  %53 = icmp sgt i32 %52, %50
  %54 = shl nsw i32 %f72.s0.v3.max, 1
  %55 = sub nsw i32 %54, %f2.v3.min_realized
  %56 = add nsw i64 %3, -7
  %57 = sub nsw i64 %56, %11
  br label %"for f72.s0.v4.v286"

"for f72.s0.v4.v286":                             ; preds = %"end for f72.s0.v3.v32", %"for f72.s0.v4.v286.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f72.s0.v3.v32" ], [ 0, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f72.s0.v3.v32" ], [ %46, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f72.s0.v3.v32" ], [ %42, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f72.s0.v3.v32" ], [ %39, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f72.s0.v3.v32" ], [ %33, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f72.s0.v3.v32" ], [ %scevgep, %"for f72.s0.v4.v286.preheader" ]
  br i1 %.not5, label %"end for f72.s0.v3.v3", label %"for f72.s0.v3.v3", !prof !4

"for f72.s0.v3.v3":                               ; preds = %"for f72.s0.v4.v286", %"for f72.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f72.s0.v3.v3" ], [ %lsr.iv22, %"for f72.s0.v4.v286" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f72.s0.v3.v3" ], [ %lsr.iv18, %"for f72.s0.v4.v286" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f72.s0.v3.v3" ], [ %lsr.iv14, %"for f72.s0.v4.v286" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f72.s0.v3.v3" ], [ %lsr.iv10, %"for f72.s0.v4.v286" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f72.s0.v3.v3" ], [ %lsr.iv4, %"for f72.s0.v4.v286" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f72.s0.v3.v3" ], [ %a468, %"for f72.s0.v4.v286" ]
  %58 = add i32 %lsr.iv24, %27
  %59 = add i32 %lsr.iv20, %27
  %60 = add i32 %lsr.iv16, %27
  %61 = add i32 %lsr.iv12, %27
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds float, ptr %f2.host, i64 %62
  %64 = load <8 x float>, ptr %63, align 4, !tbaa !41
  %65 = add nsw i64 %62, 8
  %66 = getelementptr inbounds float, ptr %f2.host, i64 %65
  %67 = load <8 x float>, ptr %66, align 4, !tbaa !41
  %68 = shufflevector <8 x float> %64, <8 x float> %67, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %69 = add nsw i64 %62, -2
  %70 = getelementptr inbounds float, ptr %f2.host, i64 %69
  %71 = load <8 x float>, ptr %70, align 4, !tbaa !41
  %72 = add nsw i64 %62, 6
  %73 = getelementptr inbounds float, ptr %f2.host, i64 %72
  %74 = load <8 x float>, ptr %73, align 4, !tbaa !41
  %75 = shufflevector <8 x float> %71, <8 x float> %74, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %76 = shufflevector <8 x float> %71, <8 x float> %74, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %77 = fadd <8 x float> %76, %75
  %78 = fmul <8 x float> %77, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %79 = add nsw i64 %62, -4
  %80 = getelementptr inbounds float, ptr %f2.host, i64 %79
  %81 = load <8 x float>, ptr %80, align 4, !tbaa !41
  %82 = add nsw i64 %62, 4
  %83 = getelementptr inbounds float, ptr %f2.host, i64 %82
  %84 = load <8 x float>, ptr %83, align 4, !tbaa !41
  %85 = shufflevector <8 x float> %81, <8 x float> %84, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %86 = fadd <8 x float> %85, %78
  %87 = fadd <8 x float> %68, %86
  %88 = fmul <8 x float> %87, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %89 = sext i32 %60 to i64
  %90 = getelementptr inbounds float, ptr %f2.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !41
  %92 = add nsw i64 %89, 8
  %93 = getelementptr inbounds float, ptr %f2.host, i64 %92
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !41
  %95 = shufflevector <8 x float> %91, <8 x float> %94, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %96 = add nsw i64 %89, -2
  %97 = getelementptr inbounds float, ptr %f2.host, i64 %96
  %98 = load <8 x float>, ptr %97, align 4, !tbaa !41
  %99 = add nsw i64 %89, 6
  %100 = getelementptr inbounds float, ptr %f2.host, i64 %99
  %101 = load <8 x float>, ptr %100, align 4, !tbaa !41
  %102 = shufflevector <8 x float> %98, <8 x float> %101, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %103 = shufflevector <8 x float> %98, <8 x float> %101, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %104 = fadd <8 x float> %103, %102
  %105 = fmul <8 x float> %104, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %106 = add nsw i64 %89, -4
  %107 = getelementptr inbounds float, ptr %f2.host, i64 %106
  %108 = load <8 x float>, ptr %107, align 4, !tbaa !41
  %109 = add nsw i64 %89, 4
  %110 = getelementptr inbounds float, ptr %f2.host, i64 %109
  %111 = load <8 x float>, ptr %110, align 4, !tbaa !41
  %112 = shufflevector <8 x float> %108, <8 x float> %111, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %113 = fadd <8 x float> %112, %105
  %114 = fadd <8 x float> %95, %113
  %115 = sext i32 %59 to i64
  %116 = getelementptr inbounds float, ptr %f2.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !41
  %118 = add nsw i64 %115, 8
  %119 = getelementptr inbounds float, ptr %f2.host, i64 %118
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !41
  %121 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %122 = add nsw i64 %115, -2
  %123 = getelementptr inbounds float, ptr %f2.host, i64 %122
  %124 = load <8 x float>, ptr %123, align 4, !tbaa !41
  %125 = add nsw i64 %115, 6
  %126 = getelementptr inbounds float, ptr %f2.host, i64 %125
  %127 = load <8 x float>, ptr %126, align 4, !tbaa !41
  %128 = shufflevector <8 x float> %124, <8 x float> %127, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %129 = shufflevector <8 x float> %124, <8 x float> %127, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %130 = fadd <8 x float> %129, %128
  %131 = fmul <8 x float> %130, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %132 = add nsw i64 %115, -4
  %133 = getelementptr inbounds float, ptr %f2.host, i64 %132
  %134 = load <8 x float>, ptr %133, align 4, !tbaa !41
  %135 = add nsw i64 %115, 4
  %136 = getelementptr inbounds float, ptr %f2.host, i64 %135
  %137 = load <8 x float>, ptr %136, align 4, !tbaa !41
  %138 = shufflevector <8 x float> %134, <8 x float> %137, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %139 = fadd <8 x float> %138, %131
  %140 = fadd <8 x float> %121, %139
  %141 = fadd <8 x float> %114, %140
  %142 = fmul <8 x float> %141, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %143 = sext i32 %58 to i64
  %144 = getelementptr inbounds float, ptr %f2.host, i64 %143
  %145 = load <8 x float>, ptr %144, align 4, !tbaa !41
  %146 = add nsw i64 %143, 8
  %147 = getelementptr inbounds float, ptr %f2.host, i64 %146
  %148 = load <8 x float>, ptr %147, align 4, !tbaa !41
  %149 = shufflevector <8 x float> %145, <8 x float> %148, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %150 = add nsw i64 %143, -2
  %151 = getelementptr inbounds float, ptr %f2.host, i64 %150
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !41
  %153 = add nsw i64 %143, 6
  %154 = getelementptr inbounds float, ptr %f2.host, i64 %153
  %155 = load <8 x float>, ptr %154, align 4, !tbaa !41
  %156 = shufflevector <8 x float> %152, <8 x float> %155, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %157 = shufflevector <8 x float> %152, <8 x float> %155, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %158 = fadd <8 x float> %157, %156
  %159 = fmul <8 x float> %158, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %160 = add nsw i64 %143, -4
  %161 = getelementptr inbounds float, ptr %f2.host, i64 %160
  %162 = load <8 x float>, ptr %161, align 4, !tbaa !41
  %163 = add nsw i64 %143, 4
  %164 = getelementptr inbounds float, ptr %f2.host, i64 %163
  %165 = load <8 x float>, ptr %164, align 4, !tbaa !41
  %166 = shufflevector <8 x float> %162, <8 x float> %165, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %167 = fadd <8 x float> %166, %159
  %168 = fadd <8 x float> %149, %167
  %169 = fmul <8 x float> %168, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %170 = fadd <8 x float> %142, %169
  %171 = fadd <8 x float> %88, %170
  %172 = fmul <8 x float> %171, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %172, ptr %lsr.iv7, align 4, !tbaa !47
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not3 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not3, label %"end for f72.s0.v3.v3", label %"for f72.s0.v3.v3"

"end for f72.s0.v3.v3":                           ; preds = %"for f72.s0.v3.v3", %"for f72.s0.v4.v286"
  br i1 %53, label %"for f72.s0.v3.v31.preheader", label %"end for f72.s0.v3.v32", !prof !5

"for f72.s0.v3.v31.preheader":                    ; preds = %"end for f72.s0.v3.v3"
  %173 = trunc i64 %indvars.iv to i32
  %174 = add i32 %f72.s0.v4.v286.base, %173
  %175 = shl nsw i32 %174, 1
  %176 = sub nsw i32 %175, %f2.v4.min_realized
  %177 = add nsw i32 %176, -1
  %178 = mul nsw i32 %177, %31
  %t2050 = add nsw i32 %178, %55
  %179 = mul nsw i32 %176, %31
  %t2051 = add nsw i32 %179, %55
  %180 = add nsw i32 %176, 1
  %181 = mul nsw i32 %180, %31
  %t2052 = add nsw i32 %181, %55
  %182 = add nsw i32 %176, 2
  %183 = mul nsw i32 %182, %31
  %t2053 = add nsw i32 %183, %55
  %184 = sext i32 %t2053 to i64
  %185 = add nsw i64 %184, -12
  %186 = getelementptr inbounds float, ptr %f2.host, i64 %185
  %187 = load <8 x float>, ptr %186, align 4, !tbaa !41
  %188 = add nsw i64 %184, -4
  %189 = getelementptr inbounds float, ptr %f2.host, i64 %188
  %190 = load <8 x float>, ptr %189, align 4, !tbaa !41
  %191 = shufflevector <8 x float> %187, <8 x float> %190, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %192 = add nsw i64 %184, -14
  %193 = getelementptr inbounds float, ptr %f2.host, i64 %192
  %194 = load <8 x float>, ptr %193, align 4, !tbaa !41
  %195 = add nsw i64 %184, -6
  %196 = getelementptr inbounds float, ptr %f2.host, i64 %195
  %197 = load <8 x float>, ptr %196, align 4, !tbaa !41
  %198 = shufflevector <8 x float> %194, <8 x float> %197, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %199 = shufflevector <8 x float> %194, <8 x float> %197, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %200 = fadd <8 x float> %199, %198
  %201 = fmul <8 x float> %200, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %202 = add nsw i64 %184, -16
  %203 = getelementptr inbounds float, ptr %f2.host, i64 %202
  %204 = load <8 x float>, ptr %203, align 4, !tbaa !41
  %205 = add nsw i64 %184, -8
  %206 = getelementptr inbounds float, ptr %f2.host, i64 %205
  %207 = load <8 x float>, ptr %206, align 4, !tbaa !41
  %208 = shufflevector <8 x float> %204, <8 x float> %207, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %209 = fadd <8 x float> %208, %201
  %210 = fadd <8 x float> %191, %209
  %211 = fmul <8 x float> %210, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %212 = sext i32 %t2052 to i64
  %213 = add nsw i64 %212, -12
  %214 = getelementptr inbounds float, ptr %f2.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !41
  %216 = add nsw i64 %212, -4
  %217 = getelementptr inbounds float, ptr %f2.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !41
  %219 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %220 = add nsw i64 %212, -14
  %221 = getelementptr inbounds float, ptr %f2.host, i64 %220
  %222 = load <8 x float>, ptr %221, align 4, !tbaa !41
  %223 = add nsw i64 %212, -6
  %224 = getelementptr inbounds float, ptr %f2.host, i64 %223
  %225 = load <8 x float>, ptr %224, align 4, !tbaa !41
  %226 = shufflevector <8 x float> %222, <8 x float> %225, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %227 = shufflevector <8 x float> %222, <8 x float> %225, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %228 = fadd <8 x float> %227, %226
  %229 = fmul <8 x float> %228, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %230 = add nsw i64 %212, -16
  %231 = getelementptr inbounds float, ptr %f2.host, i64 %230
  %232 = load <8 x float>, ptr %231, align 4, !tbaa !41
  %233 = add nsw i64 %212, -8
  %234 = getelementptr inbounds float, ptr %f2.host, i64 %233
  %235 = load <8 x float>, ptr %234, align 4, !tbaa !41
  %236 = shufflevector <8 x float> %232, <8 x float> %235, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %237 = fadd <8 x float> %236, %229
  %238 = fadd <8 x float> %219, %237
  %239 = sext i32 %t2051 to i64
  %240 = add nsw i64 %239, -12
  %241 = getelementptr inbounds float, ptr %f2.host, i64 %240
  %242 = load <8 x float>, ptr %241, align 4, !tbaa !41
  %243 = add nsw i64 %239, -4
  %244 = getelementptr inbounds float, ptr %f2.host, i64 %243
  %245 = load <8 x float>, ptr %244, align 4, !tbaa !41
  %246 = shufflevector <8 x float> %242, <8 x float> %245, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %247 = add nsw i64 %239, -14
  %248 = getelementptr inbounds float, ptr %f2.host, i64 %247
  %249 = load <8 x float>, ptr %248, align 4, !tbaa !41
  %250 = add nsw i64 %239, -6
  %251 = getelementptr inbounds float, ptr %f2.host, i64 %250
  %252 = load <8 x float>, ptr %251, align 4, !tbaa !41
  %253 = shufflevector <8 x float> %249, <8 x float> %252, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %254 = shufflevector <8 x float> %249, <8 x float> %252, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %255 = fadd <8 x float> %254, %253
  %256 = fmul <8 x float> %255, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %257 = add nsw i64 %239, -16
  %258 = getelementptr inbounds float, ptr %f2.host, i64 %257
  %259 = load <8 x float>, ptr %258, align 4, !tbaa !41
  %260 = add nsw i64 %239, -8
  %261 = getelementptr inbounds float, ptr %f2.host, i64 %260
  %262 = load <8 x float>, ptr %261, align 4, !tbaa !41
  %263 = shufflevector <8 x float> %259, <8 x float> %262, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %264 = fadd <8 x float> %263, %256
  %265 = fadd <8 x float> %246, %264
  %266 = fadd <8 x float> %238, %265
  %267 = fmul <8 x float> %266, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %268 = sext i32 %t2050 to i64
  %269 = add nsw i64 %268, -12
  %270 = getelementptr inbounds float, ptr %f2.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !41
  %272 = add nsw i64 %268, -4
  %273 = getelementptr inbounds float, ptr %f2.host, i64 %272
  %274 = load <8 x float>, ptr %273, align 4, !tbaa !41
  %275 = shufflevector <8 x float> %271, <8 x float> %274, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %276 = add nsw i64 %268, -14
  %277 = getelementptr inbounds float, ptr %f2.host, i64 %276
  %278 = load <8 x float>, ptr %277, align 4, !tbaa !41
  %279 = add nsw i64 %268, -6
  %280 = getelementptr inbounds float, ptr %f2.host, i64 %279
  %281 = load <8 x float>, ptr %280, align 4, !tbaa !41
  %282 = shufflevector <8 x float> %278, <8 x float> %281, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %283 = shufflevector <8 x float> %278, <8 x float> %281, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %284 = fadd <8 x float> %283, %282
  %285 = fmul <8 x float> %284, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %286 = add nsw i64 %268, -16
  %287 = getelementptr inbounds float, ptr %f2.host, i64 %286
  %288 = load <8 x float>, ptr %287, align 4, !tbaa !41
  %289 = add nsw i64 %268, -8
  %290 = getelementptr inbounds float, ptr %f2.host, i64 %289
  %291 = load <8 x float>, ptr %290, align 4, !tbaa !41
  %292 = shufflevector <8 x float> %288, <8 x float> %291, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %293 = fadd <8 x float> %292, %285
  %294 = fadd <8 x float> %275, %293
  %295 = fmul <8 x float> %294, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %296 = fadd <8 x float> %267, %295
  %297 = fadd <8 x float> %211, %296
  %298 = fmul <8 x float> %297, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %299 = add nsw i64 %19, %indvars.iv
  %300 = mul nsw i64 %299, %20
  %301 = add i64 %57, %300
  %302 = getelementptr inbounds float, ptr %f72.host, i64 %301
  store <8 x float> %298, ptr %302, align 4, !tbaa !47
  br label %"end for f72.s0.v3.v32"

"end for f72.s0.v3.v32":                          ; preds = %"for f72.s0.v3.v31.preheader", %"end for f72.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %26
  %lsr.iv.next11 = add i32 %lsr.iv10, %35
  %lsr.iv.next15 = add i32 %lsr.iv14, %35
  %lsr.iv.next19 = add i32 %lsr.iv18, %35
  %lsr.iv.next23 = add i32 %lsr.iv22, %35
  %.not = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not, label %destructor_block, label %"for f72.s0.v4.v286"

destructor_block:                                 ; preds = %"end for f72.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f6.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f6.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f6.s0.v4.v336.preheader":
  %a526 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 1
  %f5.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 3
  %f5.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 4
  %f5.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 5
  %f6.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f6.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 6
  %f6.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 7
  %f6.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 8
  %f6.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 9
  %f6.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 10
  %f6.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f6.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 11
  %f6.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f6.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 12
  %f6.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f6.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 13
  %f6.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f6.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 14
  %f5.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 16
  %f6.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f6.s0.v4.v4, 3
  %a519 = add nsw i32 %f6.s0.v4.min, %19
  %b521 = add nsw i32 %f6.s0.v4.max, -7
  %f6.s0.v4.v336.base = tail call i32 @llvm.smin.i32(i32 %b521, i32 %a519)
  %20 = sext i32 %f6.s0.v4.v336.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a526, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f6.s0.v3.min, 1
  %28 = shl i32 %f5.stride.1, 1
  %29 = icmp sgt i32 %f6.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f6.s0.v3.max, %f6.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a521 = lshr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a521, i32 0
  %.not9 = icmp eq i32 %33, 0
  %34 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %34, %33
  %35 = shl nsw i32 %f6.s0.v3.max, 1
  %36 = sub nsw i32 %35, %f5.v3.min_realized
  %37 = add nsw i64 %4, -7
  %38 = sub nsw i64 %37, %14
  br i1 %29, label %"for f6.s0.v4.v336.us.preheader", label %destructor_block, !prof !5

"for f6.s0.v4.v336.us.preheader":                 ; preds = %"for f6.s0.v4.v336.preheader"
  %39 = add nuw i32 %24, 2
  %40 = add i32 %39, %f6.s0.v6.loop_extent.s
  %41 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 2
  %f5.v3.extent_realized.s = load i32, ptr %41, align 4
  %42 = add nsw i32 %f5.v3.extent_realized.s, 1
  %43 = shl i32 %f6.s0.v4.v336.base, 1
  %44 = xor i32 %f5.v4.min_realized, -1
  %45 = add i32 %43, %44
  %46 = mul i32 %45, %f5.stride.1
  %47 = sub i32 %46, %f5.v3.min_realized
  %48 = sub i32 %43, %f5.v4.min_realized
  %49 = mul i32 %48, %f5.stride.1
  %50 = sub i32 %49, %f5.v3.min_realized
  %51 = sub i32 1, %f5.v4.min_realized
  %52 = add i32 %51, %43
  %53 = mul i32 %52, %f5.stride.1
  %54 = sub i32 %53, %f5.v3.min_realized
  %55 = sub i32 2, %f5.v4.min_realized
  %56 = add i32 %55, %43
  %57 = mul i32 %56, %f5.stride.1
  %58 = sub i32 %57, %f5.v3.min_realized
  %59 = sext i32 %f6.s0.v3.min to i64
  %60 = sub nsw i64 %59, %14
  %61 = mul nsw i64 %21, %10
  %62 = add i64 %60, %61
  %scevgep = getelementptr float, ptr %f6.host, i64 %62
  %63 = zext i32 %24 to i64
  %64 = sext i32 %42 to i64
  %zext = zext i32 %40 to i64
  br label %"for f6.s0.v4.v336.us"

"for f6.s0.v4.v336.us":                           ; preds = %"for f6.s0.v4.v336.us.preheader", %"end for f6.s0.v6.loopexit.us"
  %indvars.iv17 = phi i64 [ 0, %"for f6.s0.v4.v336.us.preheader" ], [ %indvars.iv.next18, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %47, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next27.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %50, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next23.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %54, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next19.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %58, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next15.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f6.s0.v4.v336.us.preheader" ], [ %scevgep6.us, %"end for f6.s0.v6.loopexit.us" ]
  %65 = trunc i64 %indvars.iv17 to i32
  %66 = add i32 %f6.s0.v4.v336.base, %65
  %67 = shl nsw i32 %66, 1
  %68 = sub nsw i32 %67, %f5.v4.min_realized
  %69 = add nsw i32 %68, -1
  %70 = mul nsw i32 %69, %f5.stride.1
  %t2071.s.us = add nsw i32 %70, %36
  %71 = mul nsw i32 %68, %f5.stride.1
  %t2072.s.us = add nsw i32 %71, %36
  %72 = add nsw i32 %68, 1
  %73 = mul nsw i32 %72, %f5.stride.1
  %t2073.s.us = add nsw i32 %73, %36
  %74 = add nsw i32 %68, 2
  %75 = mul nsw i32 %74, %f5.stride.1
  %t2074.s.us = add nsw i32 %75, %36
  %76 = sext i32 %t2074.s.us to i64
  %77 = sext i32 %t2073.s.us to i64
  %78 = sext i32 %t2072.s.us to i64
  %79 = sext i32 %t2071.s.us to i64
  %80 = add nsw i64 %21, %indvars.iv17
  %81 = mul nsw i64 %80, %10
  %82 = add i64 %38, %81
  br label %"for f6.s0.v6.us"

"for f6.s0.v6.us":                                ; preds = %"for f6.s0.v4.v336.us", %"end for f6.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f6.s0.v4.v336.us" ], [ %indvars.iv.next, %"end for f6.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f6.s0.v4.v336.us" ], [ %scevgep10.us, %"end for f6.s0.v3.v32.us" ]
  br i1 %.not9, label %"end for f6.s0.v3.v3.us", label %"for f6.s0.v3.v3.preheader.us", !prof !4

"for f6.s0.v3.v3.us":                             ; preds = %"for f6.s0.v3.v3.preheader.us", %"for f6.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f6.s0.v3.v3.us" ], [ %a521, %"for f6.s0.v3.v3.preheader.us" ]
  %83 = add i32 %lsr.iv28.us, %27
  %84 = add i32 %lsr.iv24.us, %27
  %85 = add i32 %lsr.iv20.us, %27
  %86 = add i32 %lsr.iv16.us, %27
  %87 = sext i32 %86 to i64
  %88 = add nsw i64 %325, %87
  %89 = add nsw i64 %88, 2
  %90 = getelementptr inbounds float, ptr %f5.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !45
  %92 = add nsw i64 %88, 10
  %93 = getelementptr inbounds float, ptr %f5.host, i64 %92
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !45
  %95 = shufflevector <8 x float> %91, <8 x float> %94, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %96 = getelementptr inbounds float, ptr %f5.host, i64 %88
  %97 = load <8 x float>, ptr %96, align 4, !tbaa !45
  %98 = add nsw i64 %88, 8
  %99 = getelementptr inbounds float, ptr %f5.host, i64 %98
  %100 = load <8 x float>, ptr %99, align 4, !tbaa !45
  %101 = shufflevector <8 x float> %97, <8 x float> %100, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %102 = shufflevector <8 x float> %97, <8 x float> %100, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %103 = fadd <8 x float> %102, %101
  %104 = fmul <8 x float> %103, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %105 = add nsw i64 %88, -2
  %106 = getelementptr inbounds float, ptr %f5.host, i64 %105
  %107 = load <8 x float>, ptr %106, align 4, !tbaa !45
  %108 = add nsw i64 %88, 6
  %109 = getelementptr inbounds float, ptr %f5.host, i64 %108
  %110 = load <8 x float>, ptr %109, align 4, !tbaa !45
  %111 = shufflevector <8 x float> %107, <8 x float> %110, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %112 = fadd <8 x float> %111, %104
  %113 = fadd <8 x float> %95, %112
  %114 = fmul <8 x float> %113, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %115 = sext i32 %85 to i64
  %116 = add nsw i64 %325, %115
  %117 = add nsw i64 %116, 2
  %118 = getelementptr inbounds float, ptr %f5.host, i64 %117
  %119 = load <8 x float>, ptr %118, align 4, !tbaa !45
  %120 = add nsw i64 %116, 10
  %121 = getelementptr inbounds float, ptr %f5.host, i64 %120
  %122 = load <8 x float>, ptr %121, align 4, !tbaa !45
  %123 = shufflevector <8 x float> %119, <8 x float> %122, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %124 = getelementptr inbounds float, ptr %f5.host, i64 %116
  %125 = load <8 x float>, ptr %124, align 4, !tbaa !45
  %126 = add nsw i64 %116, 8
  %127 = getelementptr inbounds float, ptr %f5.host, i64 %126
  %128 = load <8 x float>, ptr %127, align 4, !tbaa !45
  %129 = shufflevector <8 x float> %125, <8 x float> %128, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %130 = shufflevector <8 x float> %125, <8 x float> %128, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %131 = fadd <8 x float> %130, %129
  %132 = fmul <8 x float> %131, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %133 = add nsw i64 %116, -2
  %134 = getelementptr inbounds float, ptr %f5.host, i64 %133
  %135 = load <8 x float>, ptr %134, align 4, !tbaa !45
  %136 = add nsw i64 %116, 6
  %137 = getelementptr inbounds float, ptr %f5.host, i64 %136
  %138 = load <8 x float>, ptr %137, align 4, !tbaa !45
  %139 = shufflevector <8 x float> %135, <8 x float> %138, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %140 = fadd <8 x float> %139, %132
  %141 = fadd <8 x float> %123, %140
  %142 = sext i32 %84 to i64
  %143 = add nsw i64 %325, %142
  %144 = add nsw i64 %143, 2
  %145 = getelementptr inbounds float, ptr %f5.host, i64 %144
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !45
  %147 = add nsw i64 %143, 10
  %148 = getelementptr inbounds float, ptr %f5.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !45
  %150 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %151 = getelementptr inbounds float, ptr %f5.host, i64 %143
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !45
  %153 = add nsw i64 %143, 8
  %154 = getelementptr inbounds float, ptr %f5.host, i64 %153
  %155 = load <8 x float>, ptr %154, align 4, !tbaa !45
  %156 = shufflevector <8 x float> %152, <8 x float> %155, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %157 = shufflevector <8 x float> %152, <8 x float> %155, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %158 = fadd <8 x float> %157, %156
  %159 = fmul <8 x float> %158, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %160 = add nsw i64 %143, -2
  %161 = getelementptr inbounds float, ptr %f5.host, i64 %160
  %162 = load <8 x float>, ptr %161, align 4, !tbaa !45
  %163 = add nsw i64 %143, 6
  %164 = getelementptr inbounds float, ptr %f5.host, i64 %163
  %165 = load <8 x float>, ptr %164, align 4, !tbaa !45
  %166 = shufflevector <8 x float> %162, <8 x float> %165, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %167 = fadd <8 x float> %166, %159
  %168 = fadd <8 x float> %150, %167
  %169 = fadd <8 x float> %141, %168
  %170 = fmul <8 x float> %169, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %171 = sext i32 %83 to i64
  %172 = add nsw i64 %325, %171
  %173 = add nsw i64 %172, 2
  %174 = getelementptr inbounds float, ptr %f5.host, i64 %173
  %175 = load <8 x float>, ptr %174, align 4, !tbaa !45
  %176 = add nsw i64 %172, 10
  %177 = getelementptr inbounds float, ptr %f5.host, i64 %176
  %178 = load <8 x float>, ptr %177, align 4, !tbaa !45
  %179 = shufflevector <8 x float> %175, <8 x float> %178, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %180 = getelementptr inbounds float, ptr %f5.host, i64 %172
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !45
  %182 = add nsw i64 %172, 8
  %183 = getelementptr inbounds float, ptr %f5.host, i64 %182
  %184 = load <8 x float>, ptr %183, align 4, !tbaa !45
  %185 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %186 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %187 = fadd <8 x float> %186, %185
  %188 = fmul <8 x float> %187, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %189 = add nsw i64 %172, -2
  %190 = getelementptr inbounds float, ptr %f5.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !45
  %192 = add nsw i64 %172, 6
  %193 = getelementptr inbounds float, ptr %f5.host, i64 %192
  %194 = load <8 x float>, ptr %193, align 4, !tbaa !45
  %195 = shufflevector <8 x float> %191, <8 x float> %194, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %196 = fadd <8 x float> %195, %188
  %197 = fadd <8 x float> %179, %196
  %198 = fmul <8 x float> %197, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %199 = fadd <8 x float> %170, %198
  %200 = fadd <8 x float> %114, %199
  %201 = fmul <8 x float> %200, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %201, ptr %lsr.iv11.us, align 4, !tbaa !49
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f6.s0.v3.v3.us", label %"for f6.s0.v3.v3.us"

"end for f6.s0.v3.v3.us":                         ; preds = %"for f6.s0.v3.v3.us", %"for f6.s0.v6.us"
  br i1 %.not5, label %"end for f6.s0.v3.v32.us", label %"for f6.s0.v3.v31.preheader.us", !prof !4

"end for f6.s0.v3.v32.us":                        ; preds = %"for f6.s0.v3.v31.preheader.us", %"end for f6.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %202 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %202, label %"end for f6.s0.v6.loopexit.us", label %"for f6.s0.v6.us"

"for f6.s0.v3.v31.preheader.us":                  ; preds = %"end for f6.s0.v3.v3.us"
  %203 = sub nuw nsw i64 %indvars.iv, %63
  %204 = mul nsw i64 %203, %64
  %205 = add nsw i64 %204, %76
  %206 = add nsw i64 %205, -12
  %207 = getelementptr inbounds float, ptr %f5.host, i64 %206
  %208 = load <8 x float>, ptr %207, align 4, !tbaa !45
  %209 = add nsw i64 %205, -4
  %210 = getelementptr inbounds float, ptr %f5.host, i64 %209
  %211 = load <8 x float>, ptr %210, align 4, !tbaa !45
  %212 = shufflevector <8 x float> %208, <8 x float> %211, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %213 = add nsw i64 %205, -14
  %214 = getelementptr inbounds float, ptr %f5.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !45
  %216 = add nsw i64 %205, -6
  %217 = getelementptr inbounds float, ptr %f5.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !45
  %219 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %220 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %221 = fadd <8 x float> %220, %219
  %222 = fmul <8 x float> %221, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %223 = add nsw i64 %205, -16
  %224 = getelementptr inbounds float, ptr %f5.host, i64 %223
  %225 = load <8 x float>, ptr %224, align 4, !tbaa !45
  %226 = add nsw i64 %205, -8
  %227 = getelementptr inbounds float, ptr %f5.host, i64 %226
  %228 = load <8 x float>, ptr %227, align 4, !tbaa !45
  %229 = shufflevector <8 x float> %225, <8 x float> %228, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %230 = fadd <8 x float> %229, %222
  %231 = fadd <8 x float> %212, %230
  %232 = fmul <8 x float> %231, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %233 = add nsw i64 %204, %77
  %234 = add nsw i64 %233, -12
  %235 = getelementptr inbounds float, ptr %f5.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !45
  %237 = add nsw i64 %233, -4
  %238 = getelementptr inbounds float, ptr %f5.host, i64 %237
  %239 = load <8 x float>, ptr %238, align 4, !tbaa !45
  %240 = shufflevector <8 x float> %236, <8 x float> %239, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %241 = add nsw i64 %233, -14
  %242 = getelementptr inbounds float, ptr %f5.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !45
  %244 = add nsw i64 %233, -6
  %245 = getelementptr inbounds float, ptr %f5.host, i64 %244
  %246 = load <8 x float>, ptr %245, align 4, !tbaa !45
  %247 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %248 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %249 = fadd <8 x float> %248, %247
  %250 = fmul <8 x float> %249, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %251 = add nsw i64 %233, -16
  %252 = getelementptr inbounds float, ptr %f5.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !45
  %254 = add nsw i64 %233, -8
  %255 = getelementptr inbounds float, ptr %f5.host, i64 %254
  %256 = load <8 x float>, ptr %255, align 4, !tbaa !45
  %257 = shufflevector <8 x float> %253, <8 x float> %256, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %258 = fadd <8 x float> %257, %250
  %259 = fadd <8 x float> %240, %258
  %260 = add nsw i64 %204, %78
  %261 = add nsw i64 %260, -12
  %262 = getelementptr inbounds float, ptr %f5.host, i64 %261
  %263 = load <8 x float>, ptr %262, align 4, !tbaa !45
  %264 = add nsw i64 %260, -4
  %265 = getelementptr inbounds float, ptr %f5.host, i64 %264
  %266 = load <8 x float>, ptr %265, align 4, !tbaa !45
  %267 = shufflevector <8 x float> %263, <8 x float> %266, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %268 = add nsw i64 %260, -14
  %269 = getelementptr inbounds float, ptr %f5.host, i64 %268
  %270 = load <8 x float>, ptr %269, align 4, !tbaa !45
  %271 = add nsw i64 %260, -6
  %272 = getelementptr inbounds float, ptr %f5.host, i64 %271
  %273 = load <8 x float>, ptr %272, align 4, !tbaa !45
  %274 = shufflevector <8 x float> %270, <8 x float> %273, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %275 = shufflevector <8 x float> %270, <8 x float> %273, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %276 = fadd <8 x float> %275, %274
  %277 = fmul <8 x float> %276, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %278 = add nsw i64 %260, -16
  %279 = getelementptr inbounds float, ptr %f5.host, i64 %278
  %280 = load <8 x float>, ptr %279, align 4, !tbaa !45
  %281 = add nsw i64 %260, -8
  %282 = getelementptr inbounds float, ptr %f5.host, i64 %281
  %283 = load <8 x float>, ptr %282, align 4, !tbaa !45
  %284 = shufflevector <8 x float> %280, <8 x float> %283, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %285 = fadd <8 x float> %284, %277
  %286 = fadd <8 x float> %267, %285
  %287 = fadd <8 x float> %259, %286
  %288 = fmul <8 x float> %287, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %289 = add nsw i64 %204, %79
  %290 = add nsw i64 %289, -12
  %291 = getelementptr inbounds float, ptr %f5.host, i64 %290
  %292 = load <8 x float>, ptr %291, align 4, !tbaa !45
  %293 = add nsw i64 %289, -4
  %294 = getelementptr inbounds float, ptr %f5.host, i64 %293
  %295 = load <8 x float>, ptr %294, align 4, !tbaa !45
  %296 = shufflevector <8 x float> %292, <8 x float> %295, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %297 = add nsw i64 %289, -14
  %298 = getelementptr inbounds float, ptr %f5.host, i64 %297
  %299 = load <8 x float>, ptr %298, align 4, !tbaa !45
  %300 = add nsw i64 %289, -6
  %301 = getelementptr inbounds float, ptr %f5.host, i64 %300
  %302 = load <8 x float>, ptr %301, align 4, !tbaa !45
  %303 = shufflevector <8 x float> %299, <8 x float> %302, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %304 = shufflevector <8 x float> %299, <8 x float> %302, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %305 = fadd <8 x float> %304, %303
  %306 = fmul <8 x float> %305, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %307 = add nsw i64 %289, -16
  %308 = getelementptr inbounds float, ptr %f5.host, i64 %307
  %309 = load <8 x float>, ptr %308, align 4, !tbaa !45
  %310 = add nsw i64 %289, -8
  %311 = getelementptr inbounds float, ptr %f5.host, i64 %310
  %312 = load <8 x float>, ptr %311, align 4, !tbaa !45
  %313 = shufflevector <8 x float> %309, <8 x float> %312, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %314 = fadd <8 x float> %313, %306
  %315 = fadd <8 x float> %296, %314
  %316 = fmul <8 x float> %315, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %317 = fadd <8 x float> %288, %316
  %318 = fadd <8 x float> %232, %317
  %319 = fmul <8 x float> %318, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %320 = sub nuw nsw i64 %indvars.iv, %smax
  %321 = mul nsw i64 %320, %23
  %322 = add i64 %82, %321
  %323 = getelementptr inbounds float, ptr %f6.host, i64 %322
  store <8 x float> %319, ptr %323, align 4, !tbaa !49
  br label %"end for f6.s0.v3.v32.us"

"for f6.s0.v3.v3.preheader.us":                   ; preds = %"for f6.s0.v6.us"
  %324 = sub nuw nsw i64 %indvars.iv, %63
  %325 = mul nsw i64 %324, %64
  br label %"for f6.s0.v3.v3.us"

"end for f6.s0.v6.loopexit.us":                   ; preds = %"end for f6.s0.v3.v32.us"
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next18, 8
  br i1 %.not.us, label %destructor_block, label %"for f6.s0.v4.v336.us"

destructor_block:                                 ; preds = %"end for f6.s0.v6.loopexit.us", %"for f6.s0.v4.v336.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f73.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f73.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f73.s0.v4.v306.preheader":
  %f72.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 1
  %f72.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 2
  %f72.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 3
  %f73.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f73.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 4
  %f73.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f73.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 5
  %f73.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 6
  %f73.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 7
  %f73.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f73.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 8
  %f73.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f73.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 9
  %f73.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f73.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 10
  %f72.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 12
  %f73.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f73.s0.v4.v4, 5
  %a558 = add nsw i32 %f73.s0.v4.min, %16
  %b560 = add nsw i32 %f73.s0.v4.max, -31
  %f73.s0.v4.v306.base = tail call i32 @llvm.smin.i32(i32 %b560, i32 %a558)
  %17 = sext i32 %f73.s0.v4.v306.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f73.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f73.s0.v3.min, 1
  %26 = shl i32 %f73.s0.v4.v306.base, 1
  %27 = sub i32 2, %f72.v4.min_realized
  %28 = add i32 %27, %26
  %29 = add i32 %f72.v3.extent_realized.s, 1
  %30 = mul i32 %28, %29
  %31 = sub i32 %30, %f72.v3.min_realized
  %32 = shl i32 %f72.v3.extent_realized.s, 1
  %33 = add i32 %32, 2
  %34 = sub i32 1, %f72.v4.min_realized
  %35 = add i32 %34, %26
  %36 = mul i32 %35, %29
  %37 = sub i32 %36, %f72.v3.min_realized
  %38 = sub i32 %26, %f72.v4.min_realized
  %39 = mul i32 %38, %29
  %40 = sub i32 %39, %f72.v3.min_realized
  %41 = xor i32 %f72.v4.min_realized, -1
  %42 = add i32 %26, %41
  %43 = mul i32 %42, %29
  %44 = sub i32 %43, %f72.v3.min_realized
  %45 = sub nsw i32 %f73.s0.v3.max, %f73.s0.v3.min
  %46 = add nsw i32 %45, 1
  %a559 = lshr i32 %46, 3
  %47 = icmp sgt i32 %45, 6
  %48 = select i1 %47, i32 %a559, i32 0
  %.not5 = icmp eq i32 %48, 0
  %49 = ashr i32 %45, 3
  %.not = icmp slt i32 %49, %48
  %50 = shl nsw i32 %f73.s0.v3.max, 1
  %51 = sub nsw i32 %50, %f72.v3.min_realized
  %52 = add nsw i64 %3, -7
  %53 = sub nsw i64 %52, %11
  br label %"for f73.s0.v4.v306"

"for f73.s0.v4.v306":                             ; preds = %"end for f73.s0.v3.v32", %"for f73.s0.v4.v306.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f73.s0.v3.v32" ], [ 0, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f73.s0.v3.v32" ], [ %44, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f73.s0.v3.v32" ], [ %40, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f73.s0.v3.v32" ], [ %37, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f73.s0.v3.v32" ], [ %31, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f73.s0.v3.v32" ], [ %scevgep, %"for f73.s0.v4.v306.preheader" ]
  br i1 %.not5, label %"end for f73.s0.v3.v3", label %"for f73.s0.v3.v3", !prof !4

"for f73.s0.v3.v3":                               ; preds = %"for f73.s0.v4.v306", %"for f73.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f73.s0.v3.v3" ], [ %lsr.iv22, %"for f73.s0.v4.v306" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f73.s0.v3.v3" ], [ %lsr.iv18, %"for f73.s0.v4.v306" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f73.s0.v3.v3" ], [ %lsr.iv14, %"for f73.s0.v4.v306" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f73.s0.v3.v3" ], [ %lsr.iv10, %"for f73.s0.v4.v306" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f73.s0.v3.v3" ], [ %lsr.iv4, %"for f73.s0.v4.v306" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f73.s0.v3.v3" ], [ %a559, %"for f73.s0.v4.v306" ]
  %54 = add i32 %lsr.iv24, %25
  %55 = add i32 %lsr.iv20, %25
  %56 = add i32 %lsr.iv16, %25
  %57 = add i32 %lsr.iv12, %25
  %58 = sext i32 %57 to i64
  %59 = add nsw i64 %58, 2
  %60 = getelementptr inbounds float, ptr %f72.host, i64 %59
  %61 = load <8 x float>, ptr %60, align 4, !tbaa !47
  %62 = add nsw i64 %58, 10
  %63 = getelementptr inbounds float, ptr %f72.host, i64 %62
  %64 = load <8 x float>, ptr %63, align 4, !tbaa !47
  %65 = shufflevector <8 x float> %61, <8 x float> %64, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %66 = getelementptr inbounds float, ptr %f72.host, i64 %58
  %67 = load <8 x float>, ptr %66, align 4, !tbaa !47
  %68 = add nsw i64 %58, 8
  %69 = getelementptr inbounds float, ptr %f72.host, i64 %68
  %70 = load <8 x float>, ptr %69, align 4, !tbaa !47
  %71 = shufflevector <8 x float> %67, <8 x float> %70, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %72 = shufflevector <8 x float> %67, <8 x float> %70, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %73 = fadd <8 x float> %72, %71
  %74 = fmul <8 x float> %73, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %75 = add nsw i64 %58, -2
  %76 = getelementptr inbounds float, ptr %f72.host, i64 %75
  %77 = load <8 x float>, ptr %76, align 4, !tbaa !47
  %78 = add nsw i64 %58, 6
  %79 = getelementptr inbounds float, ptr %f72.host, i64 %78
  %80 = load <8 x float>, ptr %79, align 4, !tbaa !47
  %81 = shufflevector <8 x float> %77, <8 x float> %80, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %82 = fadd <8 x float> %81, %74
  %83 = fadd <8 x float> %65, %82
  %84 = fmul <8 x float> %83, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %85 = sext i32 %56 to i64
  %86 = add nsw i64 %85, 2
  %87 = getelementptr inbounds float, ptr %f72.host, i64 %86
  %88 = load <8 x float>, ptr %87, align 4, !tbaa !47
  %89 = add nsw i64 %85, 10
  %90 = getelementptr inbounds float, ptr %f72.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !47
  %92 = shufflevector <8 x float> %88, <8 x float> %91, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %93 = getelementptr inbounds float, ptr %f72.host, i64 %85
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !47
  %95 = add nsw i64 %85, 8
  %96 = getelementptr inbounds float, ptr %f72.host, i64 %95
  %97 = load <8 x float>, ptr %96, align 4, !tbaa !47
  %98 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %99 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %100 = fadd <8 x float> %99, %98
  %101 = fmul <8 x float> %100, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %102 = add nsw i64 %85, -2
  %103 = getelementptr inbounds float, ptr %f72.host, i64 %102
  %104 = load <8 x float>, ptr %103, align 4, !tbaa !47
  %105 = add nsw i64 %85, 6
  %106 = getelementptr inbounds float, ptr %f72.host, i64 %105
  %107 = load <8 x float>, ptr %106, align 4, !tbaa !47
  %108 = shufflevector <8 x float> %104, <8 x float> %107, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %109 = fadd <8 x float> %108, %101
  %110 = fadd <8 x float> %92, %109
  %111 = sext i32 %55 to i64
  %112 = add nsw i64 %111, 2
  %113 = getelementptr inbounds float, ptr %f72.host, i64 %112
  %114 = load <8 x float>, ptr %113, align 4, !tbaa !47
  %115 = add nsw i64 %111, 10
  %116 = getelementptr inbounds float, ptr %f72.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !47
  %118 = shufflevector <8 x float> %114, <8 x float> %117, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %119 = getelementptr inbounds float, ptr %f72.host, i64 %111
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !47
  %121 = add nsw i64 %111, 8
  %122 = getelementptr inbounds float, ptr %f72.host, i64 %121
  %123 = load <8 x float>, ptr %122, align 4, !tbaa !47
  %124 = shufflevector <8 x float> %120, <8 x float> %123, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %125 = shufflevector <8 x float> %120, <8 x float> %123, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %126 = fadd <8 x float> %125, %124
  %127 = fmul <8 x float> %126, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %128 = add nsw i64 %111, -2
  %129 = getelementptr inbounds float, ptr %f72.host, i64 %128
  %130 = load <8 x float>, ptr %129, align 4, !tbaa !47
  %131 = add nsw i64 %111, 6
  %132 = getelementptr inbounds float, ptr %f72.host, i64 %131
  %133 = load <8 x float>, ptr %132, align 4, !tbaa !47
  %134 = shufflevector <8 x float> %130, <8 x float> %133, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %135 = fadd <8 x float> %134, %127
  %136 = fadd <8 x float> %118, %135
  %137 = fadd <8 x float> %110, %136
  %138 = fmul <8 x float> %137, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %139 = sext i32 %54 to i64
  %140 = add nsw i64 %139, 2
  %141 = getelementptr inbounds float, ptr %f72.host, i64 %140
  %142 = load <8 x float>, ptr %141, align 4, !tbaa !47
  %143 = add nsw i64 %139, 10
  %144 = getelementptr inbounds float, ptr %f72.host, i64 %143
  %145 = load <8 x float>, ptr %144, align 4, !tbaa !47
  %146 = shufflevector <8 x float> %142, <8 x float> %145, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %147 = getelementptr inbounds float, ptr %f72.host, i64 %139
  %148 = load <8 x float>, ptr %147, align 4, !tbaa !47
  %149 = add nsw i64 %139, 8
  %150 = getelementptr inbounds float, ptr %f72.host, i64 %149
  %151 = load <8 x float>, ptr %150, align 4, !tbaa !47
  %152 = shufflevector <8 x float> %148, <8 x float> %151, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %153 = shufflevector <8 x float> %148, <8 x float> %151, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %154 = fadd <8 x float> %153, %152
  %155 = fmul <8 x float> %154, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %156 = add nsw i64 %139, -2
  %157 = getelementptr inbounds float, ptr %f72.host, i64 %156
  %158 = load <8 x float>, ptr %157, align 4, !tbaa !47
  %159 = add nsw i64 %139, 6
  %160 = getelementptr inbounds float, ptr %f72.host, i64 %159
  %161 = load <8 x float>, ptr %160, align 4, !tbaa !47
  %162 = shufflevector <8 x float> %158, <8 x float> %161, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %163 = fadd <8 x float> %162, %155
  %164 = fadd <8 x float> %146, %163
  %165 = fmul <8 x float> %164, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %166 = fadd <8 x float> %138, %165
  %167 = fadd <8 x float> %84, %166
  %168 = fmul <8 x float> %167, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %168, ptr %lsr.iv7, align 4, !tbaa !51
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f73.s0.v3.v3", label %"for f73.s0.v3.v3"

"end for f73.s0.v3.v3":                           ; preds = %"for f73.s0.v3.v3", %"for f73.s0.v4.v306"
  br i1 %.not, label %"end for f73.s0.v3.v32", label %"for f73.s0.v3.v31.preheader", !prof !4

"for f73.s0.v3.v31.preheader":                    ; preds = %"end for f73.s0.v3.v3"
  %169 = trunc i64 %indvars.iv to i32
  %170 = add i32 %f73.s0.v4.v306.base, %169
  %171 = shl nsw i32 %170, 1
  %172 = sub nsw i32 %171, %f72.v4.min_realized
  %173 = add nsw i32 %172, -1
  %174 = mul nsw i32 %173, %29
  %t2085 = add nsw i32 %174, %51
  %175 = mul nsw i32 %172, %29
  %t2086 = add nsw i32 %175, %51
  %176 = add nsw i32 %172, 1
  %177 = mul nsw i32 %176, %29
  %t2087 = add nsw i32 %177, %51
  %178 = add nsw i32 %172, 2
  %179 = mul nsw i32 %178, %29
  %t2088 = add nsw i32 %179, %51
  %180 = sext i32 %t2088 to i64
  %181 = add nsw i64 %180, -12
  %182 = getelementptr inbounds float, ptr %f72.host, i64 %181
  %183 = load <8 x float>, ptr %182, align 4, !tbaa !47
  %184 = add nsw i64 %180, -4
  %185 = getelementptr inbounds float, ptr %f72.host, i64 %184
  %186 = load <8 x float>, ptr %185, align 4, !tbaa !47
  %187 = shufflevector <8 x float> %183, <8 x float> %186, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %188 = add nsw i64 %180, -14
  %189 = getelementptr inbounds float, ptr %f72.host, i64 %188
  %190 = load <8 x float>, ptr %189, align 4, !tbaa !47
  %191 = add nsw i64 %180, -6
  %192 = getelementptr inbounds float, ptr %f72.host, i64 %191
  %193 = load <8 x float>, ptr %192, align 4, !tbaa !47
  %194 = shufflevector <8 x float> %190, <8 x float> %193, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %195 = shufflevector <8 x float> %190, <8 x float> %193, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %196 = fadd <8 x float> %195, %194
  %197 = fmul <8 x float> %196, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %198 = add nsw i64 %180, -16
  %199 = getelementptr inbounds float, ptr %f72.host, i64 %198
  %200 = load <8 x float>, ptr %199, align 4, !tbaa !47
  %201 = add nsw i64 %180, -8
  %202 = getelementptr inbounds float, ptr %f72.host, i64 %201
  %203 = load <8 x float>, ptr %202, align 4, !tbaa !47
  %204 = shufflevector <8 x float> %200, <8 x float> %203, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %205 = fadd <8 x float> %204, %197
  %206 = fadd <8 x float> %187, %205
  %207 = fmul <8 x float> %206, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %208 = sext i32 %t2087 to i64
  %209 = add nsw i64 %208, -12
  %210 = getelementptr inbounds float, ptr %f72.host, i64 %209
  %211 = load <8 x float>, ptr %210, align 4, !tbaa !47
  %212 = add nsw i64 %208, -4
  %213 = getelementptr inbounds float, ptr %f72.host, i64 %212
  %214 = load <8 x float>, ptr %213, align 4, !tbaa !47
  %215 = shufflevector <8 x float> %211, <8 x float> %214, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %216 = add nsw i64 %208, -14
  %217 = getelementptr inbounds float, ptr %f72.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !47
  %219 = add nsw i64 %208, -6
  %220 = getelementptr inbounds float, ptr %f72.host, i64 %219
  %221 = load <8 x float>, ptr %220, align 4, !tbaa !47
  %222 = shufflevector <8 x float> %218, <8 x float> %221, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %223 = shufflevector <8 x float> %218, <8 x float> %221, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %224 = fadd <8 x float> %223, %222
  %225 = fmul <8 x float> %224, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %226 = add nsw i64 %208, -16
  %227 = getelementptr inbounds float, ptr %f72.host, i64 %226
  %228 = load <8 x float>, ptr %227, align 4, !tbaa !47
  %229 = add nsw i64 %208, -8
  %230 = getelementptr inbounds float, ptr %f72.host, i64 %229
  %231 = load <8 x float>, ptr %230, align 4, !tbaa !47
  %232 = shufflevector <8 x float> %228, <8 x float> %231, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %233 = fadd <8 x float> %232, %225
  %234 = fadd <8 x float> %215, %233
  %235 = sext i32 %t2086 to i64
  %236 = add nsw i64 %235, -12
  %237 = getelementptr inbounds float, ptr %f72.host, i64 %236
  %238 = load <8 x float>, ptr %237, align 4, !tbaa !47
  %239 = add nsw i64 %235, -4
  %240 = getelementptr inbounds float, ptr %f72.host, i64 %239
  %241 = load <8 x float>, ptr %240, align 4, !tbaa !47
  %242 = shufflevector <8 x float> %238, <8 x float> %241, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %243 = add nsw i64 %235, -14
  %244 = getelementptr inbounds float, ptr %f72.host, i64 %243
  %245 = load <8 x float>, ptr %244, align 4, !tbaa !47
  %246 = add nsw i64 %235, -6
  %247 = getelementptr inbounds float, ptr %f72.host, i64 %246
  %248 = load <8 x float>, ptr %247, align 4, !tbaa !47
  %249 = shufflevector <8 x float> %245, <8 x float> %248, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %250 = shufflevector <8 x float> %245, <8 x float> %248, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %251 = fadd <8 x float> %250, %249
  %252 = fmul <8 x float> %251, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %253 = add nsw i64 %235, -16
  %254 = getelementptr inbounds float, ptr %f72.host, i64 %253
  %255 = load <8 x float>, ptr %254, align 4, !tbaa !47
  %256 = add nsw i64 %235, -8
  %257 = getelementptr inbounds float, ptr %f72.host, i64 %256
  %258 = load <8 x float>, ptr %257, align 4, !tbaa !47
  %259 = shufflevector <8 x float> %255, <8 x float> %258, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %260 = fadd <8 x float> %259, %252
  %261 = fadd <8 x float> %242, %260
  %262 = fadd <8 x float> %234, %261
  %263 = fmul <8 x float> %262, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %264 = sext i32 %t2085 to i64
  %265 = add nsw i64 %264, -12
  %266 = getelementptr inbounds float, ptr %f72.host, i64 %265
  %267 = load <8 x float>, ptr %266, align 4, !tbaa !47
  %268 = add nsw i64 %264, -4
  %269 = getelementptr inbounds float, ptr %f72.host, i64 %268
  %270 = load <8 x float>, ptr %269, align 4, !tbaa !47
  %271 = shufflevector <8 x float> %267, <8 x float> %270, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %272 = add nsw i64 %264, -14
  %273 = getelementptr inbounds float, ptr %f72.host, i64 %272
  %274 = load <8 x float>, ptr %273, align 4, !tbaa !47
  %275 = add nsw i64 %264, -6
  %276 = getelementptr inbounds float, ptr %f72.host, i64 %275
  %277 = load <8 x float>, ptr %276, align 4, !tbaa !47
  %278 = shufflevector <8 x float> %274, <8 x float> %277, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %279 = shufflevector <8 x float> %274, <8 x float> %277, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %280 = fadd <8 x float> %279, %278
  %281 = fmul <8 x float> %280, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %282 = add nsw i64 %264, -16
  %283 = getelementptr inbounds float, ptr %f72.host, i64 %282
  %284 = load <8 x float>, ptr %283, align 4, !tbaa !47
  %285 = add nsw i64 %264, -8
  %286 = getelementptr inbounds float, ptr %f72.host, i64 %285
  %287 = load <8 x float>, ptr %286, align 4, !tbaa !47
  %288 = shufflevector <8 x float> %284, <8 x float> %287, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %289 = fadd <8 x float> %288, %281
  %290 = fadd <8 x float> %271, %289
  %291 = fmul <8 x float> %290, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %292 = fadd <8 x float> %263, %291
  %293 = fadd <8 x float> %207, %292
  %294 = fmul <8 x float> %293, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %295 = add nsw i64 %18, %indvars.iv
  %296 = mul nsw i64 %295, %19
  %297 = add i64 %53, %296
  %298 = getelementptr inbounds float, ptr %f73.host, i64 %297
  store <8 x float> %294, ptr %298, align 4, !tbaa !51
  br label %"end for f73.s0.v3.v32"

"end for f73.s0.v3.v32":                          ; preds = %"for f73.s0.v3.v31.preheader", %"end for f73.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %33
  %lsr.iv.next15 = add i32 %lsr.iv14, %33
  %lsr.iv.next19 = add i32 %lsr.iv18, %33
  %lsr.iv.next23 = add i32 %lsr.iv22, %33
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f73.s0.v4.v306"

destructor_block:                                 ; preds = %"end for f73.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f7.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f7.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f7.s0.v4.v356.preheader":
  %a611 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 1
  %f6.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 3
  %f6.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 4
  %f6.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 5
  %f7.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f7.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 6
  %f7.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 7
  %f7.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 8
  %f7.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 9
  %f7.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 10
  %f7.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f7.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 11
  %f7.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f7.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 12
  %f7.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f7.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 13
  %f7.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f7.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 14
  %f6.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 16
  %f7.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f7.s0.v4.v4, 3
  %a604 = add nsw i32 %f7.s0.v4.min, %19
  %b606 = add nsw i32 %f7.s0.v4.max, -7
  %f7.s0.v4.v356.base = tail call i32 @llvm.smin.i32(i32 %b606, i32 %a604)
  %20 = sext i32 %f7.s0.v4.v356.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a611, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f7.s0.v3.min, 1
  %28 = shl i32 %f6.stride.1, 1
  %29 = icmp sgt i32 %f7.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f7.s0.v3.max, %f7.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a606 = lshr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a606, i32 0
  %.not9 = icmp eq i32 %33, 0
  %34 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %34, %33
  %35 = shl nsw i32 %f7.s0.v3.max, 1
  %36 = sub nsw i32 %35, %f6.v3.min_realized
  %37 = add nsw i64 %4, -7
  %38 = sub nsw i64 %37, %14
  br i1 %29, label %"for f7.s0.v4.v356.us.preheader", label %destructor_block, !prof !5

"for f7.s0.v4.v356.us.preheader":                 ; preds = %"for f7.s0.v4.v356.preheader"
  %39 = add nuw i32 %24, 2
  %40 = add i32 %39, %f7.s0.v6.loop_extent.s
  %41 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 2
  %f6.v3.extent_realized.s = load i32, ptr %41, align 4
  %42 = add nsw i32 %f6.v3.extent_realized.s, 1
  %43 = shl i32 %f7.s0.v4.v356.base, 1
  %44 = xor i32 %f6.v4.min_realized, -1
  %45 = add i32 %43, %44
  %46 = mul i32 %45, %f6.stride.1
  %47 = sub i32 %46, %f6.v3.min_realized
  %48 = sub i32 %43, %f6.v4.min_realized
  %49 = mul i32 %48, %f6.stride.1
  %50 = sub i32 %49, %f6.v3.min_realized
  %51 = sub i32 1, %f6.v4.min_realized
  %52 = add i32 %51, %43
  %53 = mul i32 %52, %f6.stride.1
  %54 = sub i32 %53, %f6.v3.min_realized
  %55 = sub i32 2, %f6.v4.min_realized
  %56 = add i32 %55, %43
  %57 = mul i32 %56, %f6.stride.1
  %58 = sub i32 %57, %f6.v3.min_realized
  %59 = sext i32 %f7.s0.v3.min to i64
  %60 = sub nsw i64 %59, %14
  %61 = mul nsw i64 %21, %10
  %62 = add i64 %60, %61
  %scevgep = getelementptr float, ptr %f7.host, i64 %62
  %63 = zext i32 %24 to i64
  %64 = sext i32 %42 to i64
  %zext = zext i32 %40 to i64
  br label %"for f7.s0.v4.v356.us"

"for f7.s0.v4.v356.us":                           ; preds = %"for f7.s0.v4.v356.us.preheader", %"end for f7.s0.v6.loopexit.us"
  %indvars.iv17 = phi i64 [ 0, %"for f7.s0.v4.v356.us.preheader" ], [ %indvars.iv.next18, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %47, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next27.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %50, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next23.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %54, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next19.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %58, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next15.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f7.s0.v4.v356.us.preheader" ], [ %scevgep6.us, %"end for f7.s0.v6.loopexit.us" ]
  %65 = trunc i64 %indvars.iv17 to i32
  %66 = add i32 %f7.s0.v4.v356.base, %65
  %67 = shl nsw i32 %66, 1
  %68 = sub nsw i32 %67, %f6.v4.min_realized
  %69 = add nsw i32 %68, -1
  %70 = mul nsw i32 %69, %f6.stride.1
  %t2106.s.us = add nsw i32 %70, %36
  %71 = mul nsw i32 %68, %f6.stride.1
  %t2107.s.us = add nsw i32 %71, %36
  %72 = add nsw i32 %68, 1
  %73 = mul nsw i32 %72, %f6.stride.1
  %t2108.s.us = add nsw i32 %73, %36
  %74 = add nsw i32 %68, 2
  %75 = mul nsw i32 %74, %f6.stride.1
  %t2109.s.us = add nsw i32 %75, %36
  %76 = sext i32 %t2109.s.us to i64
  %77 = sext i32 %t2108.s.us to i64
  %78 = sext i32 %t2107.s.us to i64
  %79 = sext i32 %t2106.s.us to i64
  %80 = add nsw i64 %21, %indvars.iv17
  %81 = mul nsw i64 %80, %10
  %82 = add i64 %38, %81
  br label %"for f7.s0.v6.us"

"for f7.s0.v6.us":                                ; preds = %"for f7.s0.v4.v356.us", %"end for f7.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f7.s0.v4.v356.us" ], [ %indvars.iv.next, %"end for f7.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f7.s0.v4.v356.us" ], [ %scevgep10.us, %"end for f7.s0.v3.v32.us" ]
  br i1 %.not9, label %"end for f7.s0.v3.v3.us", label %"for f7.s0.v3.v3.preheader.us", !prof !4

"for f7.s0.v3.v3.us":                             ; preds = %"for f7.s0.v3.v3.preheader.us", %"for f7.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f7.s0.v3.v3.us" ], [ %a606, %"for f7.s0.v3.v3.preheader.us" ]
  %83 = add i32 %lsr.iv28.us, %27
  %84 = add i32 %lsr.iv24.us, %27
  %85 = add i32 %lsr.iv20.us, %27
  %86 = add i32 %lsr.iv16.us, %27
  %87 = sext i32 %86 to i64
  %88 = add nsw i64 %325, %87
  %89 = add nsw i64 %88, 2
  %90 = getelementptr inbounds float, ptr %f6.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !49
  %92 = add nsw i64 %88, 10
  %93 = getelementptr inbounds float, ptr %f6.host, i64 %92
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !49
  %95 = shufflevector <8 x float> %91, <8 x float> %94, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %96 = getelementptr inbounds float, ptr %f6.host, i64 %88
  %97 = load <8 x float>, ptr %96, align 4, !tbaa !49
  %98 = add nsw i64 %88, 8
  %99 = getelementptr inbounds float, ptr %f6.host, i64 %98
  %100 = load <8 x float>, ptr %99, align 4, !tbaa !49
  %101 = shufflevector <8 x float> %97, <8 x float> %100, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %102 = shufflevector <8 x float> %97, <8 x float> %100, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %103 = fadd <8 x float> %102, %101
  %104 = fmul <8 x float> %103, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %105 = add nsw i64 %88, -2
  %106 = getelementptr inbounds float, ptr %f6.host, i64 %105
  %107 = load <8 x float>, ptr %106, align 4, !tbaa !49
  %108 = add nsw i64 %88, 6
  %109 = getelementptr inbounds float, ptr %f6.host, i64 %108
  %110 = load <8 x float>, ptr %109, align 4, !tbaa !49
  %111 = shufflevector <8 x float> %107, <8 x float> %110, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %112 = fadd <8 x float> %111, %104
  %113 = fadd <8 x float> %95, %112
  %114 = fmul <8 x float> %113, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %115 = sext i32 %85 to i64
  %116 = add nsw i64 %325, %115
  %117 = add nsw i64 %116, 2
  %118 = getelementptr inbounds float, ptr %f6.host, i64 %117
  %119 = load <8 x float>, ptr %118, align 4, !tbaa !49
  %120 = add nsw i64 %116, 10
  %121 = getelementptr inbounds float, ptr %f6.host, i64 %120
  %122 = load <8 x float>, ptr %121, align 4, !tbaa !49
  %123 = shufflevector <8 x float> %119, <8 x float> %122, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %124 = getelementptr inbounds float, ptr %f6.host, i64 %116
  %125 = load <8 x float>, ptr %124, align 4, !tbaa !49
  %126 = add nsw i64 %116, 8
  %127 = getelementptr inbounds float, ptr %f6.host, i64 %126
  %128 = load <8 x float>, ptr %127, align 4, !tbaa !49
  %129 = shufflevector <8 x float> %125, <8 x float> %128, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %130 = shufflevector <8 x float> %125, <8 x float> %128, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %131 = fadd <8 x float> %130, %129
  %132 = fmul <8 x float> %131, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %133 = add nsw i64 %116, -2
  %134 = getelementptr inbounds float, ptr %f6.host, i64 %133
  %135 = load <8 x float>, ptr %134, align 4, !tbaa !49
  %136 = add nsw i64 %116, 6
  %137 = getelementptr inbounds float, ptr %f6.host, i64 %136
  %138 = load <8 x float>, ptr %137, align 4, !tbaa !49
  %139 = shufflevector <8 x float> %135, <8 x float> %138, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %140 = fadd <8 x float> %139, %132
  %141 = fadd <8 x float> %123, %140
  %142 = sext i32 %84 to i64
  %143 = add nsw i64 %325, %142
  %144 = add nsw i64 %143, 2
  %145 = getelementptr inbounds float, ptr %f6.host, i64 %144
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !49
  %147 = add nsw i64 %143, 10
  %148 = getelementptr inbounds float, ptr %f6.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !49
  %150 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %151 = getelementptr inbounds float, ptr %f6.host, i64 %143
  %152 = load <8 x float>, ptr %151, align 4, !tbaa !49
  %153 = add nsw i64 %143, 8
  %154 = getelementptr inbounds float, ptr %f6.host, i64 %153
  %155 = load <8 x float>, ptr %154, align 4, !tbaa !49
  %156 = shufflevector <8 x float> %152, <8 x float> %155, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %157 = shufflevector <8 x float> %152, <8 x float> %155, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %158 = fadd <8 x float> %157, %156
  %159 = fmul <8 x float> %158, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %160 = add nsw i64 %143, -2
  %161 = getelementptr inbounds float, ptr %f6.host, i64 %160
  %162 = load <8 x float>, ptr %161, align 4, !tbaa !49
  %163 = add nsw i64 %143, 6
  %164 = getelementptr inbounds float, ptr %f6.host, i64 %163
  %165 = load <8 x float>, ptr %164, align 4, !tbaa !49
  %166 = shufflevector <8 x float> %162, <8 x float> %165, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %167 = fadd <8 x float> %166, %159
  %168 = fadd <8 x float> %150, %167
  %169 = fadd <8 x float> %141, %168
  %170 = fmul <8 x float> %169, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %171 = sext i32 %83 to i64
  %172 = add nsw i64 %325, %171
  %173 = add nsw i64 %172, 2
  %174 = getelementptr inbounds float, ptr %f6.host, i64 %173
  %175 = load <8 x float>, ptr %174, align 4, !tbaa !49
  %176 = add nsw i64 %172, 10
  %177 = getelementptr inbounds float, ptr %f6.host, i64 %176
  %178 = load <8 x float>, ptr %177, align 4, !tbaa !49
  %179 = shufflevector <8 x float> %175, <8 x float> %178, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %180 = getelementptr inbounds float, ptr %f6.host, i64 %172
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !49
  %182 = add nsw i64 %172, 8
  %183 = getelementptr inbounds float, ptr %f6.host, i64 %182
  %184 = load <8 x float>, ptr %183, align 4, !tbaa !49
  %185 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %186 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %187 = fadd <8 x float> %186, %185
  %188 = fmul <8 x float> %187, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %189 = add nsw i64 %172, -2
  %190 = getelementptr inbounds float, ptr %f6.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !49
  %192 = add nsw i64 %172, 6
  %193 = getelementptr inbounds float, ptr %f6.host, i64 %192
  %194 = load <8 x float>, ptr %193, align 4, !tbaa !49
  %195 = shufflevector <8 x float> %191, <8 x float> %194, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %196 = fadd <8 x float> %195, %188
  %197 = fadd <8 x float> %179, %196
  %198 = fmul <8 x float> %197, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %199 = fadd <8 x float> %170, %198
  %200 = fadd <8 x float> %114, %199
  %201 = fmul <8 x float> %200, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %201, ptr %lsr.iv11.us, align 4, !tbaa !53
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f7.s0.v3.v3.us", label %"for f7.s0.v3.v3.us"

"end for f7.s0.v3.v3.us":                         ; preds = %"for f7.s0.v3.v3.us", %"for f7.s0.v6.us"
  br i1 %.not5, label %"end for f7.s0.v3.v32.us", label %"for f7.s0.v3.v31.preheader.us", !prof !4

"end for f7.s0.v3.v32.us":                        ; preds = %"for f7.s0.v3.v31.preheader.us", %"end for f7.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %202 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %202, label %"end for f7.s0.v6.loopexit.us", label %"for f7.s0.v6.us"

"for f7.s0.v3.v31.preheader.us":                  ; preds = %"end for f7.s0.v3.v3.us"
  %203 = sub nuw nsw i64 %indvars.iv, %63
  %204 = mul nsw i64 %203, %64
  %205 = add nsw i64 %204, %76
  %206 = add nsw i64 %205, -12
  %207 = getelementptr inbounds float, ptr %f6.host, i64 %206
  %208 = load <8 x float>, ptr %207, align 4, !tbaa !49
  %209 = add nsw i64 %205, -4
  %210 = getelementptr inbounds float, ptr %f6.host, i64 %209
  %211 = load <8 x float>, ptr %210, align 4, !tbaa !49
  %212 = shufflevector <8 x float> %208, <8 x float> %211, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %213 = add nsw i64 %205, -14
  %214 = getelementptr inbounds float, ptr %f6.host, i64 %213
  %215 = load <8 x float>, ptr %214, align 4, !tbaa !49
  %216 = add nsw i64 %205, -6
  %217 = getelementptr inbounds float, ptr %f6.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !49
  %219 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %220 = shufflevector <8 x float> %215, <8 x float> %218, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %221 = fadd <8 x float> %220, %219
  %222 = fmul <8 x float> %221, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %223 = add nsw i64 %205, -16
  %224 = getelementptr inbounds float, ptr %f6.host, i64 %223
  %225 = load <8 x float>, ptr %224, align 4, !tbaa !49
  %226 = add nsw i64 %205, -8
  %227 = getelementptr inbounds float, ptr %f6.host, i64 %226
  %228 = load <8 x float>, ptr %227, align 4, !tbaa !49
  %229 = shufflevector <8 x float> %225, <8 x float> %228, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %230 = fadd <8 x float> %229, %222
  %231 = fadd <8 x float> %212, %230
  %232 = fmul <8 x float> %231, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %233 = add nsw i64 %204, %77
  %234 = add nsw i64 %233, -12
  %235 = getelementptr inbounds float, ptr %f6.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !49
  %237 = add nsw i64 %233, -4
  %238 = getelementptr inbounds float, ptr %f6.host, i64 %237
  %239 = load <8 x float>, ptr %238, align 4, !tbaa !49
  %240 = shufflevector <8 x float> %236, <8 x float> %239, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %241 = add nsw i64 %233, -14
  %242 = getelementptr inbounds float, ptr %f6.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !49
  %244 = add nsw i64 %233, -6
  %245 = getelementptr inbounds float, ptr %f6.host, i64 %244
  %246 = load <8 x float>, ptr %245, align 4, !tbaa !49
  %247 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %248 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %249 = fadd <8 x float> %248, %247
  %250 = fmul <8 x float> %249, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %251 = add nsw i64 %233, -16
  %252 = getelementptr inbounds float, ptr %f6.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !49
  %254 = add nsw i64 %233, -8
  %255 = getelementptr inbounds float, ptr %f6.host, i64 %254
  %256 = load <8 x float>, ptr %255, align 4, !tbaa !49
  %257 = shufflevector <8 x float> %253, <8 x float> %256, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %258 = fadd <8 x float> %257, %250
  %259 = fadd <8 x float> %240, %258
  %260 = add nsw i64 %204, %78
  %261 = add nsw i64 %260, -12
  %262 = getelementptr inbounds float, ptr %f6.host, i64 %261
  %263 = load <8 x float>, ptr %262, align 4, !tbaa !49
  %264 = add nsw i64 %260, -4
  %265 = getelementptr inbounds float, ptr %f6.host, i64 %264
  %266 = load <8 x float>, ptr %265, align 4, !tbaa !49
  %267 = shufflevector <8 x float> %263, <8 x float> %266, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %268 = add nsw i64 %260, -14
  %269 = getelementptr inbounds float, ptr %f6.host, i64 %268
  %270 = load <8 x float>, ptr %269, align 4, !tbaa !49
  %271 = add nsw i64 %260, -6
  %272 = getelementptr inbounds float, ptr %f6.host, i64 %271
  %273 = load <8 x float>, ptr %272, align 4, !tbaa !49
  %274 = shufflevector <8 x float> %270, <8 x float> %273, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %275 = shufflevector <8 x float> %270, <8 x float> %273, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %276 = fadd <8 x float> %275, %274
  %277 = fmul <8 x float> %276, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %278 = add nsw i64 %260, -16
  %279 = getelementptr inbounds float, ptr %f6.host, i64 %278
  %280 = load <8 x float>, ptr %279, align 4, !tbaa !49
  %281 = add nsw i64 %260, -8
  %282 = getelementptr inbounds float, ptr %f6.host, i64 %281
  %283 = load <8 x float>, ptr %282, align 4, !tbaa !49
  %284 = shufflevector <8 x float> %280, <8 x float> %283, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %285 = fadd <8 x float> %284, %277
  %286 = fadd <8 x float> %267, %285
  %287 = fadd <8 x float> %259, %286
  %288 = fmul <8 x float> %287, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %289 = add nsw i64 %204, %79
  %290 = add nsw i64 %289, -12
  %291 = getelementptr inbounds float, ptr %f6.host, i64 %290
  %292 = load <8 x float>, ptr %291, align 4, !tbaa !49
  %293 = add nsw i64 %289, -4
  %294 = getelementptr inbounds float, ptr %f6.host, i64 %293
  %295 = load <8 x float>, ptr %294, align 4, !tbaa !49
  %296 = shufflevector <8 x float> %292, <8 x float> %295, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %297 = add nsw i64 %289, -14
  %298 = getelementptr inbounds float, ptr %f6.host, i64 %297
  %299 = load <8 x float>, ptr %298, align 4, !tbaa !49
  %300 = add nsw i64 %289, -6
  %301 = getelementptr inbounds float, ptr %f6.host, i64 %300
  %302 = load <8 x float>, ptr %301, align 4, !tbaa !49
  %303 = shufflevector <8 x float> %299, <8 x float> %302, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %304 = shufflevector <8 x float> %299, <8 x float> %302, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %305 = fadd <8 x float> %304, %303
  %306 = fmul <8 x float> %305, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %307 = add nsw i64 %289, -16
  %308 = getelementptr inbounds float, ptr %f6.host, i64 %307
  %309 = load <8 x float>, ptr %308, align 4, !tbaa !49
  %310 = add nsw i64 %289, -8
  %311 = getelementptr inbounds float, ptr %f6.host, i64 %310
  %312 = load <8 x float>, ptr %311, align 4, !tbaa !49
  %313 = shufflevector <8 x float> %309, <8 x float> %312, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %314 = fadd <8 x float> %313, %306
  %315 = fadd <8 x float> %296, %314
  %316 = fmul <8 x float> %315, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %317 = fadd <8 x float> %288, %316
  %318 = fadd <8 x float> %232, %317
  %319 = fmul <8 x float> %318, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %320 = sub nuw nsw i64 %indvars.iv, %smax
  %321 = mul nsw i64 %320, %23
  %322 = add i64 %82, %321
  %323 = getelementptr inbounds float, ptr %f7.host, i64 %322
  store <8 x float> %319, ptr %323, align 4, !tbaa !53
  br label %"end for f7.s0.v3.v32.us"

"for f7.s0.v3.v3.preheader.us":                   ; preds = %"for f7.s0.v6.us"
  %324 = sub nuw nsw i64 %indvars.iv, %63
  %325 = mul nsw i64 %324, %64
  br label %"for f7.s0.v3.v3.us"

"end for f7.s0.v6.loopexit.us":                   ; preds = %"end for f7.s0.v3.v32.us"
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next18, 8
  br i1 %.not.us, label %destructor_block, label %"for f7.s0.v4.v356.us"

destructor_block:                                 ; preds = %"end for f7.s0.v6.loopexit.us", %"for f7.s0.v4.v356.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f74.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f74.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f74.s0.v4.v326.preheader":
  %f73.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 1
  %f73.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 2
  %f73.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 3
  %f74.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f74.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 4
  %f74.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f74.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 5
  %f74.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 6
  %f74.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 7
  %f74.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f74.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 8
  %f74.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f74.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 9
  %f74.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f74.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 10
  %f73.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 12
  %f74.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f74.s0.v4.v4, 5
  %a643 = add nsw i32 %f74.s0.v4.min, %16
  %b645 = add nsw i32 %f74.s0.v4.max, -31
  %f74.s0.v4.v326.base = tail call i32 @llvm.smin.i32(i32 %b645, i32 %a643)
  %17 = sext i32 %f74.s0.v4.v326.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f74.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f74.s0.v3.min, 1
  %26 = shl i32 %f74.s0.v4.v326.base, 1
  %27 = sub i32 2, %f73.v4.min_realized
  %28 = add i32 %27, %26
  %29 = add i32 %f73.v3.extent_realized.s, 1
  %30 = mul i32 %28, %29
  %31 = sub i32 %30, %f73.v3.min_realized
  %32 = shl i32 %f73.v3.extent_realized.s, 1
  %33 = add i32 %32, 2
  %34 = sub i32 1, %f73.v4.min_realized
  %35 = add i32 %34, %26
  %36 = mul i32 %35, %29
  %37 = sub i32 %36, %f73.v3.min_realized
  %38 = sub i32 %26, %f73.v4.min_realized
  %39 = mul i32 %38, %29
  %40 = sub i32 %39, %f73.v3.min_realized
  %41 = xor i32 %f73.v4.min_realized, -1
  %42 = add i32 %26, %41
  %43 = mul i32 %42, %29
  %44 = sub i32 %43, %f73.v3.min_realized
  %45 = sub nsw i32 %f74.s0.v3.max, %f74.s0.v3.min
  %46 = add nsw i32 %45, 1
  %a644 = lshr i32 %46, 3
  %47 = icmp sgt i32 %45, 6
  %48 = select i1 %47, i32 %a644, i32 0
  %.not5 = icmp eq i32 %48, 0
  %49 = ashr i32 %45, 3
  %.not = icmp slt i32 %49, %48
  %50 = shl nsw i32 %f74.s0.v3.max, 1
  %51 = sub nsw i32 %50, %f73.v3.min_realized
  %52 = add nsw i64 %3, -7
  %53 = sub nsw i64 %52, %11
  br label %"for f74.s0.v4.v326"

"for f74.s0.v4.v326":                             ; preds = %"end for f74.s0.v3.v32", %"for f74.s0.v4.v326.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f74.s0.v3.v32" ], [ 0, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f74.s0.v3.v32" ], [ %44, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f74.s0.v3.v32" ], [ %40, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f74.s0.v3.v32" ], [ %37, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f74.s0.v3.v32" ], [ %31, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f74.s0.v3.v32" ], [ %scevgep, %"for f74.s0.v4.v326.preheader" ]
  br i1 %.not5, label %"end for f74.s0.v3.v3", label %"for f74.s0.v3.v3", !prof !4

"for f74.s0.v3.v3":                               ; preds = %"for f74.s0.v4.v326", %"for f74.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f74.s0.v3.v3" ], [ %lsr.iv22, %"for f74.s0.v4.v326" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f74.s0.v3.v3" ], [ %lsr.iv18, %"for f74.s0.v4.v326" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f74.s0.v3.v3" ], [ %lsr.iv14, %"for f74.s0.v4.v326" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f74.s0.v3.v3" ], [ %lsr.iv10, %"for f74.s0.v4.v326" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f74.s0.v3.v3" ], [ %lsr.iv4, %"for f74.s0.v4.v326" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f74.s0.v3.v3" ], [ %a644, %"for f74.s0.v4.v326" ]
  %54 = add i32 %lsr.iv24, %25
  %55 = add i32 %lsr.iv20, %25
  %56 = add i32 %lsr.iv16, %25
  %57 = add i32 %lsr.iv12, %25
  %58 = sext i32 %57 to i64
  %59 = add nsw i64 %58, 2
  %60 = getelementptr inbounds float, ptr %f73.host, i64 %59
  %61 = load <8 x float>, ptr %60, align 4, !tbaa !51
  %62 = add nsw i64 %58, 10
  %63 = getelementptr inbounds float, ptr %f73.host, i64 %62
  %64 = load <8 x float>, ptr %63, align 4, !tbaa !51
  %65 = shufflevector <8 x float> %61, <8 x float> %64, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %66 = getelementptr inbounds float, ptr %f73.host, i64 %58
  %67 = load <8 x float>, ptr %66, align 4, !tbaa !51
  %68 = add nsw i64 %58, 8
  %69 = getelementptr inbounds float, ptr %f73.host, i64 %68
  %70 = load <8 x float>, ptr %69, align 4, !tbaa !51
  %71 = shufflevector <8 x float> %67, <8 x float> %70, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %72 = shufflevector <8 x float> %67, <8 x float> %70, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %73 = fadd <8 x float> %72, %71
  %74 = fmul <8 x float> %73, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %75 = add nsw i64 %58, -2
  %76 = getelementptr inbounds float, ptr %f73.host, i64 %75
  %77 = load <8 x float>, ptr %76, align 4, !tbaa !51
  %78 = add nsw i64 %58, 6
  %79 = getelementptr inbounds float, ptr %f73.host, i64 %78
  %80 = load <8 x float>, ptr %79, align 4, !tbaa !51
  %81 = shufflevector <8 x float> %77, <8 x float> %80, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %82 = fadd <8 x float> %81, %74
  %83 = fadd <8 x float> %65, %82
  %84 = fmul <8 x float> %83, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %85 = sext i32 %56 to i64
  %86 = add nsw i64 %85, 2
  %87 = getelementptr inbounds float, ptr %f73.host, i64 %86
  %88 = load <8 x float>, ptr %87, align 4, !tbaa !51
  %89 = add nsw i64 %85, 10
  %90 = getelementptr inbounds float, ptr %f73.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !51
  %92 = shufflevector <8 x float> %88, <8 x float> %91, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %93 = getelementptr inbounds float, ptr %f73.host, i64 %85
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !51
  %95 = add nsw i64 %85, 8
  %96 = getelementptr inbounds float, ptr %f73.host, i64 %95
  %97 = load <8 x float>, ptr %96, align 4, !tbaa !51
  %98 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %99 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %100 = fadd <8 x float> %99, %98
  %101 = fmul <8 x float> %100, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %102 = add nsw i64 %85, -2
  %103 = getelementptr inbounds float, ptr %f73.host, i64 %102
  %104 = load <8 x float>, ptr %103, align 4, !tbaa !51
  %105 = add nsw i64 %85, 6
  %106 = getelementptr inbounds float, ptr %f73.host, i64 %105
  %107 = load <8 x float>, ptr %106, align 4, !tbaa !51
  %108 = shufflevector <8 x float> %104, <8 x float> %107, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %109 = fadd <8 x float> %108, %101
  %110 = fadd <8 x float> %92, %109
  %111 = sext i32 %55 to i64
  %112 = add nsw i64 %111, 2
  %113 = getelementptr inbounds float, ptr %f73.host, i64 %112
  %114 = load <8 x float>, ptr %113, align 4, !tbaa !51
  %115 = add nsw i64 %111, 10
  %116 = getelementptr inbounds float, ptr %f73.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !51
  %118 = shufflevector <8 x float> %114, <8 x float> %117, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %119 = getelementptr inbounds float, ptr %f73.host, i64 %111
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !51
  %121 = add nsw i64 %111, 8
  %122 = getelementptr inbounds float, ptr %f73.host, i64 %121
  %123 = load <8 x float>, ptr %122, align 4, !tbaa !51
  %124 = shufflevector <8 x float> %120, <8 x float> %123, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %125 = shufflevector <8 x float> %120, <8 x float> %123, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %126 = fadd <8 x float> %125, %124
  %127 = fmul <8 x float> %126, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %128 = add nsw i64 %111, -2
  %129 = getelementptr inbounds float, ptr %f73.host, i64 %128
  %130 = load <8 x float>, ptr %129, align 4, !tbaa !51
  %131 = add nsw i64 %111, 6
  %132 = getelementptr inbounds float, ptr %f73.host, i64 %131
  %133 = load <8 x float>, ptr %132, align 4, !tbaa !51
  %134 = shufflevector <8 x float> %130, <8 x float> %133, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %135 = fadd <8 x float> %134, %127
  %136 = fadd <8 x float> %118, %135
  %137 = fadd <8 x float> %110, %136
  %138 = fmul <8 x float> %137, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %139 = sext i32 %54 to i64
  %140 = add nsw i64 %139, 2
  %141 = getelementptr inbounds float, ptr %f73.host, i64 %140
  %142 = load <8 x float>, ptr %141, align 4, !tbaa !51
  %143 = add nsw i64 %139, 10
  %144 = getelementptr inbounds float, ptr %f73.host, i64 %143
  %145 = load <8 x float>, ptr %144, align 4, !tbaa !51
  %146 = shufflevector <8 x float> %142, <8 x float> %145, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %147 = getelementptr inbounds float, ptr %f73.host, i64 %139
  %148 = load <8 x float>, ptr %147, align 4, !tbaa !51
  %149 = add nsw i64 %139, 8
  %150 = getelementptr inbounds float, ptr %f73.host, i64 %149
  %151 = load <8 x float>, ptr %150, align 4, !tbaa !51
  %152 = shufflevector <8 x float> %148, <8 x float> %151, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %153 = shufflevector <8 x float> %148, <8 x float> %151, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %154 = fadd <8 x float> %153, %152
  %155 = fmul <8 x float> %154, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %156 = add nsw i64 %139, -2
  %157 = getelementptr inbounds float, ptr %f73.host, i64 %156
  %158 = load <8 x float>, ptr %157, align 4, !tbaa !51
  %159 = add nsw i64 %139, 6
  %160 = getelementptr inbounds float, ptr %f73.host, i64 %159
  %161 = load <8 x float>, ptr %160, align 4, !tbaa !51
  %162 = shufflevector <8 x float> %158, <8 x float> %161, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %163 = fadd <8 x float> %162, %155
  %164 = fadd <8 x float> %146, %163
  %165 = fmul <8 x float> %164, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %166 = fadd <8 x float> %138, %165
  %167 = fadd <8 x float> %84, %166
  %168 = fmul <8 x float> %167, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %168, ptr %lsr.iv7, align 4, !tbaa !55
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f74.s0.v3.v3", label %"for f74.s0.v3.v3"

"end for f74.s0.v3.v3":                           ; preds = %"for f74.s0.v3.v3", %"for f74.s0.v4.v326"
  br i1 %.not, label %"end for f74.s0.v3.v32", label %"for f74.s0.v3.v31.preheader", !prof !4

"for f74.s0.v3.v31.preheader":                    ; preds = %"end for f74.s0.v3.v3"
  %169 = trunc i64 %indvars.iv to i32
  %170 = add i32 %f74.s0.v4.v326.base, %169
  %171 = shl nsw i32 %170, 1
  %172 = sub nsw i32 %171, %f73.v4.min_realized
  %173 = add nsw i32 %172, -1
  %174 = mul nsw i32 %173, %29
  %t2120 = add nsw i32 %174, %51
  %175 = mul nsw i32 %172, %29
  %t2121 = add nsw i32 %175, %51
  %176 = add nsw i32 %172, 1
  %177 = mul nsw i32 %176, %29
  %t2122 = add nsw i32 %177, %51
  %178 = add nsw i32 %172, 2
  %179 = mul nsw i32 %178, %29
  %t2123 = add nsw i32 %179, %51
  %180 = sext i32 %t2123 to i64
  %181 = add nsw i64 %180, -12
  %182 = getelementptr inbounds float, ptr %f73.host, i64 %181
  %183 = load <8 x float>, ptr %182, align 4, !tbaa !51
  %184 = add nsw i64 %180, -4
  %185 = getelementptr inbounds float, ptr %f73.host, i64 %184
  %186 = load <8 x float>, ptr %185, align 4, !tbaa !51
  %187 = shufflevector <8 x float> %183, <8 x float> %186, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %188 = add nsw i64 %180, -14
  %189 = getelementptr inbounds float, ptr %f73.host, i64 %188
  %190 = load <8 x float>, ptr %189, align 4, !tbaa !51
  %191 = add nsw i64 %180, -6
  %192 = getelementptr inbounds float, ptr %f73.host, i64 %191
  %193 = load <8 x float>, ptr %192, align 4, !tbaa !51
  %194 = shufflevector <8 x float> %190, <8 x float> %193, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %195 = shufflevector <8 x float> %190, <8 x float> %193, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %196 = fadd <8 x float> %195, %194
  %197 = fmul <8 x float> %196, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %198 = add nsw i64 %180, -16
  %199 = getelementptr inbounds float, ptr %f73.host, i64 %198
  %200 = load <8 x float>, ptr %199, align 4, !tbaa !51
  %201 = add nsw i64 %180, -8
  %202 = getelementptr inbounds float, ptr %f73.host, i64 %201
  %203 = load <8 x float>, ptr %202, align 4, !tbaa !51
  %204 = shufflevector <8 x float> %200, <8 x float> %203, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %205 = fadd <8 x float> %204, %197
  %206 = fadd <8 x float> %187, %205
  %207 = fmul <8 x float> %206, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %208 = sext i32 %t2122 to i64
  %209 = add nsw i64 %208, -12
  %210 = getelementptr inbounds float, ptr %f73.host, i64 %209
  %211 = load <8 x float>, ptr %210, align 4, !tbaa !51
  %212 = add nsw i64 %208, -4
  %213 = getelementptr inbounds float, ptr %f73.host, i64 %212
  %214 = load <8 x float>, ptr %213, align 4, !tbaa !51
  %215 = shufflevector <8 x float> %211, <8 x float> %214, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %216 = add nsw i64 %208, -14
  %217 = getelementptr inbounds float, ptr %f73.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !51
  %219 = add nsw i64 %208, -6
  %220 = getelementptr inbounds float, ptr %f73.host, i64 %219
  %221 = load <8 x float>, ptr %220, align 4, !tbaa !51
  %222 = shufflevector <8 x float> %218, <8 x float> %221, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %223 = shufflevector <8 x float> %218, <8 x float> %221, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %224 = fadd <8 x float> %223, %222
  %225 = fmul <8 x float> %224, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %226 = add nsw i64 %208, -16
  %227 = getelementptr inbounds float, ptr %f73.host, i64 %226
  %228 = load <8 x float>, ptr %227, align 4, !tbaa !51
  %229 = add nsw i64 %208, -8
  %230 = getelementptr inbounds float, ptr %f73.host, i64 %229
  %231 = load <8 x float>, ptr %230, align 4, !tbaa !51
  %232 = shufflevector <8 x float> %228, <8 x float> %231, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %233 = fadd <8 x float> %232, %225
  %234 = fadd <8 x float> %215, %233
  %235 = sext i32 %t2121 to i64
  %236 = add nsw i64 %235, -12
  %237 = getelementptr inbounds float, ptr %f73.host, i64 %236
  %238 = load <8 x float>, ptr %237, align 4, !tbaa !51
  %239 = add nsw i64 %235, -4
  %240 = getelementptr inbounds float, ptr %f73.host, i64 %239
  %241 = load <8 x float>, ptr %240, align 4, !tbaa !51
  %242 = shufflevector <8 x float> %238, <8 x float> %241, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %243 = add nsw i64 %235, -14
  %244 = getelementptr inbounds float, ptr %f73.host, i64 %243
  %245 = load <8 x float>, ptr %244, align 4, !tbaa !51
  %246 = add nsw i64 %235, -6
  %247 = getelementptr inbounds float, ptr %f73.host, i64 %246
  %248 = load <8 x float>, ptr %247, align 4, !tbaa !51
  %249 = shufflevector <8 x float> %245, <8 x float> %248, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %250 = shufflevector <8 x float> %245, <8 x float> %248, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %251 = fadd <8 x float> %250, %249
  %252 = fmul <8 x float> %251, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %253 = add nsw i64 %235, -16
  %254 = getelementptr inbounds float, ptr %f73.host, i64 %253
  %255 = load <8 x float>, ptr %254, align 4, !tbaa !51
  %256 = add nsw i64 %235, -8
  %257 = getelementptr inbounds float, ptr %f73.host, i64 %256
  %258 = load <8 x float>, ptr %257, align 4, !tbaa !51
  %259 = shufflevector <8 x float> %255, <8 x float> %258, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %260 = fadd <8 x float> %259, %252
  %261 = fadd <8 x float> %242, %260
  %262 = fadd <8 x float> %234, %261
  %263 = fmul <8 x float> %262, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %264 = sext i32 %t2120 to i64
  %265 = add nsw i64 %264, -12
  %266 = getelementptr inbounds float, ptr %f73.host, i64 %265
  %267 = load <8 x float>, ptr %266, align 4, !tbaa !51
  %268 = add nsw i64 %264, -4
  %269 = getelementptr inbounds float, ptr %f73.host, i64 %268
  %270 = load <8 x float>, ptr %269, align 4, !tbaa !51
  %271 = shufflevector <8 x float> %267, <8 x float> %270, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %272 = add nsw i64 %264, -14
  %273 = getelementptr inbounds float, ptr %f73.host, i64 %272
  %274 = load <8 x float>, ptr %273, align 4, !tbaa !51
  %275 = add nsw i64 %264, -6
  %276 = getelementptr inbounds float, ptr %f73.host, i64 %275
  %277 = load <8 x float>, ptr %276, align 4, !tbaa !51
  %278 = shufflevector <8 x float> %274, <8 x float> %277, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %279 = shufflevector <8 x float> %274, <8 x float> %277, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %280 = fadd <8 x float> %279, %278
  %281 = fmul <8 x float> %280, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %282 = add nsw i64 %264, -16
  %283 = getelementptr inbounds float, ptr %f73.host, i64 %282
  %284 = load <8 x float>, ptr %283, align 4, !tbaa !51
  %285 = add nsw i64 %264, -8
  %286 = getelementptr inbounds float, ptr %f73.host, i64 %285
  %287 = load <8 x float>, ptr %286, align 4, !tbaa !51
  %288 = shufflevector <8 x float> %284, <8 x float> %287, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %289 = fadd <8 x float> %288, %281
  %290 = fadd <8 x float> %271, %289
  %291 = fmul <8 x float> %290, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %292 = fadd <8 x float> %263, %291
  %293 = fadd <8 x float> %207, %292
  %294 = fmul <8 x float> %293, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %295 = add nsw i64 %18, %indvars.iv
  %296 = mul nsw i64 %295, %19
  %297 = add i64 %53, %296
  %298 = getelementptr inbounds float, ptr %f74.host, i64 %297
  store <8 x float> %294, ptr %298, align 4, !tbaa !55
  br label %"end for f74.s0.v3.v32"

"end for f74.s0.v3.v32":                          ; preds = %"for f74.s0.v3.v31.preheader", %"end for f74.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %33
  %lsr.iv.next15 = add i32 %lsr.iv14, %33
  %lsr.iv.next19 = add i32 %lsr.iv18, %33
  %lsr.iv.next23 = add i32 %lsr.iv22, %33
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f74.s0.v4.v326"

destructor_block:                                 ; preds = %"end for f74.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f8.s0.v6(ptr nocapture readnone %__user_context, i32 %f8.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 7
  %f8.s0.v4.max = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 8
  %f8.s0.v4.min = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 13
  %f7.host = load ptr, ptr %2, align 8
  %3 = add i32 %f8.s0.v4.max, 1
  %4 = icmp slt i32 %f8.s0.v4.min, %3
  br i1 %4, label %"for f8.s0.v4.preheader", label %destructor_block, !prof !5

"for f8.s0.v4.preheader":                         ; preds = %entry
  %5 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 6
  %f8.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 2
  %f7.v3.extent_realized.s = load i32, ptr %6, align 4
  %promoted23 = sext i32 %f7.v3.extent_realized.s to i64
  %7 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 5
  %f8.s0.v3.max = load i32, ptr %7, align 4
  %a684 = load i32, ptr %closure, align 4
  %8 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 10
  %f8.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f8.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 1
  %f7.stride.1 = load i32, ptr %10, align 4
  %11 = add i32 %f8.s0.v3.max, 1
  %12 = sub i32 %11, %f8.s0.v3.min
  %13 = tail call i32 @llvm.smax.i32(i32 %a684, i32 0)
  %14 = shl nsw i64 %9, 2
  %15 = add nsw i64 %14, 4
  %16 = shl i32 %f8.s0.v3.min, 1
  %17 = shl i32 %f7.stride.1, 1
  %18 = icmp sgt i32 %11, %f8.s0.v3.min
  %19 = add nsw i64 %promoted23, 1
  %20 = sub nsw i32 %f8.s0.v6, %13
  %21 = sext i32 %20 to i64
  %t2133 = mul nsw i64 %19, %21
  %22 = add nsw i64 %t2133, 2
  %sext = shl i64 %t2133, 32
  %23 = ashr exact i64 %sext, 32
  br i1 %18, label %"for f8.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f8.s0.v4.us.preheader":                      ; preds = %"for f8.s0.v4.preheader"
  %24 = shl i32 %f8.s0.v4.min, 1
  %25 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 4
  %f7.v4.min_realized = load i32, ptr %25, align 4
  %26 = xor i32 %f7.v4.min_realized, -1
  %27 = add i32 %24, %26
  %28 = mul i32 %f7.stride.1, %27
  %29 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 3
  %f7.v3.min_realized = load i32, ptr %29, align 4
  %30 = sub i32 %28, %f7.v3.min_realized
  %31 = sub i32 %24, %f7.v4.min_realized
  %32 = mul i32 %f7.stride.1, %31
  %33 = sub i32 %32, %f7.v3.min_realized
  %34 = or i32 %24, 1
  %35 = sub i32 %34, %f7.v4.min_realized
  %36 = mul i32 %f7.stride.1, %35
  %37 = sub i32 %36, %f7.v3.min_realized
  %38 = add i32 %24, 2
  %39 = sub i32 %38, %f7.v4.min_realized
  %40 = mul i32 %f7.stride.1, %39
  %41 = sub i32 %40, %f7.v3.min_realized
  %42 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 15
  %f8.host = load ptr, ptr %42, align 8
  %43 = sext i32 %f8.s0.v3.min to i64
  %44 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 11
  %f8.v3.min_realized = load i32, ptr %44, align 4
  %45 = sext i32 %f8.v3.min_realized to i64
  %46 = sub nsw i64 %43, %45
  %47 = sext i32 %f8.s0.v6 to i64
  %smax = zext i32 %13 to i64
  %48 = sub nsw i64 %47, %smax
  %49 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 9
  %f8.stride.2 = load i32, ptr %49, align 4
  %50 = sext i32 %f8.stride.2 to i64
  %51 = mul nsw i64 %48, %50
  %52 = add i64 %46, %51
  %53 = add nsw i64 %9, 1
  %54 = sext i32 %f8.s0.v4.min to i64
  %55 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 12
  %f8.v4.min_realized = load i32, ptr %55, align 4
  %56 = sext i32 %f8.v4.min_realized to i64
  %57 = sub nsw i64 %54, %56
  %58 = mul nsw i64 %53, %57
  %59 = add i64 %52, %58
  %scevgep = getelementptr float, ptr %f8.host, i64 %59
  %60 = sub i32 %f8.s0.v3.max, %f8.s0.v3.min
  %61 = add i32 %40, %16
  %62 = sub i32 %61, %f7.v3.min_realized
  %63 = shl i32 %f7.stride.1, 1
  %64 = add i32 %36, %16
  %65 = sub i32 %64, %f7.v3.min_realized
  %66 = add i32 %32, %16
  %67 = sub i32 %66, %f7.v3.min_realized
  %68 = add i32 %28, %16
  %69 = sub i32 %68, %f7.v3.min_realized
  %70 = sub i32 %f8.s0.v3.max, %f8.s0.v3.min
  %71 = zext i32 %70 to i64
  %72 = add nuw nsw i64 %71, 1
  %min.iters.check = icmp ult i32 %70, 3
  %mul.result = shl i32 %60, 1
  %mul.result6 = shl i32 %60, 1
  %mul.overflow7 = icmp slt i32 %60, 0
  %mul.result9 = shl i32 %60, 1
  %mul.result12 = shl i32 %60, 1
  %n.vec = and i64 %72, -4
  %.cast = trunc i64 %n.vec to i32
  %73 = shl i32 %.cast, 1
  %.cast14 = trunc i64 %n.vec to i32
  %74 = shl i32 %.cast14, 1
  %.cast17 = trunc i64 %n.vec to i32
  %75 = shl i32 %.cast17, 1
  %.cast20 = trunc i64 %n.vec to i32
  %76 = shl i32 %.cast20, 1
  %77 = shl nuw nsw i64 %n.vec, 2
  %.cast25 = trunc i64 %n.vec to i32
  %ind.end26 = sub i32 %12, %.cast25
  %78 = getelementptr float, ptr %f7.host, i64 -1
  %79 = getelementptr float, ptr %f7.host, i64 -1
  %80 = getelementptr float, ptr %f7.host, i64 -1
  %81 = getelementptr float, ptr %f7.host, i64 -1
  %82 = getelementptr float, ptr %f7.host, i64 -1
  %83 = getelementptr float, ptr %f7.host, i64 -1
  %84 = getelementptr float, ptr %f7.host, i64 -1
  %cmp.n = icmp eq i64 %72, %n.vec
  br label %"for f8.s0.v4.us"

"for f8.s0.v4.us":                                ; preds = %"for f8.s0.v4.us.preheader", %"end for f8.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f8.s0.v4.us.preheader" ], [ %indvar.next, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv19.us = phi i32 [ %30, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next20.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv15.us = phi i32 [ %33, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next16.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv10.us = phi i32 [ %37, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next11.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv6.us = phi i32 [ %41, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next7.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi ptr [ %scevgep, %"for f8.s0.v4.us.preheader" ], [ %scevgep3.us, %"end for f8.s0.v3.loopexit.us" ]
  %f8.s0.v4.us = phi i32 [ %f8.s0.v4.min, %"for f8.s0.v4.us.preheader" ], [ %273, %"end for f8.s0.v3.loopexit.us" ]
  br i1 %min.iters.check, label %"for f8.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f8.s0.v4.us"
  %85 = mul i32 %63, %indvar
  %86 = add i32 %69, %85
  %87 = add i32 %67, %85
  %88 = add i32 %65, %85
  %89 = add i32 %62, %85
  %90 = add i32 %89, %mul.result
  %91 = icmp slt i32 %90, %89
  %92 = add i32 %88, %mul.result6
  %93 = icmp slt i32 %92, %88
  %94 = or i1 %93, %mul.overflow7
  %95 = add i32 %87, %mul.result9
  %96 = icmp slt i32 %95, %87
  %97 = add i32 %86, %mul.result12
  %98 = icmp slt i32 %97, %86
  %99 = or i1 %91, %94
  %100 = or i1 %96, %99
  %101 = or i1 %98, %100
  br i1 %101, label %"for f8.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv19.us, %73
  %ind.end15 = add i32 %lsr.iv15.us, %74
  %ind.end18 = add i32 %lsr.iv10.us, %75
  %ind.end21 = add i32 %lsr.iv6.us, %76
  %ind.end23 = getelementptr i8, ptr %lsr.iv1.us, i64 %77
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %102 = shl i64 %index, 2
  %next.gep = getelementptr i8, ptr %lsr.iv1.us, i64 %102
  %.cast28 = trunc i64 %index to i32
  %103 = shl i32 %.cast28, 1
  %offset.idx = add i32 %lsr.iv6.us, %103
  %104 = add i32 %offset.idx, 2
  %105 = add i32 %offset.idx, 4
  %106 = add i32 %offset.idx, 6
  %.cast29 = trunc i64 %index to i32
  %107 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv10.us, %107
  %.cast31 = trunc i64 %index to i32
  %108 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv15.us, %108
  %.cast33 = trunc i64 %index to i32
  %109 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv19.us, %109
  %110 = add i32 %offset.idx34, %16
  %111 = add i32 %offset.idx32, %16
  %112 = add i32 %offset.idx30, %16
  %113 = add i32 %offset.idx, %16
  %114 = add i32 %104, %16
  %115 = add i32 %105, %16
  %116 = add i32 %106, %16
  %117 = sext i32 %113 to i64
  %118 = sext i32 %114 to i64
  %119 = sext i32 %115 to i64
  %120 = sext i32 %116 to i64
  %121 = add nsw i64 %22, %117
  %122 = add nsw i64 %22, %118
  %123 = add nsw i64 %22, %119
  %124 = add nsw i64 %22, %120
  %125 = getelementptr inbounds float, ptr %f7.host, i64 %121
  %126 = getelementptr inbounds float, ptr %f7.host, i64 %122
  %127 = getelementptr inbounds float, ptr %f7.host, i64 %123
  %128 = getelementptr inbounds float, ptr %f7.host, i64 %124
  %129 = load float, ptr %125, align 4, !tbaa !53
  %130 = load float, ptr %126, align 4, !tbaa !53
  %131 = load float, ptr %127, align 4, !tbaa !53
  %132 = load float, ptr %128, align 4, !tbaa !53
  %133 = insertelement <4 x float> poison, float %129, i64 0
  %134 = insertelement <4 x float> %133, float %130, i64 1
  %135 = insertelement <4 x float> %134, float %131, i64 2
  %136 = insertelement <4 x float> %135, float %132, i64 3
  %137 = add nsw i64 %23, %117
  %138 = add nsw i64 %23, %118
  %139 = add nsw i64 %23, %119
  %140 = add nsw i64 %23, %120
  %141 = add nsw i64 %137, 1
  %142 = add nsw i64 %138, 1
  %143 = add nsw i64 %139, 1
  %144 = add nsw i64 %140, 1
  %145 = getelementptr inbounds float, ptr %f7.host, i64 %141
  %146 = getelementptr inbounds float, ptr %f7.host, i64 %142
  %147 = getelementptr inbounds float, ptr %f7.host, i64 %143
  %148 = getelementptr inbounds float, ptr %f7.host, i64 %144
  %149 = load float, ptr %145, align 4, !tbaa !53
  %150 = load float, ptr %146, align 4, !tbaa !53
  %151 = load float, ptr %147, align 4, !tbaa !53
  %152 = load float, ptr %148, align 4, !tbaa !53
  %153 = insertelement <4 x float> poison, float %149, i64 0
  %154 = insertelement <4 x float> %153, float %150, i64 1
  %155 = insertelement <4 x float> %154, float %151, i64 2
  %156 = insertelement <4 x float> %155, float %152, i64 3
  %157 = getelementptr float, ptr %78, i64 %137
  %wide.vec = load <8 x float>, ptr %157, align 4, !tbaa !53
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec35 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %158 = fadd <4 x float> %156, %strided.vec35
  %159 = fmul <4 x float> %158, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %160 = fadd <4 x float> %strided.vec, %159
  %161 = fadd <4 x float> %136, %160
  %162 = fmul <4 x float> %161, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %163 = sext i32 %112 to i64
  %164 = add nsw i64 %23, %163
  %165 = add nsw i64 %164, 2
  %166 = getelementptr float, ptr %79, i64 %165
  %wide.vec36 = load <8 x float>, ptr %166, align 4, !tbaa !53
  %strided.vec37 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec38 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %167 = getelementptr float, ptr %80, i64 %164
  %wide.vec39 = load <8 x float>, ptr %167, align 4, !tbaa !53
  %strided.vec40 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec41 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %168 = fadd <4 x float> %strided.vec37, %strided.vec41
  %169 = fmul <4 x float> %168, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %170 = fadd <4 x float> %strided.vec40, %169
  %171 = fadd <4 x float> %strided.vec38, %170
  %172 = sext i32 %111 to i64
  %173 = add nsw i64 %23, %172
  %174 = add nsw i64 %173, 2
  %175 = getelementptr float, ptr %81, i64 %174
  %wide.vec42 = load <8 x float>, ptr %175, align 4, !tbaa !53
  %strided.vec43 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec44 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %176 = getelementptr float, ptr %82, i64 %173
  %wide.vec45 = load <8 x float>, ptr %176, align 4, !tbaa !53
  %strided.vec46 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec47 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %177 = fadd <4 x float> %strided.vec43, %strided.vec47
  %178 = fmul <4 x float> %177, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %179 = fadd <4 x float> %strided.vec46, %178
  %180 = fadd <4 x float> %strided.vec44, %179
  %181 = fadd <4 x float> %171, %180
  %182 = fmul <4 x float> %181, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %183 = sext i32 %110 to i64
  %184 = add nsw i64 %23, %183
  %185 = add nsw i64 %184, 2
  %186 = getelementptr float, ptr %83, i64 %185
  %wide.vec48 = load <8 x float>, ptr %186, align 4, !tbaa !53
  %strided.vec49 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec50 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %187 = getelementptr float, ptr %84, i64 %184
  %wide.vec51 = load <8 x float>, ptr %187, align 4, !tbaa !53
  %strided.vec52 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec53 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %188 = fadd <4 x float> %strided.vec49, %strided.vec53
  %189 = fmul <4 x float> %188, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %190 = fadd <4 x float> %strided.vec52, %189
  %191 = fadd <4 x float> %strided.vec50, %190
  %192 = fmul <4 x float> %191, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %193 = fadd <4 x float> %182, %192
  %194 = fadd <4 x float> %162, %193
  %195 = fmul <4 x float> %194, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %195, ptr %next.gep, align 4, !tbaa !35
  %index.next = add nuw i64 %index, 4
  %196 = icmp eq i64 %index.next, %n.vec
  br i1 %196, label %middle.block, label %vector.body, !llvm.loop !57

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f8.s0.v3.loopexit.us", label %"for f8.s0.v3.us.preheader"

"for f8.s0.v3.us.preheader":                      ; preds = %vector.scevcheck, %"for f8.s0.v4.us", %middle.block
  %lsr.iv21.us.ph = phi i32 [ %lsr.iv19.us, %vector.scevcheck ], [ %lsr.iv19.us, %"for f8.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv17.us.ph = phi i32 [ %lsr.iv15.us, %vector.scevcheck ], [ %lsr.iv15.us, %"for f8.s0.v4.us" ], [ %ind.end15, %middle.block ]
  %lsr.iv13.us.ph = phi i32 [ %lsr.iv10.us, %vector.scevcheck ], [ %lsr.iv10.us, %"for f8.s0.v4.us" ], [ %ind.end18, %middle.block ]
  %lsr.iv8.us.ph = phi i32 [ %lsr.iv6.us, %vector.scevcheck ], [ %lsr.iv6.us, %"for f8.s0.v4.us" ], [ %ind.end21, %middle.block ]
  %lsr.iv4.us.ph = phi ptr [ %lsr.iv1.us, %vector.scevcheck ], [ %lsr.iv1.us, %"for f8.s0.v4.us" ], [ %ind.end23, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %12, %vector.scevcheck ], [ %12, %"for f8.s0.v4.us" ], [ %ind.end26, %middle.block ]
  br label %"for f8.s0.v3.us"

"for f8.s0.v3.us":                                ; preds = %"for f8.s0.v3.us.preheader", %"for f8.s0.v3.us"
  %lsr.iv21.us = phi i32 [ %lsr.iv.next22.us, %"for f8.s0.v3.us" ], [ %lsr.iv21.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv17.us = phi i32 [ %lsr.iv.next18.us, %"for f8.s0.v3.us" ], [ %lsr.iv17.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv13.us = phi i32 [ %lsr.iv.next14.us, %"for f8.s0.v3.us" ], [ %lsr.iv13.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv8.us = phi i32 [ %lsr.iv.next9.us, %"for f8.s0.v3.us" ], [ %lsr.iv8.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv4.us = phi ptr [ %scevgep5.us, %"for f8.s0.v3.us" ], [ %lsr.iv4.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f8.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f8.s0.v3.us.preheader" ]
  %197 = add i32 %lsr.iv21.us, %16
  %198 = add i32 %lsr.iv17.us, %16
  %199 = add i32 %lsr.iv13.us, %16
  %200 = add i32 %lsr.iv8.us, %16
  %201 = sext i32 %200 to i64
  %202 = add nsw i64 %22, %201
  %203 = getelementptr inbounds float, ptr %f7.host, i64 %202
  %204 = load float, ptr %203, align 4, !tbaa !53
  %205 = add nsw i64 %23, %201
  %206 = getelementptr inbounds float, ptr %f7.host, i64 %205
  %207 = load <2 x float>, ptr %206, align 4, !tbaa !53
  %shift = shufflevector <2 x float> %207, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %208 = fadd <2 x float> %shift, %207
  %209 = extractelement <2 x float> %208, i64 0
  %210 = fmul float %209, 3.000000e+00
  %211 = add nsw i64 %205, -1
  %212 = getelementptr inbounds float, ptr %f7.host, i64 %211
  %213 = sext i32 %199 to i64
  %214 = add nsw i64 %23, %213
  %215 = add nsw i64 %214, 2
  %216 = getelementptr inbounds float, ptr %f7.host, i64 %215
  %217 = getelementptr inbounds float, ptr %f7.host, i64 %214
  %218 = load <2 x float>, ptr %217, align 4, !tbaa !53
  %shift54 = shufflevector <2 x float> %218, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %219 = fadd <2 x float> %shift54, %218
  %220 = extractelement <2 x float> %219, i64 0
  %221 = fmul float %220, 3.000000e+00
  %222 = add nsw i64 %214, -1
  %223 = getelementptr inbounds float, ptr %f7.host, i64 %222
  %224 = load float, ptr %223, align 4, !tbaa !53
  %225 = fadd float %224, %221
  %226 = sext i32 %198 to i64
  %227 = add nsw i64 %23, %226
  %228 = add nsw i64 %227, 2
  %229 = getelementptr inbounds float, ptr %f7.host, i64 %228
  %230 = load float, ptr %229, align 4, !tbaa !53
  %231 = getelementptr inbounds float, ptr %f7.host, i64 %227
  %232 = load <2 x float>, ptr %231, align 4, !tbaa !53
  %shift55 = shufflevector <2 x float> %232, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %233 = fadd <2 x float> %shift55, %232
  %234 = extractelement <2 x float> %233, i64 0
  %235 = fmul float %234, 3.000000e+00
  %236 = add nsw i64 %227, -1
  %237 = getelementptr inbounds float, ptr %f7.host, i64 %236
  %238 = load float, ptr %237, align 4, !tbaa !53
  %239 = fadd float %238, %235
  %240 = fadd float %230, %239
  %241 = load float, ptr %212, align 4, !tbaa !53
  %242 = load float, ptr %216, align 4, !tbaa !53
  %243 = insertelement <2 x float> poison, float %241, i64 0
  %244 = insertelement <2 x float> %243, float %242, i64 1
  %245 = insertelement <2 x float> poison, float %210, i64 0
  %246 = insertelement <2 x float> %245, float %225, i64 1
  %247 = fadd <2 x float> %244, %246
  %248 = insertelement <2 x float> poison, float %204, i64 0
  %249 = insertelement <2 x float> %248, float %240, i64 1
  %250 = fadd <2 x float> %249, %247
  %251 = fmul <2 x float> %250, <float 1.250000e-01, float 3.750000e-01>
  %252 = sext i32 %197 to i64
  %253 = add nsw i64 %23, %252
  %254 = add nsw i64 %253, 2
  %255 = getelementptr inbounds float, ptr %f7.host, i64 %254
  %256 = load float, ptr %255, align 4, !tbaa !53
  %257 = getelementptr inbounds float, ptr %f7.host, i64 %253
  %258 = load <2 x float>, ptr %257, align 4, !tbaa !53
  %shift56 = shufflevector <2 x float> %258, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %259 = fadd <2 x float> %shift56, %258
  %260 = extractelement <2 x float> %259, i64 0
  %261 = fmul float %260, 3.000000e+00
  %262 = add nsw i64 %253, -1
  %263 = getelementptr inbounds float, ptr %f7.host, i64 %262
  %264 = load float, ptr %263, align 4, !tbaa !53
  %265 = fadd float %264, %261
  %266 = fadd float %256, %265
  %267 = fmul float %266, 1.250000e-01
  %268 = extractelement <2 x float> %251, i64 1
  %269 = fadd float %268, %267
  %270 = extractelement <2 x float> %251, i64 0
  %271 = fadd float %270, %269
  %272 = fmul float %271, 1.250000e-01
  store float %272, ptr %lsr.iv4.us, align 4, !tbaa !35
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep5.us = getelementptr float, ptr %lsr.iv4.us, i64 1
  %lsr.iv.next9.us = add i32 %lsr.iv8.us, 2
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, 2
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, 2
  %lsr.iv.next22.us = add i32 %lsr.iv21.us, 2
  %.not2.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not2.us, label %"end for f8.s0.v3.loopexit.us", label %"for f8.s0.v3.us", !llvm.loop !58

"end for f8.s0.v3.loopexit.us":                   ; preds = %"for f8.s0.v3.us", %middle.block
  %273 = add nsw i32 %f8.s0.v4.us, 1
  %scevgep3.us = getelementptr i1, ptr %lsr.iv1.us, i64 %15
  %lsr.iv.next7.us = add i32 %lsr.iv6.us, %17
  %lsr.iv.next11.us = add i32 %lsr.iv10.us, %17
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, %17
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, %17
  %.not.us = icmp eq i32 %f8.s0.v4.us, %f8.s0.v4.max
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f8.s0.v4.us"

destructor_block:                                 ; preds = %"end for f8.s0.v3.loopexit.us", %"for f8.s0.v4.preheader", %entry
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f75.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f75.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f75.s0.v4.v346.preheader":
  %f74.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 1
  %f74.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 2
  %f74.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 3
  %f75.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f75.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 4
  %f75.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f75.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 5
  %f75.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 6
  %f75.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 7
  %f75.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f75.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 8
  %f75.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f75.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 9
  %f75.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f75.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 10
  %f74.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 12
  %f75.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f75.s0.v4.v4, 5
  %a710 = add nsw i32 %f75.s0.v4.min, %16
  %b712 = add nsw i32 %f75.s0.v4.max, -31
  %f75.s0.v4.v346.base = tail call i32 @llvm.smin.i32(i32 %b712, i32 %a710)
  %17 = sext i32 %f75.s0.v4.v346.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f75.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f75.s0.v3.min, 1
  %26 = shl i32 %f75.s0.v4.v346.base, 1
  %27 = sub i32 2, %f74.v4.min_realized
  %28 = add i32 %27, %26
  %29 = add i32 %f74.v3.extent_realized.s, 1
  %30 = mul i32 %28, %29
  %31 = sub i32 %30, %f74.v3.min_realized
  %32 = shl i32 %f74.v3.extent_realized.s, 1
  %33 = add i32 %32, 2
  %34 = sub i32 1, %f74.v4.min_realized
  %35 = add i32 %34, %26
  %36 = mul i32 %35, %29
  %37 = sub i32 %36, %f74.v3.min_realized
  %38 = sub i32 %26, %f74.v4.min_realized
  %39 = mul i32 %38, %29
  %40 = sub i32 %39, %f74.v3.min_realized
  %41 = xor i32 %f74.v4.min_realized, -1
  %42 = add i32 %26, %41
  %43 = mul i32 %42, %29
  %44 = sub i32 %43, %f74.v3.min_realized
  %45 = sub nsw i32 %f75.s0.v3.max, %f75.s0.v3.min
  %46 = add nsw i32 %45, 1
  %a711 = lshr i32 %46, 3
  %47 = icmp sgt i32 %45, 6
  %48 = select i1 %47, i32 %a711, i32 0
  %.not5 = icmp eq i32 %48, 0
  %49 = ashr i32 %45, 3
  %.not = icmp slt i32 %49, %48
  %50 = shl nsw i32 %f75.s0.v3.max, 1
  %51 = sub nsw i32 %50, %f74.v3.min_realized
  %52 = add nsw i64 %3, -7
  %53 = sub nsw i64 %52, %11
  br label %"for f75.s0.v4.v346"

"for f75.s0.v4.v346":                             ; preds = %"end for f75.s0.v3.v32", %"for f75.s0.v4.v346.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f75.s0.v3.v32" ], [ 0, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f75.s0.v3.v32" ], [ %44, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f75.s0.v3.v32" ], [ %40, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f75.s0.v3.v32" ], [ %37, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f75.s0.v3.v32" ], [ %31, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f75.s0.v3.v32" ], [ %scevgep, %"for f75.s0.v4.v346.preheader" ]
  br i1 %.not5, label %"end for f75.s0.v3.v3", label %"for f75.s0.v3.v3", !prof !4

"for f75.s0.v3.v3":                               ; preds = %"for f75.s0.v4.v346", %"for f75.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f75.s0.v3.v3" ], [ %lsr.iv22, %"for f75.s0.v4.v346" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f75.s0.v3.v3" ], [ %lsr.iv18, %"for f75.s0.v4.v346" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f75.s0.v3.v3" ], [ %lsr.iv14, %"for f75.s0.v4.v346" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f75.s0.v3.v3" ], [ %lsr.iv10, %"for f75.s0.v4.v346" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f75.s0.v3.v3" ], [ %lsr.iv4, %"for f75.s0.v4.v346" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f75.s0.v3.v3" ], [ %a711, %"for f75.s0.v4.v346" ]
  %54 = add i32 %lsr.iv24, %25
  %55 = add i32 %lsr.iv20, %25
  %56 = add i32 %lsr.iv16, %25
  %57 = add i32 %lsr.iv12, %25
  %58 = sext i32 %57 to i64
  %59 = add nsw i64 %58, 2
  %60 = getelementptr inbounds float, ptr %f74.host, i64 %59
  %61 = load <8 x float>, ptr %60, align 4, !tbaa !55
  %62 = add nsw i64 %58, 10
  %63 = getelementptr inbounds float, ptr %f74.host, i64 %62
  %64 = load <8 x float>, ptr %63, align 4, !tbaa !55
  %65 = shufflevector <8 x float> %61, <8 x float> %64, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %66 = getelementptr inbounds float, ptr %f74.host, i64 %58
  %67 = load <8 x float>, ptr %66, align 4, !tbaa !55
  %68 = add nsw i64 %58, 8
  %69 = getelementptr inbounds float, ptr %f74.host, i64 %68
  %70 = load <8 x float>, ptr %69, align 4, !tbaa !55
  %71 = shufflevector <8 x float> %67, <8 x float> %70, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %72 = shufflevector <8 x float> %67, <8 x float> %70, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %73 = fadd <8 x float> %72, %71
  %74 = fmul <8 x float> %73, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %75 = add nsw i64 %58, -2
  %76 = getelementptr inbounds float, ptr %f74.host, i64 %75
  %77 = load <8 x float>, ptr %76, align 4, !tbaa !55
  %78 = add nsw i64 %58, 6
  %79 = getelementptr inbounds float, ptr %f74.host, i64 %78
  %80 = load <8 x float>, ptr %79, align 4, !tbaa !55
  %81 = shufflevector <8 x float> %77, <8 x float> %80, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %82 = fadd <8 x float> %81, %74
  %83 = fadd <8 x float> %65, %82
  %84 = fmul <8 x float> %83, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %85 = sext i32 %56 to i64
  %86 = add nsw i64 %85, 2
  %87 = getelementptr inbounds float, ptr %f74.host, i64 %86
  %88 = load <8 x float>, ptr %87, align 4, !tbaa !55
  %89 = add nsw i64 %85, 10
  %90 = getelementptr inbounds float, ptr %f74.host, i64 %89
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !55
  %92 = shufflevector <8 x float> %88, <8 x float> %91, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %93 = getelementptr inbounds float, ptr %f74.host, i64 %85
  %94 = load <8 x float>, ptr %93, align 4, !tbaa !55
  %95 = add nsw i64 %85, 8
  %96 = getelementptr inbounds float, ptr %f74.host, i64 %95
  %97 = load <8 x float>, ptr %96, align 4, !tbaa !55
  %98 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %99 = shufflevector <8 x float> %94, <8 x float> %97, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %100 = fadd <8 x float> %99, %98
  %101 = fmul <8 x float> %100, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %102 = add nsw i64 %85, -2
  %103 = getelementptr inbounds float, ptr %f74.host, i64 %102
  %104 = load <8 x float>, ptr %103, align 4, !tbaa !55
  %105 = add nsw i64 %85, 6
  %106 = getelementptr inbounds float, ptr %f74.host, i64 %105
  %107 = load <8 x float>, ptr %106, align 4, !tbaa !55
  %108 = shufflevector <8 x float> %104, <8 x float> %107, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %109 = fadd <8 x float> %108, %101
  %110 = fadd <8 x float> %92, %109
  %111 = sext i32 %55 to i64
  %112 = add nsw i64 %111, 2
  %113 = getelementptr inbounds float, ptr %f74.host, i64 %112
  %114 = load <8 x float>, ptr %113, align 4, !tbaa !55
  %115 = add nsw i64 %111, 10
  %116 = getelementptr inbounds float, ptr %f74.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !55
  %118 = shufflevector <8 x float> %114, <8 x float> %117, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %119 = getelementptr inbounds float, ptr %f74.host, i64 %111
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !55
  %121 = add nsw i64 %111, 8
  %122 = getelementptr inbounds float, ptr %f74.host, i64 %121
  %123 = load <8 x float>, ptr %122, align 4, !tbaa !55
  %124 = shufflevector <8 x float> %120, <8 x float> %123, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %125 = shufflevector <8 x float> %120, <8 x float> %123, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %126 = fadd <8 x float> %125, %124
  %127 = fmul <8 x float> %126, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %128 = add nsw i64 %111, -2
  %129 = getelementptr inbounds float, ptr %f74.host, i64 %128
  %130 = load <8 x float>, ptr %129, align 4, !tbaa !55
  %131 = add nsw i64 %111, 6
  %132 = getelementptr inbounds float, ptr %f74.host, i64 %131
  %133 = load <8 x float>, ptr %132, align 4, !tbaa !55
  %134 = shufflevector <8 x float> %130, <8 x float> %133, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %135 = fadd <8 x float> %134, %127
  %136 = fadd <8 x float> %118, %135
  %137 = fadd <8 x float> %110, %136
  %138 = fmul <8 x float> %137, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %139 = sext i32 %54 to i64
  %140 = add nsw i64 %139, 2
  %141 = getelementptr inbounds float, ptr %f74.host, i64 %140
  %142 = load <8 x float>, ptr %141, align 4, !tbaa !55
  %143 = add nsw i64 %139, 10
  %144 = getelementptr inbounds float, ptr %f74.host, i64 %143
  %145 = load <8 x float>, ptr %144, align 4, !tbaa !55
  %146 = shufflevector <8 x float> %142, <8 x float> %145, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %147 = getelementptr inbounds float, ptr %f74.host, i64 %139
  %148 = load <8 x float>, ptr %147, align 4, !tbaa !55
  %149 = add nsw i64 %139, 8
  %150 = getelementptr inbounds float, ptr %f74.host, i64 %149
  %151 = load <8 x float>, ptr %150, align 4, !tbaa !55
  %152 = shufflevector <8 x float> %148, <8 x float> %151, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %153 = shufflevector <8 x float> %148, <8 x float> %151, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %154 = fadd <8 x float> %153, %152
  %155 = fmul <8 x float> %154, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %156 = add nsw i64 %139, -2
  %157 = getelementptr inbounds float, ptr %f74.host, i64 %156
  %158 = load <8 x float>, ptr %157, align 4, !tbaa !55
  %159 = add nsw i64 %139, 6
  %160 = getelementptr inbounds float, ptr %f74.host, i64 %159
  %161 = load <8 x float>, ptr %160, align 4, !tbaa !55
  %162 = shufflevector <8 x float> %158, <8 x float> %161, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %163 = fadd <8 x float> %162, %155
  %164 = fadd <8 x float> %146, %163
  %165 = fmul <8 x float> %164, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %166 = fadd <8 x float> %138, %165
  %167 = fadd <8 x float> %84, %166
  %168 = fmul <8 x float> %167, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %168, ptr %lsr.iv7, align 4, !tbaa !13
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f75.s0.v3.v3", label %"for f75.s0.v3.v3"

"end for f75.s0.v3.v3":                           ; preds = %"for f75.s0.v3.v3", %"for f75.s0.v4.v346"
  br i1 %.not, label %"end for f75.s0.v3.v32", label %"for f75.s0.v3.v31.preheader", !prof !4

"for f75.s0.v3.v31.preheader":                    ; preds = %"end for f75.s0.v3.v3"
  %169 = trunc i64 %indvars.iv to i32
  %170 = add i32 %f75.s0.v4.v346.base, %169
  %171 = shl nsw i32 %170, 1
  %172 = sub nsw i32 %171, %f74.v4.min_realized
  %173 = add nsw i32 %172, -1
  %174 = mul nsw i32 %173, %29
  %t2148 = add nsw i32 %174, %51
  %175 = mul nsw i32 %172, %29
  %t2149 = add nsw i32 %175, %51
  %176 = add nsw i32 %172, 1
  %177 = mul nsw i32 %176, %29
  %t2150 = add nsw i32 %177, %51
  %178 = add nsw i32 %172, 2
  %179 = mul nsw i32 %178, %29
  %t2151 = add nsw i32 %179, %51
  %180 = sext i32 %t2151 to i64
  %181 = add nsw i64 %180, -12
  %182 = getelementptr inbounds float, ptr %f74.host, i64 %181
  %183 = load <8 x float>, ptr %182, align 4, !tbaa !55
  %184 = add nsw i64 %180, -4
  %185 = getelementptr inbounds float, ptr %f74.host, i64 %184
  %186 = load <8 x float>, ptr %185, align 4, !tbaa !55
  %187 = shufflevector <8 x float> %183, <8 x float> %186, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %188 = add nsw i64 %180, -14
  %189 = getelementptr inbounds float, ptr %f74.host, i64 %188
  %190 = load <8 x float>, ptr %189, align 4, !tbaa !55
  %191 = add nsw i64 %180, -6
  %192 = getelementptr inbounds float, ptr %f74.host, i64 %191
  %193 = load <8 x float>, ptr %192, align 4, !tbaa !55
  %194 = shufflevector <8 x float> %190, <8 x float> %193, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %195 = shufflevector <8 x float> %190, <8 x float> %193, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %196 = fadd <8 x float> %195, %194
  %197 = fmul <8 x float> %196, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %198 = add nsw i64 %180, -16
  %199 = getelementptr inbounds float, ptr %f74.host, i64 %198
  %200 = load <8 x float>, ptr %199, align 4, !tbaa !55
  %201 = add nsw i64 %180, -8
  %202 = getelementptr inbounds float, ptr %f74.host, i64 %201
  %203 = load <8 x float>, ptr %202, align 4, !tbaa !55
  %204 = shufflevector <8 x float> %200, <8 x float> %203, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %205 = fadd <8 x float> %204, %197
  %206 = fadd <8 x float> %187, %205
  %207 = fmul <8 x float> %206, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %208 = sext i32 %t2150 to i64
  %209 = add nsw i64 %208, -12
  %210 = getelementptr inbounds float, ptr %f74.host, i64 %209
  %211 = load <8 x float>, ptr %210, align 4, !tbaa !55
  %212 = add nsw i64 %208, -4
  %213 = getelementptr inbounds float, ptr %f74.host, i64 %212
  %214 = load <8 x float>, ptr %213, align 4, !tbaa !55
  %215 = shufflevector <8 x float> %211, <8 x float> %214, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %216 = add nsw i64 %208, -14
  %217 = getelementptr inbounds float, ptr %f74.host, i64 %216
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !55
  %219 = add nsw i64 %208, -6
  %220 = getelementptr inbounds float, ptr %f74.host, i64 %219
  %221 = load <8 x float>, ptr %220, align 4, !tbaa !55
  %222 = shufflevector <8 x float> %218, <8 x float> %221, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %223 = shufflevector <8 x float> %218, <8 x float> %221, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %224 = fadd <8 x float> %223, %222
  %225 = fmul <8 x float> %224, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %226 = add nsw i64 %208, -16
  %227 = getelementptr inbounds float, ptr %f74.host, i64 %226
  %228 = load <8 x float>, ptr %227, align 4, !tbaa !55
  %229 = add nsw i64 %208, -8
  %230 = getelementptr inbounds float, ptr %f74.host, i64 %229
  %231 = load <8 x float>, ptr %230, align 4, !tbaa !55
  %232 = shufflevector <8 x float> %228, <8 x float> %231, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %233 = fadd <8 x float> %232, %225
  %234 = fadd <8 x float> %215, %233
  %235 = sext i32 %t2149 to i64
  %236 = add nsw i64 %235, -12
  %237 = getelementptr inbounds float, ptr %f74.host, i64 %236
  %238 = load <8 x float>, ptr %237, align 4, !tbaa !55
  %239 = add nsw i64 %235, -4
  %240 = getelementptr inbounds float, ptr %f74.host, i64 %239
  %241 = load <8 x float>, ptr %240, align 4, !tbaa !55
  %242 = shufflevector <8 x float> %238, <8 x float> %241, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %243 = add nsw i64 %235, -14
  %244 = getelementptr inbounds float, ptr %f74.host, i64 %243
  %245 = load <8 x float>, ptr %244, align 4, !tbaa !55
  %246 = add nsw i64 %235, -6
  %247 = getelementptr inbounds float, ptr %f74.host, i64 %246
  %248 = load <8 x float>, ptr %247, align 4, !tbaa !55
  %249 = shufflevector <8 x float> %245, <8 x float> %248, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %250 = shufflevector <8 x float> %245, <8 x float> %248, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %251 = fadd <8 x float> %250, %249
  %252 = fmul <8 x float> %251, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %253 = add nsw i64 %235, -16
  %254 = getelementptr inbounds float, ptr %f74.host, i64 %253
  %255 = load <8 x float>, ptr %254, align 4, !tbaa !55
  %256 = add nsw i64 %235, -8
  %257 = getelementptr inbounds float, ptr %f74.host, i64 %256
  %258 = load <8 x float>, ptr %257, align 4, !tbaa !55
  %259 = shufflevector <8 x float> %255, <8 x float> %258, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %260 = fadd <8 x float> %259, %252
  %261 = fadd <8 x float> %242, %260
  %262 = fadd <8 x float> %234, %261
  %263 = fmul <8 x float> %262, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %264 = sext i32 %t2148 to i64
  %265 = add nsw i64 %264, -12
  %266 = getelementptr inbounds float, ptr %f74.host, i64 %265
  %267 = load <8 x float>, ptr %266, align 4, !tbaa !55
  %268 = add nsw i64 %264, -4
  %269 = getelementptr inbounds float, ptr %f74.host, i64 %268
  %270 = load <8 x float>, ptr %269, align 4, !tbaa !55
  %271 = shufflevector <8 x float> %267, <8 x float> %270, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %272 = add nsw i64 %264, -14
  %273 = getelementptr inbounds float, ptr %f74.host, i64 %272
  %274 = load <8 x float>, ptr %273, align 4, !tbaa !55
  %275 = add nsw i64 %264, -6
  %276 = getelementptr inbounds float, ptr %f74.host, i64 %275
  %277 = load <8 x float>, ptr %276, align 4, !tbaa !55
  %278 = shufflevector <8 x float> %274, <8 x float> %277, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %279 = shufflevector <8 x float> %274, <8 x float> %277, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %280 = fadd <8 x float> %279, %278
  %281 = fmul <8 x float> %280, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %282 = add nsw i64 %264, -16
  %283 = getelementptr inbounds float, ptr %f74.host, i64 %282
  %284 = load <8 x float>, ptr %283, align 4, !tbaa !55
  %285 = add nsw i64 %264, -8
  %286 = getelementptr inbounds float, ptr %f74.host, i64 %285
  %287 = load <8 x float>, ptr %286, align 4, !tbaa !55
  %288 = shufflevector <8 x float> %284, <8 x float> %287, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %289 = fadd <8 x float> %288, %281
  %290 = fadd <8 x float> %271, %289
  %291 = fmul <8 x float> %290, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %292 = fadd <8 x float> %263, %291
  %293 = fadd <8 x float> %207, %292
  %294 = fmul <8 x float> %293, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %295 = add nsw i64 %18, %indvars.iv
  %296 = mul nsw i64 %295, %19
  %297 = add i64 %53, %296
  %298 = getelementptr inbounds float, ptr %f75.host, i64 %297
  store <8 x float> %294, ptr %298, align 4, !tbaa !13
  br label %"end for f75.s0.v3.v32"

"end for f75.s0.v3.v32":                          ; preds = %"for f75.s0.v3.v31.preheader", %"end for f75.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %33
  %lsr.iv.next15 = add i32 %lsr.iv14, %33
  %lsr.iv.next19 = add i32 %lsr.iv18, %33
  %lsr.iv.next23 = add i32 %lsr.iv22, %33
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f75.s0.v4.v346"

destructor_block:                                 ; preds = %"end for f75.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f9.s0.v6(ptr nocapture readnone %__user_context, i32 %f9.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 7
  %f9.s0.v4.max = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 8
  %f9.s0.v4.min = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 13
  %f8.host = load ptr, ptr %2, align 8
  %3 = add i32 %f9.s0.v4.max, 1
  %4 = icmp slt i32 %f9.s0.v4.min, %3
  br i1 %4, label %"for f9.s0.v4.preheader", label %destructor_block, !prof !5

"for f9.s0.v4.preheader":                         ; preds = %entry
  %5 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 6
  %f9.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 1
  %f8.stride.2 = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 5
  %f9.s0.v3.max = load i32, ptr %7, align 4
  %a729 = load i32, ptr %closure, align 4
  %8 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 11
  %f9.v3.min_realized = load i32, ptr %8, align 4
  %9 = sext i32 %f9.v3.min_realized to i64
  %10 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 10
  %f9.v3.extent_realized.s.s = load i32, ptr %10, align 4
  %11 = sext i32 %f9.v3.extent_realized.s.s to i64
  %12 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 2
  %f8.v3.extent_realized.s = load i32, ptr %12, align 4
  %13 = add i32 %f9.s0.v3.max, 1
  %14 = sub i32 %13, %f9.s0.v3.min
  %15 = sub nsw i64 1, %9
  %16 = add nsw i64 %15, %11
  %17 = tail call i32 @llvm.smax.i32(i32 %a729, i32 0)
  %18 = shl nsw i64 %16, 2
  %19 = shl i32 %f8.v3.extent_realized.s, 1
  %20 = add i32 %19, 2
  %21 = icmp sgt i32 %13, %f9.s0.v3.min
  %t2154.s = sub nsw i32 %f9.s0.v6, %17
  %22 = mul i32 %t2154.s, %f8.stride.2
  br i1 %21, label %"for f9.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f9.s0.v4.us.preheader":                      ; preds = %"for f9.s0.v4.preheader"
  %23 = shl i32 %f9.s0.v3.min, 1
  %24 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 3
  %f8.v3.min_realized = load i32, ptr %24, align 4
  %25 = sub i32 %23, %f8.v3.min_realized
  %26 = add i32 %f8.v3.extent_realized.s, 1
  %27 = shl i32 %f9.s0.v4.min, 1
  %28 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 4
  %f8.v4.min_realized = load i32, ptr %28, align 4
  %29 = xor i32 %f8.v4.min_realized, -1
  %30 = add i32 %27, %29
  %31 = mul i32 %26, %30
  %32 = add i32 %25, %31
  %33 = sub i32 %27, %f8.v4.min_realized
  %34 = mul i32 %26, %33
  %35 = add i32 %25, %34
  %36 = or i32 %27, 1
  %37 = sub i32 %36, %f8.v4.min_realized
  %38 = mul i32 %26, %37
  %39 = add i32 %25, %38
  %40 = add i32 %27, 2
  %41 = sub i32 %40, %f8.v4.min_realized
  %42 = mul i32 %26, %41
  %43 = add i32 %25, %42
  %44 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 15
  %f9.host = load ptr, ptr %44, align 8
  %45 = sext i32 %f9.s0.v3.min to i64
  %46 = sub nsw i64 %45, %9
  %47 = sext i32 %f9.s0.v6 to i64
  %smax = zext i32 %17 to i64
  %48 = sub nsw i64 %47, %smax
  %49 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 9
  %f9.stride.2 = load i32, ptr %49, align 4
  %50 = sext i32 %f9.stride.2 to i64
  %51 = mul nsw i64 %48, %50
  %52 = add i64 %46, %51
  %53 = sext i32 %f9.s0.v4.min to i64
  %54 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 12
  %f9.v4.min_realized = load i32, ptr %54, align 4
  %55 = sext i32 %f9.v4.min_realized to i64
  %56 = sub nsw i64 %53, %55
  %57 = mul i64 %16, %56
  %58 = add i64 %52, %57
  %scevgep = getelementptr float, ptr %f9.host, i64 %58
  %59 = sub i32 %f9.s0.v3.max, %f9.s0.v3.min
  %60 = add i32 %22, %42
  %61 = add i32 %60, %23
  %62 = sub i32 %61, %f8.v3.min_realized
  %63 = add i32 %22, %38
  %64 = add i32 %63, %23
  %65 = sub i32 %64, %f8.v3.min_realized
  %66 = add i32 %22, %34
  %67 = add i32 %66, %23
  %68 = sub i32 %67, %f8.v3.min_realized
  %69 = add i32 %22, %31
  %70 = add i32 %69, %23
  %71 = sub i32 %70, %f8.v3.min_realized
  %72 = sub i32 %f9.s0.v3.max, %f9.s0.v3.min
  %73 = zext i32 %72 to i64
  %74 = add nuw nsw i64 %73, 1
  %min.iters.check = icmp ult i32 %72, 3
  %mul.result = shl i32 %59, 1
  %mul.result6 = shl i32 %59, 1
  %mul.overflow7 = icmp slt i32 %59, 0
  %mul.result9 = shl i32 %59, 1
  %mul.result12 = shl i32 %59, 1
  %n.vec = and i64 %74, -4
  %.cast = trunc i64 %n.vec to i32
  %75 = shl i32 %.cast, 1
  %.cast14 = trunc i64 %n.vec to i32
  %76 = shl i32 %.cast14, 1
  %.cast17 = trunc i64 %n.vec to i32
  %77 = shl i32 %.cast17, 1
  %.cast20 = trunc i64 %n.vec to i32
  %78 = shl i32 %.cast20, 1
  %79 = shl nuw nsw i64 %n.vec, 2
  %.cast25 = trunc i64 %n.vec to i32
  %ind.end26 = sub i32 %14, %.cast25
  %80 = getelementptr float, ptr %f8.host, i64 -1
  %81 = getelementptr float, ptr %f8.host, i64 -1
  %82 = getelementptr float, ptr %f8.host, i64 -1
  %83 = getelementptr float, ptr %f8.host, i64 -1
  %84 = getelementptr float, ptr %f8.host, i64 -1
  %85 = getelementptr float, ptr %f8.host, i64 -1
  %86 = getelementptr float, ptr %f8.host, i64 -1
  %87 = getelementptr float, ptr %f8.host, i64 -1
  %cmp.n = icmp eq i64 %74, %n.vec
  br label %"for f9.s0.v4.us"

"for f9.s0.v4.us":                                ; preds = %"for f9.s0.v4.us.preheader", %"end for f9.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f9.s0.v4.us.preheader" ], [ %indvar.next, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv19.us = phi i32 [ %32, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next20.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv15.us = phi i32 [ %35, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next16.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv10.us = phi i32 [ %39, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next11.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv6.us = phi i32 [ %43, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next7.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi ptr [ %scevgep, %"for f9.s0.v4.us.preheader" ], [ %scevgep3.us, %"end for f9.s0.v3.loopexit.us" ]
  %f9.s0.v4.us = phi i32 [ %f9.s0.v4.min, %"for f9.s0.v4.us.preheader" ], [ %226, %"end for f9.s0.v3.loopexit.us" ]
  br i1 %min.iters.check, label %"for f9.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f9.s0.v4.us"
  %88 = mul i32 %20, %indvar
  %89 = add i32 %71, %88
  %90 = add i32 %68, %88
  %91 = add i32 %65, %88
  %92 = add i32 %62, %88
  %93 = add i32 %92, %mul.result
  %94 = icmp slt i32 %93, %92
  %95 = add i32 %91, %mul.result6
  %96 = icmp slt i32 %95, %91
  %97 = or i1 %96, %mul.overflow7
  %98 = add i32 %90, %mul.result9
  %99 = icmp slt i32 %98, %90
  %100 = add i32 %89, %mul.result12
  %101 = icmp slt i32 %100, %89
  %102 = or i1 %94, %97
  %103 = or i1 %99, %102
  %104 = or i1 %101, %103
  br i1 %104, label %"for f9.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv19.us, %75
  %ind.end15 = add i32 %lsr.iv15.us, %76
  %ind.end18 = add i32 %lsr.iv10.us, %77
  %ind.end21 = add i32 %lsr.iv6.us, %78
  %ind.end23 = getelementptr i8, ptr %lsr.iv1.us, i64 %79
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %105 = shl i64 %index, 2
  %next.gep = getelementptr i8, ptr %lsr.iv1.us, i64 %105
  %.cast28 = trunc i64 %index to i32
  %106 = shl i32 %.cast28, 1
  %offset.idx = add i32 %lsr.iv6.us, %106
  %.cast29 = trunc i64 %index to i32
  %107 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv10.us, %107
  %.cast31 = trunc i64 %index to i32
  %108 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv15.us, %108
  %.cast33 = trunc i64 %index to i32
  %109 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv19.us, %109
  %110 = add i32 %offset.idx34, %22
  %111 = add i32 %offset.idx32, %22
  %112 = add i32 %offset.idx30, %22
  %113 = add i32 %offset.idx, %22
  %114 = sext i32 %113 to i64
  %115 = add nsw i64 %114, 2
  %116 = getelementptr float, ptr %80, i64 %115
  %wide.vec = load <8 x float>, ptr %116, align 4, !tbaa !35
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec35 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %117 = getelementptr float, ptr %81, i64 %114
  %wide.vec36 = load <8 x float>, ptr %117, align 4, !tbaa !35
  %strided.vec37 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec38 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %118 = fadd <4 x float> %strided.vec, %strided.vec38
  %119 = fmul <4 x float> %118, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %120 = fadd <4 x float> %strided.vec37, %119
  %121 = fadd <4 x float> %strided.vec35, %120
  %122 = fmul <4 x float> %121, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %123 = sext i32 %112 to i64
  %124 = add nsw i64 %123, 2
  %125 = getelementptr float, ptr %82, i64 %124
  %wide.vec39 = load <8 x float>, ptr %125, align 4, !tbaa !35
  %strided.vec40 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec41 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %126 = getelementptr float, ptr %83, i64 %123
  %wide.vec42 = load <8 x float>, ptr %126, align 4, !tbaa !35
  %strided.vec43 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec44 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %127 = fadd <4 x float> %strided.vec40, %strided.vec44
  %128 = fmul <4 x float> %127, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %129 = fadd <4 x float> %strided.vec43, %128
  %130 = fadd <4 x float> %strided.vec41, %129
  %131 = sext i32 %111 to i64
  %132 = add nsw i64 %131, 2
  %133 = getelementptr float, ptr %84, i64 %132
  %wide.vec45 = load <8 x float>, ptr %133, align 4, !tbaa !35
  %strided.vec46 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec47 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %134 = getelementptr float, ptr %85, i64 %131
  %wide.vec48 = load <8 x float>, ptr %134, align 4, !tbaa !35
  %strided.vec49 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec50 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %135 = fadd <4 x float> %strided.vec46, %strided.vec50
  %136 = fmul <4 x float> %135, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %137 = fadd <4 x float> %strided.vec49, %136
  %138 = fadd <4 x float> %strided.vec47, %137
  %139 = fadd <4 x float> %130, %138
  %140 = fmul <4 x float> %139, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %141 = sext i32 %110 to i64
  %142 = add nsw i64 %141, 2
  %143 = getelementptr float, ptr %86, i64 %142
  %wide.vec51 = load <8 x float>, ptr %143, align 4, !tbaa !35
  %strided.vec52 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec53 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %144 = getelementptr float, ptr %87, i64 %141
  %wide.vec54 = load <8 x float>, ptr %144, align 4, !tbaa !35
  %strided.vec55 = shufflevector <8 x float> %wide.vec54, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec56 = shufflevector <8 x float> %wide.vec54, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %145 = fadd <4 x float> %strided.vec52, %strided.vec56
  %146 = fmul <4 x float> %145, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %147 = fadd <4 x float> %strided.vec55, %146
  %148 = fadd <4 x float> %strided.vec53, %147
  %149 = fmul <4 x float> %148, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %150 = fadd <4 x float> %140, %149
  %151 = fadd <4 x float> %122, %150
  %152 = fmul <4 x float> %151, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %152, ptr %next.gep, align 4, !tbaa !31
  %index.next = add nuw i64 %index, 4
  %153 = icmp eq i64 %index.next, %n.vec
  br i1 %153, label %middle.block, label %vector.body, !llvm.loop !59

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f9.s0.v3.loopexit.us", label %"for f9.s0.v3.us.preheader"

"for f9.s0.v3.us.preheader":                      ; preds = %vector.scevcheck, %"for f9.s0.v4.us", %middle.block
  %lsr.iv21.us.ph = phi i32 [ %lsr.iv19.us, %vector.scevcheck ], [ %lsr.iv19.us, %"for f9.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv17.us.ph = phi i32 [ %lsr.iv15.us, %vector.scevcheck ], [ %lsr.iv15.us, %"for f9.s0.v4.us" ], [ %ind.end15, %middle.block ]
  %lsr.iv13.us.ph = phi i32 [ %lsr.iv10.us, %vector.scevcheck ], [ %lsr.iv10.us, %"for f9.s0.v4.us" ], [ %ind.end18, %middle.block ]
  %lsr.iv8.us.ph = phi i32 [ %lsr.iv6.us, %vector.scevcheck ], [ %lsr.iv6.us, %"for f9.s0.v4.us" ], [ %ind.end21, %middle.block ]
  %lsr.iv4.us.ph = phi ptr [ %lsr.iv1.us, %vector.scevcheck ], [ %lsr.iv1.us, %"for f9.s0.v4.us" ], [ %ind.end23, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %14, %vector.scevcheck ], [ %14, %"for f9.s0.v4.us" ], [ %ind.end26, %middle.block ]
  br label %"for f9.s0.v3.us"

"for f9.s0.v3.us":                                ; preds = %"for f9.s0.v3.us.preheader", %"for f9.s0.v3.us"
  %lsr.iv21.us = phi i32 [ %lsr.iv.next22.us, %"for f9.s0.v3.us" ], [ %lsr.iv21.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv17.us = phi i32 [ %lsr.iv.next18.us, %"for f9.s0.v3.us" ], [ %lsr.iv17.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv13.us = phi i32 [ %lsr.iv.next14.us, %"for f9.s0.v3.us" ], [ %lsr.iv13.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv8.us = phi i32 [ %lsr.iv.next9.us, %"for f9.s0.v3.us" ], [ %lsr.iv8.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv4.us = phi ptr [ %scevgep5.us, %"for f9.s0.v3.us" ], [ %lsr.iv4.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f9.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f9.s0.v3.us.preheader" ]
  %154 = add i32 %lsr.iv21.us, %22
  %155 = add i32 %lsr.iv17.us, %22
  %156 = add i32 %lsr.iv13.us, %22
  %157 = add i32 %lsr.iv8.us, %22
  %158 = sext i32 %157 to i64
  %159 = add nsw i64 %158, 2
  %160 = getelementptr inbounds float, ptr %f8.host, i64 %159
  %161 = load float, ptr %160, align 4, !tbaa !35
  %162 = getelementptr inbounds float, ptr %f8.host, i64 %158
  %163 = load <2 x float>, ptr %162, align 4, !tbaa !35
  %shift = shufflevector <2 x float> %163, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %164 = fadd <2 x float> %shift, %163
  %165 = extractelement <2 x float> %164, i64 0
  %166 = fmul float %165, 3.000000e+00
  %167 = add nsw i64 %158, -1
  %168 = getelementptr inbounds float, ptr %f8.host, i64 %167
  %169 = sext i32 %156 to i64
  %170 = add nsw i64 %169, 2
  %171 = getelementptr inbounds float, ptr %f8.host, i64 %170
  %172 = getelementptr inbounds float, ptr %f8.host, i64 %169
  %173 = load <2 x float>, ptr %172, align 4, !tbaa !35
  %shift57 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %174 = fadd <2 x float> %shift57, %173
  %175 = extractelement <2 x float> %174, i64 0
  %176 = fmul float %175, 3.000000e+00
  %177 = add nsw i64 %169, -1
  %178 = getelementptr inbounds float, ptr %f8.host, i64 %177
  %179 = load float, ptr %178, align 4, !tbaa !35
  %180 = fadd float %179, %176
  %181 = sext i32 %155 to i64
  %182 = add nsw i64 %181, 2
  %183 = getelementptr inbounds float, ptr %f8.host, i64 %182
  %184 = load float, ptr %183, align 4, !tbaa !35
  %185 = getelementptr inbounds float, ptr %f8.host, i64 %181
  %186 = load <2 x float>, ptr %185, align 4, !tbaa !35
  %shift58 = shufflevector <2 x float> %186, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %187 = fadd <2 x float> %shift58, %186
  %188 = extractelement <2 x float> %187, i64 0
  %189 = fmul float %188, 3.000000e+00
  %190 = add nsw i64 %181, -1
  %191 = getelementptr inbounds float, ptr %f8.host, i64 %190
  %192 = load float, ptr %191, align 4, !tbaa !35
  %193 = fadd float %192, %189
  %194 = fadd float %184, %193
  %195 = load float, ptr %168, align 4, !tbaa !35
  %196 = load float, ptr %171, align 4, !tbaa !35
  %197 = insertelement <2 x float> poison, float %195, i64 0
  %198 = insertelement <2 x float> %197, float %196, i64 1
  %199 = insertelement <2 x float> poison, float %166, i64 0
  %200 = insertelement <2 x float> %199, float %180, i64 1
  %201 = fadd <2 x float> %198, %200
  %202 = insertelement <2 x float> poison, float %161, i64 0
  %203 = insertelement <2 x float> %202, float %194, i64 1
  %204 = fadd <2 x float> %203, %201
  %205 = fmul <2 x float> %204, <float 1.250000e-01, float 3.750000e-01>
  %206 = sext i32 %154 to i64
  %207 = add nsw i64 %206, 2
  %208 = getelementptr inbounds float, ptr %f8.host, i64 %207
  %209 = load float, ptr %208, align 4, !tbaa !35
  %210 = getelementptr inbounds float, ptr %f8.host, i64 %206
  %211 = load <2 x float>, ptr %210, align 4, !tbaa !35
  %shift59 = shufflevector <2 x float> %211, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %212 = fadd <2 x float> %shift59, %211
  %213 = extractelement <2 x float> %212, i64 0
  %214 = fmul float %213, 3.000000e+00
  %215 = add nsw i64 %206, -1
  %216 = getelementptr inbounds float, ptr %f8.host, i64 %215
  %217 = load float, ptr %216, align 4, !tbaa !35
  %218 = fadd float %217, %214
  %219 = fadd float %209, %218
  %220 = fmul float %219, 1.250000e-01
  %221 = extractelement <2 x float> %205, i64 1
  %222 = fadd float %221, %220
  %223 = extractelement <2 x float> %205, i64 0
  %224 = fadd float %223, %222
  %225 = fmul float %224, 1.250000e-01
  store float %225, ptr %lsr.iv4.us, align 4, !tbaa !31
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep5.us = getelementptr float, ptr %lsr.iv4.us, i64 1
  %lsr.iv.next9.us = add i32 %lsr.iv8.us, 2
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, 2
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, 2
  %lsr.iv.next22.us = add i32 %lsr.iv21.us, 2
  %.not2.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not2.us, label %"end for f9.s0.v3.loopexit.us", label %"for f9.s0.v3.us", !llvm.loop !60

"end for f9.s0.v3.loopexit.us":                   ; preds = %"for f9.s0.v3.us", %middle.block
  %226 = add nsw i32 %f9.s0.v4.us, 1
  %scevgep3.us = getelementptr i1, ptr %lsr.iv1.us, i64 %18
  %lsr.iv.next7.us = add i32 %lsr.iv6.us, %20
  %lsr.iv.next11.us = add i32 %lsr.iv10.us, %20
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, %20
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, %20
  %.not.us = icmp eq i32 %f9.s0.v4.us, %f9.s0.v4.max
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f9.s0.v4.us"

destructor_block:                                 ; preds = %"end for f9.s0.v3.loopexit.us", %"for f9.s0.v4.preheader", %entry
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f10.s0.v6(ptr nocapture readnone %__user_context, i32 %f10.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 3
  %f10.v4.extent_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 9
  %local_laplacian.min.1 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 10
  %f10.host = load ptr, ptr %2, align 8
  %3 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 12
  %f9.host = load ptr, ptr %3, align 8
  %4 = add nsw i32 %local_laplacian.min.1, -254
  %5 = ashr i32 %4, 7
  %6 = add nsw i32 %f10.v4.extent_realized.s, 1
  %7 = add nsw i32 %6, %5
  %8 = icmp sgt i32 %f10.v4.extent_realized.s, -1
  br i1 %8, label %"for f10.s0.v4.preheader", label %destructor_block, !prof !5

"for f10.s0.v4.preheader":                        ; preds = %entry
  %9 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 8
  %local_laplacian.min.0 = load i32, ptr %9, align 4
  %10 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 4
  %f9.stride.2 = load i32, ptr %10, align 4
  %a744 = load i32, ptr %closure, align 4
  %11 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 6
  %f9.v3.min_realized = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 5
  %f9.v3.extent_realized.s.s = load i32, ptr %12, align 4
  %13 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 2
  %f10.v3.extent_realized.s = load i32, ptr %13, align 4
  %14 = sext i32 %f10.v3.extent_realized.s to i64
  %15 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 1
  %f10.stride.2 = load i32, ptr %15, align 4
  %16 = sext i32 %f10.stride.2 to i64
  %17 = add i32 %f10.v3.extent_realized.s, 1
  %18 = add nsw i64 %14, 1
  %19 = sext i32 %5 to i64
  %20 = sext i32 %f10.s0.v6 to i64
  %21 = tail call i32 @llvm.smax.i32(i32 %a744, i32 0)
  %smax = zext i32 %21 to i64
  %22 = sub nsw i64 %20, %smax
  %23 = mul nsw i64 %22, %16
  %24 = sub i32 1, %f9.v3.min_realized
  %25 = add i32 %24, %f9.v3.extent_realized.s.s
  %26 = shl i32 %25, 1
  %27 = icmp ult i32 %f10.v3.extent_realized.s, 2147483647
  %28 = add nsw i32 %local_laplacian.min.0, -254
  %29 = ashr i32 %28, 7
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %23, %30
  %32 = shl nsw i32 %29, 1
  %t2168.s = sub nsw i32 %f10.s0.v6, %21
  %33 = mul i32 %t2168.s, %f9.stride.2
  %34 = add i32 %33, %32
  br i1 %27, label %"for f10.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f10.s0.v4.us.preheader":                     ; preds = %"for f10.s0.v4.preheader"
  %35 = shl nsw i32 %5, 1
  %36 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 7
  %f9.v4.min_realized = load i32, ptr %36, align 4
  %37 = xor i32 %f9.v4.min_realized, -1
  %38 = add i32 %35, %37
  %39 = mul i32 %25, %38
  %40 = sub i32 %39, %f9.v3.min_realized
  %41 = sub i32 %35, %f9.v4.min_realized
  %42 = mul i32 %25, %41
  %43 = sub i32 %42, %f9.v3.min_realized
  %44 = or i32 %35, 1
  %45 = sub i32 %44, %f9.v4.min_realized
  %46 = mul i32 %25, %45
  %47 = sub i32 %46, %f9.v3.min_realized
  %48 = add nsw i32 %35, 2
  %49 = sub i32 %48, %f9.v4.min_realized
  %50 = mul i32 %25, %49
  %51 = sub i32 %50, %f9.v3.min_realized
  %52 = add i32 %50, %33
  %53 = add i32 %52, %32
  %54 = sub i32 %53, %f9.v3.min_realized
  %55 = shl i32 %25, 1
  %56 = add i32 %46, %33
  %57 = add i32 %56, %32
  %58 = sub i32 %57, %f9.v3.min_realized
  %59 = add i32 %33, %42
  %60 = add i32 %59, %32
  %61 = sub i32 %60, %f9.v3.min_realized
  %62 = add i32 %39, %33
  %63 = add i32 %62, %32
  %64 = sub i32 %63, %f9.v3.min_realized
  %65 = zext i32 %f10.v3.extent_realized.s to i64
  %66 = add nuw nsw i64 %65, 1
  %min.iters.check = icmp ult i32 %f10.v3.extent_realized.s, 3
  %mul.result = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result7 = shl i32 %f10.v3.extent_realized.s, 1
  %mul.overflow8 = icmp slt i32 %f10.v3.extent_realized.s, 0
  %mul.result10 = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result13 = shl i32 %f10.v3.extent_realized.s, 1
  %n.vec = and i64 %66, -4
  %.cast = trunc i64 %n.vec to i32
  %67 = shl i32 %.cast, 1
  %.cast15 = trunc i64 %n.vec to i32
  %68 = shl i32 %.cast15, 1
  %.cast18 = trunc i64 %n.vec to i32
  %69 = shl i32 %.cast18, 1
  %.cast21 = trunc i64 %n.vec to i32
  %70 = shl i32 %.cast21, 1
  %ind.end24 = add i64 %31, %n.vec
  %.cast26 = trunc i64 %n.vec to i32
  %ind.end27 = sub i32 %17, %.cast26
  %71 = getelementptr float, ptr %f9.host, i64 -1
  %72 = getelementptr float, ptr %f9.host, i64 -1
  %73 = getelementptr float, ptr %f9.host, i64 -1
  %74 = getelementptr float, ptr %f9.host, i64 -1
  %75 = getelementptr float, ptr %f9.host, i64 -1
  %76 = getelementptr float, ptr %f9.host, i64 -1
  %77 = getelementptr float, ptr %f9.host, i64 -1
  %78 = getelementptr float, ptr %f9.host, i64 -1
  %cmp.n = icmp eq i64 %66, %n.vec
  br label %"for f10.s0.v4.us"

"for f10.s0.v4.us":                               ; preds = %"for f10.s0.v4.us.preheader", %"end for f10.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f10.s0.v4.us.preheader" ], [ %indvar.next, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv17.us = phi i32 [ %40, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next18.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv13.us = phi i32 [ %43, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next14.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv9.us = phi i32 [ %47, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next10.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv5.us = phi i32 [ %51, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next6.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi i64 [ %19, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next2.us, %"end for f10.s0.v3.loopexit.us" ]
  %79 = sub nsw i64 %lsr.iv1.us, %19
  %80 = mul nsw i64 %79, %18
  %81 = sub i64 %80, %30
  br i1 %min.iters.check, label %"for f10.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f10.s0.v4.us"
  %82 = mul i32 %55, %indvar
  %83 = add i32 %64, %82
  %84 = add i32 %61, %82
  %85 = add i32 %58, %82
  %86 = add i32 %54, %82
  %87 = add i32 %86, %mul.result
  %88 = icmp slt i32 %87, %86
  %89 = add i32 %85, %mul.result7
  %90 = icmp slt i32 %89, %85
  %91 = or i1 %90, %mul.overflow8
  %92 = add i32 %84, %mul.result10
  %93 = icmp slt i32 %92, %84
  %94 = add i32 %83, %mul.result13
  %95 = icmp slt i32 %94, %83
  %96 = or i1 %88, %91
  %97 = or i1 %93, %96
  %98 = or i1 %95, %97
  br i1 %98, label %"for f10.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv17.us, %67
  %ind.end16 = add i32 %lsr.iv13.us, %68
  %ind.end19 = add i32 %lsr.iv9.us, %69
  %ind.end22 = add i32 %lsr.iv5.us, %70
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %31, %index
  %.cast29 = trunc i64 %index to i32
  %99 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv5.us, %99
  %.cast31 = trunc i64 %index to i32
  %100 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv9.us, %100
  %.cast33 = trunc i64 %index to i32
  %101 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv13.us, %101
  %.cast35 = trunc i64 %index to i32
  %102 = shl i32 %.cast35, 1
  %offset.idx36 = add i32 %lsr.iv17.us, %102
  %103 = add i32 %34, %offset.idx36
  %104 = add i32 %34, %offset.idx34
  %105 = add i32 %34, %offset.idx32
  %106 = add i32 %34, %offset.idx30
  %107 = sext i32 %106 to i64
  %108 = add nsw i64 %107, 2
  %109 = getelementptr float, ptr %71, i64 %108
  %wide.vec = load <8 x float>, ptr %109, align 4, !tbaa !31
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec37 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %110 = getelementptr float, ptr %72, i64 %107
  %wide.vec38 = load <8 x float>, ptr %110, align 4, !tbaa !31
  %strided.vec39 = shufflevector <8 x float> %wide.vec38, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec40 = shufflevector <8 x float> %wide.vec38, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %111 = fadd <4 x float> %strided.vec, %strided.vec40
  %112 = fmul <4 x float> %111, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %113 = fadd <4 x float> %strided.vec39, %112
  %114 = fadd <4 x float> %strided.vec37, %113
  %115 = fmul <4 x float> %114, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %116 = sext i32 %105 to i64
  %117 = add nsw i64 %116, 2
  %118 = getelementptr float, ptr %73, i64 %117
  %wide.vec41 = load <8 x float>, ptr %118, align 4, !tbaa !31
  %strided.vec42 = shufflevector <8 x float> %wide.vec41, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec43 = shufflevector <8 x float> %wide.vec41, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %119 = getelementptr float, ptr %74, i64 %116
  %wide.vec44 = load <8 x float>, ptr %119, align 4, !tbaa !31
  %strided.vec45 = shufflevector <8 x float> %wide.vec44, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec46 = shufflevector <8 x float> %wide.vec44, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %120 = fadd <4 x float> %strided.vec42, %strided.vec46
  %121 = fmul <4 x float> %120, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %122 = fadd <4 x float> %strided.vec45, %121
  %123 = fadd <4 x float> %strided.vec43, %122
  %124 = sext i32 %104 to i64
  %125 = add nsw i64 %124, 2
  %126 = getelementptr float, ptr %75, i64 %125
  %wide.vec47 = load <8 x float>, ptr %126, align 4, !tbaa !31
  %strided.vec48 = shufflevector <8 x float> %wide.vec47, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec49 = shufflevector <8 x float> %wide.vec47, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %127 = getelementptr float, ptr %76, i64 %124
  %wide.vec50 = load <8 x float>, ptr %127, align 4, !tbaa !31
  %strided.vec51 = shufflevector <8 x float> %wide.vec50, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec52 = shufflevector <8 x float> %wide.vec50, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %128 = fadd <4 x float> %strided.vec48, %strided.vec52
  %129 = fmul <4 x float> %128, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %130 = fadd <4 x float> %strided.vec51, %129
  %131 = fadd <4 x float> %strided.vec49, %130
  %132 = fadd <4 x float> %123, %131
  %133 = fmul <4 x float> %132, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %134 = sext i32 %103 to i64
  %135 = add nsw i64 %134, 2
  %136 = getelementptr float, ptr %77, i64 %135
  %wide.vec53 = load <8 x float>, ptr %136, align 4, !tbaa !31
  %strided.vec54 = shufflevector <8 x float> %wide.vec53, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec55 = shufflevector <8 x float> %wide.vec53, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %137 = getelementptr float, ptr %78, i64 %134
  %wide.vec56 = load <8 x float>, ptr %137, align 4, !tbaa !31
  %strided.vec57 = shufflevector <8 x float> %wide.vec56, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec58 = shufflevector <8 x float> %wide.vec56, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %138 = fadd <4 x float> %strided.vec54, %strided.vec58
  %139 = fmul <4 x float> %138, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %140 = fadd <4 x float> %strided.vec57, %139
  %141 = fadd <4 x float> %strided.vec55, %140
  %142 = fmul <4 x float> %141, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %143 = fadd <4 x float> %133, %142
  %144 = fadd <4 x float> %115, %143
  %145 = fmul <4 x float> %144, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %146 = add i64 %81, %offset.idx
  %147 = getelementptr inbounds float, ptr %f10.host, i64 %146
  store <4 x float> %145, ptr %147, align 4, !tbaa !27
  %index.next = add nuw i64 %index, 4
  %148 = icmp eq i64 %index.next, %n.vec
  br i1 %148, label %middle.block, label %vector.body, !llvm.loop !61

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f10.s0.v3.loopexit.us", label %"for f10.s0.v3.us.preheader"

"for f10.s0.v3.us.preheader":                     ; preds = %vector.scevcheck, %"for f10.s0.v4.us", %middle.block
  %lsr.iv19.us.ph = phi i32 [ %lsr.iv17.us, %vector.scevcheck ], [ %lsr.iv17.us, %"for f10.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv15.us.ph = phi i32 [ %lsr.iv13.us, %vector.scevcheck ], [ %lsr.iv13.us, %"for f10.s0.v4.us" ], [ %ind.end16, %middle.block ]
  %lsr.iv11.us.ph = phi i32 [ %lsr.iv9.us, %vector.scevcheck ], [ %lsr.iv9.us, %"for f10.s0.v4.us" ], [ %ind.end19, %middle.block ]
  %lsr.iv7.us.ph = phi i32 [ %lsr.iv5.us, %vector.scevcheck ], [ %lsr.iv5.us, %"for f10.s0.v4.us" ], [ %ind.end22, %middle.block ]
  %lsr.iv3.us.ph = phi i64 [ %31, %vector.scevcheck ], [ %31, %"for f10.s0.v4.us" ], [ %ind.end24, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %17, %vector.scevcheck ], [ %17, %"for f10.s0.v4.us" ], [ %ind.end27, %middle.block ]
  br label %"for f10.s0.v3.us"

"for f10.s0.v3.us":                               ; preds = %"for f10.s0.v3.us.preheader", %"for f10.s0.v3.us"
  %lsr.iv19.us = phi i32 [ %lsr.iv.next20.us, %"for f10.s0.v3.us" ], [ %lsr.iv19.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv15.us = phi i32 [ %lsr.iv.next16.us, %"for f10.s0.v3.us" ], [ %lsr.iv15.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv11.us = phi i32 [ %lsr.iv.next12.us, %"for f10.s0.v3.us" ], [ %lsr.iv11.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv7.us = phi i32 [ %lsr.iv.next8.us, %"for f10.s0.v3.us" ], [ %lsr.iv7.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv3.us = phi i64 [ %lsr.iv.next4.us, %"for f10.s0.v3.us" ], [ %lsr.iv3.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f10.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f10.s0.v3.us.preheader" ]
  %149 = add i32 %34, %lsr.iv19.us
  %150 = add i32 %34, %lsr.iv15.us
  %151 = add i32 %34, %lsr.iv11.us
  %152 = add i32 %34, %lsr.iv7.us
  %153 = sext i32 %152 to i64
  %154 = add nsw i64 %153, 2
  %155 = getelementptr inbounds float, ptr %f9.host, i64 %154
  %156 = load float, ptr %155, align 4, !tbaa !31
  %157 = getelementptr inbounds float, ptr %f9.host, i64 %153
  %158 = load <2 x float>, ptr %157, align 4, !tbaa !31
  %shift = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %159 = fadd <2 x float> %shift, %158
  %160 = extractelement <2 x float> %159, i64 0
  %161 = fmul float %160, 3.000000e+00
  %162 = add nsw i64 %153, -1
  %163 = getelementptr inbounds float, ptr %f9.host, i64 %162
  %164 = sext i32 %151 to i64
  %165 = add nsw i64 %164, 2
  %166 = getelementptr inbounds float, ptr %f9.host, i64 %165
  %167 = getelementptr inbounds float, ptr %f9.host, i64 %164
  %168 = load <2 x float>, ptr %167, align 4, !tbaa !31
  %shift59 = shufflevector <2 x float> %168, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %169 = fadd <2 x float> %shift59, %168
  %170 = extractelement <2 x float> %169, i64 0
  %171 = fmul float %170, 3.000000e+00
  %172 = add nsw i64 %164, -1
  %173 = getelementptr inbounds float, ptr %f9.host, i64 %172
  %174 = load float, ptr %173, align 4, !tbaa !31
  %175 = fadd float %174, %171
  %176 = sext i32 %150 to i64
  %177 = add nsw i64 %176, 2
  %178 = getelementptr inbounds float, ptr %f9.host, i64 %177
  %179 = load float, ptr %178, align 4, !tbaa !31
  %180 = getelementptr inbounds float, ptr %f9.host, i64 %176
  %181 = load <2 x float>, ptr %180, align 4, !tbaa !31
  %shift60 = shufflevector <2 x float> %181, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %182 = fadd <2 x float> %shift60, %181
  %183 = extractelement <2 x float> %182, i64 0
  %184 = fmul float %183, 3.000000e+00
  %185 = add nsw i64 %176, -1
  %186 = getelementptr inbounds float, ptr %f9.host, i64 %185
  %187 = load float, ptr %186, align 4, !tbaa !31
  %188 = fadd float %187, %184
  %189 = fadd float %179, %188
  %190 = load float, ptr %163, align 4, !tbaa !31
  %191 = load float, ptr %166, align 4, !tbaa !31
  %192 = insertelement <2 x float> poison, float %190, i64 0
  %193 = insertelement <2 x float> %192, float %191, i64 1
  %194 = insertelement <2 x float> poison, float %161, i64 0
  %195 = insertelement <2 x float> %194, float %175, i64 1
  %196 = fadd <2 x float> %193, %195
  %197 = insertelement <2 x float> poison, float %156, i64 0
  %198 = insertelement <2 x float> %197, float %189, i64 1
  %199 = fadd <2 x float> %198, %196
  %200 = fmul <2 x float> %199, <float 1.250000e-01, float 3.750000e-01>
  %201 = sext i32 %149 to i64
  %202 = add nsw i64 %201, 2
  %203 = getelementptr inbounds float, ptr %f9.host, i64 %202
  %204 = load float, ptr %203, align 4, !tbaa !31
  %205 = getelementptr inbounds float, ptr %f9.host, i64 %201
  %206 = load <2 x float>, ptr %205, align 4, !tbaa !31
  %shift61 = shufflevector <2 x float> %206, <2 x float> poison, <2 x i32> <i32 1, i32 undef>
  %207 = fadd <2 x float> %shift61, %206
  %208 = extractelement <2 x float> %207, i64 0
  %209 = fmul float %208, 3.000000e+00
  %210 = add nsw i64 %201, -1
  %211 = getelementptr inbounds float, ptr %f9.host, i64 %210
  %212 = load float, ptr %211, align 4, !tbaa !31
  %213 = fadd float %212, %209
  %214 = fadd float %204, %213
  %215 = fmul float %214, 1.250000e-01
  %216 = extractelement <2 x float> %200, i64 1
  %217 = fadd float %216, %215
  %218 = extractelement <2 x float> %200, i64 0
  %219 = fadd float %218, %217
  %220 = fmul float %219, 1.250000e-01
  %221 = add i64 %81, %lsr.iv3.us
  %222 = getelementptr inbounds float, ptr %f10.host, i64 %221
  store float %220, ptr %222, align 4, !tbaa !27
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %lsr.iv.next4.us = add i64 %lsr.iv3.us, 1
  %lsr.iv.next8.us = add i32 %lsr.iv7.us, 2
  %lsr.iv.next12.us = add i32 %lsr.iv11.us, 2
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, 2
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, 2
  %.not3.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not3.us, label %"end for f10.s0.v3.loopexit.us", label %"for f10.s0.v3.us", !llvm.loop !62

"end for f10.s0.v3.loopexit.us":                  ; preds = %"for f10.s0.v3.us", %middle.block
  %lsr.iv.next2.us = add nsw i64 %lsr.iv1.us, 1
  %lsr.us = trunc i64 %lsr.iv.next2.us to i32
  %lsr.iv.next6.us = add i32 %lsr.iv5.us, %26
  %lsr.iv.next10.us = add i32 %lsr.iv9.us, %26
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, %26
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, %26
  %.not.us = icmp eq i32 %7, %lsr.us
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f10.s0.v4.us"

destructor_block:                                 ; preds = %"end for f10.s0.v3.loopexit.us", %"for f10.s0.v4.preheader", %entry
  ret i32 0
}

define internal i32 @par_for___local_laplacian_local_laplacian.s0.v4.v264(ptr %__user_context, i32 %local_laplacian.s0.v4.v264, ptr noalias readonly %closure) {
entry:
  %beta = load float, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 1
  %f0.v3.min_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 2
  %a1139 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 3
  %f130.v3.extent_realized.s = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 4
  %f130.v3.min_realized = load i32, ptr %3, align 4
  %4 = sext i32 %f130.v3.min_realized to i64
  %5 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 5
  %f2.v3.extent_realized.s = load i32, ptr %5, align 4
  %6 = sext i32 %f2.v3.extent_realized.s to i64
  %7 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 6
  %f2.v3.min_realized = load i32, ptr %7, align 4
  %8 = sext i32 %f2.v3.min_realized to i64
  %9 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 7
  %f2.v4.min_realized = load i32, ptr %9, align 4
  %10 = sext i32 %f2.v4.min_realized to i64
  %11 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 8
  %f4.stride.1 = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 9
  %f4.v3.extent_realized.s = load i32, ptr %12, align 4
  %13 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 10
  %f4.v3.min_realized = load i32, ptr %13, align 4
  %14 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 11
  %f4.v4.min_realized = load i32, ptr %14, align 4
  %15 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 12
  %f5.stride.1 = load i32, ptr %15, align 4
  %16 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 13
  %f5.v3.extent_realized.s = load i32, ptr %16, align 4
  %17 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 14
  %f5.v3.min_realized = load i32, ptr %17, align 4
  %18 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 15
  %f5.v4.min_realized = load i32, ptr %18, align 4
  %19 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 16
  %f6.stride.1 = load i32, ptr %19, align 4
  %20 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 17
  %f6.v3.extent_realized.s = load i32, ptr %20, align 4
  %21 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 18
  %f6.v3.min_realized = load i32, ptr %21, align 4
  %22 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 19
  %f6.v4.min_realized = load i32, ptr %22, align 4
  %23 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 20
  %f7.stride.1 = load i32, ptr %23, align 4
  %24 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 21
  %f7.v3.extent_realized.s = load i32, ptr %24, align 4
  %25 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 22
  %f7.v3.min_realized = load i32, ptr %25, align 4
  %26 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 23
  %f7.v4.min_realized = load i32, ptr %26, align 4
  %27 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 24
  %f72.v3.extent_realized.s = load i32, ptr %27, align 4
  %28 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 25
  %f72.v3.min_realized = load i32, ptr %28, align 4
  %29 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 26
  %f72.v4.min_realized = load i32, ptr %29, align 4
  %30 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 27
  %f73.v3.extent_realized.s = load i32, ptr %30, align 4
  %31 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 28
  %f73.v3.min_realized = load i32, ptr %31, align 4
  %32 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 29
  %f73.v4.min_realized = load i32, ptr %32, align 4
  %33 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 30
  %f74.v3.extent_realized.s = load i32, ptr %33, align 4
  %34 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 31
  %f74.v3.min_realized = load i32, ptr %34, align 4
  %35 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 32
  %f74.v4.min_realized = load i32, ptr %35, align 4
  %36 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 33
  %f75.v3.extent_realized.s = load i32, ptr %36, align 4
  %37 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 34
  %f75.v3.min_realized = load i32, ptr %37, align 4
  %38 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 35
  %f75.v4.min_realized = load i32, ptr %38, align 4
  %39 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 36
  %f8.stride.2 = load i32, ptr %39, align 4
  %40 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 37
  %f8.v3.extent_realized.s = load i32, ptr %40, align 4
  %41 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 38
  %f8.v3.min_realized = load i32, ptr %41, align 4
  %42 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 39
  %f8.v4.min_realized = load i32, ptr %42, align 4
  %43 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 40
  %input.extent.0 = load i32, ptr %43, align 4
  %44 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 41
  %input.extent.1 = load i32, ptr %44, align 4
  %45 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 42
  %input.extent.2 = load i32, ptr %45, align 4
  %46 = sext i32 %input.extent.2 to i64
  %47 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 43
  %input.min.0 = load i32, ptr %47, align 4
  %48 = sext i32 %input.min.0 to i64
  %49 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 44
  %b1148 = load i32, ptr %49, align 4
  %50 = sext i32 %b1148 to i64
  %51 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 45
  %b1146 = load i32, ptr %51, align 4
  %b1037 = sext i32 %b1146 to i64
  %52 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 46
  %input.stride.1 = load i32, ptr %52, align 4
  %53 = sext i32 %input.stride.1 to i64
  %54 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 47
  %input.stride.2 = load i32, ptr %54, align 4
  %55 = sext i32 %input.stride.2 to i64
  %56 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 48
  %levels = load i32, ptr %56, align 4
  %57 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 49
  %local_laplacian.extent.0 = load i32, ptr %57, align 4
  %58 = sext i32 %local_laplacian.extent.0 to i64
  %59 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 50
  %local_laplacian.extent.1 = load i32, ptr %59, align 4
  %60 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 51
  %local_laplacian.extent.2 = load i32, ptr %60, align 4
  %61 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 52
  %local_laplacian.min.0 = load i32, ptr %61, align 4
  %62 = sext i32 %local_laplacian.min.0 to i64
  %63 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 53
  %a1120 = load i32, ptr %63, align 4
  %64 = sext i32 %a1120 to i64
  %65 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 54
  %local_laplacian.min.1 = load i32, ptr %65, align 4
  %66 = sext i32 %local_laplacian.min.1 to i64
  %67 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 55
  %local_laplacian.min.1.required = load i32, ptr %67, align 4
  %68 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 56
  %b1028 = load i32, ptr %68, align 4
  %69 = sext i32 %b1028 to i64
  %70 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 57
  %local_laplacian.s0.v4.v264.epilogue = load i32, ptr %70, align 4
  %71 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 58
  %local_laplacian.s0.v4.v264.prologue = load i32, ptr %71, align 4
  %72 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 59
  %local_laplacian.stride.1 = load i32, ptr %72, align 4
  %73 = sext i32 %local_laplacian.stride.1 to i64
  %74 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 60
  %local_laplacian.stride.2 = load i32, ptr %74, align 4
  %75 = sext i32 %local_laplacian.stride.2 to i64
  %76 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 61
  %f0.host = load ptr, ptr %76, align 8
  %77 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 63
  %f130.host = load ptr, ptr %77, align 8
  %78 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 65
  %f2.host = load ptr, ptr %78, align 8
  %79 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 67
  %f4.host = load ptr, ptr %79, align 8
  %80 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 69
  %f5.host = load ptr, ptr %80, align 8
  %81 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 71
  %f6.host = load ptr, ptr %81, align 8
  %82 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 73
  %f7.host = load ptr, ptr %82, align 8
  %83 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 75
  %f72.host = load ptr, ptr %83, align 8
  %84 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 77
  %f73.host = load ptr, ptr %84, align 8
  %85 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 79
  %f74.host = load ptr, ptr %85, align 8
  %86 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 81
  %f75.host = load ptr, ptr %86, align 8
  %87 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 83
  %f8.host = load ptr, ptr %87, align 8
  %88 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 85
  %input.host = load ptr, ptr %88, align 8
  %89 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 87
  %local_laplacian.host = load ptr, ptr %89, align 8
  %90 = icmp sgt i32 %local_laplacian.s0.v4.v264.epilogue, %local_laplacian.s0.v4.v264
  %91 = icmp sle i32 %local_laplacian.s0.v4.v264.prologue, %local_laplacian.s0.v4.v264
  %92 = and i1 %90, %91
  %93 = shl nsw i32 %local_laplacian.s0.v4.v264, 6
  %a782 = add nsw i32 %local_laplacian.min.1, %93
  %94 = add i32 %local_laplacian.extent.1, -64
  %b784 = add i32 %94, %local_laplacian.min.1
  %local_laplacian.s0.v4.v4.base = tail call i32 @llvm.smin.i32(i32 %b784, i32 %a782)
  %a784 = add nsw i32 %a1120, -14
  %95 = add nsw i32 %local_laplacian.min.0, %local_laplacian.extent.0
  %b786 = add nsw i32 %95, -43
  %96 = tail call i32 @llvm.smin.i32(i32 %b786, i32 %a784)
  %97 = ashr i32 %96, 4
  %a783 = add nsw i32 %97, -1
  %a785 = add nsw i32 %a1120, -30
  %b787 = add nsw i32 %95, -83
  %98 = tail call i32 @llvm.smin.i32(i32 %b787, i32 %a785)
  %b785 = ashr i32 %98, 4
  %.not167 = icmp slt i32 %b785, %97
  %f129.v3.min_realized = select i1 %.not167, i32 %b785, i32 %a783
  %99 = ashr i32 %a784, 3
  %100 = add nsw i32 %95, 13
  %101 = ashr i32 %100, 3
  %102 = sub nsw i32 %101, %99
  %103 = and i32 %102, -8
  %a790 = add nsw i32 %103, %99
  %b792 = ashr i32 %b786, 3
  %104 = tail call i32 @llvm.smin.i32(i32 %b792, i32 %a790)
  %105 = add nsw i32 %104, 9
  %a789 = ashr i32 %105, 1
  %106 = ashr i32 %a785, 4
  %107 = add nsw i32 %95, 29
  %108 = ashr i32 %107, 4
  %109 = sub nsw i32 %108, %106
  %110 = and i32 %109, -8
  %a791 = add nsw i32 %110, %106
  %b793 = ashr i32 %b787, 4
  %111 = tail call i32 @llvm.smin.i32(i32 %b793, i32 %a791)
  %b791 = add nsw i32 %111, 7
  %112 = tail call i32 @llvm.smax.i32(i32 %a789, i32 %b791)
  %f129.v3.extent_realized.s = sub nsw i32 %112, %f129.v3.min_realized
  %113 = add nsw i32 %local_laplacian.s0.v4.v4.base, 2
  %t3087 = and i32 %113, 15
  %114 = add nuw nsw i32 %t3087, 139
  %115 = lshr i32 %114, 4
  %116 = zext i32 %115 to i64
  %117 = add nsw i32 %f129.v3.extent_realized.s, 1
  %118 = zext i32 %117 to i64
  %119 = shl nuw nsw i64 %118, 2
  %120 = mul nuw nsw i64 %119, %116
  %121 = icmp ult i64 %120, 2147483648
  br i1 %92, label %true_bb, label %false_bb

true_bb:                                          ; preds = %entry
  %122 = ashr i32 %102, 3
  %123 = ashr i32 %109, 3
  br i1 %121, label %"assert succeeded", label %"assert failed", !prof !5

false_bb:                                         ; preds = %entry
  %124 = lshr i32 %102, 3
  %125 = lshr i32 %109, 3
  br i1 %121, label %"assert succeeded113", label %"assert failed112", !prof !5

"assert failed":                                  ; preds = %true_bb
  %126 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.28, i64 %120, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded":                               ; preds = %true_bb
  %127 = add nuw nsw i64 %120, 4
  %128 = tail call ptr @halide_malloc(ptr %__user_context, i64 %127)
  %.not97 = icmp eq ptr %128, null
  br i1 %.not97, label %"assert failed1", label %"assert succeeded2", !prof !4

destructor_block.thread:                          ; preds = %if.then.i256, %"assert failed73", %"assert failed17", %"assert failed15", %"assert failed13", %"assert failed11", %"assert failed9", %"assert failed7", %"assert failed5", %"assert failed3", %"assert failed1", %"assert failed", %if.then.i271, %"assert failed137", %"assert failed135", %"assert failed129", %"assert failed127", %"assert failed121", %"assert failed119", %"assert failed114", %"assert failed112"
  %.029.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ %9108, %"assert failed135" ], [ %9108, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i256 ]
  %.028.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ %9069, %"assert failed127" ], [ %9069, %"assert failed129" ], [ %9069, %"assert failed135" ], [ %9069, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i256 ]
  %.027.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ %9046, %"assert failed119" ], [ %9046, %"assert failed121" ], [ %9046, %"assert failed127" ], [ %9046, %"assert failed129" ], [ %9046, %"assert failed135" ], [ %9046, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i256 ]
  %.024.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ %222, %"assert failed15" ], [ %222, %"assert failed17" ], [ %222, %"assert failed73" ], [ null, %if.then.i256 ]
  %.023.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ %193, %"assert failed11" ], [ %193, %"assert failed13" ], [ %193, %"assert failed15" ], [ %193, %"assert failed17" ], [ %193, %"assert failed73" ], [ null, %if.then.i256 ]
  %.022.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ %154, %"assert failed7" ], [ %154, %"assert failed9" ], [ %154, %"assert failed11" ], [ %154, %"assert failed13" ], [ %154, %"assert failed15" ], [ %154, %"assert failed17" ], [ %154, %"assert failed73" ], [ null, %if.then.i256 ]
  %.0.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i271 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ %128, %"assert failed3" ], [ %128, %"assert failed5" ], [ %128, %"assert failed7" ], [ %128, %"assert failed9" ], [ %128, %"assert failed11" ], [ %128, %"assert failed13" ], [ %128, %"assert failed15" ], [ %128, %"assert failed17" ], [ %128, %"assert failed73" ], [ null, %if.then.i256 ]
  %.ph = phi i32 [ %9044, %"assert failed112" ], [ %9047, %"assert failed114" ], [ %9067, %"assert failed119" ], [ %9070, %"assert failed121" ], [ %9106, %"assert failed127" ], [ %9109, %"assert failed129" ], [ %9135, %"assert failed135" ], [ %9138, %"assert failed137" ], [ 0, %if.then.i271 ], [ %126, %"assert failed" ], [ %132, %"assert failed1" ], [ %152, %"assert failed3" ], [ %155, %"assert failed5" ], [ %191, %"assert failed7" ], [ %194, %"assert failed9" ], [ %220, %"assert failed11" ], [ %223, %"assert failed13" ], [ %2524, %"assert failed15" ], [ %2527, %"assert failed17" ], [ %7742, %"assert failed73" ], [ 0, %if.then.i256 ]
  %.not185 = icmp eq i32 %.ph, 0
  br label %call_destructor.exit206

destructor_block:                                 ; preds = %"assert failed186", %"assert failed184"
  %129 = phi i32 [ %11511, %"assert failed186" ], [ %11509, %"assert failed184" ]
  %.not = icmp eq i32 %129, 0
  br i1 %.not, label %call_destructor.exit251, label %if.then.i205

if.then.i205:                                     ; preds = %destructor_block
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9137) #7
  br label %call_destructor.exit206

call_destructor.exit206:                          ; preds = %destructor_block.thread, %if.then.i205
  %.not195 = phi i1 [ %.not185, %destructor_block.thread ], [ false, %if.then.i205 ]
  %130 = phi i32 [ %.ph, %destructor_block.thread ], [ %129, %if.then.i205 ]
  %.0194 = phi ptr [ %.0.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.022193 = phi ptr [ %.022.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.023192 = phi ptr [ %.023.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.024191 = phi ptr [ %.024.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.027190 = phi ptr [ %.027.ph, %destructor_block.thread ], [ %9046, %if.then.i205 ]
  %.028189 = phi ptr [ %.028.ph, %destructor_block.thread ], [ %9069, %if.then.i205 ]
  %.029188 = phi ptr [ %.029.ph, %destructor_block.thread ], [ %9108, %if.then.i205 ]
  %tobool.i207 = icmp eq ptr %.029188, null
  %brmerge.i209 = or i1 %.not195, %tobool.i207
  br i1 %brmerge.i209, label %call_destructor.exit211, label %if.then.i210

if.then.i210:                                     ; preds = %call_destructor.exit206
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.029188) #7
  br label %call_destructor.exit211

call_destructor.exit211:                          ; preds = %if.then.i210, %call_destructor.exit206
  %tobool.i212 = icmp eq ptr %.028189, null
  %brmerge.i214 = or i1 %.not195, %tobool.i212
  br i1 %brmerge.i214, label %call_destructor.exit216, label %if.then.i215

if.then.i215:                                     ; preds = %call_destructor.exit211
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.028189) #7
  br label %call_destructor.exit216

call_destructor.exit216:                          ; preds = %if.then.i215, %call_destructor.exit211
  %tobool.i217 = icmp eq ptr %.027190, null
  %brmerge.i219 = or i1 %.not195, %tobool.i217
  br i1 %brmerge.i219, label %call_destructor.exit231, label %if.then.i220

if.then.i220:                                     ; preds = %call_destructor.exit216
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.027190) #7
  br label %call_destructor.exit231

call_destructor.exit231:                          ; preds = %if.then.i220, %call_destructor.exit216
  %tobool.i232 = icmp eq ptr %.024191, null
  %brmerge.i234 = or i1 %.not195, %tobool.i232
  br i1 %brmerge.i234, label %call_destructor.exit236, label %if.then.i235

if.then.i235:                                     ; preds = %call_destructor.exit231
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.024191) #7
  br label %call_destructor.exit236

call_destructor.exit236:                          ; preds = %if.then.i235, %call_destructor.exit231
  %tobool.i237 = icmp eq ptr %.023192, null
  %brmerge.i239 = or i1 %.not195, %tobool.i237
  br i1 %brmerge.i239, label %call_destructor.exit241, label %if.then.i240

if.then.i240:                                     ; preds = %call_destructor.exit236
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.023192) #7
  br label %call_destructor.exit241

call_destructor.exit241:                          ; preds = %if.then.i240, %call_destructor.exit236
  %tobool.i242 = icmp eq ptr %.022193, null
  %brmerge.i244 = or i1 %.not195, %tobool.i242
  br i1 %brmerge.i244, label %call_destructor.exit246, label %if.then.i245

if.then.i245:                                     ; preds = %call_destructor.exit241
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.022193) #7
  br label %call_destructor.exit246

call_destructor.exit246:                          ; preds = %if.then.i245, %call_destructor.exit241
  %tobool.i247 = icmp eq ptr %.0194, null
  %brmerge.i249 = or i1 %.not195, %tobool.i247
  br i1 %brmerge.i249, label %call_destructor.exit251, label %if.then.i250

if.then.i250:                                     ; preds = %call_destructor.exit246
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.0194) #7
  br label %call_destructor.exit251

call_destructor.exit251:                          ; preds = %destructor_block, %if.then.i250, %call_destructor.exit246
  %131 = phi i32 [ %130, %if.then.i250 ], [ %130, %call_destructor.exit246 ], [ 0, %destructor_block ]
  ret i32 %131

"assert failed1":                                 ; preds = %"assert succeeded"
  %132 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded2":                              ; preds = %"assert succeeded"
  %a793 = add nsw i32 %a1120, -6
  %b795 = add nsw i32 %95, -23
  %133 = tail call i32 @llvm.smin.i32(i32 %b795, i32 %a793)
  %134 = ashr i32 %133, 3
  %a792 = add nsw i32 %134, -1
  %b794 = ashr i32 %96, 3
  %.not168 = icmp slt i32 %b794, %134
  %f128.v3.min_realized = select i1 %.not168, i32 %b794, i32 %a792
  %135 = ashr i32 %a793, 2
  %136 = add nsw i32 %95, 5
  %137 = ashr i32 %136, 2
  %138 = sub nsw i32 %137, %135
  %139 = ashr i32 %138, 3
  %140 = and i32 %138, -8
  %a799 = add nsw i32 %140, %135
  %b801 = ashr i32 %b795, 2
  %141 = tail call i32 @llvm.smin.i32(i32 %b801, i32 %a799)
  %142 = add nsw i32 %141, 9
  %a798 = ashr i32 %142, 1
  %b800 = add nsw i32 %104, 7
  %143 = tail call i32 @llvm.smax.i32(i32 %a798, i32 %b800)
  %f128.v3.extent_realized.s = sub nsw i32 %143, %f128.v3.min_realized
  %t3088 = and i32 %113, 7
  %144 = add nuw nsw i32 %t3088, 99
  %145 = lshr i32 %144, 3
  %146 = zext i32 %145 to i64
  %147 = add nsw i32 %f128.v3.extent_realized.s, 1
  %148 = zext i32 %147 to i64
  %149 = shl nuw nsw i64 %148, 2
  %150 = mul nuw nsw i64 %149, %146
  %151 = icmp ult i64 %150, 2147483648
  br i1 %151, label %"assert succeeded4", label %"assert failed3", !prof !5

"assert failed3":                                 ; preds = %"assert succeeded2"
  %152 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.29, i64 %150, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded4":                              ; preds = %"assert succeeded2"
  %153 = add nuw nsw i64 %150, 4
  %154 = tail call ptr @halide_malloc(ptr %__user_context, i64 %153)
  %.not98 = icmp eq ptr %154, null
  br i1 %.not98, label %"assert failed5", label %"assert succeeded6", !prof !4

"assert failed5":                                 ; preds = %"assert succeeded4"
  %155 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded6":                              ; preds = %"assert succeeded4"
  %156 = ashr i32 %local_laplacian.s0.v4.v4.base, 1
  %a802 = add nsw i32 %156, -1
  %157 = add nsw i32 %local_laplacian.s0.v4.v4.base, 3
  %b804 = ashr i32 %157, 1
  %.not169 = icmp slt i32 %b804, %156
  %158 = select i1 %.not169, i32 %b804, i32 %a802
  %159 = ashr i32 %158, 1
  %a801 = add nsw i32 %159, -1
  %160 = add nsw i32 %local_laplacian.s0.v4.v4.base, -6
  %b803 = ashr i32 %160, 2
  %.not170 = icmp slt i32 %b803, %159
  %f127.v4.min_realized = select i1 %.not170, i32 %b803, i32 %a801
  %161 = ashr i32 %a1120, 1
  %a804 = add nsw i32 %161, -1
  %162 = add nsw i32 %95, -13
  %b806 = ashr i32 %162, 1
  %.not171 = icmp slt i32 %b806, %161
  %163 = select i1 %.not171, i32 %b806, i32 %a804
  %164 = ashr i32 %163, 1
  %a803 = add nsw i32 %164, -1
  %b805 = ashr i32 %133, 2
  %.not172 = icmp slt i32 %b805, %164
  %f127.v3.min_realized = select i1 %.not172, i32 %b805, i32 %a803
  %165 = add nsw i32 %95, 1
  %166 = ashr i32 %165, 1
  %167 = sub nsw i32 %166, %161
  %168 = add nsw i32 %167, 1
  %169 = and i32 %168, -8
  %170 = add nsw i32 %169, %161
  %a810 = add nsw i32 %170, -1
  %.not173 = icmp slt i32 %b806, %170
  %171 = select i1 %.not173, i32 %b806, i32 %a810
  %172 = add nsw i32 %171, 9
  %a809 = ashr i32 %172, 1
  %b811 = add nsw i32 %141, 7
  %173 = tail call i32 @llvm.smax.i32(i32 %a809, i32 %b811)
  %f127.v3.extent_realized.s = sub nsw i32 %173, %f127.v3.min_realized
  %174 = add nsw i32 %local_laplacian.s0.v4.v4.base, 69
  %175 = ashr i32 %174, 2
  %t3089 = add nsw i32 %175, 1
  %176 = sub nsw i32 %t3089, %f127.v4.min_realized
  %177 = zext i32 %176 to i64
  %178 = add nsw i32 %f127.v3.extent_realized.s, 1
  %179 = zext i32 %178 to i64
  %180 = shl nuw nsw i64 %179, 2
  %181 = mul i64 %180, %177
  %182 = icmp ult i64 %181, 2147483648
  %183 = and i64 %180, 4294967292
  %184 = mul nuw i64 %183, %177
  %185 = lshr i64 %184, 32
  %186 = lshr i64 %179, 30
  %187 = mul nuw nsw i64 %186, %177
  %188 = add nuw nsw i64 %185, %187
  %189 = icmp ult i64 %188, 4294967296
  %190 = and i1 %182, %189
  br i1 %190, label %"assert succeeded8", label %"assert failed7", !prof !5

"assert failed7":                                 ; preds = %"assert succeeded6"
  %191 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.30, i64 %181, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded8":                              ; preds = %"assert succeeded6"
  %192 = add nuw nsw i64 %181, 4
  %193 = tail call ptr @halide_malloc(ptr %__user_context, i64 %192)
  %.not198 = icmp eq ptr %193, null
  br i1 %.not198, label %"assert failed9", label %"assert succeeded10", !prof !4

"assert failed9":                                 ; preds = %"assert succeeded8"
  %194 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded10":                             ; preds = %"assert succeeded8"
  %b816 = add nsw i32 %95, -8
  %195 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1120)
  %196 = ashr i32 %195, 1
  %a813 = add nsw i32 %196, -1
  %.not174 = icmp slt i32 %163, %196
  %f126.v3.min_realized = select i1 %.not174, i32 %163, i32 %a813
  %197 = sub nsw i32 %95, %a1120
  %198 = add nsw i32 %197, -1
  %199 = and i32 %198, -8
  %a820 = add nsw i32 %199, %a1120
  %200 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a820)
  %201 = add nsw i32 %200, 9
  %a819 = ashr i32 %201, 1
  %b821 = add nsw i32 %171, 7
  %202 = tail call i32 @llvm.smax.i32(i32 %a819, i32 %b821)
  %f126.v3.extent_realized.s = sub nsw i32 %202, %f126.v3.min_realized
  %203 = add nsw i32 %local_laplacian.s0.v4.v4.base, 65
  %204 = ashr i32 %203, 1
  %t3090 = add nsw i32 %204, 1
  %205 = sub i32 %t3090, %158
  %206 = zext i32 %205 to i64
  %207 = add nsw i32 %f126.v3.extent_realized.s, 1
  %208 = zext i32 %207 to i64
  %209 = shl nuw nsw i64 %208, 2
  %210 = mul i64 %209, %206
  %211 = icmp ult i64 %210, 2147483648
  %212 = and i64 %209, 4294967292
  %213 = mul nuw i64 %212, %206
  %214 = lshr i64 %213, 32
  %215 = lshr i64 %208, 30
  %216 = mul nuw nsw i64 %215, %206
  %217 = add nuw nsw i64 %214, %216
  %218 = icmp ult i64 %217, 4294967296
  %219 = and i1 %211, %218
  br i1 %219, label %"assert succeeded12", label %"assert failed11", !prof !5

"assert failed11":                                ; preds = %"assert succeeded10"
  %220 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.31, i64 %210, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded12":                             ; preds = %"assert succeeded10"
  %221 = add nuw nsw i64 %210, 4
  %222 = tail call ptr @halide_malloc(ptr %__user_context, i64 %221)
  %.not199 = icmp eq ptr %222, null
  br i1 %.not199, label %"assert failed13", label %"produce f129", !prof !4

"assert failed13":                                ; preds = %"assert succeeded12"
  %223 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f129":                                   ; preds = %"assert succeeded12"
  %224 = add nsw i32 %local_laplacian.s0.v4.v4.base, -30
  %225 = ashr i32 %224, 4
  %226 = add nsw i32 %123, 1
  %227 = icmp sgt i32 %109, -1
  %228 = add i32 %f75.v3.extent_realized.s, 1
  %229 = add nsw i32 %levels, -1
  %230 = sitofp i32 %229 to float
  %231 = insertelement <4 x float> undef, float %230, i64 0
  %232 = shufflevector <4 x float> %231, <4 x float> undef, <4 x i32> zeroinitializer
  %233 = add nsw i32 %levels, -2
  %234 = insertelement <4 x i32> undef, i32 %233, i64 0
  %b825 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> zeroinitializer
  %235 = add nsw i32 %f130.v3.extent_realized.s, 1
  %236 = add nsw i32 %local_laplacian.min.1.required, -62
  %237 = ashr i32 %236, 5
  %238 = xor i32 %237, -1
  %239 = tail call i32 @llvm.smax.i32(i32 %a1139, i32 0)
  %240 = insertelement <4 x i32> undef, i32 %239, i64 0
  %241 = shufflevector <4 x i32> %240, <4 x i32> undef, <4 x i32> zeroinitializer
  %242 = add nsw i32 %f8.v3.extent_realized.s, 1
  %243 = xor i32 %f8.v4.min_realized, -1
  %244 = insertelement <4 x i32> undef, i32 %f8.stride.2, i64 0
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> zeroinitializer
  %246 = add nsw i32 %f7.v3.extent_realized.s, 1
  %247 = insertelement <4 x i32> undef, i32 %246, i64 0
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> zeroinitializer
  %249 = sext i32 %f129.v3.extent_realized.s to i64
  %250 = add nsw i64 %249, 1
  %251 = sext i32 %225 to i64
  %narrow275 = sub nsw i32 0, %f129.v3.min_realized
  %.neg218 = sext i32 %narrow275 to i64
  br i1 %227, label %"for f129.s0.v4.us.preheader", label %"produce f128", !prof !5

"for f129.s0.v4.us.preheader":                    ; preds = %"produce f129"
  %252 = add nuw nsw i32 %t3087, 76
  %253 = lshr i32 %252, 4
  %254 = add nsw i32 %253, %225
  %sext311 = sext i32 %254 to i64
  br label %"for f129.s0.v4.us"

"for f129.s0.v4.us":                              ; preds = %"for f129.s0.v4.us.preheader", %"end for f129.s0.v3.v3.loopexit.us"
  %indvars.iv309 = phi i64 [ %251, %"for f129.s0.v4.us.preheader" ], [ %indvars.iv.next310, %"end for f129.s0.v3.v3.loopexit.us" ]
  %indvars312 = trunc i64 %indvars.iv309 to i32
  %255 = shl i32 %indvars312, 1
  %256 = and i32 %255, 2
  %257 = ashr i32 %indvars312, 1
  %t2241.us = add nsw i32 %256, %257
  %258 = trunc i64 %indvars.iv309 to i32
  %259 = sub i32 %258, %f75.v4.min_realized
  %260 = mul i32 %259, %228
  %261 = sub i32 %260, %f75.v3.min_realized
  %262 = add nsw i32 %t2241.us, %238
  %t2248.us = mul nsw i32 %262, %235
  %263 = sub nsw i32 %257, %237
  %t2250.us = mul nsw i32 %263, %235
  %264 = add i32 %t2241.us, %243
  %t2255.us = mul nsw i32 %264, %242
  %265 = sub nsw i32 %257, %f8.v4.min_realized
  %t2260.us = mul nsw i32 %265, %242
  %266 = sext i32 %t2250.us to i64
  %267 = add nsw i64 %266, -1
  %268 = sext i32 %t2248.us to i64
  %269 = add nsw i64 %268, -1
  %270 = sub nsw i64 %indvars.iv309, %251
  %271 = mul nsw i64 %270, %250
  %272 = add nsw i64 %271, %.neg218
  %273 = trunc i64 %indvars.iv309 to i32
  %274 = sub i32 %273, %f7.v4.min_realized
  %275 = mul i32 %274, %f7.stride.1
  br label %"for f129.s0.v3.v3.us"

"for f129.s0.v3.v3.us":                           ; preds = %"for f129.s0.v4.us", %"for f129.s0.v3.v3.us"
  %lsr.iv422.us = phi i32 [ %lsr.iv.next423.us, %"for f129.s0.v3.v3.us" ], [ 0, %"for f129.s0.v4.us" ]
  %lsr.iv420.us = phi i32 [ %lsr.iv.next421.us, %"for f129.s0.v3.v3.us" ], [ %226, %"for f129.s0.v4.us" ]
  %276 = add i32 %lsr.iv422.us, %106
  %f129.s0.v3.v363.base.us = tail call i32 @llvm.smin.i32(i32 %b793, i32 %276)
  %277 = shl i32 %f129.s0.v3.v363.base.us, 1
  %278 = and i32 %277, 2
  %279 = ashr i32 %f129.s0.v3.v363.base.us, 1
  %t2242.us = add nsw i32 %278, %279
  %t2243.us = add i32 %261, %f129.s0.v3.v363.base.us
  %280 = sext i32 %t2243.us to i64
  %281 = getelementptr inbounds float, ptr %f75.host, i64 %280
  %282 = load <4 x float>, ptr %281, align 4, !tbaa !13
  %283 = add nsw i64 %280, 4
  %284 = getelementptr inbounds float, ptr %f75.host, i64 %283
  %285 = load <4 x float>, ptr %284, align 4, !tbaa !13
  %286 = shufflevector <4 x float> %282, <4 x float> %285, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2244.us = fmul <4 x float> %232, %286
  %a823.us = fptosi <4 x float> %t2244.us to <4 x i32>
  %a826.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a823.us)
  %287 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a826.us, <4 x i32> zeroinitializer)
  %288 = sitofp <4 x i32> %287 to <4 x float>
  %t2246.us = fsub <4 x float> %t2244.us, %288
  %289 = sub nsw i32 %f129.s0.v3.v363.base.us, %f7.v3.min_realized
  %t2251.us = add nsw i32 %289, %275
  %t2253.us = sub nsw <4 x i32> %287, %241
  %t2257.us = mul nsw <4 x i32> %t2253.us, %245
  %290 = add nsw <4 x i32> %t2253.us, <i32 1, i32 1, i32 1, i32 1>
  %t2263.us = mul nsw <4 x i32> %290, %245
  %291 = add nsw i32 %f129.s0.v3.v363.base.us, 1
  %292 = shl i32 %291, 1
  %293 = and i32 %292, 2
  %294 = ashr i32 %291, 1
  %t2264.us = add nsw i32 %293, %294
  %295 = shufflevector <4 x float> %282, <4 x float> %285, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2265.us = fmul <4 x float> %232, %295
  %a827.us = fptosi <4 x float> %t2265.us to <4 x i32>
  %a830.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a827.us)
  %296 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a830.us, <4 x i32> zeroinitializer)
  %297 = sitofp <4 x i32> %296 to <4 x float>
  %t2267.us = fsub <4 x float> %t2265.us, %297
  %t2270.us = sub nsw <4 x i32> %296, %241
  %t2273.us = mul nsw <4 x i32> %t2270.us, %245
  %298 = add nsw <4 x i32> %t2270.us, <i32 1, i32 1, i32 1, i32 1>
  %t2278.us = mul nsw <4 x i32> %298, %245
  %299 = sub nsw i32 %279, %f8.v3.min_realized
  %300 = add nsw i32 %299, %t2260.us
  %301 = insertelement <4 x i32> undef, i32 %300, i64 0
  %302 = shufflevector <4 x i32> %301, <4 x i32> undef, <4 x i32> zeroinitializer
  %303 = add nsw <4 x i32> %302, <i32 0, i32 1, i32 2, i32 3>
  %304 = add nsw <4 x i32> %t2263.us, %303
  %305 = sext <4 x i32> %304 to <4 x i64>
  %306 = extractelement <4 x i64> %305, i64 0
  %307 = getelementptr inbounds float, ptr %f8.host, i64 %306
  %308 = load float, ptr %307, align 4, !tbaa !35
  %309 = insertelement <4 x float> undef, float %308, i64 0
  %310 = extractelement <4 x i64> %305, i64 1
  %311 = getelementptr inbounds float, ptr %f8.host, i64 %310
  %312 = load float, ptr %311, align 4, !tbaa !35
  %313 = insertelement <4 x float> %309, float %312, i64 1
  %314 = extractelement <4 x i64> %305, i64 2
  %315 = getelementptr inbounds float, ptr %f8.host, i64 %314
  %316 = load float, ptr %315, align 4, !tbaa !35
  %317 = insertelement <4 x float> %313, float %316, i64 2
  %318 = extractelement <4 x i64> %305, i64 3
  %319 = getelementptr inbounds float, ptr %f8.host, i64 %318
  %320 = load float, ptr %319, align 4, !tbaa !35
  %321 = insertelement <4 x float> %317, float %320, i64 3
  %322 = fmul <4 x float> %321, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %323 = sub nsw i32 %t2242.us, %f8.v3.min_realized
  %324 = add nsw i32 %323, %t2260.us
  %325 = insertelement <4 x i32> undef, i32 %324, i64 0
  %326 = shufflevector <4 x i32> %325, <4 x i32> undef, <4 x i32> zeroinitializer
  %327 = add <4 x i32> %326, <i32 -1, i32 0, i32 1, i32 2>
  %328 = add <4 x i32> %327, %t2263.us
  %329 = sext <4 x i32> %328 to <4 x i64>
  %330 = extractelement <4 x i64> %329, i64 0
  %331 = getelementptr inbounds float, ptr %f8.host, i64 %330
  %332 = load float, ptr %331, align 4, !tbaa !35
  %333 = insertelement <4 x float> undef, float %332, i64 0
  %334 = extractelement <4 x i64> %329, i64 1
  %335 = getelementptr inbounds float, ptr %f8.host, i64 %334
  %336 = load float, ptr %335, align 4, !tbaa !35
  %337 = insertelement <4 x float> %333, float %336, i64 1
  %338 = extractelement <4 x i64> %329, i64 2
  %339 = getelementptr inbounds float, ptr %f8.host, i64 %338
  %340 = load float, ptr %339, align 4, !tbaa !35
  %341 = insertelement <4 x float> %337, float %340, i64 2
  %342 = extractelement <4 x i64> %329, i64 3
  %343 = getelementptr inbounds float, ptr %f8.host, i64 %342
  %344 = load float, ptr %343, align 4, !tbaa !35
  %345 = insertelement <4 x float> %341, float %344, i64 3
  %346 = fmul <4 x float> %345, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %347 = fadd <4 x float> %322, %346
  %348 = fmul <4 x float> %347, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %349 = add nsw i32 %299, %t2255.us
  %350 = insertelement <4 x i32> undef, i32 %349, i64 0
  %351 = shufflevector <4 x i32> %350, <4 x i32> undef, <4 x i32> zeroinitializer
  %352 = add nsw <4 x i32> %351, <i32 0, i32 1, i32 2, i32 3>
  %353 = add nsw <4 x i32> %t2263.us, %352
  %354 = sext <4 x i32> %353 to <4 x i64>
  %355 = extractelement <4 x i64> %354, i64 0
  %356 = getelementptr inbounds float, ptr %f8.host, i64 %355
  %357 = load float, ptr %356, align 4, !tbaa !35
  %358 = insertelement <4 x float> undef, float %357, i64 0
  %359 = extractelement <4 x i64> %354, i64 1
  %360 = getelementptr inbounds float, ptr %f8.host, i64 %359
  %361 = load float, ptr %360, align 4, !tbaa !35
  %362 = insertelement <4 x float> %358, float %361, i64 1
  %363 = extractelement <4 x i64> %354, i64 2
  %364 = getelementptr inbounds float, ptr %f8.host, i64 %363
  %365 = load float, ptr %364, align 4, !tbaa !35
  %366 = insertelement <4 x float> %362, float %365, i64 2
  %367 = extractelement <4 x i64> %354, i64 3
  %368 = getelementptr inbounds float, ptr %f8.host, i64 %367
  %369 = load float, ptr %368, align 4, !tbaa !35
  %370 = insertelement <4 x float> %366, float %369, i64 3
  %371 = fmul <4 x float> %370, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %372 = add nsw i32 %323, %t2255.us
  %373 = insertelement <4 x i32> undef, i32 %372, i64 0
  %374 = shufflevector <4 x i32> %373, <4 x i32> undef, <4 x i32> zeroinitializer
  %375 = add <4 x i32> %374, <i32 -1, i32 0, i32 1, i32 2>
  %376 = add <4 x i32> %375, %t2263.us
  %377 = sext <4 x i32> %376 to <4 x i64>
  %378 = extractelement <4 x i64> %377, i64 0
  %379 = getelementptr inbounds float, ptr %f8.host, i64 %378
  %380 = load float, ptr %379, align 4, !tbaa !35
  %381 = insertelement <4 x float> undef, float %380, i64 0
  %382 = extractelement <4 x i64> %377, i64 1
  %383 = getelementptr inbounds float, ptr %f8.host, i64 %382
  %384 = load float, ptr %383, align 4, !tbaa !35
  %385 = insertelement <4 x float> %381, float %384, i64 1
  %386 = extractelement <4 x i64> %377, i64 2
  %387 = getelementptr inbounds float, ptr %f8.host, i64 %386
  %388 = load float, ptr %387, align 4, !tbaa !35
  %389 = insertelement <4 x float> %385, float %388, i64 2
  %390 = extractelement <4 x i64> %377, i64 3
  %391 = getelementptr inbounds float, ptr %f8.host, i64 %390
  %392 = load float, ptr %391, align 4, !tbaa !35
  %393 = insertelement <4 x float> %389, float %392, i64 3
  %394 = fmul <4 x float> %393, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %395 = fadd <4 x float> %371, %394
  %396 = fmul <4 x float> %395, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %397 = fadd <4 x float> %348, %396
  %398 = mul nsw <4 x i32> %290, %248
  %399 = insertelement <4 x i32> undef, i32 %t2251.us, i64 0
  %400 = shufflevector <4 x i32> %399, <4 x i32> undef, <4 x i32> zeroinitializer
  %401 = add nsw <4 x i32> %400, <i32 0, i32 2, i32 4, i32 6>
  %402 = add nsw <4 x i32> %398, %401
  %403 = sext <4 x i32> %402 to <4 x i64>
  %404 = extractelement <4 x i64> %403, i64 0
  %405 = getelementptr inbounds float, ptr %f7.host, i64 %404
  %406 = load float, ptr %405, align 4, !tbaa !53
  %407 = insertelement <4 x float> undef, float %406, i64 0
  %408 = extractelement <4 x i64> %403, i64 1
  %409 = getelementptr inbounds float, ptr %f7.host, i64 %408
  %410 = load float, ptr %409, align 4, !tbaa !53
  %411 = insertelement <4 x float> %407, float %410, i64 1
  %412 = extractelement <4 x i64> %403, i64 2
  %413 = getelementptr inbounds float, ptr %f7.host, i64 %412
  %414 = load float, ptr %413, align 4, !tbaa !53
  %415 = insertelement <4 x float> %411, float %414, i64 2
  %416 = extractelement <4 x i64> %403, i64 3
  %417 = getelementptr inbounds float, ptr %f7.host, i64 %416
  %418 = load float, ptr %417, align 4, !tbaa !53
  %419 = insertelement <4 x float> %415, float %418, i64 3
  %420 = fsub <4 x float> %419, %397
  %421 = fmul <4 x float> %t2246.us, %420
  %422 = add nsw <4 x i32> %t2257.us, %303
  %423 = sext <4 x i32> %422 to <4 x i64>
  %424 = extractelement <4 x i64> %423, i64 0
  %425 = getelementptr inbounds float, ptr %f8.host, i64 %424
  %426 = load float, ptr %425, align 4, !tbaa !35
  %427 = insertelement <4 x float> undef, float %426, i64 0
  %428 = extractelement <4 x i64> %423, i64 1
  %429 = getelementptr inbounds float, ptr %f8.host, i64 %428
  %430 = load float, ptr %429, align 4, !tbaa !35
  %431 = insertelement <4 x float> %427, float %430, i64 1
  %432 = extractelement <4 x i64> %423, i64 2
  %433 = getelementptr inbounds float, ptr %f8.host, i64 %432
  %434 = load float, ptr %433, align 4, !tbaa !35
  %435 = insertelement <4 x float> %431, float %434, i64 2
  %436 = extractelement <4 x i64> %423, i64 3
  %437 = getelementptr inbounds float, ptr %f8.host, i64 %436
  %438 = load float, ptr %437, align 4, !tbaa !35
  %439 = insertelement <4 x float> %435, float %438, i64 3
  %440 = fmul <4 x float> %439, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %441 = add <4 x i32> %t2257.us, %326
  %442 = add <4 x i32> %441, <i32 -1, i32 0, i32 1, i32 2>
  %443 = sext <4 x i32> %442 to <4 x i64>
  %444 = extractelement <4 x i64> %443, i64 0
  %445 = getelementptr inbounds float, ptr %f8.host, i64 %444
  %446 = load float, ptr %445, align 4, !tbaa !35
  %447 = insertelement <4 x float> undef, float %446, i64 0
  %448 = extractelement <4 x i64> %443, i64 1
  %449 = getelementptr inbounds float, ptr %f8.host, i64 %448
  %450 = load float, ptr %449, align 4, !tbaa !35
  %451 = insertelement <4 x float> %447, float %450, i64 1
  %452 = extractelement <4 x i64> %443, i64 2
  %453 = getelementptr inbounds float, ptr %f8.host, i64 %452
  %454 = load float, ptr %453, align 4, !tbaa !35
  %455 = insertelement <4 x float> %451, float %454, i64 2
  %456 = extractelement <4 x i64> %443, i64 3
  %457 = getelementptr inbounds float, ptr %f8.host, i64 %456
  %458 = load float, ptr %457, align 4, !tbaa !35
  %459 = insertelement <4 x float> %455, float %458, i64 3
  %460 = fmul <4 x float> %459, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %461 = fadd <4 x float> %440, %460
  %462 = fmul <4 x float> %461, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %463 = add nsw <4 x i32> %t2257.us, %352
  %464 = sext <4 x i32> %463 to <4 x i64>
  %465 = extractelement <4 x i64> %464, i64 0
  %466 = getelementptr inbounds float, ptr %f8.host, i64 %465
  %467 = load float, ptr %466, align 4, !tbaa !35
  %468 = insertelement <4 x float> undef, float %467, i64 0
  %469 = extractelement <4 x i64> %464, i64 1
  %470 = getelementptr inbounds float, ptr %f8.host, i64 %469
  %471 = load float, ptr %470, align 4, !tbaa !35
  %472 = insertelement <4 x float> %468, float %471, i64 1
  %473 = extractelement <4 x i64> %464, i64 2
  %474 = getelementptr inbounds float, ptr %f8.host, i64 %473
  %475 = load float, ptr %474, align 4, !tbaa !35
  %476 = insertelement <4 x float> %472, float %475, i64 2
  %477 = extractelement <4 x i64> %464, i64 3
  %478 = getelementptr inbounds float, ptr %f8.host, i64 %477
  %479 = load float, ptr %478, align 4, !tbaa !35
  %480 = insertelement <4 x float> %476, float %479, i64 3
  %481 = fmul <4 x float> %480, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %482 = add <4 x i32> %t2257.us, %374
  %483 = add <4 x i32> %482, <i32 -1, i32 0, i32 1, i32 2>
  %484 = sext <4 x i32> %483 to <4 x i64>
  %485 = extractelement <4 x i64> %484, i64 0
  %486 = getelementptr inbounds float, ptr %f8.host, i64 %485
  %487 = load float, ptr %486, align 4, !tbaa !35
  %488 = insertelement <4 x float> undef, float %487, i64 0
  %489 = extractelement <4 x i64> %484, i64 1
  %490 = getelementptr inbounds float, ptr %f8.host, i64 %489
  %491 = load float, ptr %490, align 4, !tbaa !35
  %492 = insertelement <4 x float> %488, float %491, i64 1
  %493 = extractelement <4 x i64> %484, i64 2
  %494 = getelementptr inbounds float, ptr %f8.host, i64 %493
  %495 = load float, ptr %494, align 4, !tbaa !35
  %496 = insertelement <4 x float> %492, float %495, i64 2
  %497 = extractelement <4 x i64> %484, i64 3
  %498 = getelementptr inbounds float, ptr %f8.host, i64 %497
  %499 = load float, ptr %498, align 4, !tbaa !35
  %500 = insertelement <4 x float> %496, float %499, i64 3
  %501 = fmul <4 x float> %500, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %502 = fadd <4 x float> %481, %501
  %503 = fmul <4 x float> %502, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %504 = fadd <4 x float> %462, %503
  %505 = mul nsw <4 x i32> %t2253.us, %248
  %506 = add nsw <4 x i32> %505, %401
  %507 = sext <4 x i32> %506 to <4 x i64>
  %508 = extractelement <4 x i64> %507, i64 0
  %509 = getelementptr inbounds float, ptr %f7.host, i64 %508
  %510 = load float, ptr %509, align 4, !tbaa !53
  %511 = insertelement <4 x float> undef, float %510, i64 0
  %512 = extractelement <4 x i64> %507, i64 1
  %513 = getelementptr inbounds float, ptr %f7.host, i64 %512
  %514 = load float, ptr %513, align 4, !tbaa !53
  %515 = insertelement <4 x float> %511, float %514, i64 1
  %516 = extractelement <4 x i64> %507, i64 2
  %517 = getelementptr inbounds float, ptr %f7.host, i64 %516
  %518 = load float, ptr %517, align 4, !tbaa !53
  %519 = insertelement <4 x float> %515, float %518, i64 2
  %520 = extractelement <4 x i64> %507, i64 3
  %521 = getelementptr inbounds float, ptr %f7.host, i64 %520
  %522 = load float, ptr %521, align 4, !tbaa !53
  %523 = insertelement <4 x float> %519, float %522, i64 3
  %524 = fsub <4 x float> %523, %504
  %525 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2246.us
  %526 = fmul <4 x float> %525, %524
  %527 = fadd <4 x float> %421, %526
  %528 = sext i32 %279 to i64
  %529 = sub nsw i64 %528, %4
  %530 = add nsw i64 %529, %266
  %531 = getelementptr inbounds float, ptr %f130.host, i64 %530
  %532 = load <4 x float>, ptr %531, align 4, !tbaa !37
  %533 = fmul <4 x float> %532, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %534 = sext i32 %t2242.us to i64
  %535 = sub nsw i64 %534, %4
  %536 = add nsw i64 %267, %535
  %537 = getelementptr inbounds float, ptr %f130.host, i64 %536
  %538 = load <4 x float>, ptr %537, align 4, !tbaa !37
  %539 = fmul <4 x float> %538, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %540 = fadd <4 x float> %533, %539
  %541 = fmul <4 x float> %540, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %542 = add nsw i64 %529, %268
  %543 = getelementptr inbounds float, ptr %f130.host, i64 %542
  %544 = load <4 x float>, ptr %543, align 4, !tbaa !37
  %545 = fmul <4 x float> %544, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %546 = add nsw i64 %269, %535
  %547 = getelementptr inbounds float, ptr %f130.host, i64 %546
  %548 = load <4 x float>, ptr %547, align 4, !tbaa !37
  %549 = fmul <4 x float> %548, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %550 = fadd <4 x float> %545, %549
  %551 = fmul <4 x float> %550, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %552 = fadd <4 x float> %541, %551
  %553 = fadd <4 x float> %527, %552
  %554 = sub nsw i32 %294, %f8.v3.min_realized
  %555 = add nsw i32 %554, %t2260.us
  %556 = insertelement <4 x i32> undef, i32 %555, i64 0
  %557 = shufflevector <4 x i32> %556, <4 x i32> undef, <4 x i32> zeroinitializer
  %558 = add nsw <4 x i32> %557, <i32 0, i32 1, i32 2, i32 3>
  %559 = add nsw <4 x i32> %t2278.us, %558
  %560 = sext <4 x i32> %559 to <4 x i64>
  %561 = extractelement <4 x i64> %560, i64 0
  %562 = getelementptr inbounds float, ptr %f8.host, i64 %561
  %563 = load float, ptr %562, align 4, !tbaa !35
  %564 = insertelement <4 x float> undef, float %563, i64 0
  %565 = extractelement <4 x i64> %560, i64 1
  %566 = getelementptr inbounds float, ptr %f8.host, i64 %565
  %567 = load float, ptr %566, align 4, !tbaa !35
  %568 = insertelement <4 x float> %564, float %567, i64 1
  %569 = extractelement <4 x i64> %560, i64 2
  %570 = getelementptr inbounds float, ptr %f8.host, i64 %569
  %571 = load float, ptr %570, align 4, !tbaa !35
  %572 = insertelement <4 x float> %568, float %571, i64 2
  %573 = extractelement <4 x i64> %560, i64 3
  %574 = getelementptr inbounds float, ptr %f8.host, i64 %573
  %575 = load float, ptr %574, align 4, !tbaa !35
  %576 = insertelement <4 x float> %572, float %575, i64 3
  %577 = fmul <4 x float> %576, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %578 = sub nsw i32 %t2264.us, %f8.v3.min_realized
  %579 = add nsw i32 %578, %t2260.us
  %580 = insertelement <4 x i32> undef, i32 %579, i64 0
  %581 = shufflevector <4 x i32> %580, <4 x i32> undef, <4 x i32> zeroinitializer
  %582 = add nsw <4 x i32> %581, <i32 0, i32 1, i32 2, i32 3>
  %583 = add <4 x i32> %t2278.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %584 = add <4 x i32> %583, %582
  %585 = sext <4 x i32> %584 to <4 x i64>
  %586 = extractelement <4 x i64> %585, i64 0
  %587 = getelementptr inbounds float, ptr %f8.host, i64 %586
  %588 = load float, ptr %587, align 4, !tbaa !35
  %589 = insertelement <4 x float> undef, float %588, i64 0
  %590 = extractelement <4 x i64> %585, i64 1
  %591 = getelementptr inbounds float, ptr %f8.host, i64 %590
  %592 = load float, ptr %591, align 4, !tbaa !35
  %593 = insertelement <4 x float> %589, float %592, i64 1
  %594 = extractelement <4 x i64> %585, i64 2
  %595 = getelementptr inbounds float, ptr %f8.host, i64 %594
  %596 = load float, ptr %595, align 4, !tbaa !35
  %597 = insertelement <4 x float> %593, float %596, i64 2
  %598 = extractelement <4 x i64> %585, i64 3
  %599 = getelementptr inbounds float, ptr %f8.host, i64 %598
  %600 = load float, ptr %599, align 4, !tbaa !35
  %601 = insertelement <4 x float> %597, float %600, i64 3
  %602 = fmul <4 x float> %601, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %603 = fadd <4 x float> %577, %602
  %604 = fmul <4 x float> %603, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %605 = add nsw i32 %554, %t2255.us
  %606 = insertelement <4 x i32> undef, i32 %605, i64 0
  %607 = shufflevector <4 x i32> %606, <4 x i32> undef, <4 x i32> zeroinitializer
  %608 = add nsw <4 x i32> %607, <i32 0, i32 1, i32 2, i32 3>
  %609 = add nsw <4 x i32> %t2278.us, %608
  %610 = sext <4 x i32> %609 to <4 x i64>
  %611 = extractelement <4 x i64> %610, i64 0
  %612 = getelementptr inbounds float, ptr %f8.host, i64 %611
  %613 = load float, ptr %612, align 4, !tbaa !35
  %614 = insertelement <4 x float> undef, float %613, i64 0
  %615 = extractelement <4 x i64> %610, i64 1
  %616 = getelementptr inbounds float, ptr %f8.host, i64 %615
  %617 = load float, ptr %616, align 4, !tbaa !35
  %618 = insertelement <4 x float> %614, float %617, i64 1
  %619 = extractelement <4 x i64> %610, i64 2
  %620 = getelementptr inbounds float, ptr %f8.host, i64 %619
  %621 = load float, ptr %620, align 4, !tbaa !35
  %622 = insertelement <4 x float> %618, float %621, i64 2
  %623 = extractelement <4 x i64> %610, i64 3
  %624 = getelementptr inbounds float, ptr %f8.host, i64 %623
  %625 = load float, ptr %624, align 4, !tbaa !35
  %626 = insertelement <4 x float> %622, float %625, i64 3
  %627 = fmul <4 x float> %626, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %628 = add nsw i32 %578, %t2255.us
  %629 = insertelement <4 x i32> undef, i32 %628, i64 0
  %630 = shufflevector <4 x i32> %629, <4 x i32> undef, <4 x i32> zeroinitializer
  %631 = add nsw <4 x i32> %630, <i32 0, i32 1, i32 2, i32 3>
  %632 = add <4 x i32> %583, %631
  %633 = sext <4 x i32> %632 to <4 x i64>
  %634 = extractelement <4 x i64> %633, i64 0
  %635 = getelementptr inbounds float, ptr %f8.host, i64 %634
  %636 = load float, ptr %635, align 4, !tbaa !35
  %637 = insertelement <4 x float> undef, float %636, i64 0
  %638 = extractelement <4 x i64> %633, i64 1
  %639 = getelementptr inbounds float, ptr %f8.host, i64 %638
  %640 = load float, ptr %639, align 4, !tbaa !35
  %641 = insertelement <4 x float> %637, float %640, i64 1
  %642 = extractelement <4 x i64> %633, i64 2
  %643 = getelementptr inbounds float, ptr %f8.host, i64 %642
  %644 = load float, ptr %643, align 4, !tbaa !35
  %645 = insertelement <4 x float> %641, float %644, i64 2
  %646 = extractelement <4 x i64> %633, i64 3
  %647 = getelementptr inbounds float, ptr %f8.host, i64 %646
  %648 = load float, ptr %647, align 4, !tbaa !35
  %649 = insertelement <4 x float> %645, float %648, i64 3
  %650 = fmul <4 x float> %649, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %651 = fadd <4 x float> %627, %650
  %652 = fmul <4 x float> %651, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %653 = fadd <4 x float> %604, %652
  %654 = mul nsw <4 x i32> %298, %248
  %655 = add nsw i32 %t2251.us, 1
  %656 = insertelement <4 x i32> undef, i32 %655, i64 0
  %657 = shufflevector <4 x i32> %656, <4 x i32> undef, <4 x i32> zeroinitializer
  %658 = add nsw <4 x i32> %657, <i32 0, i32 2, i32 4, i32 6>
  %659 = add nsw <4 x i32> %654, %658
  %660 = sext <4 x i32> %659 to <4 x i64>
  %661 = extractelement <4 x i64> %660, i64 0
  %662 = getelementptr inbounds float, ptr %f7.host, i64 %661
  %663 = load float, ptr %662, align 4, !tbaa !53
  %664 = insertelement <4 x float> undef, float %663, i64 0
  %665 = extractelement <4 x i64> %660, i64 1
  %666 = getelementptr inbounds float, ptr %f7.host, i64 %665
  %667 = load float, ptr %666, align 4, !tbaa !53
  %668 = insertelement <4 x float> %664, float %667, i64 1
  %669 = extractelement <4 x i64> %660, i64 2
  %670 = getelementptr inbounds float, ptr %f7.host, i64 %669
  %671 = load float, ptr %670, align 4, !tbaa !53
  %672 = insertelement <4 x float> %668, float %671, i64 2
  %673 = extractelement <4 x i64> %660, i64 3
  %674 = getelementptr inbounds float, ptr %f7.host, i64 %673
  %675 = load float, ptr %674, align 4, !tbaa !53
  %676 = insertelement <4 x float> %672, float %675, i64 3
  %677 = fsub <4 x float> %676, %653
  %678 = fmul <4 x float> %t2267.us, %677
  %679 = add nsw <4 x i32> %t2273.us, %558
  %680 = sext <4 x i32> %679 to <4 x i64>
  %681 = extractelement <4 x i64> %680, i64 0
  %682 = getelementptr inbounds float, ptr %f8.host, i64 %681
  %683 = load float, ptr %682, align 4, !tbaa !35
  %684 = insertelement <4 x float> undef, float %683, i64 0
  %685 = extractelement <4 x i64> %680, i64 1
  %686 = getelementptr inbounds float, ptr %f8.host, i64 %685
  %687 = load float, ptr %686, align 4, !tbaa !35
  %688 = insertelement <4 x float> %684, float %687, i64 1
  %689 = extractelement <4 x i64> %680, i64 2
  %690 = getelementptr inbounds float, ptr %f8.host, i64 %689
  %691 = load float, ptr %690, align 4, !tbaa !35
  %692 = insertelement <4 x float> %688, float %691, i64 2
  %693 = extractelement <4 x i64> %680, i64 3
  %694 = getelementptr inbounds float, ptr %f8.host, i64 %693
  %695 = load float, ptr %694, align 4, !tbaa !35
  %696 = insertelement <4 x float> %692, float %695, i64 3
  %697 = fmul <4 x float> %696, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %698 = add <4 x i32> %t2273.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %699 = add <4 x i32> %698, %582
  %700 = sext <4 x i32> %699 to <4 x i64>
  %701 = extractelement <4 x i64> %700, i64 0
  %702 = getelementptr inbounds float, ptr %f8.host, i64 %701
  %703 = load float, ptr %702, align 4, !tbaa !35
  %704 = insertelement <4 x float> undef, float %703, i64 0
  %705 = extractelement <4 x i64> %700, i64 1
  %706 = getelementptr inbounds float, ptr %f8.host, i64 %705
  %707 = load float, ptr %706, align 4, !tbaa !35
  %708 = insertelement <4 x float> %704, float %707, i64 1
  %709 = extractelement <4 x i64> %700, i64 2
  %710 = getelementptr inbounds float, ptr %f8.host, i64 %709
  %711 = load float, ptr %710, align 4, !tbaa !35
  %712 = insertelement <4 x float> %708, float %711, i64 2
  %713 = extractelement <4 x i64> %700, i64 3
  %714 = getelementptr inbounds float, ptr %f8.host, i64 %713
  %715 = load float, ptr %714, align 4, !tbaa !35
  %716 = insertelement <4 x float> %712, float %715, i64 3
  %717 = fmul <4 x float> %716, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %718 = fadd <4 x float> %697, %717
  %719 = fmul <4 x float> %718, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %720 = add nsw <4 x i32> %t2273.us, %608
  %721 = sext <4 x i32> %720 to <4 x i64>
  %722 = extractelement <4 x i64> %721, i64 0
  %723 = getelementptr inbounds float, ptr %f8.host, i64 %722
  %724 = load float, ptr %723, align 4, !tbaa !35
  %725 = insertelement <4 x float> undef, float %724, i64 0
  %726 = extractelement <4 x i64> %721, i64 1
  %727 = getelementptr inbounds float, ptr %f8.host, i64 %726
  %728 = load float, ptr %727, align 4, !tbaa !35
  %729 = insertelement <4 x float> %725, float %728, i64 1
  %730 = extractelement <4 x i64> %721, i64 2
  %731 = getelementptr inbounds float, ptr %f8.host, i64 %730
  %732 = load float, ptr %731, align 4, !tbaa !35
  %733 = insertelement <4 x float> %729, float %732, i64 2
  %734 = extractelement <4 x i64> %721, i64 3
  %735 = getelementptr inbounds float, ptr %f8.host, i64 %734
  %736 = load float, ptr %735, align 4, !tbaa !35
  %737 = insertelement <4 x float> %733, float %736, i64 3
  %738 = fmul <4 x float> %737, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %739 = add <4 x i32> %698, %631
  %740 = sext <4 x i32> %739 to <4 x i64>
  %741 = extractelement <4 x i64> %740, i64 0
  %742 = getelementptr inbounds float, ptr %f8.host, i64 %741
  %743 = load float, ptr %742, align 4, !tbaa !35
  %744 = insertelement <4 x float> undef, float %743, i64 0
  %745 = extractelement <4 x i64> %740, i64 1
  %746 = getelementptr inbounds float, ptr %f8.host, i64 %745
  %747 = load float, ptr %746, align 4, !tbaa !35
  %748 = insertelement <4 x float> %744, float %747, i64 1
  %749 = extractelement <4 x i64> %740, i64 2
  %750 = getelementptr inbounds float, ptr %f8.host, i64 %749
  %751 = load float, ptr %750, align 4, !tbaa !35
  %752 = insertelement <4 x float> %748, float %751, i64 2
  %753 = extractelement <4 x i64> %740, i64 3
  %754 = getelementptr inbounds float, ptr %f8.host, i64 %753
  %755 = load float, ptr %754, align 4, !tbaa !35
  %756 = insertelement <4 x float> %752, float %755, i64 3
  %757 = fmul <4 x float> %756, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %758 = fadd <4 x float> %738, %757
  %759 = fmul <4 x float> %758, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %760 = fadd <4 x float> %719, %759
  %761 = mul nsw <4 x i32> %t2270.us, %248
  %762 = add nsw <4 x i32> %761, %658
  %763 = sext <4 x i32> %762 to <4 x i64>
  %764 = extractelement <4 x i64> %763, i64 0
  %765 = getelementptr inbounds float, ptr %f7.host, i64 %764
  %766 = load float, ptr %765, align 4, !tbaa !53
  %767 = insertelement <4 x float> undef, float %766, i64 0
  %768 = extractelement <4 x i64> %763, i64 1
  %769 = getelementptr inbounds float, ptr %f7.host, i64 %768
  %770 = load float, ptr %769, align 4, !tbaa !53
  %771 = insertelement <4 x float> %767, float %770, i64 1
  %772 = extractelement <4 x i64> %763, i64 2
  %773 = getelementptr inbounds float, ptr %f7.host, i64 %772
  %774 = load float, ptr %773, align 4, !tbaa !53
  %775 = insertelement <4 x float> %771, float %774, i64 2
  %776 = extractelement <4 x i64> %763, i64 3
  %777 = getelementptr inbounds float, ptr %f7.host, i64 %776
  %778 = load float, ptr %777, align 4, !tbaa !53
  %779 = insertelement <4 x float> %775, float %778, i64 3
  %780 = fsub <4 x float> %779, %760
  %781 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2267.us
  %782 = fmul <4 x float> %781, %780
  %783 = fadd <4 x float> %678, %782
  %784 = sext i32 %294 to i64
  %785 = sub nsw i64 %784, %4
  %786 = add nsw i64 %785, %266
  %787 = getelementptr inbounds float, ptr %f130.host, i64 %786
  %788 = load <4 x float>, ptr %787, align 4, !tbaa !37
  %789 = fmul <4 x float> %788, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %790 = sext i32 %t2264.us to i64
  %791 = sub nsw i64 %790, %4
  %792 = add nsw i64 %267, %791
  %793 = getelementptr inbounds float, ptr %f130.host, i64 %792
  %794 = load <4 x float>, ptr %793, align 4, !tbaa !37
  %795 = fmul <4 x float> %794, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %796 = fadd <4 x float> %789, %795
  %797 = fmul <4 x float> %796, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %798 = add nsw i64 %785, %268
  %799 = getelementptr inbounds float, ptr %f130.host, i64 %798
  %800 = load <4 x float>, ptr %799, align 4, !tbaa !37
  %801 = fmul <4 x float> %800, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %802 = add nsw i64 %269, %791
  %803 = getelementptr inbounds float, ptr %f130.host, i64 %802
  %804 = load <4 x float>, ptr %803, align 4, !tbaa !37
  %805 = fmul <4 x float> %804, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %806 = fadd <4 x float> %801, %805
  %807 = fmul <4 x float> %806, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %808 = fadd <4 x float> %797, %807
  %809 = fadd <4 x float> %783, %808
  %810 = shufflevector <4 x float> %553, <4 x float> %809, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %811 = sext i32 %f129.s0.v3.v363.base.us to i64
  %812 = add i64 %272, %811
  %813 = getelementptr inbounds float, ptr %128, i64 %812
  store <8 x float> %810, ptr %813, align 4, !tbaa !63
  %lsr.iv.next421.us = add i32 %lsr.iv420.us, -1
  %lsr.iv.next423.us = add i32 %lsr.iv422.us, 8
  %.not158.us = icmp eq i32 %lsr.iv.next421.us, 0
  br i1 %.not158.us, label %"end for f129.s0.v3.v3.loopexit.us", label %"for f129.s0.v3.v3.us"

"end for f129.s0.v3.v3.loopexit.us":              ; preds = %"for f129.s0.v3.v3.us"
  %indvars.iv.next310 = add nsw i64 %indvars.iv309, 1
  %814 = icmp eq i64 %indvars.iv.next310, %sext311
  br i1 %814, label %"produce f128", label %"for f129.s0.v4.us"

"produce f128":                                   ; preds = %"end for f129.s0.v3.v3.loopexit.us", %"produce f129"
  %815 = add nsw i32 %local_laplacian.s0.v4.v4.base, -14
  %816 = ashr i32 %815, 3
  %817 = add nsw i32 %122, 1
  %818 = icmp sgt i32 %102, -1
  %819 = add nsw i32 %f74.v3.extent_realized.s, 1
  %820 = xor i32 %225, -1
  %821 = xor i32 %f7.v4.min_realized, -1
  %822 = add nsw i32 %f6.v3.extent_realized.s, 1
  %823 = insertelement <4 x i32> undef, i32 %822, i64 0
  %824 = shufflevector <4 x i32> %823, <4 x i32> undef, <4 x i32> zeroinitializer
  %825 = sext i32 %f129.v3.min_realized to i64
  %826 = sext i32 %f128.v3.extent_realized.s to i64
  %827 = add nsw i64 %826, 1
  %828 = sext i32 %816 to i64
  %narrow276 = sub nsw i32 0, %f128.v3.min_realized
  %.neg219 = sext i32 %narrow276 to i64
  br i1 %818, label %"for f128.s0.v4.us.preheader", label %"for f127.s0.v4.preheader", !prof !5

"for f128.s0.v4.us.preheader":                    ; preds = %"produce f128"
  %829 = add nuw nsw i32 %t3088, 36
  %830 = lshr i32 %829, 3
  %831 = add nsw i32 %830, %816
  %sext315 = sext i32 %831 to i64
  br label %"for f128.s0.v4.us"

"for f128.s0.v4.us":                              ; preds = %"for f128.s0.v4.us.preheader", %"end for f128.s0.v3.v3.loopexit.us"
  %indvars.iv313 = phi i64 [ %828, %"for f128.s0.v4.us.preheader" ], [ %indvars.iv.next314, %"end for f128.s0.v3.v3.loopexit.us" ]
  %indvars316 = trunc i64 %indvars.iv313 to i32
  %832 = shl i32 %indvars316, 1
  %833 = and i32 %832, 2
  %834 = ashr i32 %indvars316, 1
  %t2279.us = add nsw i32 %833, %834
  %835 = trunc i64 %indvars.iv313 to i32
  %836 = sub i32 %835, %f74.v4.min_realized
  %837 = mul i32 %836, %819
  %838 = sub i32 %837, %f74.v3.min_realized
  %839 = add nsw i32 %t2279.us, %820
  %t2286.us = mul nsw i32 %839, %117
  %840 = sub nsw i32 %834, %225
  %t2288.us = mul nsw i32 %840, %117
  %841 = add i32 %t2279.us, %821
  %842 = mul nsw i32 %841, %f7.stride.1
  %843 = sub nsw i32 %834, %f7.v4.min_realized
  %844 = mul nsw i32 %843, %f7.stride.1
  %845 = sext i32 %t2288.us to i64
  %846 = add nsw i64 %845, -1
  %847 = sext i32 %t2286.us to i64
  %848 = add nsw i64 %847, -1
  %849 = sub nsw i64 %indvars.iv313, %828
  %850 = mul nsw i64 %849, %827
  %851 = add nsw i64 %850, %.neg219
  %852 = trunc i64 %indvars.iv313 to i32
  %853 = sub i32 %852, %f6.v4.min_realized
  %854 = mul i32 %853, %f6.stride.1
  br label %"for f128.s0.v3.v3.us"

"for f128.s0.v3.v3.us":                           ; preds = %"for f128.s0.v4.us", %"for f128.s0.v3.v3.us"
  %lsr.iv418.us = phi i32 [ %lsr.iv.next419.us, %"for f128.s0.v3.v3.us" ], [ 0, %"for f128.s0.v4.us" ]
  %lsr.iv416.us = phi i32 [ %lsr.iv.next417.us, %"for f128.s0.v3.v3.us" ], [ %817, %"for f128.s0.v4.us" ]
  %855 = add i32 %lsr.iv418.us, %99
  %f128.s0.v3.v343.base.us = tail call i32 @llvm.smin.i32(i32 %b792, i32 %855)
  %856 = shl i32 %f128.s0.v3.v343.base.us, 1
  %857 = and i32 %856, 2
  %858 = ashr i32 %f128.s0.v3.v343.base.us, 1
  %t2280.us = add nsw i32 %857, %858
  %t2281.us = add i32 %838, %f128.s0.v3.v343.base.us
  %859 = sext i32 %t2281.us to i64
  %860 = getelementptr inbounds float, ptr %f74.host, i64 %859
  %861 = load <4 x float>, ptr %860, align 4, !tbaa !55
  %862 = add nsw i64 %859, 4
  %863 = getelementptr inbounds float, ptr %f74.host, i64 %862
  %864 = load <4 x float>, ptr %863, align 4, !tbaa !55
  %865 = shufflevector <4 x float> %861, <4 x float> %864, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2282.us = fmul <4 x float> %232, %865
  %a832.us = fptosi <4 x float> %t2282.us to <4 x i32>
  %a835.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a832.us)
  %866 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a835.us, <4 x i32> zeroinitializer)
  %867 = sitofp <4 x i32> %866 to <4 x float>
  %t2284.us = fsub <4 x float> %t2282.us, %867
  %868 = sub nsw i32 %f128.s0.v3.v343.base.us, %f6.v3.min_realized
  %t2289.us = add nsw i32 %868, %854
  %t2291.us = sub nsw <4 x i32> %866, %241
  %869 = sub nsw i32 %t2280.us, %f7.v3.min_realized
  %t2294.us = add nsw i32 %869, %842
  %t2295.us = mul nsw <4 x i32> %t2291.us, %248
  %870 = sub nsw i32 %858, %f7.v3.min_realized
  %t2297.us = add nsw i32 %870, %842
  %t2299.us = add nsw i32 %869, %844
  %t2300.us = add nsw i32 %870, %844
  %871 = add nsw <4 x i32> %t2291.us, <i32 1, i32 1, i32 1, i32 1>
  %t2301.us = mul nsw <4 x i32> %871, %248
  %872 = add nsw i32 %f128.s0.v3.v343.base.us, 1
  %873 = shl i32 %872, 1
  %874 = and i32 %873, 2
  %875 = ashr i32 %872, 1
  %t2302.us = add nsw i32 %874, %875
  %876 = shufflevector <4 x float> %861, <4 x float> %864, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2303.us = fmul <4 x float> %232, %876
  %a836.us = fptosi <4 x float> %t2303.us to <4 x i32>
  %a839.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a836.us)
  %877 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a839.us, <4 x i32> zeroinitializer)
  %878 = sitofp <4 x i32> %877 to <4 x float>
  %t2305.us = fsub <4 x float> %t2303.us, %878
  %t2308.us = sub nsw <4 x i32> %877, %241
  %879 = sub nsw i32 %t2302.us, %f7.v3.min_realized
  %t2310.us = add nsw i32 %879, %842
  %t2311.us = mul nsw <4 x i32> %t2308.us, %248
  %880 = sub nsw i32 %875, %f7.v3.min_realized
  %t2313.us = add nsw i32 %880, %842
  %t2314.us = add nsw i32 %879, %844
  %t2315.us = add nsw i32 %880, %844
  %881 = add nsw <4 x i32> %t2308.us, <i32 1, i32 1, i32 1, i32 1>
  %t2316.us = mul nsw <4 x i32> %881, %248
  %882 = insertelement <4 x i32> undef, i32 %t2300.us, i64 0
  %883 = shufflevector <4 x i32> %882, <4 x i32> undef, <4 x i32> zeroinitializer
  %884 = add nsw <4 x i32> %883, <i32 0, i32 1, i32 2, i32 3>
  %885 = add nsw <4 x i32> %t2301.us, %884
  %886 = sext <4 x i32> %885 to <4 x i64>
  %887 = extractelement <4 x i64> %886, i64 0
  %888 = getelementptr inbounds float, ptr %f7.host, i64 %887
  %889 = load float, ptr %888, align 4, !tbaa !53
  %890 = insertelement <4 x float> undef, float %889, i64 0
  %891 = extractelement <4 x i64> %886, i64 1
  %892 = getelementptr inbounds float, ptr %f7.host, i64 %891
  %893 = load float, ptr %892, align 4, !tbaa !53
  %894 = insertelement <4 x float> %890, float %893, i64 1
  %895 = extractelement <4 x i64> %886, i64 2
  %896 = getelementptr inbounds float, ptr %f7.host, i64 %895
  %897 = load float, ptr %896, align 4, !tbaa !53
  %898 = insertelement <4 x float> %894, float %897, i64 2
  %899 = extractelement <4 x i64> %886, i64 3
  %900 = getelementptr inbounds float, ptr %f7.host, i64 %899
  %901 = load float, ptr %900, align 4, !tbaa !53
  %902 = insertelement <4 x float> %898, float %901, i64 3
  %903 = fmul <4 x float> %902, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %904 = insertelement <4 x i32> undef, i32 %t2299.us, i64 0
  %905 = shufflevector <4 x i32> %904, <4 x i32> undef, <4 x i32> zeroinitializer
  %906 = add <4 x i32> %905, <i32 -1, i32 0, i32 1, i32 2>
  %907 = add <4 x i32> %906, %t2301.us
  %908 = sext <4 x i32> %907 to <4 x i64>
  %909 = extractelement <4 x i64> %908, i64 0
  %910 = getelementptr inbounds float, ptr %f7.host, i64 %909
  %911 = load float, ptr %910, align 4, !tbaa !53
  %912 = insertelement <4 x float> undef, float %911, i64 0
  %913 = extractelement <4 x i64> %908, i64 1
  %914 = getelementptr inbounds float, ptr %f7.host, i64 %913
  %915 = load float, ptr %914, align 4, !tbaa !53
  %916 = insertelement <4 x float> %912, float %915, i64 1
  %917 = extractelement <4 x i64> %908, i64 2
  %918 = getelementptr inbounds float, ptr %f7.host, i64 %917
  %919 = load float, ptr %918, align 4, !tbaa !53
  %920 = insertelement <4 x float> %916, float %919, i64 2
  %921 = extractelement <4 x i64> %908, i64 3
  %922 = getelementptr inbounds float, ptr %f7.host, i64 %921
  %923 = load float, ptr %922, align 4, !tbaa !53
  %924 = insertelement <4 x float> %920, float %923, i64 3
  %925 = fmul <4 x float> %924, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %926 = fadd <4 x float> %903, %925
  %927 = fmul <4 x float> %926, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %928 = insertelement <4 x i32> undef, i32 %t2297.us, i64 0
  %929 = shufflevector <4 x i32> %928, <4 x i32> undef, <4 x i32> zeroinitializer
  %930 = add nsw <4 x i32> %929, <i32 0, i32 1, i32 2, i32 3>
  %931 = add nsw <4 x i32> %t2301.us, %930
  %932 = sext <4 x i32> %931 to <4 x i64>
  %933 = extractelement <4 x i64> %932, i64 0
  %934 = getelementptr inbounds float, ptr %f7.host, i64 %933
  %935 = load float, ptr %934, align 4, !tbaa !53
  %936 = insertelement <4 x float> undef, float %935, i64 0
  %937 = extractelement <4 x i64> %932, i64 1
  %938 = getelementptr inbounds float, ptr %f7.host, i64 %937
  %939 = load float, ptr %938, align 4, !tbaa !53
  %940 = insertelement <4 x float> %936, float %939, i64 1
  %941 = extractelement <4 x i64> %932, i64 2
  %942 = getelementptr inbounds float, ptr %f7.host, i64 %941
  %943 = load float, ptr %942, align 4, !tbaa !53
  %944 = insertelement <4 x float> %940, float %943, i64 2
  %945 = extractelement <4 x i64> %932, i64 3
  %946 = getelementptr inbounds float, ptr %f7.host, i64 %945
  %947 = load float, ptr %946, align 4, !tbaa !53
  %948 = insertelement <4 x float> %944, float %947, i64 3
  %949 = fmul <4 x float> %948, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %950 = insertelement <4 x i32> undef, i32 %t2294.us, i64 0
  %951 = shufflevector <4 x i32> %950, <4 x i32> undef, <4 x i32> zeroinitializer
  %952 = add <4 x i32> %951, <i32 -1, i32 0, i32 1, i32 2>
  %953 = add <4 x i32> %952, %t2301.us
  %954 = sext <4 x i32> %953 to <4 x i64>
  %955 = extractelement <4 x i64> %954, i64 0
  %956 = getelementptr inbounds float, ptr %f7.host, i64 %955
  %957 = load float, ptr %956, align 4, !tbaa !53
  %958 = insertelement <4 x float> undef, float %957, i64 0
  %959 = extractelement <4 x i64> %954, i64 1
  %960 = getelementptr inbounds float, ptr %f7.host, i64 %959
  %961 = load float, ptr %960, align 4, !tbaa !53
  %962 = insertelement <4 x float> %958, float %961, i64 1
  %963 = extractelement <4 x i64> %954, i64 2
  %964 = getelementptr inbounds float, ptr %f7.host, i64 %963
  %965 = load float, ptr %964, align 4, !tbaa !53
  %966 = insertelement <4 x float> %962, float %965, i64 2
  %967 = extractelement <4 x i64> %954, i64 3
  %968 = getelementptr inbounds float, ptr %f7.host, i64 %967
  %969 = load float, ptr %968, align 4, !tbaa !53
  %970 = insertelement <4 x float> %966, float %969, i64 3
  %971 = fmul <4 x float> %970, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %972 = fadd <4 x float> %949, %971
  %973 = fmul <4 x float> %972, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %974 = fadd <4 x float> %927, %973
  %975 = mul nsw <4 x i32> %871, %824
  %976 = insertelement <4 x i32> undef, i32 %t2289.us, i64 0
  %977 = shufflevector <4 x i32> %976, <4 x i32> undef, <4 x i32> zeroinitializer
  %978 = add nsw <4 x i32> %977, <i32 0, i32 2, i32 4, i32 6>
  %979 = add nsw <4 x i32> %975, %978
  %980 = sext <4 x i32> %979 to <4 x i64>
  %981 = extractelement <4 x i64> %980, i64 0
  %982 = getelementptr inbounds float, ptr %f6.host, i64 %981
  %983 = load float, ptr %982, align 4, !tbaa !49
  %984 = insertelement <4 x float> undef, float %983, i64 0
  %985 = extractelement <4 x i64> %980, i64 1
  %986 = getelementptr inbounds float, ptr %f6.host, i64 %985
  %987 = load float, ptr %986, align 4, !tbaa !49
  %988 = insertelement <4 x float> %984, float %987, i64 1
  %989 = extractelement <4 x i64> %980, i64 2
  %990 = getelementptr inbounds float, ptr %f6.host, i64 %989
  %991 = load float, ptr %990, align 4, !tbaa !49
  %992 = insertelement <4 x float> %988, float %991, i64 2
  %993 = extractelement <4 x i64> %980, i64 3
  %994 = getelementptr inbounds float, ptr %f6.host, i64 %993
  %995 = load float, ptr %994, align 4, !tbaa !49
  %996 = insertelement <4 x float> %992, float %995, i64 3
  %997 = fsub <4 x float> %996, %974
  %998 = fmul <4 x float> %t2284.us, %997
  %999 = add nsw <4 x i32> %t2295.us, %884
  %1000 = sext <4 x i32> %999 to <4 x i64>
  %1001 = extractelement <4 x i64> %1000, i64 0
  %1002 = getelementptr inbounds float, ptr %f7.host, i64 %1001
  %1003 = load float, ptr %1002, align 4, !tbaa !53
  %1004 = insertelement <4 x float> undef, float %1003, i64 0
  %1005 = extractelement <4 x i64> %1000, i64 1
  %1006 = getelementptr inbounds float, ptr %f7.host, i64 %1005
  %1007 = load float, ptr %1006, align 4, !tbaa !53
  %1008 = insertelement <4 x float> %1004, float %1007, i64 1
  %1009 = extractelement <4 x i64> %1000, i64 2
  %1010 = getelementptr inbounds float, ptr %f7.host, i64 %1009
  %1011 = load float, ptr %1010, align 4, !tbaa !53
  %1012 = insertelement <4 x float> %1008, float %1011, i64 2
  %1013 = extractelement <4 x i64> %1000, i64 3
  %1014 = getelementptr inbounds float, ptr %f7.host, i64 %1013
  %1015 = load float, ptr %1014, align 4, !tbaa !53
  %1016 = insertelement <4 x float> %1012, float %1015, i64 3
  %1017 = fmul <4 x float> %1016, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1018 = add <4 x i32> %t2295.us, %905
  %1019 = add <4 x i32> %1018, <i32 -1, i32 0, i32 1, i32 2>
  %1020 = sext <4 x i32> %1019 to <4 x i64>
  %1021 = extractelement <4 x i64> %1020, i64 0
  %1022 = getelementptr inbounds float, ptr %f7.host, i64 %1021
  %1023 = load float, ptr %1022, align 4, !tbaa !53
  %1024 = insertelement <4 x float> undef, float %1023, i64 0
  %1025 = extractelement <4 x i64> %1020, i64 1
  %1026 = getelementptr inbounds float, ptr %f7.host, i64 %1025
  %1027 = load float, ptr %1026, align 4, !tbaa !53
  %1028 = insertelement <4 x float> %1024, float %1027, i64 1
  %1029 = extractelement <4 x i64> %1020, i64 2
  %1030 = getelementptr inbounds float, ptr %f7.host, i64 %1029
  %1031 = load float, ptr %1030, align 4, !tbaa !53
  %1032 = insertelement <4 x float> %1028, float %1031, i64 2
  %1033 = extractelement <4 x i64> %1020, i64 3
  %1034 = getelementptr inbounds float, ptr %f7.host, i64 %1033
  %1035 = load float, ptr %1034, align 4, !tbaa !53
  %1036 = insertelement <4 x float> %1032, float %1035, i64 3
  %1037 = fmul <4 x float> %1036, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1038 = fadd <4 x float> %1017, %1037
  %1039 = fmul <4 x float> %1038, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1040 = add nsw <4 x i32> %t2295.us, %930
  %1041 = sext <4 x i32> %1040 to <4 x i64>
  %1042 = extractelement <4 x i64> %1041, i64 0
  %1043 = getelementptr inbounds float, ptr %f7.host, i64 %1042
  %1044 = load float, ptr %1043, align 4, !tbaa !53
  %1045 = insertelement <4 x float> undef, float %1044, i64 0
  %1046 = extractelement <4 x i64> %1041, i64 1
  %1047 = getelementptr inbounds float, ptr %f7.host, i64 %1046
  %1048 = load float, ptr %1047, align 4, !tbaa !53
  %1049 = insertelement <4 x float> %1045, float %1048, i64 1
  %1050 = extractelement <4 x i64> %1041, i64 2
  %1051 = getelementptr inbounds float, ptr %f7.host, i64 %1050
  %1052 = load float, ptr %1051, align 4, !tbaa !53
  %1053 = insertelement <4 x float> %1049, float %1052, i64 2
  %1054 = extractelement <4 x i64> %1041, i64 3
  %1055 = getelementptr inbounds float, ptr %f7.host, i64 %1054
  %1056 = load float, ptr %1055, align 4, !tbaa !53
  %1057 = insertelement <4 x float> %1053, float %1056, i64 3
  %1058 = fmul <4 x float> %1057, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1059 = add <4 x i32> %t2295.us, %951
  %1060 = add <4 x i32> %1059, <i32 -1, i32 0, i32 1, i32 2>
  %1061 = sext <4 x i32> %1060 to <4 x i64>
  %1062 = extractelement <4 x i64> %1061, i64 0
  %1063 = getelementptr inbounds float, ptr %f7.host, i64 %1062
  %1064 = load float, ptr %1063, align 4, !tbaa !53
  %1065 = insertelement <4 x float> undef, float %1064, i64 0
  %1066 = extractelement <4 x i64> %1061, i64 1
  %1067 = getelementptr inbounds float, ptr %f7.host, i64 %1066
  %1068 = load float, ptr %1067, align 4, !tbaa !53
  %1069 = insertelement <4 x float> %1065, float %1068, i64 1
  %1070 = extractelement <4 x i64> %1061, i64 2
  %1071 = getelementptr inbounds float, ptr %f7.host, i64 %1070
  %1072 = load float, ptr %1071, align 4, !tbaa !53
  %1073 = insertelement <4 x float> %1069, float %1072, i64 2
  %1074 = extractelement <4 x i64> %1061, i64 3
  %1075 = getelementptr inbounds float, ptr %f7.host, i64 %1074
  %1076 = load float, ptr %1075, align 4, !tbaa !53
  %1077 = insertelement <4 x float> %1073, float %1076, i64 3
  %1078 = fmul <4 x float> %1077, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1079 = fadd <4 x float> %1058, %1078
  %1080 = fmul <4 x float> %1079, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1081 = fadd <4 x float> %1039, %1080
  %1082 = mul nsw <4 x i32> %t2291.us, %824
  %1083 = add nsw <4 x i32> %1082, %978
  %1084 = sext <4 x i32> %1083 to <4 x i64>
  %1085 = extractelement <4 x i64> %1084, i64 0
  %1086 = getelementptr inbounds float, ptr %f6.host, i64 %1085
  %1087 = load float, ptr %1086, align 4, !tbaa !49
  %1088 = insertelement <4 x float> undef, float %1087, i64 0
  %1089 = extractelement <4 x i64> %1084, i64 1
  %1090 = getelementptr inbounds float, ptr %f6.host, i64 %1089
  %1091 = load float, ptr %1090, align 4, !tbaa !49
  %1092 = insertelement <4 x float> %1088, float %1091, i64 1
  %1093 = extractelement <4 x i64> %1084, i64 2
  %1094 = getelementptr inbounds float, ptr %f6.host, i64 %1093
  %1095 = load float, ptr %1094, align 4, !tbaa !49
  %1096 = insertelement <4 x float> %1092, float %1095, i64 2
  %1097 = extractelement <4 x i64> %1084, i64 3
  %1098 = getelementptr inbounds float, ptr %f6.host, i64 %1097
  %1099 = load float, ptr %1098, align 4, !tbaa !49
  %1100 = insertelement <4 x float> %1096, float %1099, i64 3
  %1101 = fsub <4 x float> %1100, %1081
  %1102 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2284.us
  %1103 = fmul <4 x float> %1102, %1101
  %1104 = fadd <4 x float> %998, %1103
  %narrow155.us = sub nsw i32 %858, %f129.v3.min_realized
  %1105 = sext i32 %narrow155.us to i64
  %1106 = add nsw i64 %1105, %845
  %1107 = getelementptr inbounds float, ptr %128, i64 %1106
  %1108 = load <4 x float>, ptr %1107, align 4, !tbaa !63
  %1109 = fmul <4 x float> %1108, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1110 = sext i32 %t2280.us to i64
  %1111 = sub nsw i64 %1110, %825
  %1112 = add nsw i64 %846, %1111
  %1113 = getelementptr inbounds float, ptr %128, i64 %1112
  %1114 = load <4 x float>, ptr %1113, align 4, !tbaa !63
  %1115 = fmul <4 x float> %1114, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1116 = fadd <4 x float> %1109, %1115
  %1117 = fmul <4 x float> %1116, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1118 = add nsw i64 %1105, %847
  %1119 = getelementptr inbounds float, ptr %128, i64 %1118
  %1120 = load <4 x float>, ptr %1119, align 4, !tbaa !63
  %1121 = fmul <4 x float> %1120, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1122 = add nsw i64 %848, %1111
  %1123 = getelementptr inbounds float, ptr %128, i64 %1122
  %1124 = load <4 x float>, ptr %1123, align 4, !tbaa !63
  %1125 = fmul <4 x float> %1124, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1126 = fadd <4 x float> %1121, %1125
  %1127 = fmul <4 x float> %1126, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1128 = fadd <4 x float> %1117, %1127
  %1129 = fadd <4 x float> %1104, %1128
  %1130 = insertelement <4 x i32> undef, i32 %t2315.us, i64 0
  %1131 = shufflevector <4 x i32> %1130, <4 x i32> undef, <4 x i32> zeroinitializer
  %1132 = add nsw <4 x i32> %1131, <i32 0, i32 1, i32 2, i32 3>
  %1133 = add nsw <4 x i32> %t2316.us, %1132
  %1134 = sext <4 x i32> %1133 to <4 x i64>
  %1135 = extractelement <4 x i64> %1134, i64 0
  %1136 = getelementptr inbounds float, ptr %f7.host, i64 %1135
  %1137 = load float, ptr %1136, align 4, !tbaa !53
  %1138 = insertelement <4 x float> undef, float %1137, i64 0
  %1139 = extractelement <4 x i64> %1134, i64 1
  %1140 = getelementptr inbounds float, ptr %f7.host, i64 %1139
  %1141 = load float, ptr %1140, align 4, !tbaa !53
  %1142 = insertelement <4 x float> %1138, float %1141, i64 1
  %1143 = extractelement <4 x i64> %1134, i64 2
  %1144 = getelementptr inbounds float, ptr %f7.host, i64 %1143
  %1145 = load float, ptr %1144, align 4, !tbaa !53
  %1146 = insertelement <4 x float> %1142, float %1145, i64 2
  %1147 = extractelement <4 x i64> %1134, i64 3
  %1148 = getelementptr inbounds float, ptr %f7.host, i64 %1147
  %1149 = load float, ptr %1148, align 4, !tbaa !53
  %1150 = insertelement <4 x float> %1146, float %1149, i64 3
  %1151 = fmul <4 x float> %1150, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1152 = insertelement <4 x i32> undef, i32 %t2314.us, i64 0
  %1153 = shufflevector <4 x i32> %1152, <4 x i32> undef, <4 x i32> zeroinitializer
  %1154 = add nsw <4 x i32> %1153, <i32 0, i32 1, i32 2, i32 3>
  %1155 = add <4 x i32> %t2316.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1156 = add <4 x i32> %1155, %1154
  %1157 = sext <4 x i32> %1156 to <4 x i64>
  %1158 = extractelement <4 x i64> %1157, i64 0
  %1159 = getelementptr inbounds float, ptr %f7.host, i64 %1158
  %1160 = load float, ptr %1159, align 4, !tbaa !53
  %1161 = insertelement <4 x float> undef, float %1160, i64 0
  %1162 = extractelement <4 x i64> %1157, i64 1
  %1163 = getelementptr inbounds float, ptr %f7.host, i64 %1162
  %1164 = load float, ptr %1163, align 4, !tbaa !53
  %1165 = insertelement <4 x float> %1161, float %1164, i64 1
  %1166 = extractelement <4 x i64> %1157, i64 2
  %1167 = getelementptr inbounds float, ptr %f7.host, i64 %1166
  %1168 = load float, ptr %1167, align 4, !tbaa !53
  %1169 = insertelement <4 x float> %1165, float %1168, i64 2
  %1170 = extractelement <4 x i64> %1157, i64 3
  %1171 = getelementptr inbounds float, ptr %f7.host, i64 %1170
  %1172 = load float, ptr %1171, align 4, !tbaa !53
  %1173 = insertelement <4 x float> %1169, float %1172, i64 3
  %1174 = fmul <4 x float> %1173, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1175 = fadd <4 x float> %1151, %1174
  %1176 = fmul <4 x float> %1175, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1177 = insertelement <4 x i32> undef, i32 %t2313.us, i64 0
  %1178 = shufflevector <4 x i32> %1177, <4 x i32> undef, <4 x i32> zeroinitializer
  %1179 = add nsw <4 x i32> %1178, <i32 0, i32 1, i32 2, i32 3>
  %1180 = add nsw <4 x i32> %t2316.us, %1179
  %1181 = sext <4 x i32> %1180 to <4 x i64>
  %1182 = extractelement <4 x i64> %1181, i64 0
  %1183 = getelementptr inbounds float, ptr %f7.host, i64 %1182
  %1184 = load float, ptr %1183, align 4, !tbaa !53
  %1185 = insertelement <4 x float> undef, float %1184, i64 0
  %1186 = extractelement <4 x i64> %1181, i64 1
  %1187 = getelementptr inbounds float, ptr %f7.host, i64 %1186
  %1188 = load float, ptr %1187, align 4, !tbaa !53
  %1189 = insertelement <4 x float> %1185, float %1188, i64 1
  %1190 = extractelement <4 x i64> %1181, i64 2
  %1191 = getelementptr inbounds float, ptr %f7.host, i64 %1190
  %1192 = load float, ptr %1191, align 4, !tbaa !53
  %1193 = insertelement <4 x float> %1189, float %1192, i64 2
  %1194 = extractelement <4 x i64> %1181, i64 3
  %1195 = getelementptr inbounds float, ptr %f7.host, i64 %1194
  %1196 = load float, ptr %1195, align 4, !tbaa !53
  %1197 = insertelement <4 x float> %1193, float %1196, i64 3
  %1198 = fmul <4 x float> %1197, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1199 = insertelement <4 x i32> undef, i32 %t2310.us, i64 0
  %1200 = shufflevector <4 x i32> %1199, <4 x i32> undef, <4 x i32> zeroinitializer
  %1201 = add nsw <4 x i32> %1200, <i32 0, i32 1, i32 2, i32 3>
  %1202 = add <4 x i32> %1155, %1201
  %1203 = sext <4 x i32> %1202 to <4 x i64>
  %1204 = extractelement <4 x i64> %1203, i64 0
  %1205 = getelementptr inbounds float, ptr %f7.host, i64 %1204
  %1206 = load float, ptr %1205, align 4, !tbaa !53
  %1207 = insertelement <4 x float> undef, float %1206, i64 0
  %1208 = extractelement <4 x i64> %1203, i64 1
  %1209 = getelementptr inbounds float, ptr %f7.host, i64 %1208
  %1210 = load float, ptr %1209, align 4, !tbaa !53
  %1211 = insertelement <4 x float> %1207, float %1210, i64 1
  %1212 = extractelement <4 x i64> %1203, i64 2
  %1213 = getelementptr inbounds float, ptr %f7.host, i64 %1212
  %1214 = load float, ptr %1213, align 4, !tbaa !53
  %1215 = insertelement <4 x float> %1211, float %1214, i64 2
  %1216 = extractelement <4 x i64> %1203, i64 3
  %1217 = getelementptr inbounds float, ptr %f7.host, i64 %1216
  %1218 = load float, ptr %1217, align 4, !tbaa !53
  %1219 = insertelement <4 x float> %1215, float %1218, i64 3
  %1220 = fmul <4 x float> %1219, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1221 = fadd <4 x float> %1198, %1220
  %1222 = fmul <4 x float> %1221, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1223 = fadd <4 x float> %1176, %1222
  %1224 = mul nsw <4 x i32> %881, %824
  %1225 = add nsw i32 %t2289.us, 1
  %1226 = insertelement <4 x i32> undef, i32 %1225, i64 0
  %1227 = shufflevector <4 x i32> %1226, <4 x i32> undef, <4 x i32> zeroinitializer
  %1228 = add nsw <4 x i32> %1227, <i32 0, i32 2, i32 4, i32 6>
  %1229 = add nsw <4 x i32> %1224, %1228
  %1230 = sext <4 x i32> %1229 to <4 x i64>
  %1231 = extractelement <4 x i64> %1230, i64 0
  %1232 = getelementptr inbounds float, ptr %f6.host, i64 %1231
  %1233 = load float, ptr %1232, align 4, !tbaa !49
  %1234 = insertelement <4 x float> undef, float %1233, i64 0
  %1235 = extractelement <4 x i64> %1230, i64 1
  %1236 = getelementptr inbounds float, ptr %f6.host, i64 %1235
  %1237 = load float, ptr %1236, align 4, !tbaa !49
  %1238 = insertelement <4 x float> %1234, float %1237, i64 1
  %1239 = extractelement <4 x i64> %1230, i64 2
  %1240 = getelementptr inbounds float, ptr %f6.host, i64 %1239
  %1241 = load float, ptr %1240, align 4, !tbaa !49
  %1242 = insertelement <4 x float> %1238, float %1241, i64 2
  %1243 = extractelement <4 x i64> %1230, i64 3
  %1244 = getelementptr inbounds float, ptr %f6.host, i64 %1243
  %1245 = load float, ptr %1244, align 4, !tbaa !49
  %1246 = insertelement <4 x float> %1242, float %1245, i64 3
  %1247 = fsub <4 x float> %1246, %1223
  %1248 = fmul <4 x float> %t2305.us, %1247
  %1249 = add nsw <4 x i32> %t2311.us, %1132
  %1250 = sext <4 x i32> %1249 to <4 x i64>
  %1251 = extractelement <4 x i64> %1250, i64 0
  %1252 = getelementptr inbounds float, ptr %f7.host, i64 %1251
  %1253 = load float, ptr %1252, align 4, !tbaa !53
  %1254 = insertelement <4 x float> undef, float %1253, i64 0
  %1255 = extractelement <4 x i64> %1250, i64 1
  %1256 = getelementptr inbounds float, ptr %f7.host, i64 %1255
  %1257 = load float, ptr %1256, align 4, !tbaa !53
  %1258 = insertelement <4 x float> %1254, float %1257, i64 1
  %1259 = extractelement <4 x i64> %1250, i64 2
  %1260 = getelementptr inbounds float, ptr %f7.host, i64 %1259
  %1261 = load float, ptr %1260, align 4, !tbaa !53
  %1262 = insertelement <4 x float> %1258, float %1261, i64 2
  %1263 = extractelement <4 x i64> %1250, i64 3
  %1264 = getelementptr inbounds float, ptr %f7.host, i64 %1263
  %1265 = load float, ptr %1264, align 4, !tbaa !53
  %1266 = insertelement <4 x float> %1262, float %1265, i64 3
  %1267 = fmul <4 x float> %1266, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1268 = add <4 x i32> %t2311.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1269 = add <4 x i32> %1268, %1154
  %1270 = sext <4 x i32> %1269 to <4 x i64>
  %1271 = extractelement <4 x i64> %1270, i64 0
  %1272 = getelementptr inbounds float, ptr %f7.host, i64 %1271
  %1273 = load float, ptr %1272, align 4, !tbaa !53
  %1274 = insertelement <4 x float> undef, float %1273, i64 0
  %1275 = extractelement <4 x i64> %1270, i64 1
  %1276 = getelementptr inbounds float, ptr %f7.host, i64 %1275
  %1277 = load float, ptr %1276, align 4, !tbaa !53
  %1278 = insertelement <4 x float> %1274, float %1277, i64 1
  %1279 = extractelement <4 x i64> %1270, i64 2
  %1280 = getelementptr inbounds float, ptr %f7.host, i64 %1279
  %1281 = load float, ptr %1280, align 4, !tbaa !53
  %1282 = insertelement <4 x float> %1278, float %1281, i64 2
  %1283 = extractelement <4 x i64> %1270, i64 3
  %1284 = getelementptr inbounds float, ptr %f7.host, i64 %1283
  %1285 = load float, ptr %1284, align 4, !tbaa !53
  %1286 = insertelement <4 x float> %1282, float %1285, i64 3
  %1287 = fmul <4 x float> %1286, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1288 = fadd <4 x float> %1267, %1287
  %1289 = fmul <4 x float> %1288, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1290 = add nsw <4 x i32> %t2311.us, %1179
  %1291 = sext <4 x i32> %1290 to <4 x i64>
  %1292 = extractelement <4 x i64> %1291, i64 0
  %1293 = getelementptr inbounds float, ptr %f7.host, i64 %1292
  %1294 = load float, ptr %1293, align 4, !tbaa !53
  %1295 = insertelement <4 x float> undef, float %1294, i64 0
  %1296 = extractelement <4 x i64> %1291, i64 1
  %1297 = getelementptr inbounds float, ptr %f7.host, i64 %1296
  %1298 = load float, ptr %1297, align 4, !tbaa !53
  %1299 = insertelement <4 x float> %1295, float %1298, i64 1
  %1300 = extractelement <4 x i64> %1291, i64 2
  %1301 = getelementptr inbounds float, ptr %f7.host, i64 %1300
  %1302 = load float, ptr %1301, align 4, !tbaa !53
  %1303 = insertelement <4 x float> %1299, float %1302, i64 2
  %1304 = extractelement <4 x i64> %1291, i64 3
  %1305 = getelementptr inbounds float, ptr %f7.host, i64 %1304
  %1306 = load float, ptr %1305, align 4, !tbaa !53
  %1307 = insertelement <4 x float> %1303, float %1306, i64 3
  %1308 = fmul <4 x float> %1307, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1309 = add <4 x i32> %1268, %1201
  %1310 = sext <4 x i32> %1309 to <4 x i64>
  %1311 = extractelement <4 x i64> %1310, i64 0
  %1312 = getelementptr inbounds float, ptr %f7.host, i64 %1311
  %1313 = load float, ptr %1312, align 4, !tbaa !53
  %1314 = insertelement <4 x float> undef, float %1313, i64 0
  %1315 = extractelement <4 x i64> %1310, i64 1
  %1316 = getelementptr inbounds float, ptr %f7.host, i64 %1315
  %1317 = load float, ptr %1316, align 4, !tbaa !53
  %1318 = insertelement <4 x float> %1314, float %1317, i64 1
  %1319 = extractelement <4 x i64> %1310, i64 2
  %1320 = getelementptr inbounds float, ptr %f7.host, i64 %1319
  %1321 = load float, ptr %1320, align 4, !tbaa !53
  %1322 = insertelement <4 x float> %1318, float %1321, i64 2
  %1323 = extractelement <4 x i64> %1310, i64 3
  %1324 = getelementptr inbounds float, ptr %f7.host, i64 %1323
  %1325 = load float, ptr %1324, align 4, !tbaa !53
  %1326 = insertelement <4 x float> %1322, float %1325, i64 3
  %1327 = fmul <4 x float> %1326, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1328 = fadd <4 x float> %1308, %1327
  %1329 = fmul <4 x float> %1328, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1330 = fadd <4 x float> %1289, %1329
  %1331 = mul nsw <4 x i32> %t2308.us, %824
  %1332 = add nsw <4 x i32> %1331, %1228
  %1333 = sext <4 x i32> %1332 to <4 x i64>
  %1334 = extractelement <4 x i64> %1333, i64 0
  %1335 = getelementptr inbounds float, ptr %f6.host, i64 %1334
  %1336 = load float, ptr %1335, align 4, !tbaa !49
  %1337 = insertelement <4 x float> undef, float %1336, i64 0
  %1338 = extractelement <4 x i64> %1333, i64 1
  %1339 = getelementptr inbounds float, ptr %f6.host, i64 %1338
  %1340 = load float, ptr %1339, align 4, !tbaa !49
  %1341 = insertelement <4 x float> %1337, float %1340, i64 1
  %1342 = extractelement <4 x i64> %1333, i64 2
  %1343 = getelementptr inbounds float, ptr %f6.host, i64 %1342
  %1344 = load float, ptr %1343, align 4, !tbaa !49
  %1345 = insertelement <4 x float> %1341, float %1344, i64 2
  %1346 = extractelement <4 x i64> %1333, i64 3
  %1347 = getelementptr inbounds float, ptr %f6.host, i64 %1346
  %1348 = load float, ptr %1347, align 4, !tbaa !49
  %1349 = insertelement <4 x float> %1345, float %1348, i64 3
  %1350 = fsub <4 x float> %1349, %1330
  %1351 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2305.us
  %1352 = fmul <4 x float> %1351, %1350
  %1353 = fadd <4 x float> %1248, %1352
  %narrow156.us = sub nsw i32 %875, %f129.v3.min_realized
  %1354 = sext i32 %narrow156.us to i64
  %1355 = add nsw i64 %1354, %845
  %1356 = getelementptr inbounds float, ptr %128, i64 %1355
  %1357 = load <4 x float>, ptr %1356, align 4, !tbaa !63
  %1358 = fmul <4 x float> %1357, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1359 = sext i32 %t2302.us to i64
  %1360 = sub nsw i64 %1359, %825
  %1361 = add nsw i64 %846, %1360
  %1362 = getelementptr inbounds float, ptr %128, i64 %1361
  %1363 = load <4 x float>, ptr %1362, align 4, !tbaa !63
  %1364 = fmul <4 x float> %1363, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1365 = fadd <4 x float> %1358, %1364
  %1366 = fmul <4 x float> %1365, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1367 = add nsw i64 %1354, %847
  %1368 = getelementptr inbounds float, ptr %128, i64 %1367
  %1369 = load <4 x float>, ptr %1368, align 4, !tbaa !63
  %1370 = fmul <4 x float> %1369, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1371 = add nsw i64 %848, %1360
  %1372 = getelementptr inbounds float, ptr %128, i64 %1371
  %1373 = load <4 x float>, ptr %1372, align 4, !tbaa !63
  %1374 = fmul <4 x float> %1373, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1375 = fadd <4 x float> %1370, %1374
  %1376 = fmul <4 x float> %1375, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1377 = fadd <4 x float> %1366, %1376
  %1378 = fadd <4 x float> %1353, %1377
  %1379 = shufflevector <4 x float> %1129, <4 x float> %1378, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %1380 = sext i32 %f128.s0.v3.v343.base.us to i64
  %1381 = add i64 %851, %1380
  %1382 = getelementptr inbounds float, ptr %154, i64 %1381
  store <8 x float> %1379, ptr %1382, align 4, !tbaa !65
  %lsr.iv.next417.us = add i32 %lsr.iv416.us, -1
  %lsr.iv.next419.us = add i32 %lsr.iv418.us, 8
  %.not157.us = icmp eq i32 %lsr.iv.next417.us, 0
  br i1 %.not157.us, label %"end for f128.s0.v3.v3.loopexit.us", label %"for f128.s0.v3.v3.us"

"end for f128.s0.v3.v3.loopexit.us":              ; preds = %"for f128.s0.v3.v3.us"
  %indvars.iv.next314 = add nsw i64 %indvars.iv313, 1
  %1383 = icmp eq i64 %indvars.iv.next314, %sext315
  br i1 %1383, label %"for f127.s0.v4.preheader", label %"for f128.s0.v4.us"

"for f127.s0.v4.preheader":                       ; preds = %"end for f128.s0.v3.v3.loopexit.us", %"produce f128"
  %1384 = add nsw i32 %139, 1
  %1385 = icmp sgt i32 %138, -1
  %1386 = add nsw i32 %f73.v3.extent_realized.s, 1
  %1387 = xor i32 %816, -1
  %1388 = xor i32 %f6.v4.min_realized, -1
  %1389 = add nsw i32 %f5.v3.extent_realized.s, 1
  %1390 = insertelement <4 x i32> undef, i32 %1389, i64 0
  %1391 = shufflevector <4 x i32> %1390, <4 x i32> undef, <4 x i32> zeroinitializer
  %1392 = sext i32 %f128.v3.min_realized to i64
  %1393 = sext i32 %f127.v3.extent_realized.s to i64
  %1394 = add nsw i64 %1393, 1
  %1395 = sext i32 %f127.v4.min_realized to i64
  %1396 = sext i32 %f127.v3.min_realized to i64
  br i1 %1385, label %"for f127.s0.v4.us.preheader", label %"for f126.s0.v4.preheader", !prof !5

"for f127.s0.v4.us.preheader":                    ; preds = %"for f127.s0.v4.preheader"
  %1397 = add nsw i32 %b803, 3
  %1398 = sext i32 %b803 to i64
  %sext319 = sext i32 %1397 to i64
  br label %"for f127.s0.v4.us"

"for f127.s0.v4.us":                              ; preds = %"for f127.s0.v4.us.preheader", %"end for f127.s0.v3.v3.loopexit.us"
  %indvars.iv317 = phi i64 [ %1398, %"for f127.s0.v4.us.preheader" ], [ %indvars.iv.next318, %"end for f127.s0.v3.v3.loopexit.us" ]
  %indvars320 = trunc i64 %indvars.iv317 to i32
  %1399 = shl i32 %indvars320, 1
  %1400 = and i32 %1399, 2
  %1401 = ashr i32 %indvars320, 1
  %t2317.us = add nsw i32 %1400, %1401
  %1402 = trunc i64 %indvars.iv317 to i32
  %1403 = sub i32 %1402, %f73.v4.min_realized
  %1404 = mul i32 %1403, %1386
  %1405 = sub i32 %1404, %f73.v3.min_realized
  %1406 = add nsw i32 %t2317.us, %1387
  %t2324.us = mul nsw i32 %1406, %147
  %1407 = sub nsw i32 %1401, %816
  %t2326.us = mul nsw i32 %1407, %147
  %1408 = add i32 %t2317.us, %1388
  %1409 = mul nsw i32 %1408, %f6.stride.1
  %1410 = sub nsw i32 %1401, %f6.v4.min_realized
  %1411 = mul nsw i32 %1410, %f6.stride.1
  %1412 = sext i32 %t2326.us to i64
  %1413 = add nsw i64 %1412, -1
  %1414 = sext i32 %t2324.us to i64
  %1415 = add nsw i64 %1414, -1
  %1416 = sub nsw i64 %indvars.iv317, %1395
  %1417 = mul nsw i64 %1416, %1394
  %1418 = sub i64 %1417, %1396
  %1419 = trunc i64 %indvars.iv317 to i32
  %1420 = sub i32 %1419, %f5.v4.min_realized
  %1421 = mul i32 %1420, %f5.stride.1
  br label %"for f127.s0.v3.v3.us"

"for f127.s0.v3.v3.us":                           ; preds = %"for f127.s0.v4.us", %"for f127.s0.v3.v3.us"
  %lsr.iv414.us = phi i32 [ %lsr.iv.next415.us, %"for f127.s0.v3.v3.us" ], [ 0, %"for f127.s0.v4.us" ]
  %lsr.iv412.us = phi i32 [ %lsr.iv.next413.us, %"for f127.s0.v3.v3.us" ], [ %1384, %"for f127.s0.v4.us" ]
  %1422 = add i32 %lsr.iv414.us, %135
  %f127.s0.v3.v323.base.us = tail call i32 @llvm.smin.i32(i32 %b801, i32 %1422)
  %1423 = shl i32 %f127.s0.v3.v323.base.us, 1
  %1424 = and i32 %1423, 2
  %1425 = ashr i32 %f127.s0.v3.v323.base.us, 1
  %t2318.us = add nsw i32 %1424, %1425
  %t2319.us = add i32 %1405, %f127.s0.v3.v323.base.us
  %1426 = sext i32 %t2319.us to i64
  %1427 = getelementptr inbounds float, ptr %f73.host, i64 %1426
  %1428 = load <4 x float>, ptr %1427, align 4, !tbaa !51
  %1429 = add nsw i64 %1426, 4
  %1430 = getelementptr inbounds float, ptr %f73.host, i64 %1429
  %1431 = load <4 x float>, ptr %1430, align 4, !tbaa !51
  %1432 = shufflevector <4 x float> %1428, <4 x float> %1431, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2320.us = fmul <4 x float> %232, %1432
  %a841.us = fptosi <4 x float> %t2320.us to <4 x i32>
  %a844.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a841.us)
  %1433 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a844.us, <4 x i32> zeroinitializer)
  %1434 = sitofp <4 x i32> %1433 to <4 x float>
  %t2322.us = fsub <4 x float> %t2320.us, %1434
  %1435 = sub nsw i32 %f127.s0.v3.v323.base.us, %f5.v3.min_realized
  %t2327.us = add nsw i32 %1435, %1421
  %t2329.us = sub nsw <4 x i32> %1433, %241
  %1436 = sub nsw i32 %t2318.us, %f6.v3.min_realized
  %t2332.us = add nsw i32 %1436, %1409
  %t2333.us = mul nsw <4 x i32> %t2329.us, %824
  %1437 = sub nsw i32 %1425, %f6.v3.min_realized
  %t2335.us = add nsw i32 %1437, %1409
  %t2337.us = add nsw i32 %1436, %1411
  %t2338.us = add nsw i32 %1437, %1411
  %1438 = add nsw <4 x i32> %t2329.us, <i32 1, i32 1, i32 1, i32 1>
  %t2339.us = mul nsw <4 x i32> %1438, %824
  %1439 = add nsw i32 %f127.s0.v3.v323.base.us, 1
  %1440 = shl i32 %1439, 1
  %1441 = and i32 %1440, 2
  %1442 = ashr i32 %1439, 1
  %t2340.us = add nsw i32 %1441, %1442
  %1443 = shufflevector <4 x float> %1428, <4 x float> %1431, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2341.us = fmul <4 x float> %232, %1443
  %a845.us = fptosi <4 x float> %t2341.us to <4 x i32>
  %a848.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a845.us)
  %1444 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a848.us, <4 x i32> zeroinitializer)
  %1445 = sitofp <4 x i32> %1444 to <4 x float>
  %t2343.us = fsub <4 x float> %t2341.us, %1445
  %t2346.us = sub nsw <4 x i32> %1444, %241
  %1446 = sub nsw i32 %t2340.us, %f6.v3.min_realized
  %t2348.us = add nsw i32 %1446, %1409
  %t2349.us = mul nsw <4 x i32> %t2346.us, %824
  %1447 = sub nsw i32 %1442, %f6.v3.min_realized
  %t2351.us = add nsw i32 %1447, %1409
  %t2352.us = add nsw i32 %1446, %1411
  %t2353.us = add nsw i32 %1447, %1411
  %1448 = add nsw <4 x i32> %t2346.us, <i32 1, i32 1, i32 1, i32 1>
  %t2354.us = mul nsw <4 x i32> %1448, %824
  %1449 = insertelement <4 x i32> undef, i32 %t2338.us, i64 0
  %1450 = shufflevector <4 x i32> %1449, <4 x i32> undef, <4 x i32> zeroinitializer
  %1451 = add nsw <4 x i32> %1450, <i32 0, i32 1, i32 2, i32 3>
  %1452 = add nsw <4 x i32> %t2339.us, %1451
  %1453 = sext <4 x i32> %1452 to <4 x i64>
  %1454 = extractelement <4 x i64> %1453, i64 0
  %1455 = getelementptr inbounds float, ptr %f6.host, i64 %1454
  %1456 = load float, ptr %1455, align 4, !tbaa !49
  %1457 = insertelement <4 x float> undef, float %1456, i64 0
  %1458 = extractelement <4 x i64> %1453, i64 1
  %1459 = getelementptr inbounds float, ptr %f6.host, i64 %1458
  %1460 = load float, ptr %1459, align 4, !tbaa !49
  %1461 = insertelement <4 x float> %1457, float %1460, i64 1
  %1462 = extractelement <4 x i64> %1453, i64 2
  %1463 = getelementptr inbounds float, ptr %f6.host, i64 %1462
  %1464 = load float, ptr %1463, align 4, !tbaa !49
  %1465 = insertelement <4 x float> %1461, float %1464, i64 2
  %1466 = extractelement <4 x i64> %1453, i64 3
  %1467 = getelementptr inbounds float, ptr %f6.host, i64 %1466
  %1468 = load float, ptr %1467, align 4, !tbaa !49
  %1469 = insertelement <4 x float> %1465, float %1468, i64 3
  %1470 = fmul <4 x float> %1469, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1471 = insertelement <4 x i32> undef, i32 %t2337.us, i64 0
  %1472 = shufflevector <4 x i32> %1471, <4 x i32> undef, <4 x i32> zeroinitializer
  %1473 = add <4 x i32> %1472, <i32 -1, i32 0, i32 1, i32 2>
  %1474 = add <4 x i32> %1473, %t2339.us
  %1475 = sext <4 x i32> %1474 to <4 x i64>
  %1476 = extractelement <4 x i64> %1475, i64 0
  %1477 = getelementptr inbounds float, ptr %f6.host, i64 %1476
  %1478 = load float, ptr %1477, align 4, !tbaa !49
  %1479 = insertelement <4 x float> undef, float %1478, i64 0
  %1480 = extractelement <4 x i64> %1475, i64 1
  %1481 = getelementptr inbounds float, ptr %f6.host, i64 %1480
  %1482 = load float, ptr %1481, align 4, !tbaa !49
  %1483 = insertelement <4 x float> %1479, float %1482, i64 1
  %1484 = extractelement <4 x i64> %1475, i64 2
  %1485 = getelementptr inbounds float, ptr %f6.host, i64 %1484
  %1486 = load float, ptr %1485, align 4, !tbaa !49
  %1487 = insertelement <4 x float> %1483, float %1486, i64 2
  %1488 = extractelement <4 x i64> %1475, i64 3
  %1489 = getelementptr inbounds float, ptr %f6.host, i64 %1488
  %1490 = load float, ptr %1489, align 4, !tbaa !49
  %1491 = insertelement <4 x float> %1487, float %1490, i64 3
  %1492 = fmul <4 x float> %1491, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1493 = fadd <4 x float> %1470, %1492
  %1494 = fmul <4 x float> %1493, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1495 = insertelement <4 x i32> undef, i32 %t2335.us, i64 0
  %1496 = shufflevector <4 x i32> %1495, <4 x i32> undef, <4 x i32> zeroinitializer
  %1497 = add nsw <4 x i32> %1496, <i32 0, i32 1, i32 2, i32 3>
  %1498 = add nsw <4 x i32> %t2339.us, %1497
  %1499 = sext <4 x i32> %1498 to <4 x i64>
  %1500 = extractelement <4 x i64> %1499, i64 0
  %1501 = getelementptr inbounds float, ptr %f6.host, i64 %1500
  %1502 = load float, ptr %1501, align 4, !tbaa !49
  %1503 = insertelement <4 x float> undef, float %1502, i64 0
  %1504 = extractelement <4 x i64> %1499, i64 1
  %1505 = getelementptr inbounds float, ptr %f6.host, i64 %1504
  %1506 = load float, ptr %1505, align 4, !tbaa !49
  %1507 = insertelement <4 x float> %1503, float %1506, i64 1
  %1508 = extractelement <4 x i64> %1499, i64 2
  %1509 = getelementptr inbounds float, ptr %f6.host, i64 %1508
  %1510 = load float, ptr %1509, align 4, !tbaa !49
  %1511 = insertelement <4 x float> %1507, float %1510, i64 2
  %1512 = extractelement <4 x i64> %1499, i64 3
  %1513 = getelementptr inbounds float, ptr %f6.host, i64 %1512
  %1514 = load float, ptr %1513, align 4, !tbaa !49
  %1515 = insertelement <4 x float> %1511, float %1514, i64 3
  %1516 = fmul <4 x float> %1515, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1517 = insertelement <4 x i32> undef, i32 %t2332.us, i64 0
  %1518 = shufflevector <4 x i32> %1517, <4 x i32> undef, <4 x i32> zeroinitializer
  %1519 = add <4 x i32> %1518, <i32 -1, i32 0, i32 1, i32 2>
  %1520 = add <4 x i32> %1519, %t2339.us
  %1521 = sext <4 x i32> %1520 to <4 x i64>
  %1522 = extractelement <4 x i64> %1521, i64 0
  %1523 = getelementptr inbounds float, ptr %f6.host, i64 %1522
  %1524 = load float, ptr %1523, align 4, !tbaa !49
  %1525 = insertelement <4 x float> undef, float %1524, i64 0
  %1526 = extractelement <4 x i64> %1521, i64 1
  %1527 = getelementptr inbounds float, ptr %f6.host, i64 %1526
  %1528 = load float, ptr %1527, align 4, !tbaa !49
  %1529 = insertelement <4 x float> %1525, float %1528, i64 1
  %1530 = extractelement <4 x i64> %1521, i64 2
  %1531 = getelementptr inbounds float, ptr %f6.host, i64 %1530
  %1532 = load float, ptr %1531, align 4, !tbaa !49
  %1533 = insertelement <4 x float> %1529, float %1532, i64 2
  %1534 = extractelement <4 x i64> %1521, i64 3
  %1535 = getelementptr inbounds float, ptr %f6.host, i64 %1534
  %1536 = load float, ptr %1535, align 4, !tbaa !49
  %1537 = insertelement <4 x float> %1533, float %1536, i64 3
  %1538 = fmul <4 x float> %1537, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1539 = fadd <4 x float> %1516, %1538
  %1540 = fmul <4 x float> %1539, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1541 = fadd <4 x float> %1494, %1540
  %1542 = mul nsw <4 x i32> %1438, %1391
  %1543 = insertelement <4 x i32> undef, i32 %t2327.us, i64 0
  %1544 = shufflevector <4 x i32> %1543, <4 x i32> undef, <4 x i32> zeroinitializer
  %1545 = add nsw <4 x i32> %1544, <i32 0, i32 2, i32 4, i32 6>
  %1546 = add nsw <4 x i32> %1542, %1545
  %1547 = sext <4 x i32> %1546 to <4 x i64>
  %1548 = extractelement <4 x i64> %1547, i64 0
  %1549 = getelementptr inbounds float, ptr %f5.host, i64 %1548
  %1550 = load float, ptr %1549, align 4, !tbaa !45
  %1551 = insertelement <4 x float> undef, float %1550, i64 0
  %1552 = extractelement <4 x i64> %1547, i64 1
  %1553 = getelementptr inbounds float, ptr %f5.host, i64 %1552
  %1554 = load float, ptr %1553, align 4, !tbaa !45
  %1555 = insertelement <4 x float> %1551, float %1554, i64 1
  %1556 = extractelement <4 x i64> %1547, i64 2
  %1557 = getelementptr inbounds float, ptr %f5.host, i64 %1556
  %1558 = load float, ptr %1557, align 4, !tbaa !45
  %1559 = insertelement <4 x float> %1555, float %1558, i64 2
  %1560 = extractelement <4 x i64> %1547, i64 3
  %1561 = getelementptr inbounds float, ptr %f5.host, i64 %1560
  %1562 = load float, ptr %1561, align 4, !tbaa !45
  %1563 = insertelement <4 x float> %1559, float %1562, i64 3
  %1564 = fsub <4 x float> %1563, %1541
  %1565 = fmul <4 x float> %t2322.us, %1564
  %1566 = add nsw <4 x i32> %t2333.us, %1451
  %1567 = sext <4 x i32> %1566 to <4 x i64>
  %1568 = extractelement <4 x i64> %1567, i64 0
  %1569 = getelementptr inbounds float, ptr %f6.host, i64 %1568
  %1570 = load float, ptr %1569, align 4, !tbaa !49
  %1571 = insertelement <4 x float> undef, float %1570, i64 0
  %1572 = extractelement <4 x i64> %1567, i64 1
  %1573 = getelementptr inbounds float, ptr %f6.host, i64 %1572
  %1574 = load float, ptr %1573, align 4, !tbaa !49
  %1575 = insertelement <4 x float> %1571, float %1574, i64 1
  %1576 = extractelement <4 x i64> %1567, i64 2
  %1577 = getelementptr inbounds float, ptr %f6.host, i64 %1576
  %1578 = load float, ptr %1577, align 4, !tbaa !49
  %1579 = insertelement <4 x float> %1575, float %1578, i64 2
  %1580 = extractelement <4 x i64> %1567, i64 3
  %1581 = getelementptr inbounds float, ptr %f6.host, i64 %1580
  %1582 = load float, ptr %1581, align 4, !tbaa !49
  %1583 = insertelement <4 x float> %1579, float %1582, i64 3
  %1584 = fmul <4 x float> %1583, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1585 = add <4 x i32> %t2333.us, %1472
  %1586 = add <4 x i32> %1585, <i32 -1, i32 0, i32 1, i32 2>
  %1587 = sext <4 x i32> %1586 to <4 x i64>
  %1588 = extractelement <4 x i64> %1587, i64 0
  %1589 = getelementptr inbounds float, ptr %f6.host, i64 %1588
  %1590 = load float, ptr %1589, align 4, !tbaa !49
  %1591 = insertelement <4 x float> undef, float %1590, i64 0
  %1592 = extractelement <4 x i64> %1587, i64 1
  %1593 = getelementptr inbounds float, ptr %f6.host, i64 %1592
  %1594 = load float, ptr %1593, align 4, !tbaa !49
  %1595 = insertelement <4 x float> %1591, float %1594, i64 1
  %1596 = extractelement <4 x i64> %1587, i64 2
  %1597 = getelementptr inbounds float, ptr %f6.host, i64 %1596
  %1598 = load float, ptr %1597, align 4, !tbaa !49
  %1599 = insertelement <4 x float> %1595, float %1598, i64 2
  %1600 = extractelement <4 x i64> %1587, i64 3
  %1601 = getelementptr inbounds float, ptr %f6.host, i64 %1600
  %1602 = load float, ptr %1601, align 4, !tbaa !49
  %1603 = insertelement <4 x float> %1599, float %1602, i64 3
  %1604 = fmul <4 x float> %1603, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1605 = fadd <4 x float> %1584, %1604
  %1606 = fmul <4 x float> %1605, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1607 = add nsw <4 x i32> %t2333.us, %1497
  %1608 = sext <4 x i32> %1607 to <4 x i64>
  %1609 = extractelement <4 x i64> %1608, i64 0
  %1610 = getelementptr inbounds float, ptr %f6.host, i64 %1609
  %1611 = load float, ptr %1610, align 4, !tbaa !49
  %1612 = insertelement <4 x float> undef, float %1611, i64 0
  %1613 = extractelement <4 x i64> %1608, i64 1
  %1614 = getelementptr inbounds float, ptr %f6.host, i64 %1613
  %1615 = load float, ptr %1614, align 4, !tbaa !49
  %1616 = insertelement <4 x float> %1612, float %1615, i64 1
  %1617 = extractelement <4 x i64> %1608, i64 2
  %1618 = getelementptr inbounds float, ptr %f6.host, i64 %1617
  %1619 = load float, ptr %1618, align 4, !tbaa !49
  %1620 = insertelement <4 x float> %1616, float %1619, i64 2
  %1621 = extractelement <4 x i64> %1608, i64 3
  %1622 = getelementptr inbounds float, ptr %f6.host, i64 %1621
  %1623 = load float, ptr %1622, align 4, !tbaa !49
  %1624 = insertelement <4 x float> %1620, float %1623, i64 3
  %1625 = fmul <4 x float> %1624, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1626 = add <4 x i32> %t2333.us, %1518
  %1627 = add <4 x i32> %1626, <i32 -1, i32 0, i32 1, i32 2>
  %1628 = sext <4 x i32> %1627 to <4 x i64>
  %1629 = extractelement <4 x i64> %1628, i64 0
  %1630 = getelementptr inbounds float, ptr %f6.host, i64 %1629
  %1631 = load float, ptr %1630, align 4, !tbaa !49
  %1632 = insertelement <4 x float> undef, float %1631, i64 0
  %1633 = extractelement <4 x i64> %1628, i64 1
  %1634 = getelementptr inbounds float, ptr %f6.host, i64 %1633
  %1635 = load float, ptr %1634, align 4, !tbaa !49
  %1636 = insertelement <4 x float> %1632, float %1635, i64 1
  %1637 = extractelement <4 x i64> %1628, i64 2
  %1638 = getelementptr inbounds float, ptr %f6.host, i64 %1637
  %1639 = load float, ptr %1638, align 4, !tbaa !49
  %1640 = insertelement <4 x float> %1636, float %1639, i64 2
  %1641 = extractelement <4 x i64> %1628, i64 3
  %1642 = getelementptr inbounds float, ptr %f6.host, i64 %1641
  %1643 = load float, ptr %1642, align 4, !tbaa !49
  %1644 = insertelement <4 x float> %1640, float %1643, i64 3
  %1645 = fmul <4 x float> %1644, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1646 = fadd <4 x float> %1625, %1645
  %1647 = fmul <4 x float> %1646, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1648 = fadd <4 x float> %1606, %1647
  %1649 = mul nsw <4 x i32> %t2329.us, %1391
  %1650 = add nsw <4 x i32> %1649, %1545
  %1651 = sext <4 x i32> %1650 to <4 x i64>
  %1652 = extractelement <4 x i64> %1651, i64 0
  %1653 = getelementptr inbounds float, ptr %f5.host, i64 %1652
  %1654 = load float, ptr %1653, align 4, !tbaa !45
  %1655 = insertelement <4 x float> undef, float %1654, i64 0
  %1656 = extractelement <4 x i64> %1651, i64 1
  %1657 = getelementptr inbounds float, ptr %f5.host, i64 %1656
  %1658 = load float, ptr %1657, align 4, !tbaa !45
  %1659 = insertelement <4 x float> %1655, float %1658, i64 1
  %1660 = extractelement <4 x i64> %1651, i64 2
  %1661 = getelementptr inbounds float, ptr %f5.host, i64 %1660
  %1662 = load float, ptr %1661, align 4, !tbaa !45
  %1663 = insertelement <4 x float> %1659, float %1662, i64 2
  %1664 = extractelement <4 x i64> %1651, i64 3
  %1665 = getelementptr inbounds float, ptr %f5.host, i64 %1664
  %1666 = load float, ptr %1665, align 4, !tbaa !45
  %1667 = insertelement <4 x float> %1663, float %1666, i64 3
  %1668 = fsub <4 x float> %1667, %1648
  %1669 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2322.us
  %1670 = fmul <4 x float> %1669, %1668
  %1671 = fadd <4 x float> %1565, %1670
  %narrow152.us = sub nsw i32 %1425, %f128.v3.min_realized
  %1672 = sext i32 %narrow152.us to i64
  %1673 = add nsw i64 %1672, %1412
  %1674 = getelementptr inbounds float, ptr %154, i64 %1673
  %1675 = load <4 x float>, ptr %1674, align 4, !tbaa !65
  %1676 = fmul <4 x float> %1675, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1677 = sext i32 %t2318.us to i64
  %1678 = sub nsw i64 %1677, %1392
  %1679 = add nsw i64 %1413, %1678
  %1680 = getelementptr inbounds float, ptr %154, i64 %1679
  %1681 = load <4 x float>, ptr %1680, align 4, !tbaa !65
  %1682 = fmul <4 x float> %1681, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1683 = fadd <4 x float> %1676, %1682
  %1684 = fmul <4 x float> %1683, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1685 = add nsw i64 %1672, %1414
  %1686 = getelementptr inbounds float, ptr %154, i64 %1685
  %1687 = load <4 x float>, ptr %1686, align 4, !tbaa !65
  %1688 = fmul <4 x float> %1687, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1689 = add nsw i64 %1415, %1678
  %1690 = getelementptr inbounds float, ptr %154, i64 %1689
  %1691 = load <4 x float>, ptr %1690, align 4, !tbaa !65
  %1692 = fmul <4 x float> %1691, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1693 = fadd <4 x float> %1688, %1692
  %1694 = fmul <4 x float> %1693, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1695 = fadd <4 x float> %1684, %1694
  %1696 = fadd <4 x float> %1671, %1695
  %1697 = insertelement <4 x i32> undef, i32 %t2353.us, i64 0
  %1698 = shufflevector <4 x i32> %1697, <4 x i32> undef, <4 x i32> zeroinitializer
  %1699 = add nsw <4 x i32> %1698, <i32 0, i32 1, i32 2, i32 3>
  %1700 = add nsw <4 x i32> %t2354.us, %1699
  %1701 = sext <4 x i32> %1700 to <4 x i64>
  %1702 = extractelement <4 x i64> %1701, i64 0
  %1703 = getelementptr inbounds float, ptr %f6.host, i64 %1702
  %1704 = load float, ptr %1703, align 4, !tbaa !49
  %1705 = insertelement <4 x float> undef, float %1704, i64 0
  %1706 = extractelement <4 x i64> %1701, i64 1
  %1707 = getelementptr inbounds float, ptr %f6.host, i64 %1706
  %1708 = load float, ptr %1707, align 4, !tbaa !49
  %1709 = insertelement <4 x float> %1705, float %1708, i64 1
  %1710 = extractelement <4 x i64> %1701, i64 2
  %1711 = getelementptr inbounds float, ptr %f6.host, i64 %1710
  %1712 = load float, ptr %1711, align 4, !tbaa !49
  %1713 = insertelement <4 x float> %1709, float %1712, i64 2
  %1714 = extractelement <4 x i64> %1701, i64 3
  %1715 = getelementptr inbounds float, ptr %f6.host, i64 %1714
  %1716 = load float, ptr %1715, align 4, !tbaa !49
  %1717 = insertelement <4 x float> %1713, float %1716, i64 3
  %1718 = fmul <4 x float> %1717, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1719 = insertelement <4 x i32> undef, i32 %t2352.us, i64 0
  %1720 = shufflevector <4 x i32> %1719, <4 x i32> undef, <4 x i32> zeroinitializer
  %1721 = add nsw <4 x i32> %1720, <i32 0, i32 1, i32 2, i32 3>
  %1722 = add <4 x i32> %t2354.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1723 = add <4 x i32> %1722, %1721
  %1724 = sext <4 x i32> %1723 to <4 x i64>
  %1725 = extractelement <4 x i64> %1724, i64 0
  %1726 = getelementptr inbounds float, ptr %f6.host, i64 %1725
  %1727 = load float, ptr %1726, align 4, !tbaa !49
  %1728 = insertelement <4 x float> undef, float %1727, i64 0
  %1729 = extractelement <4 x i64> %1724, i64 1
  %1730 = getelementptr inbounds float, ptr %f6.host, i64 %1729
  %1731 = load float, ptr %1730, align 4, !tbaa !49
  %1732 = insertelement <4 x float> %1728, float %1731, i64 1
  %1733 = extractelement <4 x i64> %1724, i64 2
  %1734 = getelementptr inbounds float, ptr %f6.host, i64 %1733
  %1735 = load float, ptr %1734, align 4, !tbaa !49
  %1736 = insertelement <4 x float> %1732, float %1735, i64 2
  %1737 = extractelement <4 x i64> %1724, i64 3
  %1738 = getelementptr inbounds float, ptr %f6.host, i64 %1737
  %1739 = load float, ptr %1738, align 4, !tbaa !49
  %1740 = insertelement <4 x float> %1736, float %1739, i64 3
  %1741 = fmul <4 x float> %1740, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1742 = fadd <4 x float> %1718, %1741
  %1743 = fmul <4 x float> %1742, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1744 = insertelement <4 x i32> undef, i32 %t2351.us, i64 0
  %1745 = shufflevector <4 x i32> %1744, <4 x i32> undef, <4 x i32> zeroinitializer
  %1746 = add nsw <4 x i32> %1745, <i32 0, i32 1, i32 2, i32 3>
  %1747 = add nsw <4 x i32> %t2354.us, %1746
  %1748 = sext <4 x i32> %1747 to <4 x i64>
  %1749 = extractelement <4 x i64> %1748, i64 0
  %1750 = getelementptr inbounds float, ptr %f6.host, i64 %1749
  %1751 = load float, ptr %1750, align 4, !tbaa !49
  %1752 = insertelement <4 x float> undef, float %1751, i64 0
  %1753 = extractelement <4 x i64> %1748, i64 1
  %1754 = getelementptr inbounds float, ptr %f6.host, i64 %1753
  %1755 = load float, ptr %1754, align 4, !tbaa !49
  %1756 = insertelement <4 x float> %1752, float %1755, i64 1
  %1757 = extractelement <4 x i64> %1748, i64 2
  %1758 = getelementptr inbounds float, ptr %f6.host, i64 %1757
  %1759 = load float, ptr %1758, align 4, !tbaa !49
  %1760 = insertelement <4 x float> %1756, float %1759, i64 2
  %1761 = extractelement <4 x i64> %1748, i64 3
  %1762 = getelementptr inbounds float, ptr %f6.host, i64 %1761
  %1763 = load float, ptr %1762, align 4, !tbaa !49
  %1764 = insertelement <4 x float> %1760, float %1763, i64 3
  %1765 = fmul <4 x float> %1764, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1766 = insertelement <4 x i32> undef, i32 %t2348.us, i64 0
  %1767 = shufflevector <4 x i32> %1766, <4 x i32> undef, <4 x i32> zeroinitializer
  %1768 = add nsw <4 x i32> %1767, <i32 0, i32 1, i32 2, i32 3>
  %1769 = add <4 x i32> %1722, %1768
  %1770 = sext <4 x i32> %1769 to <4 x i64>
  %1771 = extractelement <4 x i64> %1770, i64 0
  %1772 = getelementptr inbounds float, ptr %f6.host, i64 %1771
  %1773 = load float, ptr %1772, align 4, !tbaa !49
  %1774 = insertelement <4 x float> undef, float %1773, i64 0
  %1775 = extractelement <4 x i64> %1770, i64 1
  %1776 = getelementptr inbounds float, ptr %f6.host, i64 %1775
  %1777 = load float, ptr %1776, align 4, !tbaa !49
  %1778 = insertelement <4 x float> %1774, float %1777, i64 1
  %1779 = extractelement <4 x i64> %1770, i64 2
  %1780 = getelementptr inbounds float, ptr %f6.host, i64 %1779
  %1781 = load float, ptr %1780, align 4, !tbaa !49
  %1782 = insertelement <4 x float> %1778, float %1781, i64 2
  %1783 = extractelement <4 x i64> %1770, i64 3
  %1784 = getelementptr inbounds float, ptr %f6.host, i64 %1783
  %1785 = load float, ptr %1784, align 4, !tbaa !49
  %1786 = insertelement <4 x float> %1782, float %1785, i64 3
  %1787 = fmul <4 x float> %1786, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1788 = fadd <4 x float> %1765, %1787
  %1789 = fmul <4 x float> %1788, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1790 = fadd <4 x float> %1743, %1789
  %1791 = mul nsw <4 x i32> %1448, %1391
  %1792 = add nsw i32 %t2327.us, 1
  %1793 = insertelement <4 x i32> undef, i32 %1792, i64 0
  %1794 = shufflevector <4 x i32> %1793, <4 x i32> undef, <4 x i32> zeroinitializer
  %1795 = add nsw <4 x i32> %1794, <i32 0, i32 2, i32 4, i32 6>
  %1796 = add nsw <4 x i32> %1791, %1795
  %1797 = sext <4 x i32> %1796 to <4 x i64>
  %1798 = extractelement <4 x i64> %1797, i64 0
  %1799 = getelementptr inbounds float, ptr %f5.host, i64 %1798
  %1800 = load float, ptr %1799, align 4, !tbaa !45
  %1801 = insertelement <4 x float> undef, float %1800, i64 0
  %1802 = extractelement <4 x i64> %1797, i64 1
  %1803 = getelementptr inbounds float, ptr %f5.host, i64 %1802
  %1804 = load float, ptr %1803, align 4, !tbaa !45
  %1805 = insertelement <4 x float> %1801, float %1804, i64 1
  %1806 = extractelement <4 x i64> %1797, i64 2
  %1807 = getelementptr inbounds float, ptr %f5.host, i64 %1806
  %1808 = load float, ptr %1807, align 4, !tbaa !45
  %1809 = insertelement <4 x float> %1805, float %1808, i64 2
  %1810 = extractelement <4 x i64> %1797, i64 3
  %1811 = getelementptr inbounds float, ptr %f5.host, i64 %1810
  %1812 = load float, ptr %1811, align 4, !tbaa !45
  %1813 = insertelement <4 x float> %1809, float %1812, i64 3
  %1814 = fsub <4 x float> %1813, %1790
  %1815 = fmul <4 x float> %t2343.us, %1814
  %1816 = add nsw <4 x i32> %t2349.us, %1699
  %1817 = sext <4 x i32> %1816 to <4 x i64>
  %1818 = extractelement <4 x i64> %1817, i64 0
  %1819 = getelementptr inbounds float, ptr %f6.host, i64 %1818
  %1820 = load float, ptr %1819, align 4, !tbaa !49
  %1821 = insertelement <4 x float> undef, float %1820, i64 0
  %1822 = extractelement <4 x i64> %1817, i64 1
  %1823 = getelementptr inbounds float, ptr %f6.host, i64 %1822
  %1824 = load float, ptr %1823, align 4, !tbaa !49
  %1825 = insertelement <4 x float> %1821, float %1824, i64 1
  %1826 = extractelement <4 x i64> %1817, i64 2
  %1827 = getelementptr inbounds float, ptr %f6.host, i64 %1826
  %1828 = load float, ptr %1827, align 4, !tbaa !49
  %1829 = insertelement <4 x float> %1825, float %1828, i64 2
  %1830 = extractelement <4 x i64> %1817, i64 3
  %1831 = getelementptr inbounds float, ptr %f6.host, i64 %1830
  %1832 = load float, ptr %1831, align 4, !tbaa !49
  %1833 = insertelement <4 x float> %1829, float %1832, i64 3
  %1834 = fmul <4 x float> %1833, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1835 = add <4 x i32> %t2349.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1836 = add <4 x i32> %1835, %1721
  %1837 = sext <4 x i32> %1836 to <4 x i64>
  %1838 = extractelement <4 x i64> %1837, i64 0
  %1839 = getelementptr inbounds float, ptr %f6.host, i64 %1838
  %1840 = load float, ptr %1839, align 4, !tbaa !49
  %1841 = insertelement <4 x float> undef, float %1840, i64 0
  %1842 = extractelement <4 x i64> %1837, i64 1
  %1843 = getelementptr inbounds float, ptr %f6.host, i64 %1842
  %1844 = load float, ptr %1843, align 4, !tbaa !49
  %1845 = insertelement <4 x float> %1841, float %1844, i64 1
  %1846 = extractelement <4 x i64> %1837, i64 2
  %1847 = getelementptr inbounds float, ptr %f6.host, i64 %1846
  %1848 = load float, ptr %1847, align 4, !tbaa !49
  %1849 = insertelement <4 x float> %1845, float %1848, i64 2
  %1850 = extractelement <4 x i64> %1837, i64 3
  %1851 = getelementptr inbounds float, ptr %f6.host, i64 %1850
  %1852 = load float, ptr %1851, align 4, !tbaa !49
  %1853 = insertelement <4 x float> %1849, float %1852, i64 3
  %1854 = fmul <4 x float> %1853, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1855 = fadd <4 x float> %1834, %1854
  %1856 = fmul <4 x float> %1855, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1857 = add nsw <4 x i32> %t2349.us, %1746
  %1858 = sext <4 x i32> %1857 to <4 x i64>
  %1859 = extractelement <4 x i64> %1858, i64 0
  %1860 = getelementptr inbounds float, ptr %f6.host, i64 %1859
  %1861 = load float, ptr %1860, align 4, !tbaa !49
  %1862 = insertelement <4 x float> undef, float %1861, i64 0
  %1863 = extractelement <4 x i64> %1858, i64 1
  %1864 = getelementptr inbounds float, ptr %f6.host, i64 %1863
  %1865 = load float, ptr %1864, align 4, !tbaa !49
  %1866 = insertelement <4 x float> %1862, float %1865, i64 1
  %1867 = extractelement <4 x i64> %1858, i64 2
  %1868 = getelementptr inbounds float, ptr %f6.host, i64 %1867
  %1869 = load float, ptr %1868, align 4, !tbaa !49
  %1870 = insertelement <4 x float> %1866, float %1869, i64 2
  %1871 = extractelement <4 x i64> %1858, i64 3
  %1872 = getelementptr inbounds float, ptr %f6.host, i64 %1871
  %1873 = load float, ptr %1872, align 4, !tbaa !49
  %1874 = insertelement <4 x float> %1870, float %1873, i64 3
  %1875 = fmul <4 x float> %1874, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1876 = add <4 x i32> %1835, %1768
  %1877 = sext <4 x i32> %1876 to <4 x i64>
  %1878 = extractelement <4 x i64> %1877, i64 0
  %1879 = getelementptr inbounds float, ptr %f6.host, i64 %1878
  %1880 = load float, ptr %1879, align 4, !tbaa !49
  %1881 = insertelement <4 x float> undef, float %1880, i64 0
  %1882 = extractelement <4 x i64> %1877, i64 1
  %1883 = getelementptr inbounds float, ptr %f6.host, i64 %1882
  %1884 = load float, ptr %1883, align 4, !tbaa !49
  %1885 = insertelement <4 x float> %1881, float %1884, i64 1
  %1886 = extractelement <4 x i64> %1877, i64 2
  %1887 = getelementptr inbounds float, ptr %f6.host, i64 %1886
  %1888 = load float, ptr %1887, align 4, !tbaa !49
  %1889 = insertelement <4 x float> %1885, float %1888, i64 2
  %1890 = extractelement <4 x i64> %1877, i64 3
  %1891 = getelementptr inbounds float, ptr %f6.host, i64 %1890
  %1892 = load float, ptr %1891, align 4, !tbaa !49
  %1893 = insertelement <4 x float> %1889, float %1892, i64 3
  %1894 = fmul <4 x float> %1893, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1895 = fadd <4 x float> %1875, %1894
  %1896 = fmul <4 x float> %1895, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1897 = fadd <4 x float> %1856, %1896
  %1898 = mul nsw <4 x i32> %t2346.us, %1391
  %1899 = add nsw <4 x i32> %1898, %1795
  %1900 = sext <4 x i32> %1899 to <4 x i64>
  %1901 = extractelement <4 x i64> %1900, i64 0
  %1902 = getelementptr inbounds float, ptr %f5.host, i64 %1901
  %1903 = load float, ptr %1902, align 4, !tbaa !45
  %1904 = insertelement <4 x float> undef, float %1903, i64 0
  %1905 = extractelement <4 x i64> %1900, i64 1
  %1906 = getelementptr inbounds float, ptr %f5.host, i64 %1905
  %1907 = load float, ptr %1906, align 4, !tbaa !45
  %1908 = insertelement <4 x float> %1904, float %1907, i64 1
  %1909 = extractelement <4 x i64> %1900, i64 2
  %1910 = getelementptr inbounds float, ptr %f5.host, i64 %1909
  %1911 = load float, ptr %1910, align 4, !tbaa !45
  %1912 = insertelement <4 x float> %1908, float %1911, i64 2
  %1913 = extractelement <4 x i64> %1900, i64 3
  %1914 = getelementptr inbounds float, ptr %f5.host, i64 %1913
  %1915 = load float, ptr %1914, align 4, !tbaa !45
  %1916 = insertelement <4 x float> %1912, float %1915, i64 3
  %1917 = fsub <4 x float> %1916, %1897
  %1918 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2343.us
  %1919 = fmul <4 x float> %1918, %1917
  %1920 = fadd <4 x float> %1815, %1919
  %narrow153.us = sub nsw i32 %1442, %f128.v3.min_realized
  %1921 = sext i32 %narrow153.us to i64
  %1922 = add nsw i64 %1921, %1412
  %1923 = getelementptr inbounds float, ptr %154, i64 %1922
  %1924 = load <4 x float>, ptr %1923, align 4, !tbaa !65
  %1925 = fmul <4 x float> %1924, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1926 = sext i32 %t2340.us to i64
  %1927 = sub nsw i64 %1926, %1392
  %1928 = add nsw i64 %1413, %1927
  %1929 = getelementptr inbounds float, ptr %154, i64 %1928
  %1930 = load <4 x float>, ptr %1929, align 4, !tbaa !65
  %1931 = fmul <4 x float> %1930, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1932 = fadd <4 x float> %1925, %1931
  %1933 = fmul <4 x float> %1932, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1934 = add nsw i64 %1921, %1414
  %1935 = getelementptr inbounds float, ptr %154, i64 %1934
  %1936 = load <4 x float>, ptr %1935, align 4, !tbaa !65
  %1937 = fmul <4 x float> %1936, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1938 = add nsw i64 %1415, %1927
  %1939 = getelementptr inbounds float, ptr %154, i64 %1938
  %1940 = load <4 x float>, ptr %1939, align 4, !tbaa !65
  %1941 = fmul <4 x float> %1940, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1942 = fadd <4 x float> %1937, %1941
  %1943 = fmul <4 x float> %1942, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1944 = fadd <4 x float> %1933, %1943
  %1945 = fadd <4 x float> %1920, %1944
  %1946 = shufflevector <4 x float> %1696, <4 x float> %1945, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %1947 = sext i32 %f127.s0.v3.v323.base.us to i64
  %1948 = add i64 %1418, %1947
  %1949 = getelementptr inbounds float, ptr %193, i64 %1948
  store <8 x float> %1946, ptr %1949, align 4, !tbaa !67
  %lsr.iv.next413.us = add i32 %lsr.iv412.us, -1
  %lsr.iv.next415.us = add i32 %lsr.iv414.us, 8
  %.not154.us = icmp eq i32 %lsr.iv.next413.us, 0
  br i1 %.not154.us, label %"end for f127.s0.v3.v3.loopexit.us", label %"for f127.s0.v3.v3.us"

"end for f127.s0.v3.v3.loopexit.us":              ; preds = %"for f127.s0.v3.v3.us"
  %indvars.iv.next318 = add nsw i64 %indvars.iv317, 1
  %1950 = icmp eq i64 %indvars.iv317, %sext319
  br i1 %1950, label %"for f126.s0.v4.preheader", label %"for f127.s0.v4.us"

"for f126.s0.v4.preheader":                       ; preds = %"end for f127.s0.v3.v3.loopexit.us", %"for f127.s0.v4.preheader"
  %1951 = add nsw i32 %167, 9
  %1952 = ashr i32 %1951, 3
  %1953 = icmp sgt i32 %167, -2
  %1954 = add nsw i32 %f72.v3.extent_realized.s, 1
  %1955 = xor i32 %f127.v4.min_realized, -1
  %1956 = xor i32 %f5.v4.min_realized, -1
  %1957 = add nsw i32 %f4.v3.extent_realized.s, 1
  %1958 = insertelement <4 x i32> undef, i32 %1957, i64 0
  %1959 = shufflevector <4 x i32> %1958, <4 x i32> undef, <4 x i32> zeroinitializer
  %1960 = sext i32 %f126.v3.extent_realized.s to i64
  %1961 = add nsw i64 %1960, 1
  %1962 = sext i32 %158 to i64
  %1963 = sext i32 %f126.v3.min_realized to i64
  br i1 %1953, label %"for f126.s0.v4.us.preheader", label %"consume f126", !prof !5

"for f126.s0.v4.us.preheader":                    ; preds = %"for f126.s0.v4.preheader"
  %1964 = add nsw i32 %156, 1
  %narrow367 = add nsw i32 %156, -1
  %1965 = sext i32 %narrow367 to i64
  %sext323 = sext i32 %1964 to i64
  br label %"for f126.s0.v4.us"

"for f126.s0.v4.us":                              ; preds = %"for f126.s0.v4.us.preheader", %"end for f126.s0.v3.v3.loopexit.us"
  %indvars.iv321 = phi i64 [ %1965, %"for f126.s0.v4.us.preheader" ], [ %indvars.iv.next322, %"end for f126.s0.v3.v3.loopexit.us" ]
  %1966 = trunc i64 %indvars.iv321 to i32
  %1967 = shl i32 %1966, 1
  %1968 = and i32 %1967, 2
  %1969 = ashr i32 %1966, 1
  %t2355.us = add nsw i32 %1968, %1969
  %1970 = trunc i64 %indvars.iv321 to i32
  %1971 = sub i32 %1970, %f72.v4.min_realized
  %1972 = mul i32 %1971, %1954
  %1973 = sub i32 %1972, %f72.v3.min_realized
  %1974 = add nsw i32 %t2355.us, %1955
  %t2362.us = mul nsw i32 %1974, %178
  %1975 = sub nsw i32 %1969, %f127.v4.min_realized
  %t2364.us = mul nsw i32 %1975, %178
  %1976 = add i32 %t2355.us, %1956
  %1977 = mul nsw i32 %1976, %f5.stride.1
  %1978 = sub nsw i32 %1969, %f5.v4.min_realized
  %1979 = mul nsw i32 %1978, %f5.stride.1
  %1980 = sext i32 %t2364.us to i64
  %1981 = add nsw i64 %1980, -1
  %1982 = sext i32 %t2362.us to i64
  %1983 = add nsw i64 %1982, -1
  %1984 = sub nsw i64 %indvars.iv321, %1962
  %1985 = mul nsw i64 %1984, %1961
  %1986 = sub i64 %1985, %1963
  %1987 = trunc i64 %indvars.iv321 to i32
  %1988 = sub i32 %1987, %f4.v4.min_realized
  %1989 = mul i32 %1988, %f4.stride.1
  br label %"for f126.s0.v3.v3.us"

"for f126.s0.v3.v3.us":                           ; preds = %"for f126.s0.v4.us", %"for f126.s0.v3.v3.us"
  %lsr.iv410.us = phi i32 [ %lsr.iv.next411.us, %"for f126.s0.v3.v3.us" ], [ -1, %"for f126.s0.v4.us" ]
  %lsr.iv408.us = phi i32 [ %lsr.iv.next409.us, %"for f126.s0.v3.v3.us" ], [ %1952, %"for f126.s0.v4.us" ]
  %1990 = add i32 %lsr.iv410.us, %161
  %f126.s0.v3.v303.base.us = tail call i32 @llvm.smin.i32(i32 %b806, i32 %1990)
  %1991 = shl i32 %f126.s0.v3.v303.base.us, 1
  %1992 = and i32 %1991, 2
  %1993 = ashr i32 %f126.s0.v3.v303.base.us, 1
  %t2356.us = add nsw i32 %1992, %1993
  %t2357.us = add i32 %1973, %f126.s0.v3.v303.base.us
  %1994 = sext i32 %t2357.us to i64
  %1995 = getelementptr inbounds float, ptr %f72.host, i64 %1994
  %1996 = load <4 x float>, ptr %1995, align 4, !tbaa !47
  %1997 = add nsw i64 %1994, 4
  %1998 = getelementptr inbounds float, ptr %f72.host, i64 %1997
  %1999 = load <4 x float>, ptr %1998, align 4, !tbaa !47
  %2000 = shufflevector <4 x float> %1996, <4 x float> %1999, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2358.us = fmul <4 x float> %232, %2000
  %a850.us = fptosi <4 x float> %t2358.us to <4 x i32>
  %a853.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a850.us)
  %2001 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a853.us, <4 x i32> zeroinitializer)
  %2002 = sitofp <4 x i32> %2001 to <4 x float>
  %t2360.us = fsub <4 x float> %t2358.us, %2002
  %2003 = sub nsw i32 %f126.s0.v3.v303.base.us, %f4.v3.min_realized
  %t2365.us = add nsw i32 %2003, %1989
  %t2367.us = sub nsw <4 x i32> %2001, %241
  %2004 = sub nsw i32 %t2356.us, %f5.v3.min_realized
  %t2370.us = add nsw i32 %2004, %1977
  %t2371.us = mul nsw <4 x i32> %t2367.us, %1391
  %2005 = sub nsw i32 %1993, %f5.v3.min_realized
  %t2373.us = add nsw i32 %2005, %1977
  %t2375.us = add nsw i32 %2004, %1979
  %t2376.us = add nsw i32 %2005, %1979
  %2006 = add nsw <4 x i32> %t2367.us, <i32 1, i32 1, i32 1, i32 1>
  %t2377.us = mul nsw <4 x i32> %2006, %1391
  %2007 = add nsw i32 %f126.s0.v3.v303.base.us, 1
  %2008 = shl i32 %2007, 1
  %2009 = and i32 %2008, 2
  %2010 = ashr i32 %2007, 1
  %t2378.us = add nsw i32 %2009, %2010
  %2011 = shufflevector <4 x float> %1996, <4 x float> %1999, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2379.us = fmul <4 x float> %232, %2011
  %a854.us = fptosi <4 x float> %t2379.us to <4 x i32>
  %a857.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a854.us)
  %2012 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a857.us, <4 x i32> zeroinitializer)
  %2013 = sitofp <4 x i32> %2012 to <4 x float>
  %t2381.us = fsub <4 x float> %t2379.us, %2013
  %t2384.us = sub nsw <4 x i32> %2012, %241
  %2014 = sub nsw i32 %t2378.us, %f5.v3.min_realized
  %t2386.us = add nsw i32 %2014, %1977
  %t2387.us = mul nsw <4 x i32> %t2384.us, %1391
  %2015 = sub nsw i32 %2010, %f5.v3.min_realized
  %t2389.us = add nsw i32 %2015, %1977
  %t2390.us = add nsw i32 %2014, %1979
  %t2391.us = add nsw i32 %2015, %1979
  %2016 = add nsw <4 x i32> %t2384.us, <i32 1, i32 1, i32 1, i32 1>
  %t2392.us = mul nsw <4 x i32> %2016, %1391
  %2017 = insertelement <4 x i32> undef, i32 %t2376.us, i64 0
  %2018 = shufflevector <4 x i32> %2017, <4 x i32> undef, <4 x i32> zeroinitializer
  %2019 = add nsw <4 x i32> %2018, <i32 0, i32 1, i32 2, i32 3>
  %2020 = add nsw <4 x i32> %t2377.us, %2019
  %2021 = sext <4 x i32> %2020 to <4 x i64>
  %2022 = extractelement <4 x i64> %2021, i64 0
  %2023 = getelementptr inbounds float, ptr %f5.host, i64 %2022
  %2024 = load float, ptr %2023, align 4, !tbaa !45
  %2025 = insertelement <4 x float> undef, float %2024, i64 0
  %2026 = extractelement <4 x i64> %2021, i64 1
  %2027 = getelementptr inbounds float, ptr %f5.host, i64 %2026
  %2028 = load float, ptr %2027, align 4, !tbaa !45
  %2029 = insertelement <4 x float> %2025, float %2028, i64 1
  %2030 = extractelement <4 x i64> %2021, i64 2
  %2031 = getelementptr inbounds float, ptr %f5.host, i64 %2030
  %2032 = load float, ptr %2031, align 4, !tbaa !45
  %2033 = insertelement <4 x float> %2029, float %2032, i64 2
  %2034 = extractelement <4 x i64> %2021, i64 3
  %2035 = getelementptr inbounds float, ptr %f5.host, i64 %2034
  %2036 = load float, ptr %2035, align 4, !tbaa !45
  %2037 = insertelement <4 x float> %2033, float %2036, i64 3
  %2038 = fmul <4 x float> %2037, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2039 = insertelement <4 x i32> undef, i32 %t2375.us, i64 0
  %2040 = shufflevector <4 x i32> %2039, <4 x i32> undef, <4 x i32> zeroinitializer
  %2041 = add <4 x i32> %2040, <i32 -1, i32 0, i32 1, i32 2>
  %2042 = add <4 x i32> %2041, %t2377.us
  %2043 = sext <4 x i32> %2042 to <4 x i64>
  %2044 = extractelement <4 x i64> %2043, i64 0
  %2045 = getelementptr inbounds float, ptr %f5.host, i64 %2044
  %2046 = load float, ptr %2045, align 4, !tbaa !45
  %2047 = insertelement <4 x float> undef, float %2046, i64 0
  %2048 = extractelement <4 x i64> %2043, i64 1
  %2049 = getelementptr inbounds float, ptr %f5.host, i64 %2048
  %2050 = load float, ptr %2049, align 4, !tbaa !45
  %2051 = insertelement <4 x float> %2047, float %2050, i64 1
  %2052 = extractelement <4 x i64> %2043, i64 2
  %2053 = getelementptr inbounds float, ptr %f5.host, i64 %2052
  %2054 = load float, ptr %2053, align 4, !tbaa !45
  %2055 = insertelement <4 x float> %2051, float %2054, i64 2
  %2056 = extractelement <4 x i64> %2043, i64 3
  %2057 = getelementptr inbounds float, ptr %f5.host, i64 %2056
  %2058 = load float, ptr %2057, align 4, !tbaa !45
  %2059 = insertelement <4 x float> %2055, float %2058, i64 3
  %2060 = fmul <4 x float> %2059, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2061 = fadd <4 x float> %2038, %2060
  %2062 = fmul <4 x float> %2061, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2063 = insertelement <4 x i32> undef, i32 %t2373.us, i64 0
  %2064 = shufflevector <4 x i32> %2063, <4 x i32> undef, <4 x i32> zeroinitializer
  %2065 = add nsw <4 x i32> %2064, <i32 0, i32 1, i32 2, i32 3>
  %2066 = add nsw <4 x i32> %t2377.us, %2065
  %2067 = sext <4 x i32> %2066 to <4 x i64>
  %2068 = extractelement <4 x i64> %2067, i64 0
  %2069 = getelementptr inbounds float, ptr %f5.host, i64 %2068
  %2070 = load float, ptr %2069, align 4, !tbaa !45
  %2071 = insertelement <4 x float> undef, float %2070, i64 0
  %2072 = extractelement <4 x i64> %2067, i64 1
  %2073 = getelementptr inbounds float, ptr %f5.host, i64 %2072
  %2074 = load float, ptr %2073, align 4, !tbaa !45
  %2075 = insertelement <4 x float> %2071, float %2074, i64 1
  %2076 = extractelement <4 x i64> %2067, i64 2
  %2077 = getelementptr inbounds float, ptr %f5.host, i64 %2076
  %2078 = load float, ptr %2077, align 4, !tbaa !45
  %2079 = insertelement <4 x float> %2075, float %2078, i64 2
  %2080 = extractelement <4 x i64> %2067, i64 3
  %2081 = getelementptr inbounds float, ptr %f5.host, i64 %2080
  %2082 = load float, ptr %2081, align 4, !tbaa !45
  %2083 = insertelement <4 x float> %2079, float %2082, i64 3
  %2084 = fmul <4 x float> %2083, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2085 = insertelement <4 x i32> undef, i32 %t2370.us, i64 0
  %2086 = shufflevector <4 x i32> %2085, <4 x i32> undef, <4 x i32> zeroinitializer
  %2087 = add <4 x i32> %2086, <i32 -1, i32 0, i32 1, i32 2>
  %2088 = add <4 x i32> %2087, %t2377.us
  %2089 = sext <4 x i32> %2088 to <4 x i64>
  %2090 = extractelement <4 x i64> %2089, i64 0
  %2091 = getelementptr inbounds float, ptr %f5.host, i64 %2090
  %2092 = load float, ptr %2091, align 4, !tbaa !45
  %2093 = insertelement <4 x float> undef, float %2092, i64 0
  %2094 = extractelement <4 x i64> %2089, i64 1
  %2095 = getelementptr inbounds float, ptr %f5.host, i64 %2094
  %2096 = load float, ptr %2095, align 4, !tbaa !45
  %2097 = insertelement <4 x float> %2093, float %2096, i64 1
  %2098 = extractelement <4 x i64> %2089, i64 2
  %2099 = getelementptr inbounds float, ptr %f5.host, i64 %2098
  %2100 = load float, ptr %2099, align 4, !tbaa !45
  %2101 = insertelement <4 x float> %2097, float %2100, i64 2
  %2102 = extractelement <4 x i64> %2089, i64 3
  %2103 = getelementptr inbounds float, ptr %f5.host, i64 %2102
  %2104 = load float, ptr %2103, align 4, !tbaa !45
  %2105 = insertelement <4 x float> %2101, float %2104, i64 3
  %2106 = fmul <4 x float> %2105, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2107 = fadd <4 x float> %2084, %2106
  %2108 = fmul <4 x float> %2107, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2109 = fadd <4 x float> %2062, %2108
  %2110 = mul nsw <4 x i32> %2006, %1959
  %2111 = insertelement <4 x i32> undef, i32 %t2365.us, i64 0
  %2112 = shufflevector <4 x i32> %2111, <4 x i32> undef, <4 x i32> zeroinitializer
  %2113 = add nsw <4 x i32> %2112, <i32 0, i32 2, i32 4, i32 6>
  %2114 = add nsw <4 x i32> %2110, %2113
  %2115 = sext <4 x i32> %2114 to <4 x i64>
  %2116 = extractelement <4 x i64> %2115, i64 0
  %2117 = getelementptr inbounds float, ptr %f4.host, i64 %2116
  %2118 = load float, ptr %2117, align 4, !tbaa !43
  %2119 = insertelement <4 x float> undef, float %2118, i64 0
  %2120 = extractelement <4 x i64> %2115, i64 1
  %2121 = getelementptr inbounds float, ptr %f4.host, i64 %2120
  %2122 = load float, ptr %2121, align 4, !tbaa !43
  %2123 = insertelement <4 x float> %2119, float %2122, i64 1
  %2124 = extractelement <4 x i64> %2115, i64 2
  %2125 = getelementptr inbounds float, ptr %f4.host, i64 %2124
  %2126 = load float, ptr %2125, align 4, !tbaa !43
  %2127 = insertelement <4 x float> %2123, float %2126, i64 2
  %2128 = extractelement <4 x i64> %2115, i64 3
  %2129 = getelementptr inbounds float, ptr %f4.host, i64 %2128
  %2130 = load float, ptr %2129, align 4, !tbaa !43
  %2131 = insertelement <4 x float> %2127, float %2130, i64 3
  %2132 = fsub <4 x float> %2131, %2109
  %2133 = fmul <4 x float> %t2360.us, %2132
  %2134 = add nsw <4 x i32> %t2371.us, %2019
  %2135 = sext <4 x i32> %2134 to <4 x i64>
  %2136 = extractelement <4 x i64> %2135, i64 0
  %2137 = getelementptr inbounds float, ptr %f5.host, i64 %2136
  %2138 = load float, ptr %2137, align 4, !tbaa !45
  %2139 = insertelement <4 x float> undef, float %2138, i64 0
  %2140 = extractelement <4 x i64> %2135, i64 1
  %2141 = getelementptr inbounds float, ptr %f5.host, i64 %2140
  %2142 = load float, ptr %2141, align 4, !tbaa !45
  %2143 = insertelement <4 x float> %2139, float %2142, i64 1
  %2144 = extractelement <4 x i64> %2135, i64 2
  %2145 = getelementptr inbounds float, ptr %f5.host, i64 %2144
  %2146 = load float, ptr %2145, align 4, !tbaa !45
  %2147 = insertelement <4 x float> %2143, float %2146, i64 2
  %2148 = extractelement <4 x i64> %2135, i64 3
  %2149 = getelementptr inbounds float, ptr %f5.host, i64 %2148
  %2150 = load float, ptr %2149, align 4, !tbaa !45
  %2151 = insertelement <4 x float> %2147, float %2150, i64 3
  %2152 = fmul <4 x float> %2151, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2153 = add <4 x i32> %t2371.us, %2040
  %2154 = add <4 x i32> %2153, <i32 -1, i32 0, i32 1, i32 2>
  %2155 = sext <4 x i32> %2154 to <4 x i64>
  %2156 = extractelement <4 x i64> %2155, i64 0
  %2157 = getelementptr inbounds float, ptr %f5.host, i64 %2156
  %2158 = load float, ptr %2157, align 4, !tbaa !45
  %2159 = insertelement <4 x float> undef, float %2158, i64 0
  %2160 = extractelement <4 x i64> %2155, i64 1
  %2161 = getelementptr inbounds float, ptr %f5.host, i64 %2160
  %2162 = load float, ptr %2161, align 4, !tbaa !45
  %2163 = insertelement <4 x float> %2159, float %2162, i64 1
  %2164 = extractelement <4 x i64> %2155, i64 2
  %2165 = getelementptr inbounds float, ptr %f5.host, i64 %2164
  %2166 = load float, ptr %2165, align 4, !tbaa !45
  %2167 = insertelement <4 x float> %2163, float %2166, i64 2
  %2168 = extractelement <4 x i64> %2155, i64 3
  %2169 = getelementptr inbounds float, ptr %f5.host, i64 %2168
  %2170 = load float, ptr %2169, align 4, !tbaa !45
  %2171 = insertelement <4 x float> %2167, float %2170, i64 3
  %2172 = fmul <4 x float> %2171, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2173 = fadd <4 x float> %2152, %2172
  %2174 = fmul <4 x float> %2173, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2175 = add nsw <4 x i32> %t2371.us, %2065
  %2176 = sext <4 x i32> %2175 to <4 x i64>
  %2177 = extractelement <4 x i64> %2176, i64 0
  %2178 = getelementptr inbounds float, ptr %f5.host, i64 %2177
  %2179 = load float, ptr %2178, align 4, !tbaa !45
  %2180 = insertelement <4 x float> undef, float %2179, i64 0
  %2181 = extractelement <4 x i64> %2176, i64 1
  %2182 = getelementptr inbounds float, ptr %f5.host, i64 %2181
  %2183 = load float, ptr %2182, align 4, !tbaa !45
  %2184 = insertelement <4 x float> %2180, float %2183, i64 1
  %2185 = extractelement <4 x i64> %2176, i64 2
  %2186 = getelementptr inbounds float, ptr %f5.host, i64 %2185
  %2187 = load float, ptr %2186, align 4, !tbaa !45
  %2188 = insertelement <4 x float> %2184, float %2187, i64 2
  %2189 = extractelement <4 x i64> %2176, i64 3
  %2190 = getelementptr inbounds float, ptr %f5.host, i64 %2189
  %2191 = load float, ptr %2190, align 4, !tbaa !45
  %2192 = insertelement <4 x float> %2188, float %2191, i64 3
  %2193 = fmul <4 x float> %2192, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2194 = add <4 x i32> %t2371.us, %2086
  %2195 = add <4 x i32> %2194, <i32 -1, i32 0, i32 1, i32 2>
  %2196 = sext <4 x i32> %2195 to <4 x i64>
  %2197 = extractelement <4 x i64> %2196, i64 0
  %2198 = getelementptr inbounds float, ptr %f5.host, i64 %2197
  %2199 = load float, ptr %2198, align 4, !tbaa !45
  %2200 = insertelement <4 x float> undef, float %2199, i64 0
  %2201 = extractelement <4 x i64> %2196, i64 1
  %2202 = getelementptr inbounds float, ptr %f5.host, i64 %2201
  %2203 = load float, ptr %2202, align 4, !tbaa !45
  %2204 = insertelement <4 x float> %2200, float %2203, i64 1
  %2205 = extractelement <4 x i64> %2196, i64 2
  %2206 = getelementptr inbounds float, ptr %f5.host, i64 %2205
  %2207 = load float, ptr %2206, align 4, !tbaa !45
  %2208 = insertelement <4 x float> %2204, float %2207, i64 2
  %2209 = extractelement <4 x i64> %2196, i64 3
  %2210 = getelementptr inbounds float, ptr %f5.host, i64 %2209
  %2211 = load float, ptr %2210, align 4, !tbaa !45
  %2212 = insertelement <4 x float> %2208, float %2211, i64 3
  %2213 = fmul <4 x float> %2212, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2214 = fadd <4 x float> %2193, %2213
  %2215 = fmul <4 x float> %2214, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2216 = fadd <4 x float> %2174, %2215
  %2217 = mul nsw <4 x i32> %t2367.us, %1959
  %2218 = add nsw <4 x i32> %2217, %2113
  %2219 = sext <4 x i32> %2218 to <4 x i64>
  %2220 = extractelement <4 x i64> %2219, i64 0
  %2221 = getelementptr inbounds float, ptr %f4.host, i64 %2220
  %2222 = load float, ptr %2221, align 4, !tbaa !43
  %2223 = insertelement <4 x float> undef, float %2222, i64 0
  %2224 = extractelement <4 x i64> %2219, i64 1
  %2225 = getelementptr inbounds float, ptr %f4.host, i64 %2224
  %2226 = load float, ptr %2225, align 4, !tbaa !43
  %2227 = insertelement <4 x float> %2223, float %2226, i64 1
  %2228 = extractelement <4 x i64> %2219, i64 2
  %2229 = getelementptr inbounds float, ptr %f4.host, i64 %2228
  %2230 = load float, ptr %2229, align 4, !tbaa !43
  %2231 = insertelement <4 x float> %2227, float %2230, i64 2
  %2232 = extractelement <4 x i64> %2219, i64 3
  %2233 = getelementptr inbounds float, ptr %f4.host, i64 %2232
  %2234 = load float, ptr %2233, align 4, !tbaa !43
  %2235 = insertelement <4 x float> %2231, float %2234, i64 3
  %2236 = fsub <4 x float> %2235, %2216
  %2237 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2360.us
  %2238 = fmul <4 x float> %2237, %2236
  %2239 = fadd <4 x float> %2133, %2238
  %2240 = sext i32 %1993 to i64
  %2241 = sub nsw i64 %2240, %1396
  %2242 = add nsw i64 %2241, %1980
  %2243 = getelementptr inbounds float, ptr %193, i64 %2242
  %2244 = load <4 x float>, ptr %2243, align 4, !tbaa !67
  %2245 = fmul <4 x float> %2244, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2246 = sext i32 %t2356.us to i64
  %2247 = sub nsw i64 %2246, %1396
  %2248 = add nsw i64 %1981, %2247
  %2249 = getelementptr inbounds float, ptr %193, i64 %2248
  %2250 = load <4 x float>, ptr %2249, align 4, !tbaa !67
  %2251 = fmul <4 x float> %2250, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2252 = fadd <4 x float> %2245, %2251
  %2253 = fmul <4 x float> %2252, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2254 = add nsw i64 %2241, %1982
  %2255 = getelementptr inbounds float, ptr %193, i64 %2254
  %2256 = load <4 x float>, ptr %2255, align 4, !tbaa !67
  %2257 = fmul <4 x float> %2256, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2258 = add nsw i64 %1983, %2247
  %2259 = getelementptr inbounds float, ptr %193, i64 %2258
  %2260 = load <4 x float>, ptr %2259, align 4, !tbaa !67
  %2261 = fmul <4 x float> %2260, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2262 = fadd <4 x float> %2257, %2261
  %2263 = fmul <4 x float> %2262, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2264 = fadd <4 x float> %2253, %2263
  %2265 = fadd <4 x float> %2239, %2264
  %2266 = insertelement <4 x i32> undef, i32 %t2391.us, i64 0
  %2267 = shufflevector <4 x i32> %2266, <4 x i32> undef, <4 x i32> zeroinitializer
  %2268 = add nsw <4 x i32> %2267, <i32 0, i32 1, i32 2, i32 3>
  %2269 = add nsw <4 x i32> %t2392.us, %2268
  %2270 = sext <4 x i32> %2269 to <4 x i64>
  %2271 = extractelement <4 x i64> %2270, i64 0
  %2272 = getelementptr inbounds float, ptr %f5.host, i64 %2271
  %2273 = load float, ptr %2272, align 4, !tbaa !45
  %2274 = insertelement <4 x float> undef, float %2273, i64 0
  %2275 = extractelement <4 x i64> %2270, i64 1
  %2276 = getelementptr inbounds float, ptr %f5.host, i64 %2275
  %2277 = load float, ptr %2276, align 4, !tbaa !45
  %2278 = insertelement <4 x float> %2274, float %2277, i64 1
  %2279 = extractelement <4 x i64> %2270, i64 2
  %2280 = getelementptr inbounds float, ptr %f5.host, i64 %2279
  %2281 = load float, ptr %2280, align 4, !tbaa !45
  %2282 = insertelement <4 x float> %2278, float %2281, i64 2
  %2283 = extractelement <4 x i64> %2270, i64 3
  %2284 = getelementptr inbounds float, ptr %f5.host, i64 %2283
  %2285 = load float, ptr %2284, align 4, !tbaa !45
  %2286 = insertelement <4 x float> %2282, float %2285, i64 3
  %2287 = fmul <4 x float> %2286, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2288 = insertelement <4 x i32> undef, i32 %t2390.us, i64 0
  %2289 = shufflevector <4 x i32> %2288, <4 x i32> undef, <4 x i32> zeroinitializer
  %2290 = add nsw <4 x i32> %2289, <i32 0, i32 1, i32 2, i32 3>
  %2291 = add <4 x i32> %t2392.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2292 = add <4 x i32> %2291, %2290
  %2293 = sext <4 x i32> %2292 to <4 x i64>
  %2294 = extractelement <4 x i64> %2293, i64 0
  %2295 = getelementptr inbounds float, ptr %f5.host, i64 %2294
  %2296 = load float, ptr %2295, align 4, !tbaa !45
  %2297 = insertelement <4 x float> undef, float %2296, i64 0
  %2298 = extractelement <4 x i64> %2293, i64 1
  %2299 = getelementptr inbounds float, ptr %f5.host, i64 %2298
  %2300 = load float, ptr %2299, align 4, !tbaa !45
  %2301 = insertelement <4 x float> %2297, float %2300, i64 1
  %2302 = extractelement <4 x i64> %2293, i64 2
  %2303 = getelementptr inbounds float, ptr %f5.host, i64 %2302
  %2304 = load float, ptr %2303, align 4, !tbaa !45
  %2305 = insertelement <4 x float> %2301, float %2304, i64 2
  %2306 = extractelement <4 x i64> %2293, i64 3
  %2307 = getelementptr inbounds float, ptr %f5.host, i64 %2306
  %2308 = load float, ptr %2307, align 4, !tbaa !45
  %2309 = insertelement <4 x float> %2305, float %2308, i64 3
  %2310 = fmul <4 x float> %2309, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2311 = fadd <4 x float> %2287, %2310
  %2312 = fmul <4 x float> %2311, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2313 = insertelement <4 x i32> undef, i32 %t2389.us, i64 0
  %2314 = shufflevector <4 x i32> %2313, <4 x i32> undef, <4 x i32> zeroinitializer
  %2315 = add nsw <4 x i32> %2314, <i32 0, i32 1, i32 2, i32 3>
  %2316 = add nsw <4 x i32> %t2392.us, %2315
  %2317 = sext <4 x i32> %2316 to <4 x i64>
  %2318 = extractelement <4 x i64> %2317, i64 0
  %2319 = getelementptr inbounds float, ptr %f5.host, i64 %2318
  %2320 = load float, ptr %2319, align 4, !tbaa !45
  %2321 = insertelement <4 x float> undef, float %2320, i64 0
  %2322 = extractelement <4 x i64> %2317, i64 1
  %2323 = getelementptr inbounds float, ptr %f5.host, i64 %2322
  %2324 = load float, ptr %2323, align 4, !tbaa !45
  %2325 = insertelement <4 x float> %2321, float %2324, i64 1
  %2326 = extractelement <4 x i64> %2317, i64 2
  %2327 = getelementptr inbounds float, ptr %f5.host, i64 %2326
  %2328 = load float, ptr %2327, align 4, !tbaa !45
  %2329 = insertelement <4 x float> %2325, float %2328, i64 2
  %2330 = extractelement <4 x i64> %2317, i64 3
  %2331 = getelementptr inbounds float, ptr %f5.host, i64 %2330
  %2332 = load float, ptr %2331, align 4, !tbaa !45
  %2333 = insertelement <4 x float> %2329, float %2332, i64 3
  %2334 = fmul <4 x float> %2333, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2335 = insertelement <4 x i32> undef, i32 %t2386.us, i64 0
  %2336 = shufflevector <4 x i32> %2335, <4 x i32> undef, <4 x i32> zeroinitializer
  %2337 = add nsw <4 x i32> %2336, <i32 0, i32 1, i32 2, i32 3>
  %2338 = add <4 x i32> %2291, %2337
  %2339 = sext <4 x i32> %2338 to <4 x i64>
  %2340 = extractelement <4 x i64> %2339, i64 0
  %2341 = getelementptr inbounds float, ptr %f5.host, i64 %2340
  %2342 = load float, ptr %2341, align 4, !tbaa !45
  %2343 = insertelement <4 x float> undef, float %2342, i64 0
  %2344 = extractelement <4 x i64> %2339, i64 1
  %2345 = getelementptr inbounds float, ptr %f5.host, i64 %2344
  %2346 = load float, ptr %2345, align 4, !tbaa !45
  %2347 = insertelement <4 x float> %2343, float %2346, i64 1
  %2348 = extractelement <4 x i64> %2339, i64 2
  %2349 = getelementptr inbounds float, ptr %f5.host, i64 %2348
  %2350 = load float, ptr %2349, align 4, !tbaa !45
  %2351 = insertelement <4 x float> %2347, float %2350, i64 2
  %2352 = extractelement <4 x i64> %2339, i64 3
  %2353 = getelementptr inbounds float, ptr %f5.host, i64 %2352
  %2354 = load float, ptr %2353, align 4, !tbaa !45
  %2355 = insertelement <4 x float> %2351, float %2354, i64 3
  %2356 = fmul <4 x float> %2355, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2357 = fadd <4 x float> %2334, %2356
  %2358 = fmul <4 x float> %2357, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2359 = fadd <4 x float> %2312, %2358
  %2360 = mul nsw <4 x i32> %2016, %1959
  %2361 = add nsw i32 %t2365.us, 1
  %2362 = insertelement <4 x i32> undef, i32 %2361, i64 0
  %2363 = shufflevector <4 x i32> %2362, <4 x i32> undef, <4 x i32> zeroinitializer
  %2364 = add nsw <4 x i32> %2363, <i32 0, i32 2, i32 4, i32 6>
  %2365 = add nsw <4 x i32> %2360, %2364
  %2366 = sext <4 x i32> %2365 to <4 x i64>
  %2367 = extractelement <4 x i64> %2366, i64 0
  %2368 = getelementptr inbounds float, ptr %f4.host, i64 %2367
  %2369 = load float, ptr %2368, align 4, !tbaa !43
  %2370 = insertelement <4 x float> undef, float %2369, i64 0
  %2371 = extractelement <4 x i64> %2366, i64 1
  %2372 = getelementptr inbounds float, ptr %f4.host, i64 %2371
  %2373 = load float, ptr %2372, align 4, !tbaa !43
  %2374 = insertelement <4 x float> %2370, float %2373, i64 1
  %2375 = extractelement <4 x i64> %2366, i64 2
  %2376 = getelementptr inbounds float, ptr %f4.host, i64 %2375
  %2377 = load float, ptr %2376, align 4, !tbaa !43
  %2378 = insertelement <4 x float> %2374, float %2377, i64 2
  %2379 = extractelement <4 x i64> %2366, i64 3
  %2380 = getelementptr inbounds float, ptr %f4.host, i64 %2379
  %2381 = load float, ptr %2380, align 4, !tbaa !43
  %2382 = insertelement <4 x float> %2378, float %2381, i64 3
  %2383 = fsub <4 x float> %2382, %2359
  %2384 = fmul <4 x float> %t2381.us, %2383
  %2385 = add nsw <4 x i32> %t2387.us, %2268
  %2386 = sext <4 x i32> %2385 to <4 x i64>
  %2387 = extractelement <4 x i64> %2386, i64 0
  %2388 = getelementptr inbounds float, ptr %f5.host, i64 %2387
  %2389 = load float, ptr %2388, align 4, !tbaa !45
  %2390 = insertelement <4 x float> undef, float %2389, i64 0
  %2391 = extractelement <4 x i64> %2386, i64 1
  %2392 = getelementptr inbounds float, ptr %f5.host, i64 %2391
  %2393 = load float, ptr %2392, align 4, !tbaa !45
  %2394 = insertelement <4 x float> %2390, float %2393, i64 1
  %2395 = extractelement <4 x i64> %2386, i64 2
  %2396 = getelementptr inbounds float, ptr %f5.host, i64 %2395
  %2397 = load float, ptr %2396, align 4, !tbaa !45
  %2398 = insertelement <4 x float> %2394, float %2397, i64 2
  %2399 = extractelement <4 x i64> %2386, i64 3
  %2400 = getelementptr inbounds float, ptr %f5.host, i64 %2399
  %2401 = load float, ptr %2400, align 4, !tbaa !45
  %2402 = insertelement <4 x float> %2398, float %2401, i64 3
  %2403 = fmul <4 x float> %2402, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2404 = add <4 x i32> %t2387.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2405 = add <4 x i32> %2404, %2290
  %2406 = sext <4 x i32> %2405 to <4 x i64>
  %2407 = extractelement <4 x i64> %2406, i64 0
  %2408 = getelementptr inbounds float, ptr %f5.host, i64 %2407
  %2409 = load float, ptr %2408, align 4, !tbaa !45
  %2410 = insertelement <4 x float> undef, float %2409, i64 0
  %2411 = extractelement <4 x i64> %2406, i64 1
  %2412 = getelementptr inbounds float, ptr %f5.host, i64 %2411
  %2413 = load float, ptr %2412, align 4, !tbaa !45
  %2414 = insertelement <4 x float> %2410, float %2413, i64 1
  %2415 = extractelement <4 x i64> %2406, i64 2
  %2416 = getelementptr inbounds float, ptr %f5.host, i64 %2415
  %2417 = load float, ptr %2416, align 4, !tbaa !45
  %2418 = insertelement <4 x float> %2414, float %2417, i64 2
  %2419 = extractelement <4 x i64> %2406, i64 3
  %2420 = getelementptr inbounds float, ptr %f5.host, i64 %2419
  %2421 = load float, ptr %2420, align 4, !tbaa !45
  %2422 = insertelement <4 x float> %2418, float %2421, i64 3
  %2423 = fmul <4 x float> %2422, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2424 = fadd <4 x float> %2403, %2423
  %2425 = fmul <4 x float> %2424, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2426 = add nsw <4 x i32> %t2387.us, %2315
  %2427 = sext <4 x i32> %2426 to <4 x i64>
  %2428 = extractelement <4 x i64> %2427, i64 0
  %2429 = getelementptr inbounds float, ptr %f5.host, i64 %2428
  %2430 = load float, ptr %2429, align 4, !tbaa !45
  %2431 = insertelement <4 x float> undef, float %2430, i64 0
  %2432 = extractelement <4 x i64> %2427, i64 1
  %2433 = getelementptr inbounds float, ptr %f5.host, i64 %2432
  %2434 = load float, ptr %2433, align 4, !tbaa !45
  %2435 = insertelement <4 x float> %2431, float %2434, i64 1
  %2436 = extractelement <4 x i64> %2427, i64 2
  %2437 = getelementptr inbounds float, ptr %f5.host, i64 %2436
  %2438 = load float, ptr %2437, align 4, !tbaa !45
  %2439 = insertelement <4 x float> %2435, float %2438, i64 2
  %2440 = extractelement <4 x i64> %2427, i64 3
  %2441 = getelementptr inbounds float, ptr %f5.host, i64 %2440
  %2442 = load float, ptr %2441, align 4, !tbaa !45
  %2443 = insertelement <4 x float> %2439, float %2442, i64 3
  %2444 = fmul <4 x float> %2443, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2445 = add <4 x i32> %2404, %2337
  %2446 = sext <4 x i32> %2445 to <4 x i64>
  %2447 = extractelement <4 x i64> %2446, i64 0
  %2448 = getelementptr inbounds float, ptr %f5.host, i64 %2447
  %2449 = load float, ptr %2448, align 4, !tbaa !45
  %2450 = insertelement <4 x float> undef, float %2449, i64 0
  %2451 = extractelement <4 x i64> %2446, i64 1
  %2452 = getelementptr inbounds float, ptr %f5.host, i64 %2451
  %2453 = load float, ptr %2452, align 4, !tbaa !45
  %2454 = insertelement <4 x float> %2450, float %2453, i64 1
  %2455 = extractelement <4 x i64> %2446, i64 2
  %2456 = getelementptr inbounds float, ptr %f5.host, i64 %2455
  %2457 = load float, ptr %2456, align 4, !tbaa !45
  %2458 = insertelement <4 x float> %2454, float %2457, i64 2
  %2459 = extractelement <4 x i64> %2446, i64 3
  %2460 = getelementptr inbounds float, ptr %f5.host, i64 %2459
  %2461 = load float, ptr %2460, align 4, !tbaa !45
  %2462 = insertelement <4 x float> %2458, float %2461, i64 3
  %2463 = fmul <4 x float> %2462, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2464 = fadd <4 x float> %2444, %2463
  %2465 = fmul <4 x float> %2464, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2466 = fadd <4 x float> %2425, %2465
  %2467 = mul nsw <4 x i32> %t2384.us, %1959
  %2468 = add nsw <4 x i32> %2467, %2364
  %2469 = sext <4 x i32> %2468 to <4 x i64>
  %2470 = extractelement <4 x i64> %2469, i64 0
  %2471 = getelementptr inbounds float, ptr %f4.host, i64 %2470
  %2472 = load float, ptr %2471, align 4, !tbaa !43
  %2473 = insertelement <4 x float> undef, float %2472, i64 0
  %2474 = extractelement <4 x i64> %2469, i64 1
  %2475 = getelementptr inbounds float, ptr %f4.host, i64 %2474
  %2476 = load float, ptr %2475, align 4, !tbaa !43
  %2477 = insertelement <4 x float> %2473, float %2476, i64 1
  %2478 = extractelement <4 x i64> %2469, i64 2
  %2479 = getelementptr inbounds float, ptr %f4.host, i64 %2478
  %2480 = load float, ptr %2479, align 4, !tbaa !43
  %2481 = insertelement <4 x float> %2477, float %2480, i64 2
  %2482 = extractelement <4 x i64> %2469, i64 3
  %2483 = getelementptr inbounds float, ptr %f4.host, i64 %2482
  %2484 = load float, ptr %2483, align 4, !tbaa !43
  %2485 = insertelement <4 x float> %2481, float %2484, i64 3
  %2486 = fsub <4 x float> %2485, %2466
  %2487 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2381.us
  %2488 = fmul <4 x float> %2487, %2486
  %2489 = fadd <4 x float> %2384, %2488
  %2490 = sext i32 %2010 to i64
  %2491 = sub nsw i64 %2490, %1396
  %2492 = add nsw i64 %2491, %1980
  %2493 = getelementptr inbounds float, ptr %193, i64 %2492
  %2494 = load <4 x float>, ptr %2493, align 4, !tbaa !67
  %2495 = fmul <4 x float> %2494, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2496 = sext i32 %t2378.us to i64
  %2497 = sub nsw i64 %2496, %1396
  %2498 = add nsw i64 %1981, %2497
  %2499 = getelementptr inbounds float, ptr %193, i64 %2498
  %2500 = load <4 x float>, ptr %2499, align 4, !tbaa !67
  %2501 = fmul <4 x float> %2500, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2502 = fadd <4 x float> %2495, %2501
  %2503 = fmul <4 x float> %2502, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2504 = add nsw i64 %2491, %1982
  %2505 = getelementptr inbounds float, ptr %193, i64 %2504
  %2506 = load <4 x float>, ptr %2505, align 4, !tbaa !67
  %2507 = fmul <4 x float> %2506, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2508 = add nsw i64 %1983, %2497
  %2509 = getelementptr inbounds float, ptr %193, i64 %2508
  %2510 = load <4 x float>, ptr %2509, align 4, !tbaa !67
  %2511 = fmul <4 x float> %2510, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2512 = fadd <4 x float> %2507, %2511
  %2513 = fmul <4 x float> %2512, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2514 = fadd <4 x float> %2503, %2513
  %2515 = fadd <4 x float> %2489, %2514
  %2516 = shufflevector <4 x float> %2265, <4 x float> %2515, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %2517 = sext i32 %f126.s0.v3.v303.base.us to i64
  %2518 = add i64 %1986, %2517
  %2519 = getelementptr inbounds float, ptr %222, i64 %2518
  store <8 x float> %2516, ptr %2519, align 4, !tbaa !69
  %lsr.iv.next409.us = add i32 %lsr.iv408.us, -1
  %lsr.iv.next411.us = add i32 %lsr.iv410.us, 8
  %.not151.us = icmp eq i32 %lsr.iv.next409.us, 0
  br i1 %.not151.us, label %"end for f126.s0.v3.v3.loopexit.us", label %"for f126.s0.v3.v3.us"

"end for f126.s0.v3.v3.loopexit.us":              ; preds = %"for f126.s0.v3.v3.us"
  %indvars.iv.next322 = add nsw i64 %indvars.iv321, 1
  %2520 = icmp eq i64 %indvars.iv321, %sext323
  br i1 %2520, label %"consume f126", label %"for f126.s0.v4.us"

"consume f126":                                   ; preds = %"end for f126.s0.v3.v3.loopexit.us", %"for f126.s0.v4.preheader"
  %2521 = tail call i32 @llvm.smax.i32(i32 %197, i32 8)
  %t3091 = zext i32 %2521 to i64
  %2522 = shl nuw nsw i64 %t3091, 2
  %2523 = icmp ult i32 %2521, 536870912
  br i1 %2523, label %"assert succeeded16", label %"assert failed15", !prof !5

"assert failed15":                                ; preds = %"consume f126"
  %2524 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.32, i64 %2522, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded16":                             ; preds = %"consume f126"
  %2525 = add nuw nsw i64 %2522, 4
  %2526 = tail call ptr @halide_malloc(ptr %__user_context, i64 %2525)
  %.not103 = icmp eq ptr %2526, null
  br i1 %.not103, label %"assert failed17", label %"produce f125", !prof !4

"assert failed17":                                ; preds = %"assert succeeded16"
  %2527 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f125":                                   ; preds = %"assert succeeded16"
  %2528 = add nsw i32 %197, 7
  %2529 = ashr i32 %2528, 3
  %2530 = icmp sgt i32 %197, 0
  br i1 %2530, label %"for f125.s0.v3.v3.preheader", label %"consume f125", !prof !5

"for f125.s0.v3.v3.preheader":                    ; preds = %"produce f125"
  %2531 = shl i32 %local_laplacian.s0.v4.v4.base, 1
  %2532 = and i32 %2531, 2
  %t2394 = add nsw i32 %2532, %156
  %2533 = add nsw i32 %f2.v3.extent_realized.s, 1
  %2534 = sub nsw i32 %local_laplacian.s0.v4.v4.base, %f2.v4.min_realized
  %2535 = mul nsw i32 %2534, %2533
  %2536 = sub i32 %2535, %f2.v3.min_realized
  %2537 = fdiv float 1.000000e+00, %230
  %2538 = insertelement <4 x float> undef, float %2537, i64 0
  %2539 = shufflevector <4 x float> %2538, <4 x float> undef, <4 x i32> zeroinitializer
  %2540 = xor i32 %158, -1
  %2541 = add i32 %t2394, %2540
  %t2406 = mul nsw i32 %207, %2541
  %2542 = sub nsw i32 %156, %158
  %t2408 = mul nsw i32 %207, %2542
  %2543 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %2544 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %2543
  %.neg222 = shufflevector <4 x i32> %2544, <4 x i32> poison, <4 x i32> zeroinitializer
  %2545 = shl nsw i32 %levels, 8
  %2546 = add nsw i32 %2545, -256
  %2547 = insertelement <4 x i32> undef, i32 %2546, i64 0
  %b870 = shufflevector <4 x i32> %2547, <4 x i32> undef, <4 x i32> zeroinitializer
  %2548 = xor i32 %f4.v4.min_realized, -1
  %2549 = add i32 %t2394, %2548
  %2550 = mul nsw i32 %2549, %f4.stride.1
  %2551 = sub nsw i32 %156, %f4.v4.min_realized
  %2552 = mul nsw i32 %2551, %f4.stride.1
  %2553 = insertelement <4 x float> undef, float %beta, i64 0
  %2554 = shufflevector <4 x float> %2553, <4 x float> undef, <4 x i32> zeroinitializer
  %2555 = sext i32 %t2408 to i64
  %2556 = add nsw i64 %2555, -1
  %2557 = sext i32 %t2406 to i64
  %2558 = add nsw i64 %2557, -1
  %2559 = sext i32 %195 to i64
  br label %"for f125.s0.v3.v3"

"for f125.s0.v3.v3":                              ; preds = %"for f125.s0.v3.v3.preheader", %"for f125.s0.v3.v3"
  %lsr.iv406 = phi i32 [ %lsr.iv.next407, %"for f125.s0.v3.v3" ], [ %a1120, %"for f125.s0.v3.v3.preheader" ]
  %lsr.iv404 = phi i32 [ %lsr.iv.next405, %"for f125.s0.v3.v3" ], [ %2529, %"for f125.s0.v3.v3.preheader" ]
  %f125.s0.v3.v366.base = tail call i32 @llvm.smin.i32(i32 %b816, i32 %lsr.iv406)
  %2560 = shl i32 %f125.s0.v3.v366.base, 1
  %2561 = and i32 %2560, 2
  %2562 = ashr i32 %f125.s0.v3.v366.base, 1
  %t2395 = add nsw i32 %2561, %2562
  %t2396 = add i32 %2536, %f125.s0.v3.v366.base
  %2563 = sext i32 %t2396 to i64
  %2564 = getelementptr inbounds float, ptr %f2.host, i64 %2563
  %2565 = load <4 x float>, ptr %2564, align 4, !tbaa !41
  %2566 = add nsw i64 %2563, 4
  %2567 = getelementptr inbounds float, ptr %f2.host, i64 %2566
  %2568 = load <4 x float>, ptr %2567, align 4, !tbaa !41
  %t2397 = shufflevector <4 x float> %2565, <4 x float> %2568, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2398 = shufflevector <4 x float> %2565, <4 x float> %2568, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2399 = fmul <4 x float> %232, %t2397
  %t2400 = fmul <4 x float> %232, %t2398
  %a863 = fptosi <4 x float> %t2400 to <4 x i32>
  %a870 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a863)
  %2569 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a870, <4 x i32> zeroinitializer)
  %t2402 = sitofp <4 x i32> %2569 to <4 x float>
  %t2403 = fmul <4 x float> %2539, %t2402
  %2570 = add nuw nsw <4 x i32> %2569, <i32 1, i32 1, i32 1, i32 1>
  %2571 = sitofp <4 x i32> %2570 to <4 x float>
  %t2404 = fmul <4 x float> %2539, %2571
  %2572 = fmul <4 x float> %t2400, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a868 = fptosi <4 x float> %2572 to <4 x i32>
  %a867 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b870, <4 x i32> %a868)
  %2573 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a867, <4 x i32> zeroinitializer)
  %2574 = shl <4 x i32> %2569, <i32 8, i32 8, i32 8, i32 8>
  %.neg224 = sub <4 x i32> %.neg222, %2574
  %t2409 = add <4 x i32> %.neg224, %2573
  %2575 = sub nsw i32 %t2395, %f4.v3.min_realized
  %t2412 = add nsw i32 %2575, %2550
  %t2414 = sub nsw <4 x i32> %2569, %241
  %t2415 = mul nsw <4 x i32> %t2414, %1959
  %2576 = sub nsw i32 %2562, %f4.v3.min_realized
  %t2417 = add nsw i32 %2576, %2550
  %t2419 = add nsw i32 %2575, %2552
  %t2420 = add nsw i32 %2576, %2552
  %2577 = add nsw <4 x i32> %t2414, <i32 1, i32 1, i32 1, i32 1>
  %t2421 = mul nsw <4 x i32> %2577, %1959
  %2578 = add nsw i32 %f125.s0.v3.v366.base, 1
  %2579 = shl i32 %2578, 1
  %2580 = and i32 %2579, 2
  %2581 = ashr i32 %2578, 1
  %t2422 = add nsw i32 %2580, %2581
  %a871 = fptosi <4 x float> %t2399 to <4 x i32>
  %a878 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a871)
  %2582 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a878, <4 x i32> zeroinitializer)
  %t2424 = sitofp <4 x i32> %2582 to <4 x float>
  %t2425 = fmul <4 x float> %2539, %t2424
  %2583 = add nuw nsw <4 x i32> %2582, <i32 1, i32 1, i32 1, i32 1>
  %2584 = sitofp <4 x i32> %2583 to <4 x float>
  %t2426 = fmul <4 x float> %2539, %2584
  %2585 = fmul <4 x float> %t2399, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a876 = fptosi <4 x float> %2585 to <4 x i32>
  %a875 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b870, <4 x i32> %a876)
  %2586 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a875, <4 x i32> zeroinitializer)
  %2587 = shl <4 x i32> %2582, <i32 8, i32 8, i32 8, i32 8>
  %.neg226 = sub <4 x i32> %.neg222, %2587
  %t2429 = add <4 x i32> %.neg226, %2586
  %2588 = sub nsw i32 %t2422, %f4.v3.min_realized
  %t2431 = add nsw i32 %2588, %2550
  %t2432 = sub nsw <4 x i32> %2582, %241
  %t2433 = mul nsw <4 x i32> %t2432, %1959
  %2589 = sub nsw i32 %2581, %f4.v3.min_realized
  %t2435 = add nsw i32 %2589, %2550
  %t2436 = add nsw i32 %2588, %2552
  %t2437 = add nsw i32 %2589, %2552
  %2590 = add nsw <4 x i32> %t2432, <i32 1, i32 1, i32 1, i32 1>
  %t2438 = mul nsw <4 x i32> %2590, %1959
  %2591 = insertelement <4 x i32> undef, i32 %t2420, i64 0
  %2592 = shufflevector <4 x i32> %2591, <4 x i32> undef, <4 x i32> zeroinitializer
  %2593 = add nsw <4 x i32> %2592, <i32 0, i32 1, i32 2, i32 3>
  %2594 = add nsw <4 x i32> %t2421, %2593
  %2595 = sext <4 x i32> %2594 to <4 x i64>
  %2596 = extractelement <4 x i64> %2595, i64 0
  %2597 = getelementptr inbounds float, ptr %f4.host, i64 %2596
  %2598 = load float, ptr %2597, align 4, !tbaa !43
  %2599 = insertelement <4 x float> undef, float %2598, i64 0
  %2600 = extractelement <4 x i64> %2595, i64 1
  %2601 = getelementptr inbounds float, ptr %f4.host, i64 %2600
  %2602 = load float, ptr %2601, align 4, !tbaa !43
  %2603 = insertelement <4 x float> %2599, float %2602, i64 1
  %2604 = extractelement <4 x i64> %2595, i64 2
  %2605 = getelementptr inbounds float, ptr %f4.host, i64 %2604
  %2606 = load float, ptr %2605, align 4, !tbaa !43
  %2607 = insertelement <4 x float> %2603, float %2606, i64 2
  %2608 = extractelement <4 x i64> %2595, i64 3
  %2609 = getelementptr inbounds float, ptr %f4.host, i64 %2608
  %2610 = load float, ptr %2609, align 4, !tbaa !43
  %2611 = insertelement <4 x float> %2607, float %2610, i64 3
  %2612 = fmul <4 x float> %2611, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2613 = insertelement <4 x i32> undef, i32 %t2419, i64 0
  %2614 = shufflevector <4 x i32> %2613, <4 x i32> undef, <4 x i32> zeroinitializer
  %2615 = add <4 x i32> %2614, <i32 -1, i32 0, i32 1, i32 2>
  %2616 = add <4 x i32> %2615, %t2421
  %2617 = sext <4 x i32> %2616 to <4 x i64>
  %2618 = extractelement <4 x i64> %2617, i64 0
  %2619 = getelementptr inbounds float, ptr %f4.host, i64 %2618
  %2620 = load float, ptr %2619, align 4, !tbaa !43
  %2621 = insertelement <4 x float> undef, float %2620, i64 0
  %2622 = extractelement <4 x i64> %2617, i64 1
  %2623 = getelementptr inbounds float, ptr %f4.host, i64 %2622
  %2624 = load float, ptr %2623, align 4, !tbaa !43
  %2625 = insertelement <4 x float> %2621, float %2624, i64 1
  %2626 = extractelement <4 x i64> %2617, i64 2
  %2627 = getelementptr inbounds float, ptr %f4.host, i64 %2626
  %2628 = load float, ptr %2627, align 4, !tbaa !43
  %2629 = insertelement <4 x float> %2625, float %2628, i64 2
  %2630 = extractelement <4 x i64> %2617, i64 3
  %2631 = getelementptr inbounds float, ptr %f4.host, i64 %2630
  %2632 = load float, ptr %2631, align 4, !tbaa !43
  %2633 = insertelement <4 x float> %2629, float %2632, i64 3
  %2634 = fmul <4 x float> %2633, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2635 = fadd <4 x float> %2612, %2634
  %2636 = fmul <4 x float> %2635, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2637 = insertelement <4 x i32> undef, i32 %t2417, i64 0
  %2638 = shufflevector <4 x i32> %2637, <4 x i32> undef, <4 x i32> zeroinitializer
  %2639 = add nsw <4 x i32> %2638, <i32 0, i32 1, i32 2, i32 3>
  %2640 = add nsw <4 x i32> %t2421, %2639
  %2641 = sext <4 x i32> %2640 to <4 x i64>
  %2642 = extractelement <4 x i64> %2641, i64 0
  %2643 = getelementptr inbounds float, ptr %f4.host, i64 %2642
  %2644 = load float, ptr %2643, align 4, !tbaa !43
  %2645 = insertelement <4 x float> undef, float %2644, i64 0
  %2646 = extractelement <4 x i64> %2641, i64 1
  %2647 = getelementptr inbounds float, ptr %f4.host, i64 %2646
  %2648 = load float, ptr %2647, align 4, !tbaa !43
  %2649 = insertelement <4 x float> %2645, float %2648, i64 1
  %2650 = extractelement <4 x i64> %2641, i64 2
  %2651 = getelementptr inbounds float, ptr %f4.host, i64 %2650
  %2652 = load float, ptr %2651, align 4, !tbaa !43
  %2653 = insertelement <4 x float> %2649, float %2652, i64 2
  %2654 = extractelement <4 x i64> %2641, i64 3
  %2655 = getelementptr inbounds float, ptr %f4.host, i64 %2654
  %2656 = load float, ptr %2655, align 4, !tbaa !43
  %2657 = insertelement <4 x float> %2653, float %2656, i64 3
  %2658 = fmul <4 x float> %2657, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2659 = insertelement <4 x i32> undef, i32 %t2412, i64 0
  %2660 = shufflevector <4 x i32> %2659, <4 x i32> undef, <4 x i32> zeroinitializer
  %2661 = add <4 x i32> %2660, <i32 -1, i32 0, i32 1, i32 2>
  %2662 = add <4 x i32> %2661, %t2421
  %2663 = sext <4 x i32> %2662 to <4 x i64>
  %2664 = extractelement <4 x i64> %2663, i64 0
  %2665 = getelementptr inbounds float, ptr %f4.host, i64 %2664
  %2666 = load float, ptr %2665, align 4, !tbaa !43
  %2667 = insertelement <4 x float> undef, float %2666, i64 0
  %2668 = extractelement <4 x i64> %2663, i64 1
  %2669 = getelementptr inbounds float, ptr %f4.host, i64 %2668
  %2670 = load float, ptr %2669, align 4, !tbaa !43
  %2671 = insertelement <4 x float> %2667, float %2670, i64 1
  %2672 = extractelement <4 x i64> %2663, i64 2
  %2673 = getelementptr inbounds float, ptr %f4.host, i64 %2672
  %2674 = load float, ptr %2673, align 4, !tbaa !43
  %2675 = insertelement <4 x float> %2671, float %2674, i64 2
  %2676 = extractelement <4 x i64> %2663, i64 3
  %2677 = getelementptr inbounds float, ptr %f4.host, i64 %2676
  %2678 = load float, ptr %2677, align 4, !tbaa !43
  %2679 = insertelement <4 x float> %2675, float %2678, i64 3
  %2680 = fmul <4 x float> %2679, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2681 = fadd <4 x float> %2658, %2680
  %2682 = fmul <4 x float> %2681, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2683 = fadd <4 x float> %2636, %2682
  %2684 = sext <4 x i32> %t2409 to <4 x i64>
  %2685 = extractelement <4 x i64> %2684, i64 0
  %2686 = getelementptr inbounds float, ptr %f0.host, i64 %2685
  %2687 = load float, ptr %2686, align 4, !tbaa !6
  %2688 = insertelement <4 x float> undef, float %2687, i64 0
  %2689 = extractelement <4 x i64> %2684, i64 1
  %2690 = getelementptr inbounds float, ptr %f0.host, i64 %2689
  %2691 = load float, ptr %2690, align 4, !tbaa !6
  %2692 = insertelement <4 x float> %2688, float %2691, i64 1
  %2693 = extractelement <4 x i64> %2684, i64 2
  %2694 = getelementptr inbounds float, ptr %f0.host, i64 %2693
  %2695 = load float, ptr %2694, align 4, !tbaa !6
  %2696 = insertelement <4 x float> %2692, float %2695, i64 2
  %2697 = extractelement <4 x i64> %2684, i64 3
  %2698 = getelementptr inbounds float, ptr %f0.host, i64 %2697
  %2699 = load float, ptr %2698, align 4, !tbaa !6
  %2700 = insertelement <4 x float> %2696, float %2699, i64 3
  %2701 = fsub <4 x float> %t2398, %t2404
  %2702 = fmul <4 x float> %2554, %2701
  %2703 = fadd <4 x float> %t2404, %2702
  %2704 = fadd <4 x float> %2703, %2700
  %2705 = fsub <4 x float> %2704, %2683
  %2706 = fsub <4 x float> %t2400, %t2402
  %2707 = fmul <4 x float> %2706, %2705
  %2708 = add nsw <4 x i32> %t2415, %2593
  %2709 = sext <4 x i32> %2708 to <4 x i64>
  %2710 = extractelement <4 x i64> %2709, i64 0
  %2711 = getelementptr inbounds float, ptr %f4.host, i64 %2710
  %2712 = load float, ptr %2711, align 4, !tbaa !43
  %2713 = insertelement <4 x float> undef, float %2712, i64 0
  %2714 = extractelement <4 x i64> %2709, i64 1
  %2715 = getelementptr inbounds float, ptr %f4.host, i64 %2714
  %2716 = load float, ptr %2715, align 4, !tbaa !43
  %2717 = insertelement <4 x float> %2713, float %2716, i64 1
  %2718 = extractelement <4 x i64> %2709, i64 2
  %2719 = getelementptr inbounds float, ptr %f4.host, i64 %2718
  %2720 = load float, ptr %2719, align 4, !tbaa !43
  %2721 = insertelement <4 x float> %2717, float %2720, i64 2
  %2722 = extractelement <4 x i64> %2709, i64 3
  %2723 = getelementptr inbounds float, ptr %f4.host, i64 %2722
  %2724 = load float, ptr %2723, align 4, !tbaa !43
  %2725 = insertelement <4 x float> %2721, float %2724, i64 3
  %2726 = fmul <4 x float> %2725, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2727 = add <4 x i32> %2615, %t2415
  %2728 = sext <4 x i32> %2727 to <4 x i64>
  %2729 = extractelement <4 x i64> %2728, i64 0
  %2730 = getelementptr inbounds float, ptr %f4.host, i64 %2729
  %2731 = load float, ptr %2730, align 4, !tbaa !43
  %2732 = insertelement <4 x float> undef, float %2731, i64 0
  %2733 = extractelement <4 x i64> %2728, i64 1
  %2734 = getelementptr inbounds float, ptr %f4.host, i64 %2733
  %2735 = load float, ptr %2734, align 4, !tbaa !43
  %2736 = insertelement <4 x float> %2732, float %2735, i64 1
  %2737 = extractelement <4 x i64> %2728, i64 2
  %2738 = getelementptr inbounds float, ptr %f4.host, i64 %2737
  %2739 = load float, ptr %2738, align 4, !tbaa !43
  %2740 = insertelement <4 x float> %2736, float %2739, i64 2
  %2741 = extractelement <4 x i64> %2728, i64 3
  %2742 = getelementptr inbounds float, ptr %f4.host, i64 %2741
  %2743 = load float, ptr %2742, align 4, !tbaa !43
  %2744 = insertelement <4 x float> %2740, float %2743, i64 3
  %2745 = fmul <4 x float> %2744, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2746 = fadd <4 x float> %2726, %2745
  %2747 = fmul <4 x float> %2746, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2748 = add nsw <4 x i32> %t2415, %2639
  %2749 = sext <4 x i32> %2748 to <4 x i64>
  %2750 = extractelement <4 x i64> %2749, i64 0
  %2751 = getelementptr inbounds float, ptr %f4.host, i64 %2750
  %2752 = load float, ptr %2751, align 4, !tbaa !43
  %2753 = insertelement <4 x float> undef, float %2752, i64 0
  %2754 = extractelement <4 x i64> %2749, i64 1
  %2755 = getelementptr inbounds float, ptr %f4.host, i64 %2754
  %2756 = load float, ptr %2755, align 4, !tbaa !43
  %2757 = insertelement <4 x float> %2753, float %2756, i64 1
  %2758 = extractelement <4 x i64> %2749, i64 2
  %2759 = getelementptr inbounds float, ptr %f4.host, i64 %2758
  %2760 = load float, ptr %2759, align 4, !tbaa !43
  %2761 = insertelement <4 x float> %2757, float %2760, i64 2
  %2762 = extractelement <4 x i64> %2749, i64 3
  %2763 = getelementptr inbounds float, ptr %f4.host, i64 %2762
  %2764 = load float, ptr %2763, align 4, !tbaa !43
  %2765 = insertelement <4 x float> %2761, float %2764, i64 3
  %2766 = fmul <4 x float> %2765, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2767 = add <4 x i32> %2661, %t2415
  %2768 = sext <4 x i32> %2767 to <4 x i64>
  %2769 = extractelement <4 x i64> %2768, i64 0
  %2770 = getelementptr inbounds float, ptr %f4.host, i64 %2769
  %2771 = load float, ptr %2770, align 4, !tbaa !43
  %2772 = insertelement <4 x float> undef, float %2771, i64 0
  %2773 = extractelement <4 x i64> %2768, i64 1
  %2774 = getelementptr inbounds float, ptr %f4.host, i64 %2773
  %2775 = load float, ptr %2774, align 4, !tbaa !43
  %2776 = insertelement <4 x float> %2772, float %2775, i64 1
  %2777 = extractelement <4 x i64> %2768, i64 2
  %2778 = getelementptr inbounds float, ptr %f4.host, i64 %2777
  %2779 = load float, ptr %2778, align 4, !tbaa !43
  %2780 = insertelement <4 x float> %2776, float %2779, i64 2
  %2781 = extractelement <4 x i64> %2768, i64 3
  %2782 = getelementptr inbounds float, ptr %f4.host, i64 %2781
  %2783 = load float, ptr %2782, align 4, !tbaa !43
  %2784 = insertelement <4 x float> %2780, float %2783, i64 3
  %2785 = fmul <4 x float> %2784, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2786 = fadd <4 x float> %2766, %2785
  %2787 = fmul <4 x float> %2786, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2788 = fadd <4 x float> %2747, %2787
  %2789 = add nsw <4 x i32> %t2409, <i32 256, i32 256, i32 256, i32 256>
  %2790 = sext <4 x i32> %2789 to <4 x i64>
  %2791 = extractelement <4 x i64> %2790, i64 0
  %2792 = getelementptr inbounds float, ptr %f0.host, i64 %2791
  %2793 = load float, ptr %2792, align 4, !tbaa !6
  %2794 = insertelement <4 x float> undef, float %2793, i64 0
  %2795 = extractelement <4 x i64> %2790, i64 1
  %2796 = getelementptr inbounds float, ptr %f0.host, i64 %2795
  %2797 = load float, ptr %2796, align 4, !tbaa !6
  %2798 = insertelement <4 x float> %2794, float %2797, i64 1
  %2799 = extractelement <4 x i64> %2790, i64 2
  %2800 = getelementptr inbounds float, ptr %f0.host, i64 %2799
  %2801 = load float, ptr %2800, align 4, !tbaa !6
  %2802 = insertelement <4 x float> %2798, float %2801, i64 2
  %2803 = extractelement <4 x i64> %2790, i64 3
  %2804 = getelementptr inbounds float, ptr %f0.host, i64 %2803
  %2805 = load float, ptr %2804, align 4, !tbaa !6
  %2806 = insertelement <4 x float> %2802, float %2805, i64 3
  %2807 = fsub <4 x float> %t2398, %t2403
  %2808 = fmul <4 x float> %2554, %2807
  %2809 = fadd <4 x float> %t2403, %2808
  %2810 = fadd <4 x float> %2809, %2806
  %2811 = fsub <4 x float> %2810, %2788
  %2812 = fsub <4 x float> %t2402, %t2400
  %2813 = fadd <4 x float> %2812, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2814 = fmul <4 x float> %2813, %2811
  %2815 = fadd <4 x float> %2707, %2814
  %2816 = sext i32 %2562 to i64
  %2817 = sub nsw i64 %2816, %1963
  %2818 = add nsw i64 %2817, %2555
  %2819 = getelementptr inbounds float, ptr %222, i64 %2818
  %2820 = load <4 x float>, ptr %2819, align 4, !tbaa !69
  %2821 = fmul <4 x float> %2820, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2822 = sext i32 %t2395 to i64
  %2823 = sub nsw i64 %2822, %1963
  %2824 = add nsw i64 %2556, %2823
  %2825 = getelementptr inbounds float, ptr %222, i64 %2824
  %2826 = load <4 x float>, ptr %2825, align 4, !tbaa !69
  %2827 = fmul <4 x float> %2826, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2828 = fadd <4 x float> %2821, %2827
  %2829 = fmul <4 x float> %2828, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2830 = add nsw i64 %2817, %2557
  %2831 = getelementptr inbounds float, ptr %222, i64 %2830
  %2832 = load <4 x float>, ptr %2831, align 4, !tbaa !69
  %2833 = fmul <4 x float> %2832, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2834 = add nsw i64 %2558, %2823
  %2835 = getelementptr inbounds float, ptr %222, i64 %2834
  %2836 = load <4 x float>, ptr %2835, align 4, !tbaa !69
  %2837 = fmul <4 x float> %2836, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2838 = fadd <4 x float> %2833, %2837
  %2839 = fmul <4 x float> %2838, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2840 = fadd <4 x float> %2829, %2839
  %2841 = fadd <4 x float> %2815, %2840
  %2842 = insertelement <4 x i32> undef, i32 %t2437, i64 0
  %2843 = shufflevector <4 x i32> %2842, <4 x i32> undef, <4 x i32> zeroinitializer
  %2844 = add nsw <4 x i32> %2843, <i32 0, i32 1, i32 2, i32 3>
  %2845 = add nsw <4 x i32> %t2438, %2844
  %2846 = sext <4 x i32> %2845 to <4 x i64>
  %2847 = extractelement <4 x i64> %2846, i64 0
  %2848 = getelementptr inbounds float, ptr %f4.host, i64 %2847
  %2849 = load float, ptr %2848, align 4, !tbaa !43
  %2850 = insertelement <4 x float> undef, float %2849, i64 0
  %2851 = extractelement <4 x i64> %2846, i64 1
  %2852 = getelementptr inbounds float, ptr %f4.host, i64 %2851
  %2853 = load float, ptr %2852, align 4, !tbaa !43
  %2854 = insertelement <4 x float> %2850, float %2853, i64 1
  %2855 = extractelement <4 x i64> %2846, i64 2
  %2856 = getelementptr inbounds float, ptr %f4.host, i64 %2855
  %2857 = load float, ptr %2856, align 4, !tbaa !43
  %2858 = insertelement <4 x float> %2854, float %2857, i64 2
  %2859 = extractelement <4 x i64> %2846, i64 3
  %2860 = getelementptr inbounds float, ptr %f4.host, i64 %2859
  %2861 = load float, ptr %2860, align 4, !tbaa !43
  %2862 = insertelement <4 x float> %2858, float %2861, i64 3
  %2863 = fmul <4 x float> %2862, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2864 = insertelement <4 x i32> undef, i32 %t2436, i64 0
  %2865 = shufflevector <4 x i32> %2864, <4 x i32> undef, <4 x i32> zeroinitializer
  %2866 = add <4 x i32> %2865, <i32 -1, i32 0, i32 1, i32 2>
  %2867 = add <4 x i32> %2866, %t2438
  %2868 = sext <4 x i32> %2867 to <4 x i64>
  %2869 = extractelement <4 x i64> %2868, i64 0
  %2870 = getelementptr inbounds float, ptr %f4.host, i64 %2869
  %2871 = load float, ptr %2870, align 4, !tbaa !43
  %2872 = insertelement <4 x float> undef, float %2871, i64 0
  %2873 = extractelement <4 x i64> %2868, i64 1
  %2874 = getelementptr inbounds float, ptr %f4.host, i64 %2873
  %2875 = load float, ptr %2874, align 4, !tbaa !43
  %2876 = insertelement <4 x float> %2872, float %2875, i64 1
  %2877 = extractelement <4 x i64> %2868, i64 2
  %2878 = getelementptr inbounds float, ptr %f4.host, i64 %2877
  %2879 = load float, ptr %2878, align 4, !tbaa !43
  %2880 = insertelement <4 x float> %2876, float %2879, i64 2
  %2881 = extractelement <4 x i64> %2868, i64 3
  %2882 = getelementptr inbounds float, ptr %f4.host, i64 %2881
  %2883 = load float, ptr %2882, align 4, !tbaa !43
  %2884 = insertelement <4 x float> %2880, float %2883, i64 3
  %2885 = fmul <4 x float> %2884, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2886 = fadd <4 x float> %2863, %2885
  %2887 = fmul <4 x float> %2886, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2888 = insertelement <4 x i32> undef, i32 %t2435, i64 0
  %2889 = shufflevector <4 x i32> %2888, <4 x i32> undef, <4 x i32> zeroinitializer
  %2890 = add nsw <4 x i32> %2889, <i32 0, i32 1, i32 2, i32 3>
  %2891 = add nsw <4 x i32> %t2438, %2890
  %2892 = sext <4 x i32> %2891 to <4 x i64>
  %2893 = extractelement <4 x i64> %2892, i64 0
  %2894 = getelementptr inbounds float, ptr %f4.host, i64 %2893
  %2895 = load float, ptr %2894, align 4, !tbaa !43
  %2896 = insertelement <4 x float> undef, float %2895, i64 0
  %2897 = extractelement <4 x i64> %2892, i64 1
  %2898 = getelementptr inbounds float, ptr %f4.host, i64 %2897
  %2899 = load float, ptr %2898, align 4, !tbaa !43
  %2900 = insertelement <4 x float> %2896, float %2899, i64 1
  %2901 = extractelement <4 x i64> %2892, i64 2
  %2902 = getelementptr inbounds float, ptr %f4.host, i64 %2901
  %2903 = load float, ptr %2902, align 4, !tbaa !43
  %2904 = insertelement <4 x float> %2900, float %2903, i64 2
  %2905 = extractelement <4 x i64> %2892, i64 3
  %2906 = getelementptr inbounds float, ptr %f4.host, i64 %2905
  %2907 = load float, ptr %2906, align 4, !tbaa !43
  %2908 = insertelement <4 x float> %2904, float %2907, i64 3
  %2909 = fmul <4 x float> %2908, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2910 = insertelement <4 x i32> undef, i32 %t2431, i64 0
  %2911 = shufflevector <4 x i32> %2910, <4 x i32> undef, <4 x i32> zeroinitializer
  %2912 = add <4 x i32> %2911, <i32 -1, i32 0, i32 1, i32 2>
  %2913 = add <4 x i32> %2912, %t2438
  %2914 = sext <4 x i32> %2913 to <4 x i64>
  %2915 = extractelement <4 x i64> %2914, i64 0
  %2916 = getelementptr inbounds float, ptr %f4.host, i64 %2915
  %2917 = load float, ptr %2916, align 4, !tbaa !43
  %2918 = insertelement <4 x float> undef, float %2917, i64 0
  %2919 = extractelement <4 x i64> %2914, i64 1
  %2920 = getelementptr inbounds float, ptr %f4.host, i64 %2919
  %2921 = load float, ptr %2920, align 4, !tbaa !43
  %2922 = insertelement <4 x float> %2918, float %2921, i64 1
  %2923 = extractelement <4 x i64> %2914, i64 2
  %2924 = getelementptr inbounds float, ptr %f4.host, i64 %2923
  %2925 = load float, ptr %2924, align 4, !tbaa !43
  %2926 = insertelement <4 x float> %2922, float %2925, i64 2
  %2927 = extractelement <4 x i64> %2914, i64 3
  %2928 = getelementptr inbounds float, ptr %f4.host, i64 %2927
  %2929 = load float, ptr %2928, align 4, !tbaa !43
  %2930 = insertelement <4 x float> %2926, float %2929, i64 3
  %2931 = fmul <4 x float> %2930, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2932 = fadd <4 x float> %2909, %2931
  %2933 = fmul <4 x float> %2932, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2934 = fadd <4 x float> %2887, %2933
  %2935 = sext <4 x i32> %t2429 to <4 x i64>
  %2936 = extractelement <4 x i64> %2935, i64 0
  %2937 = getelementptr inbounds float, ptr %f0.host, i64 %2936
  %2938 = load float, ptr %2937, align 4, !tbaa !6
  %2939 = insertelement <4 x float> undef, float %2938, i64 0
  %2940 = extractelement <4 x i64> %2935, i64 1
  %2941 = getelementptr inbounds float, ptr %f0.host, i64 %2940
  %2942 = load float, ptr %2941, align 4, !tbaa !6
  %2943 = insertelement <4 x float> %2939, float %2942, i64 1
  %2944 = extractelement <4 x i64> %2935, i64 2
  %2945 = getelementptr inbounds float, ptr %f0.host, i64 %2944
  %2946 = load float, ptr %2945, align 4, !tbaa !6
  %2947 = insertelement <4 x float> %2943, float %2946, i64 2
  %2948 = extractelement <4 x i64> %2935, i64 3
  %2949 = getelementptr inbounds float, ptr %f0.host, i64 %2948
  %2950 = load float, ptr %2949, align 4, !tbaa !6
  %2951 = insertelement <4 x float> %2947, float %2950, i64 3
  %2952 = fsub <4 x float> %t2397, %t2426
  %2953 = fmul <4 x float> %2554, %2952
  %2954 = fadd <4 x float> %t2426, %2953
  %2955 = fadd <4 x float> %2954, %2951
  %2956 = fsub <4 x float> %2955, %2934
  %2957 = fsub <4 x float> %t2399, %t2424
  %2958 = fmul <4 x float> %2957, %2956
  %2959 = add nsw <4 x i32> %t2433, %2844
  %2960 = sext <4 x i32> %2959 to <4 x i64>
  %2961 = extractelement <4 x i64> %2960, i64 0
  %2962 = getelementptr inbounds float, ptr %f4.host, i64 %2961
  %2963 = load float, ptr %2962, align 4, !tbaa !43
  %2964 = insertelement <4 x float> undef, float %2963, i64 0
  %2965 = extractelement <4 x i64> %2960, i64 1
  %2966 = getelementptr inbounds float, ptr %f4.host, i64 %2965
  %2967 = load float, ptr %2966, align 4, !tbaa !43
  %2968 = insertelement <4 x float> %2964, float %2967, i64 1
  %2969 = extractelement <4 x i64> %2960, i64 2
  %2970 = getelementptr inbounds float, ptr %f4.host, i64 %2969
  %2971 = load float, ptr %2970, align 4, !tbaa !43
  %2972 = insertelement <4 x float> %2968, float %2971, i64 2
  %2973 = extractelement <4 x i64> %2960, i64 3
  %2974 = getelementptr inbounds float, ptr %f4.host, i64 %2973
  %2975 = load float, ptr %2974, align 4, !tbaa !43
  %2976 = insertelement <4 x float> %2972, float %2975, i64 3
  %2977 = fmul <4 x float> %2976, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2978 = add <4 x i32> %t2433, %2865
  %2979 = add <4 x i32> %2978, <i32 -1, i32 0, i32 1, i32 2>
  %2980 = sext <4 x i32> %2979 to <4 x i64>
  %2981 = extractelement <4 x i64> %2980, i64 0
  %2982 = getelementptr inbounds float, ptr %f4.host, i64 %2981
  %2983 = load float, ptr %2982, align 4, !tbaa !43
  %2984 = insertelement <4 x float> undef, float %2983, i64 0
  %2985 = extractelement <4 x i64> %2980, i64 1
  %2986 = getelementptr inbounds float, ptr %f4.host, i64 %2985
  %2987 = load float, ptr %2986, align 4, !tbaa !43
  %2988 = insertelement <4 x float> %2984, float %2987, i64 1
  %2989 = extractelement <4 x i64> %2980, i64 2
  %2990 = getelementptr inbounds float, ptr %f4.host, i64 %2989
  %2991 = load float, ptr %2990, align 4, !tbaa !43
  %2992 = insertelement <4 x float> %2988, float %2991, i64 2
  %2993 = extractelement <4 x i64> %2980, i64 3
  %2994 = getelementptr inbounds float, ptr %f4.host, i64 %2993
  %2995 = load float, ptr %2994, align 4, !tbaa !43
  %2996 = insertelement <4 x float> %2992, float %2995, i64 3
  %2997 = fmul <4 x float> %2996, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2998 = fadd <4 x float> %2977, %2997
  %2999 = fmul <4 x float> %2998, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3000 = add nsw <4 x i32> %t2433, %2890
  %3001 = sext <4 x i32> %3000 to <4 x i64>
  %3002 = extractelement <4 x i64> %3001, i64 0
  %3003 = getelementptr inbounds float, ptr %f4.host, i64 %3002
  %3004 = load float, ptr %3003, align 4, !tbaa !43
  %3005 = insertelement <4 x float> undef, float %3004, i64 0
  %3006 = extractelement <4 x i64> %3001, i64 1
  %3007 = getelementptr inbounds float, ptr %f4.host, i64 %3006
  %3008 = load float, ptr %3007, align 4, !tbaa !43
  %3009 = insertelement <4 x float> %3005, float %3008, i64 1
  %3010 = extractelement <4 x i64> %3001, i64 2
  %3011 = getelementptr inbounds float, ptr %f4.host, i64 %3010
  %3012 = load float, ptr %3011, align 4, !tbaa !43
  %3013 = insertelement <4 x float> %3009, float %3012, i64 2
  %3014 = extractelement <4 x i64> %3001, i64 3
  %3015 = getelementptr inbounds float, ptr %f4.host, i64 %3014
  %3016 = load float, ptr %3015, align 4, !tbaa !43
  %3017 = insertelement <4 x float> %3013, float %3016, i64 3
  %3018 = fmul <4 x float> %3017, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3019 = add <4 x i32> %t2433, %2911
  %3020 = add <4 x i32> %3019, <i32 -1, i32 0, i32 1, i32 2>
  %3021 = sext <4 x i32> %3020 to <4 x i64>
  %3022 = extractelement <4 x i64> %3021, i64 0
  %3023 = getelementptr inbounds float, ptr %f4.host, i64 %3022
  %3024 = load float, ptr %3023, align 4, !tbaa !43
  %3025 = insertelement <4 x float> undef, float %3024, i64 0
  %3026 = extractelement <4 x i64> %3021, i64 1
  %3027 = getelementptr inbounds float, ptr %f4.host, i64 %3026
  %3028 = load float, ptr %3027, align 4, !tbaa !43
  %3029 = insertelement <4 x float> %3025, float %3028, i64 1
  %3030 = extractelement <4 x i64> %3021, i64 2
  %3031 = getelementptr inbounds float, ptr %f4.host, i64 %3030
  %3032 = load float, ptr %3031, align 4, !tbaa !43
  %3033 = insertelement <4 x float> %3029, float %3032, i64 2
  %3034 = extractelement <4 x i64> %3021, i64 3
  %3035 = getelementptr inbounds float, ptr %f4.host, i64 %3034
  %3036 = load float, ptr %3035, align 4, !tbaa !43
  %3037 = insertelement <4 x float> %3033, float %3036, i64 3
  %3038 = fmul <4 x float> %3037, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3039 = fadd <4 x float> %3018, %3038
  %3040 = fmul <4 x float> %3039, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3041 = fadd <4 x float> %2999, %3040
  %3042 = add nsw <4 x i32> %t2429, <i32 256, i32 256, i32 256, i32 256>
  %3043 = sext <4 x i32> %3042 to <4 x i64>
  %3044 = extractelement <4 x i64> %3043, i64 0
  %3045 = getelementptr inbounds float, ptr %f0.host, i64 %3044
  %3046 = load float, ptr %3045, align 4, !tbaa !6
  %3047 = insertelement <4 x float> undef, float %3046, i64 0
  %3048 = extractelement <4 x i64> %3043, i64 1
  %3049 = getelementptr inbounds float, ptr %f0.host, i64 %3048
  %3050 = load float, ptr %3049, align 4, !tbaa !6
  %3051 = insertelement <4 x float> %3047, float %3050, i64 1
  %3052 = extractelement <4 x i64> %3043, i64 2
  %3053 = getelementptr inbounds float, ptr %f0.host, i64 %3052
  %3054 = load float, ptr %3053, align 4, !tbaa !6
  %3055 = insertelement <4 x float> %3051, float %3054, i64 2
  %3056 = extractelement <4 x i64> %3043, i64 3
  %3057 = getelementptr inbounds float, ptr %f0.host, i64 %3056
  %3058 = load float, ptr %3057, align 4, !tbaa !6
  %3059 = insertelement <4 x float> %3055, float %3058, i64 3
  %3060 = fsub <4 x float> %t2397, %t2425
  %3061 = fmul <4 x float> %2554, %3060
  %3062 = fadd <4 x float> %t2425, %3061
  %3063 = fadd <4 x float> %3062, %3059
  %3064 = fsub <4 x float> %3063, %3041
  %3065 = fsub <4 x float> %t2424, %t2399
  %3066 = fadd <4 x float> %3065, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3067 = fmul <4 x float> %3066, %3064
  %3068 = fadd <4 x float> %2958, %3067
  %3069 = sext i32 %2581 to i64
  %3070 = sub nsw i64 %3069, %1963
  %3071 = add nsw i64 %3070, %2555
  %3072 = getelementptr inbounds float, ptr %222, i64 %3071
  %3073 = load <4 x float>, ptr %3072, align 4, !tbaa !69
  %3074 = fmul <4 x float> %3073, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3075 = sext i32 %t2422 to i64
  %3076 = sub nsw i64 %3075, %1963
  %3077 = add nsw i64 %2556, %3076
  %3078 = getelementptr inbounds float, ptr %222, i64 %3077
  %3079 = load <4 x float>, ptr %3078, align 4, !tbaa !69
  %3080 = fmul <4 x float> %3079, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3081 = fadd <4 x float> %3074, %3080
  %3082 = fmul <4 x float> %3081, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3083 = add nsw i64 %3070, %2557
  %3084 = getelementptr inbounds float, ptr %222, i64 %3083
  %3085 = load <4 x float>, ptr %3084, align 4, !tbaa !69
  %3086 = fmul <4 x float> %3085, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3087 = add nsw i64 %2558, %3076
  %3088 = getelementptr inbounds float, ptr %222, i64 %3087
  %3089 = load <4 x float>, ptr %3088, align 4, !tbaa !69
  %3090 = fmul <4 x float> %3089, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3091 = fadd <4 x float> %3086, %3090
  %3092 = fmul <4 x float> %3091, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3093 = fadd <4 x float> %3082, %3092
  %3094 = fadd <4 x float> %3068, %3093
  %3095 = shufflevector <4 x float> %2841, <4 x float> %3094, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %3096 = sext i32 %f125.s0.v3.v366.base to i64
  %3097 = sub nsw i64 %3096, %2559
  %3098 = getelementptr inbounds float, ptr %2526, i64 %3097
  store <8 x float> %3095, ptr %3098, align 4, !tbaa !71
  %lsr.iv.next405 = add i32 %lsr.iv404, -1
  %lsr.iv.next407 = add i32 %lsr.iv406, 8
  %.not150 = icmp eq i32 %lsr.iv.next405, 0
  br i1 %.not150, label %"consume f125", label %"for f125.s0.v3.v3"

"consume f125":                                   ; preds = %"for f125.s0.v3.v3", %"produce f125"
  %3099 = add nsw i32 %local_laplacian.extent.0, 7
  %3100 = ashr i32 %3099, 3
  %3101 = icmp sgt i32 %local_laplacian.extent.0, 0
  %3102 = sext i32 %local_laplacian.s0.v4.v4.base to i64
  %3103 = shl nsw i64 %75, 1
  %3104 = add nsw i64 %6, 1
  %3105 = sub nsw i64 %3102, %10
  br i1 %3101, label %"for local_laplacian.s0.v3.v3.preheader", label %"consume f125.if.then.i253_crit_edge", !prof !5

"consume f125.if.then.i253_crit_edge":            ; preds = %"consume f125"
  %.pre337 = sext i32 %195 to i64
  %.pre339 = add nsw i32 %input.min.0, %input.extent.0
  %.pre341 = add nsw i32 %.pre339, -1
  %.pre346 = mul nsw i32 %input.stride.2, %b1146
  %.pre348 = mul nsw i32 %input.stride.1, %b1148
  %.pre350 = add nsw i32 %.pre348, %input.min.0
  %.pre352 = add nsw i32 %.pre350, %.pre346
  %.pre354 = add nsw i32 %b1146, %input.extent.2
  %.pre356 = add nsw i32 %.pre354, -1
  %.pre357 = insertelement <8 x i32> undef, i32 %.pre341, i64 0
  %.pre359 = shufflevector <8 x i32> %.pre357, <8 x i32> undef, <8 x i32> zeroinitializer
  %.pre360 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %.pre362 = shufflevector <8 x i32> %.pre360, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %if.then.i253

"for local_laplacian.s0.v3.v3.preheader":         ; preds = %"consume f125"
  %3106 = icmp sgt i32 %local_laplacian.extent.2, 0
  %reass.add229 = sub nsw i64 %3102, %66
  %reass.mul230 = mul nsw i64 %reass.add229, %73
  %3107 = mul nsw i64 %3105, %3104
  %3108 = sub i64 %3107, %8
  %3109 = mul nsw i32 %input.stride.2, %b1146
  %3110 = mul nsw i32 %input.stride.1, %b1148
  %3111 = add nsw i32 %3110, %input.min.0
  %3112 = add nsw i32 %3111, %3109
  %3113 = add nsw i32 %b1146, %input.extent.2
  %b885 = add nsw i32 %3113, -1
  %3114 = mul nsw i32 %local_laplacian.s0.v4.v4.base, %input.stride.1
  %3115 = add nsw i32 %input.min.0, %input.extent.0
  %3116 = add nsw i32 %3115, -1
  %3117 = insertelement <8 x i32> undef, i32 %3116, i64 0
  %b887 = shufflevector <8 x i32> %3117, <8 x i32> undef, <8 x i32> zeroinitializer
  %3118 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %b886 = shufflevector <8 x i32> %3118, <8 x i32> undef, <8 x i32> zeroinitializer
  %3119 = sext i32 %195 to i64
  br label %"for local_laplacian.s0.v3.v3"

"for local_laplacian.s0.v3.v3":                   ; preds = %"end for local_laplacian.s0.v5", %"for local_laplacian.s0.v3.v3.preheader"
  %local_laplacian.s0.v3.v3 = phi i32 [ %3404, %"end for local_laplacian.s0.v5" ], [ 0, %"for local_laplacian.s0.v3.v3.preheader" ]
  br i1 %3106, label %"for local_laplacian.s0.v5.preheader", label %"end for local_laplacian.s0.v5", !prof !5

"for local_laplacian.s0.v5.preheader":            ; preds = %"for local_laplacian.s0.v3.v3"
  %3120 = shl nsw i32 %local_laplacian.s0.v3.v3, 3
  %a879 = add nsw i32 %3120, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a879)
  %3121 = sext i32 %local_laplacian.s0.v3.v277.base to i64
  %3122 = sub nsw i64 %3121, %62
  %3123 = add i64 %3122, %reass.mul230
  %scevgep399 = getelementptr i16, ptr %local_laplacian.host, i64 %3123
  %3124 = add i64 %3108, %3121
  %3125 = getelementptr inbounds float, ptr %f2.host, i64 %3124
  %3126 = load <8 x float>, ptr %3125, align 4, !tbaa !41
  %3127 = fadd <8 x float> %3126, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %3128 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base, i64 0
  %3129 = shufflevector <8 x i32> %3128, <8 x i32> undef, <8 x i32> zeroinitializer
  %a885 = add nsw <8 x i32> %3129, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a884 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b887, <8 x i32> %a885)
  %3130 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a884, <8 x i32> %b886)
  %3131 = sub nsw i64 %3121, %3119
  %3132 = getelementptr inbounds float, ptr %2526, i64 %3131
  %3133 = load <8 x float>, ptr %3132, align 4, !tbaa !71
  br label %"for local_laplacian.s0.v5"

if.then.i253:                                     ; preds = %"end for local_laplacian.s0.v5", %"consume f125.if.then.i253_crit_edge"
  %b1020.pre-phi = phi <8 x i32> [ %.pre362, %"consume f125.if.then.i253_crit_edge" ], [ %b886, %"end for local_laplacian.s0.v5" ]
  %b1021.pre-phi = phi <8 x i32> [ %.pre359, %"consume f125.if.then.i253_crit_edge" ], [ %b887, %"end for local_laplacian.s0.v5" ]
  %b1019.pre-phi = phi i32 [ %.pre356, %"consume f125.if.then.i253_crit_edge" ], [ %b885, %"end for local_laplacian.s0.v5" ]
  %.pre-phi355 = phi i32 [ %.pre354, %"consume f125.if.then.i253_crit_edge" ], [ %3113, %"end for local_laplacian.s0.v5" ]
  %.pre-phi353 = phi i32 [ %.pre352, %"consume f125.if.then.i253_crit_edge" ], [ %3112, %"end for local_laplacian.s0.v5" ]
  %b1014.pre-phi = phi i32 [ %.pre341, %"consume f125.if.then.i253_crit_edge" ], [ %3116, %"end for local_laplacian.s0.v5" ]
  %.pre-phi340 = phi i32 [ %.pre339, %"consume f125.if.then.i253_crit_edge" ], [ %3115, %"end for local_laplacian.s0.v5" ]
  %.pre-phi338 = phi i64 [ %.pre337, %"consume f125.if.then.i253_crit_edge" ], [ %3119, %"end for local_laplacian.s0.v5" ]
  tail call void @halide_free(ptr %__user_context, ptr nonnull %2526) #7
  %3134 = shl nsw i64 %64, 2
  %3135 = add i32 %a1120, 1
  %3136 = xor i32 %f4.v4.min_realized, -1
  %3137 = add i32 %local_laplacian.s0.v4.v4.base, 1
  %3138 = and i32 %3137, 1
  %3139 = icmp ne i32 %3138, 0
  %3140 = shl i32 %3135, 1
  %3141 = and i32 %3140, 2
  %3142 = sub i32 %3137, %f2.v4.min_realized
  %3143 = add i32 %f2.v3.extent_realized.s, 1
  %3144 = mul i32 %3142, %3143
  %3145 = sub i32 %a1120, %f2.v3.min_realized
  %3146 = add i32 %3145, %3144
  %3147 = shl i32 %a1120, 1
  %3148 = and i32 %3147, 2
  %3149 = add nsw i64 %3102, 1
  %3150 = mul nsw i64 %3149, %73
  %3151 = mul nsw i64 %73, %66
  %3152 = add nsw i64 %3151, %62
  %3153 = sub i64 %3150, %3152
  %3154 = mul nsw i64 %75, %69
  %3155 = add i64 %3152, %3154
  %3156 = sub i64 %3150, %3155
  %3157 = mul nsw i64 %3149, %53
  %3158 = mul nsw i64 %50, %53
  %3159 = mul nsw i64 %b1037, %55
  %3160 = add nsw i64 %3158, %48
  %3161 = add i64 %3160, %3159
  %3162 = sub i64 %3157, %3161
  %3163 = shl nsw i64 %55, 1
  %3164 = add i32 %b1028, %local_laplacian.extent.2
  %a886 = sub nsw i32 %b793, %106
  %3165 = icmp sgt i32 %108, %b793
  %f129.s0.v3.v3.epilogue.s = select i1 %3165, i32 %a886, i32 %109
  %3166 = lshr i32 %f129.s0.v3.v3.epilogue.s, 3
  %a887 = add nuw nsw i32 %3166, 1
  %.inv141 = icmp sgt i32 %f129.s0.v3.v3.epilogue.s, -1
  %3167 = select i1 %.inv141, i32 %a887, i32 0
  %3168 = shl nsw i32 %106, 1
  %3169 = and i32 %3168, 2
  %3170 = sub i32 %106, %f75.v3.min_realized
  %3171 = sub i32 %106, %f7.v3.min_realized
  %.not142 = icmp slt i32 %123, %3167
  %3172 = shl nsw i32 %b793, 1
  %3173 = and i32 %3172, 2
  %3174 = ashr i32 %b787, 5
  %t2480 = add nsw i32 %3173, %3174
  %3175 = sub i32 %b793, %f75.v3.min_realized
  %3176 = sub nsw i32 %b793, %f7.v3.min_realized
  %3177 = add nsw i32 %95, -67
  %3178 = lshr i32 %3177, 3
  %3179 = and i32 %3178, 2
  %3180 = ashr i32 %3177, 5
  %t2502 = add nsw i32 %3179, %3180
  %3181 = sub nsw i32 %3174, %f8.v3.min_realized
  %3182 = sub nsw i32 %t2480, %f8.v3.min_realized
  %3183 = sext i32 %3174 to i64
  %3184 = sub nsw i64 %3183, %4
  %3185 = sext i32 %t2480 to i64
  %3186 = xor i64 %4, -1
  %3187 = add nsw i64 %3186, %3185
  %3188 = sub nsw i32 %3180, %f8.v3.min_realized
  %3189 = sub nsw i32 %t2502, %f8.v3.min_realized
  %3190 = sext i32 %3180 to i64
  %3191 = sub nsw i64 %3190, %4
  %3192 = sext i32 %t2502 to i64
  %3193 = xor i64 %4, -1
  %3194 = add nsw i64 %3193, %3192
  %narrow144 = sub nsw i32 %b793, %f129.v3.min_realized
  %3195 = sext i32 %narrow144 to i64
  %a906 = sub nsw i32 %b792, %99
  %3196 = icmp sgt i32 %101, %b792
  %f128.s0.v3.v3.epilogue.s = select i1 %3196, i32 %a906, i32 %102
  %3197 = lshr i32 %f128.s0.v3.v3.epilogue.s, 3
  %a907 = add nuw nsw i32 %3197, 1
  %.inv128 = icmp sgt i32 %f128.s0.v3.v3.epilogue.s, -1
  %3198 = select i1 %.inv128, i32 %a907, i32 0
  %3199 = shl nsw i32 %99, 1
  %3200 = and i32 %3199, 2
  %3201 = sub i32 %99, %f74.v3.min_realized
  %3202 = sub i32 %99, %f6.v3.min_realized
  %.not129 = icmp slt i32 %122, %3198
  %3203 = shl nsw i32 %b792, 1
  %3204 = and i32 %3203, 2
  %3205 = ashr i32 %b786, 4
  %t2557 = add nsw i32 %3204, %3205
  %3206 = sub i32 %b792, %f74.v3.min_realized
  %3207 = sub nsw i32 %b792, %f6.v3.min_realized
  %3208 = sub nsw i32 %t2557, %f7.v3.min_realized
  %3209 = sub nsw i32 %3205, %f7.v3.min_realized
  %3210 = add nsw i32 %95, -35
  %3211 = lshr i32 %3210, 2
  %3212 = and i32 %3211, 2
  %3213 = ashr i32 %3210, 4
  %t2579 = add nsw i32 %3212, %3213
  %3214 = sub nsw i32 %t2579, %f7.v3.min_realized
  %3215 = sub nsw i32 %3213, %f7.v3.min_realized
  %narrow130 = sub nsw i32 %3205, %f129.v3.min_realized
  %3216 = sext i32 %narrow130 to i64
  %3217 = xor i32 %f129.v3.min_realized, -1
  %narrow363 = add nsw i32 %t2557, %3217
  %3218 = sext i32 %narrow363 to i64
  %narrow132 = sub nsw i32 %3213, %f129.v3.min_realized
  %3219 = sext i32 %narrow132 to i64
  %3220 = xor i32 %f129.v3.min_realized, -1
  %narrow364 = add nsw i32 %t2579, %3220
  %3221 = sext i32 %narrow364 to i64
  %narrow135 = sub nsw i32 %b792, %f128.v3.min_realized
  %3222 = sext i32 %narrow135 to i64
  %a926 = sub nsw i32 %b801, %135
  %3223 = icmp sgt i32 %137, %b801
  %f127.s0.v3.v3.epilogue.s = select i1 %3223, i32 %a926, i32 %138
  %3224 = lshr i32 %f127.s0.v3.v3.epilogue.s, 3
  %a927 = add nuw nsw i32 %3224, 1
  %.inv = icmp sgt i32 %f127.s0.v3.v3.epilogue.s, -1
  %3225 = select i1 %.inv, i32 %a927, i32 0
  %3226 = shl nsw i32 %135, 1
  %3227 = and i32 %3226, 2
  %3228 = sub i32 %135, %f73.v3.min_realized
  %3229 = sub i32 %135, %f5.v3.min_realized
  %.not119 = icmp slt i32 %139, %3225
  %3230 = shl nsw i32 %b801, 1
  %3231 = and i32 %3230, 2
  %3232 = ashr i32 %b795, 3
  %t2634 = add nsw i32 %3231, %3232
  %3233 = sub i32 %b801, %f73.v3.min_realized
  %3234 = sub nsw i32 %b801, %f5.v3.min_realized
  %3235 = sub nsw i32 %t2634, %f6.v3.min_realized
  %3236 = sub nsw i32 %3232, %f6.v3.min_realized
  %3237 = add nsw i32 %95, -19
  %3238 = lshr i32 %3237, 1
  %3239 = and i32 %3238, 2
  %3240 = ashr i32 %3237, 3
  %t2656 = add nsw i32 %3239, %3240
  %3241 = sub nsw i32 %t2656, %f6.v3.min_realized
  %3242 = sub nsw i32 %3240, %f6.v3.min_realized
  %narrow120 = sub nsw i32 %3232, %f128.v3.min_realized
  %3243 = sext i32 %narrow120 to i64
  %3244 = xor i32 %f128.v3.min_realized, -1
  %narrow365 = add nsw i32 %t2634, %3244
  %3245 = sext i32 %narrow365 to i64
  %narrow122 = sub nsw i32 %3240, %f128.v3.min_realized
  %3246 = sext i32 %narrow122 to i64
  %3247 = xor i32 %f128.v3.min_realized, -1
  %narrow366 = add nsw i32 %t2656, %3247
  %3248 = sext i32 %narrow366 to i64
  %3249 = sext i32 %b801 to i64
  %3250 = sub nsw i64 %3249, %1396
  %a946 = sub nsw i32 %b806, %161
  %3251 = icmp sgt i32 %166, %b806
  %f126.s0.v3.v3.epilogue.s = select i1 %3251, i32 %a946, i32 %167
  %3252 = add nsw i32 %f126.s0.v3.v3.epilogue.s, 9
  %a947 = lshr i32 %3252, 3
  %3253 = icmp sgt i32 %f126.s0.v3.v3.epilogue.s, -2
  %3254 = select i1 %3253, i32 %a947, i32 0
  %.not201 = icmp eq i32 %3254, 0
  %3255 = sub i32 %161, %f72.v3.min_realized
  %3256 = sub i32 %161, %f4.v3.min_realized
  %3257 = and i32 %a1120, 2
  %3258 = xor i32 %f126.v3.min_realized, -1
  %3259 = sext i32 %3258 to i64
  %3260 = icmp sgt i32 %1952, %3254
  %3261 = and i32 %162, 2
  %3262 = ashr i32 %162, 2
  %t2711 = add nsw i32 %3262, %3261
  %3263 = sub i32 %b806, %f72.v3.min_realized
  %3264 = sub nsw i32 %b806, %f4.v3.min_realized
  %3265 = sub nsw i32 %t2711, %f5.v3.min_realized
  %3266 = sub nsw i32 %3262, %f5.v3.min_realized
  %3267 = add nsw i32 %95, -11
  %3268 = and i32 %3267, 2
  %3269 = ashr i32 %3267, 2
  %t2733 = add nsw i32 %3269, %3268
  %3270 = sub nsw i32 %t2733, %f5.v3.min_realized
  %3271 = sub nsw i32 %3269, %f5.v3.min_realized
  %3272 = sext i32 %3262 to i64
  %3273 = sub nsw i64 %3272, %1396
  %3274 = sext i32 %t2711 to i64
  %3275 = xor i64 %1396, -1
  %3276 = add nsw i64 %3275, %3274
  %3277 = sext i32 %3269 to i64
  %3278 = sub nsw i64 %3277, %1396
  %3279 = sext i32 %t2733 to i64
  %3280 = xor i64 %1396, -1
  %3281 = add nsw i64 %3280, %3279
  %3282 = sext i32 %b806 to i64
  %3283 = sub nsw i64 %3282, %1963
  %a970 = lshr i32 %197, 3
  %3284 = icmp sgt i32 %197, 7
  %3285 = select i1 %3284, i32 %a970, i32 0
  %.not200 = icmp eq i32 %3285, 0
  %3286 = mul nsw i64 %.pre-phi338, -4
  %3287 = fdiv float 1.000000e+00, %230
  %3288 = insertelement <4 x float> undef, float %3287, i64 0
  %3289 = shufflevector <4 x float> %3288, <4 x float> undef, <4 x i32> zeroinitializer
  %3290 = xor i32 %158, -1
  %3291 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %3292 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %3291
  %.neg251 = shufflevector <4 x i32> %3292, <4 x i32> poison, <4 x i32> zeroinitializer
  %3293 = shl nsw i32 %levels, 8
  %3294 = add nsw i32 %3293, -256
  %3295 = insertelement <4 x i32> undef, i32 %3294, i64 0
  %b978 = shufflevector <4 x i32> %3295, <4 x i32> undef, <4 x i32> zeroinitializer
  %3296 = ashr i32 %3135, 1
  %3297 = insertelement <4 x float> undef, float %beta, i64 0
  %3298 = shufflevector <4 x float> %3297, <4 x float> undef, <4 x i32> zeroinitializer
  %3299 = add nsw i32 %3148, %161
  %3300 = add nsw i32 %3141, %3296
  %3301 = icmp sgt i32 %2529, %3285
  %3302 = shl i32 %95, 1
  %3303 = and i32 %3302, 2
  %3304 = ashr i32 %95, 1
  %t2801 = add nsw i32 %3303, %3304
  %3305 = sub i32 %95, %f2.v3.min_realized
  %3306 = sub nsw i32 %t2801, %f4.v3.min_realized
  %3307 = sub nsw i32 %3304, %f4.v3.min_realized
  %3308 = add nsw i32 %95, -7
  %3309 = shl i32 %3308, 1
  %3310 = and i32 %3309, 2
  %3311 = ashr i32 %3308, 1
  %t2828 = add nsw i32 %3310, %3311
  %3312 = sub nsw i32 %t2828, %f4.v3.min_realized
  %3313 = sub nsw i32 %3311, %f4.v3.min_realized
  %t2826 = add i32 %3307, -4
  %t2825 = add i32 %3306, -4
  %3314 = sext i32 %3304 to i64
  %3315 = sub nsw i64 %3314, %1963
  %3316 = add nsw i64 %3315, -4
  %3317 = sext i32 %t2801 to i64
  %3318 = sub nsw i64 %3317, %1963
  %3319 = add nsw i64 %3318, -5
  %3320 = sext i32 %3311 to i64
  %3321 = sub nsw i64 %3320, %1963
  %3322 = sext i32 %t2828 to i64
  %3323 = xor i64 %1963, -1
  %3324 = add nsw i64 %3323, %3322
  %3325 = add nsw i64 %58, -8
  %3326 = add nsw i64 %3325, %62
  %3327 = sub nsw i64 %3326, %.pre-phi338
  %3328 = sub nsw i32 %input.min.0, %local_laplacian.min.0
  %3329 = add nsw i32 %3328, 7
  %a1006 = lshr i32 %3329, 3
  %3330 = icmp sgt i32 %3328, 0
  %3331 = select i1 %3330, i32 %a1006, i32 0
  %local_laplacian.s0.v3.v3.prologue = tail call i32 @llvm.smin.i32(i32 %3100, i32 %3331)
  %3332 = sub nsw i32 %.pre-phi340, %local_laplacian.min.0
  %3333 = ashr i32 %3332, 3
  %a1011 = add nsw i32 %3333, -1
  %3334 = tail call i32 @llvm.smin.i32(i32 %b1014.pre-phi, i32 %b816)
  %3335 = sub nsw i32 %3334, %local_laplacian.min.0
  %b1013 = ashr i32 %3335, 3
  %.not175 = icmp slt i32 %b1013, %3333
  %a1010 = select i1 %.not175, i32 %b1013, i32 %a1011
  %3336 = add nsw i32 %local_laplacian.extent.0, -1
  %b1012 = ashr i32 %3336, 3
  %3337 = tail call i32 @llvm.smin.i32(i32 %b1012, i32 %a1010)
  %b1009 = add nsw i32 %3337, 1
  %local_laplacian.s0.v3.v3.epilogue = tail call i32 @llvm.smax.i32(i32 %local_laplacian.s0.v3.v3.prologue, i32 %b1009)
  %3338 = icmp sgt i32 %local_laplacian.s0.v3.v3.prologue, 0
  %3339 = icmp slt i32 %b1028, %3164
  %.not176 = icmp sgt i32 %local_laplacian.s0.v3.v3.prologue, %3337
  %a1021 = tail call i32 @llvm.smax.i32(i32 %b1146, i32 %b1028)
  %local_laplacian.s0.v5.prologue = tail call i32 @llvm.smin.i32(i32 %3164, i32 %a1021)
  %a1023 = tail call i32 @llvm.smin.i32(i32 %3164, i32 %.pre-phi355)
  %local_laplacian.s0.v5.epilogue = tail call i32 @llvm.smax.i32(i32 %a1023, i32 %local_laplacian.s0.v5.prologue)
  %3340 = icmp slt i32 %b1028, %local_laplacian.s0.v5.prologue
  %3341 = icmp slt i32 %local_laplacian.s0.v5.prologue, %a1023
  %3342 = icmp slt i32 %local_laplacian.s0.v5.epilogue, %3164
  %3343 = add nsw i64 %46, -1
  %b1032 = add nsw i64 %3343, %b1037
  %3344 = sub nsw i32 %local_laplacian.s0.v5.epilogue, %local_laplacian.s0.v5.prologue
  %3345 = sext i32 %local_laplacian.s0.v5.prologue to i64
  %3346 = mul nsw i64 %75, %3345
  %3347 = mul nsw i64 %3345, %55
  %3348 = sext i32 %local_laplacian.s0.v5.epilogue to i64
  %3349 = mul nsw i64 %75, %3348
  %3350 = icmp slt i32 %local_laplacian.s0.v3.v3.epilogue, %3100
  %3351 = sext i32 %3143 to i64
  %3352 = sext i32 %3305 to i64
  br label %"produce f12919"

"for local_laplacian.s0.v5":                      ; preds = %"for local_laplacian.s0.v5", %"for local_laplacian.s0.v5.preheader"
  %lsr.iv400 = phi ptr [ %scevgep399, %"for local_laplacian.s0.v5.preheader" ], [ %scevgep402, %"for local_laplacian.s0.v5" ]
  %lsr.iv397 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5.preheader" ], [ %lsr.iv.next398, %"for local_laplacian.s0.v5" ]
  %a883 = phi i32 [ %b1028, %"for local_laplacian.s0.v5.preheader" ], [ %3403, %"for local_laplacian.s0.v5" ]
  %a882 = tail call i32 @llvm.smin.i32(i32 %b885, i32 %a883)
  %3353 = tail call i32 @llvm.smax.i32(i32 %a882, i32 %b1146)
  %3354 = mul nsw i32 %3353, %input.stride.2
  %.scalar = add i32 %3354, %3114
  %.scalar328 = sub i32 %.scalar, %3112
  %3355 = insertelement <8 x i32> undef, i32 %.scalar328, i64 0
  %3356 = shufflevector <8 x i32> %3355, <8 x i32> poison, <8 x i32> zeroinitializer
  %3357 = add <8 x i32> %3356, %3130
  %3358 = shufflevector <8 x i32> %3357, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3359 = sext <4 x i32> %3358 to <4 x i64>
  %3360 = extractelement <4 x i64> %3359, i64 0
  %3361 = getelementptr inbounds i16, ptr %input.host, i64 %3360
  %3362 = load i16, ptr %3361, align 2, !tbaa !39
  %3363 = insertelement <8 x i16> undef, i16 %3362, i64 0
  %3364 = extractelement <4 x i64> %3359, i64 1
  %3365 = getelementptr inbounds i16, ptr %input.host, i64 %3364
  %3366 = load i16, ptr %3365, align 2, !tbaa !39
  %3367 = insertelement <8 x i16> %3363, i16 %3366, i64 1
  %3368 = extractelement <4 x i64> %3359, i64 2
  %3369 = getelementptr inbounds i16, ptr %input.host, i64 %3368
  %3370 = load i16, ptr %3369, align 2, !tbaa !39
  %3371 = insertelement <8 x i16> %3367, i16 %3370, i64 2
  %3372 = extractelement <4 x i64> %3359, i64 3
  %3373 = getelementptr inbounds i16, ptr %input.host, i64 %3372
  %3374 = load i16, ptr %3373, align 2, !tbaa !39
  %3375 = insertelement <8 x i16> %3371, i16 %3374, i64 3
  %3376 = shufflevector <8 x i32> %3357, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3377 = sext <4 x i32> %3376 to <4 x i64>
  %3378 = extractelement <4 x i64> %3377, i64 0
  %3379 = getelementptr inbounds i16, ptr %input.host, i64 %3378
  %3380 = load i16, ptr %3379, align 2, !tbaa !39
  %3381 = insertelement <8 x i16> %3375, i16 %3380, i64 4
  %3382 = extractelement <4 x i64> %3377, i64 1
  %3383 = getelementptr inbounds i16, ptr %input.host, i64 %3382
  %3384 = load i16, ptr %3383, align 2, !tbaa !39
  %3385 = insertelement <8 x i16> %3381, i16 %3384, i64 5
  %3386 = extractelement <4 x i64> %3377, i64 2
  %3387 = getelementptr inbounds i16, ptr %input.host, i64 %3386
  %3388 = load i16, ptr %3387, align 2, !tbaa !39
  %3389 = insertelement <8 x i16> %3385, i16 %3388, i64 6
  %3390 = extractelement <4 x i64> %3377, i64 3
  %3391 = getelementptr inbounds i16, ptr %input.host, i64 %3390
  %3392 = load i16, ptr %3391, align 2, !tbaa !39
  %3393 = insertelement <8 x i16> %3389, i16 %3392, i64 7
  %3394 = uitofp <8 x i16> %3393 to <8 x float>
  %3395 = fmul <8 x float> %3394, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %3396 = fadd <8 x float> %3395, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %3397 = fmul <8 x float> %3133, %3396
  %a881 = fdiv <8 x float> %3397, %3127
  %3398 = fcmp olt <8 x float> %a881, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a880 = select <8 x i1> %3398, <8 x float> %a881, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3399 = fcmp ogt <8 x float> %a880, zeroinitializer
  %3400 = select <8 x i1> %3399, <8 x float> %a880, <8 x float> zeroinitializer
  %3401 = fmul <8 x float> %3400, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3402 = fptoui <8 x float> %3401 to <8 x i16>
  store <8 x i16> %3402, ptr %lsr.iv400, align 2, !tbaa !73
  %3403 = add nsw i32 %a883, 1
  %lsr.iv.next398 = add i32 %lsr.iv397, -1
  %scevgep402 = getelementptr i1, ptr %lsr.iv400, i64 %3103
  %.not149 = icmp eq i32 %lsr.iv.next398, 0
  br i1 %.not149, label %"end for local_laplacian.s0.v5", label %"for local_laplacian.s0.v5"

"end for local_laplacian.s0.v5":                  ; preds = %"for local_laplacian.s0.v5", %"for local_laplacian.s0.v3.v3"
  %3404 = add nuw nsw i32 %local_laplacian.s0.v3.v3, 1
  %.not148 = icmp eq i32 %3404, %3100
  br i1 %.not148, label %if.then.i253, label %"for local_laplacian.s0.v3.v3"

if.then.i256:                                     ; preds = %if.then.i268
  tail call void @halide_free(ptr %__user_context, ptr nonnull %128) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %154) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %193) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %222) #7
  br label %destructor_block.thread

"produce f12919":                                 ; preds = %if.then.i268, %if.then.i253
  %indvars.iv325 = phi i64 [ %indvars.iv.next326, %if.then.i268 ], [ 1, %if.then.i253 ]
  %lsr.iv374 = phi i64 [ %lsr.iv.next375, %if.then.i268 ], [ %3162, %if.then.i253 ]
  %lsr.iv367 = phi i64 [ %lsr.iv.next368, %if.then.i268 ], [ %3156, %if.then.i253 ]
  %lsr.iv349 = phi i64 [ %lsr.iv.next350, %if.then.i268 ], [ %3153, %if.then.i253 ]
  %lsr.iv329 = phi i32 [ %lsr.iv.next330, %if.then.i268 ], [ %3146, %if.then.i253 ]
  %lsr.iv319 = phi i1 [ %lsr.iv.next320, %if.then.i268 ], [ %3139, %if.then.i253 ]
  %3405 = select i1 %lsr.iv319, i32 2, i32 0
  %3406 = add nsw i64 %indvars.iv325, %3102
  %3407 = trunc i64 %3406 to i32
  %3408 = add i32 %3407, 13
  %3409 = and i32 %3408, 15
  %3410 = icmp eq i32 %3409, 15
  br i1 %3410, label %true_bb21, label %"produce f12832"

true_bb21:                                        ; preds = %"produce f12919"
  br i1 %.inv141, label %"for f129.s0.v3.v324.preheader", label %"end for f129.s0.v3.v325", !prof !5

"for f129.s0.v3.v324.preheader":                  ; preds = %true_bb21
  %3411 = trunc i64 %3406 to i32
  %3412 = add i32 %3411, 45
  %3413 = ashr i32 %3412, 4
  %3414 = shl nsw i32 %3413, 1
  %3415 = and i32 %3414, 2
  %3416 = ashr i32 %3412, 5
  %t2440 = add nsw i32 %3415, %3416
  %3417 = sub i32 %3413, %f75.v4.min_realized
  %3418 = mul i32 %3417, %228
  %3419 = add i32 %3170, %3418
  %3420 = add nsw i32 %t2440, %238
  %t2447 = mul nsw i32 %3420, %235
  %3421 = sub nsw i32 %3416, %237
  %t2449 = mul nsw i32 %3421, %235
  %3422 = sub i32 %3413, %f7.v4.min_realized
  %3423 = mul i32 %3422, %f7.stride.1
  %3424 = add i32 %3171, %3423
  %3425 = add i32 %t2440, %243
  %t2454 = mul nsw i32 %3425, %242
  %3426 = sub nsw i32 %3416, %f8.v4.min_realized
  %t2459 = mul nsw i32 %3426, %242
  %3427 = sext i32 %t2449 to i64
  %3428 = add nsw i64 %3427, -1
  %3429 = sext i32 %t2447 to i64
  %3430 = add nsw i64 %3429, -1
  %narrow146 = sub nsw i32 %3413, %225
  %3431 = sext i32 %narrow146 to i64
  %3432 = mul nsw i64 %250, %3431
  %3433 = add nsw i64 %3432, %.neg218
  br label %"for f129.s0.v3.v324"

"for f129.s0.v3.v324":                            ; preds = %"for f129.s0.v3.v324.preheader", %"for f129.s0.v3.v324"
  %lsr.iv285 = phi i32 [ %lsr.iv.next286, %"for f129.s0.v3.v324" ], [ 0, %"for f129.s0.v3.v324.preheader" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f129.s0.v3.v324" ], [ %a887, %"for f129.s0.v3.v324.preheader" ]
  %3434 = add i32 %lsr.iv285, %106
  %3435 = ashr i32 %3434, 1
  %t2441 = add nsw i32 %3435, %3169
  %3436 = add i32 %3419, %lsr.iv285
  %3437 = sext i32 %3436 to i64
  %3438 = getelementptr inbounds float, ptr %f75.host, i64 %3437
  %3439 = load <4 x float>, ptr %3438, align 4, !tbaa !13
  %3440 = add nsw i64 %3437, 4
  %3441 = getelementptr inbounds float, ptr %f75.host, i64 %3440
  %3442 = load <4 x float>, ptr %3441, align 4, !tbaa !13
  %3443 = shufflevector <4 x float> %3439, <4 x float> %3442, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2443 = fmul <4 x float> %232, %3443
  %a888 = fptosi <4 x float> %t2443 to <4 x i32>
  %a891 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a888)
  %3444 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a891, <4 x i32> zeroinitializer)
  %3445 = sitofp <4 x i32> %3444 to <4 x float>
  %t2445 = fsub <4 x float> %t2443, %3445
  %3446 = add i32 %3424, %lsr.iv285
  %t2452 = sub nsw <4 x i32> %3444, %241
  %t2456 = mul nsw <4 x i32> %t2452, %245
  %3447 = add nsw <4 x i32> %t2452, <i32 1, i32 1, i32 1, i32 1>
  %t2462 = mul nsw <4 x i32> %3447, %245
  %3448 = add i32 %3434, 1
  %3449 = shl i32 %3448, 1
  %3450 = and i32 %3449, 2
  %3451 = ashr i32 %3448, 1
  %t2463 = add nsw i32 %3450, %3451
  %3452 = shufflevector <4 x float> %3439, <4 x float> %3442, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2464 = fmul <4 x float> %232, %3452
  %a892 = fptosi <4 x float> %t2464 to <4 x i32>
  %a895 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a892)
  %3453 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a895, <4 x i32> zeroinitializer)
  %3454 = sitofp <4 x i32> %3453 to <4 x float>
  %t2466 = fsub <4 x float> %t2464, %3454
  %t2469 = sub nsw <4 x i32> %3453, %241
  %t2472 = mul nsw <4 x i32> %t2469, %245
  %3455 = add nsw <4 x i32> %t2469, <i32 1, i32 1, i32 1, i32 1>
  %t2477 = mul nsw <4 x i32> %3455, %245
  %3456 = sub nsw i32 %3435, %f8.v3.min_realized
  %3457 = add nsw i32 %3456, %t2459
  %3458 = insertelement <4 x i32> undef, i32 %3457, i64 0
  %3459 = shufflevector <4 x i32> %3458, <4 x i32> undef, <4 x i32> zeroinitializer
  %3460 = add nsw <4 x i32> %3459, <i32 0, i32 1, i32 2, i32 3>
  %3461 = add nsw <4 x i32> %t2462, %3460
  %3462 = sext <4 x i32> %3461 to <4 x i64>
  %3463 = extractelement <4 x i64> %3462, i64 0
  %3464 = getelementptr inbounds float, ptr %f8.host, i64 %3463
  %3465 = load float, ptr %3464, align 4, !tbaa !35
  %3466 = insertelement <4 x float> undef, float %3465, i64 0
  %3467 = extractelement <4 x i64> %3462, i64 1
  %3468 = getelementptr inbounds float, ptr %f8.host, i64 %3467
  %3469 = load float, ptr %3468, align 4, !tbaa !35
  %3470 = insertelement <4 x float> %3466, float %3469, i64 1
  %3471 = extractelement <4 x i64> %3462, i64 2
  %3472 = getelementptr inbounds float, ptr %f8.host, i64 %3471
  %3473 = load float, ptr %3472, align 4, !tbaa !35
  %3474 = insertelement <4 x float> %3470, float %3473, i64 2
  %3475 = extractelement <4 x i64> %3462, i64 3
  %3476 = getelementptr inbounds float, ptr %f8.host, i64 %3475
  %3477 = load float, ptr %3476, align 4, !tbaa !35
  %3478 = insertelement <4 x float> %3474, float %3477, i64 3
  %3479 = fmul <4 x float> %3478, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3480 = sub nsw i32 %t2441, %f8.v3.min_realized
  %3481 = add nsw i32 %3480, %t2459
  %3482 = insertelement <4 x i32> undef, i32 %3481, i64 0
  %3483 = shufflevector <4 x i32> %3482, <4 x i32> undef, <4 x i32> zeroinitializer
  %3484 = add <4 x i32> %3483, <i32 -1, i32 0, i32 1, i32 2>
  %3485 = add <4 x i32> %3484, %t2462
  %3486 = sext <4 x i32> %3485 to <4 x i64>
  %3487 = extractelement <4 x i64> %3486, i64 0
  %3488 = getelementptr inbounds float, ptr %f8.host, i64 %3487
  %3489 = load float, ptr %3488, align 4, !tbaa !35
  %3490 = insertelement <4 x float> undef, float %3489, i64 0
  %3491 = extractelement <4 x i64> %3486, i64 1
  %3492 = getelementptr inbounds float, ptr %f8.host, i64 %3491
  %3493 = load float, ptr %3492, align 4, !tbaa !35
  %3494 = insertelement <4 x float> %3490, float %3493, i64 1
  %3495 = extractelement <4 x i64> %3486, i64 2
  %3496 = getelementptr inbounds float, ptr %f8.host, i64 %3495
  %3497 = load float, ptr %3496, align 4, !tbaa !35
  %3498 = insertelement <4 x float> %3494, float %3497, i64 2
  %3499 = extractelement <4 x i64> %3486, i64 3
  %3500 = getelementptr inbounds float, ptr %f8.host, i64 %3499
  %3501 = load float, ptr %3500, align 4, !tbaa !35
  %3502 = insertelement <4 x float> %3498, float %3501, i64 3
  %3503 = fmul <4 x float> %3502, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3504 = fadd <4 x float> %3479, %3503
  %3505 = fmul <4 x float> %3504, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3506 = add nsw i32 %3456, %t2454
  %3507 = insertelement <4 x i32> undef, i32 %3506, i64 0
  %3508 = shufflevector <4 x i32> %3507, <4 x i32> undef, <4 x i32> zeroinitializer
  %3509 = add nsw <4 x i32> %3508, <i32 0, i32 1, i32 2, i32 3>
  %3510 = add nsw <4 x i32> %t2462, %3509
  %3511 = sext <4 x i32> %3510 to <4 x i64>
  %3512 = extractelement <4 x i64> %3511, i64 0
  %3513 = getelementptr inbounds float, ptr %f8.host, i64 %3512
  %3514 = load float, ptr %3513, align 4, !tbaa !35
  %3515 = insertelement <4 x float> undef, float %3514, i64 0
  %3516 = extractelement <4 x i64> %3511, i64 1
  %3517 = getelementptr inbounds float, ptr %f8.host, i64 %3516
  %3518 = load float, ptr %3517, align 4, !tbaa !35
  %3519 = insertelement <4 x float> %3515, float %3518, i64 1
  %3520 = extractelement <4 x i64> %3511, i64 2
  %3521 = getelementptr inbounds float, ptr %f8.host, i64 %3520
  %3522 = load float, ptr %3521, align 4, !tbaa !35
  %3523 = insertelement <4 x float> %3519, float %3522, i64 2
  %3524 = extractelement <4 x i64> %3511, i64 3
  %3525 = getelementptr inbounds float, ptr %f8.host, i64 %3524
  %3526 = load float, ptr %3525, align 4, !tbaa !35
  %3527 = insertelement <4 x float> %3523, float %3526, i64 3
  %3528 = fmul <4 x float> %3527, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3529 = add nsw i32 %3480, %t2454
  %3530 = insertelement <4 x i32> undef, i32 %3529, i64 0
  %3531 = shufflevector <4 x i32> %3530, <4 x i32> undef, <4 x i32> zeroinitializer
  %3532 = add <4 x i32> %3531, <i32 -1, i32 0, i32 1, i32 2>
  %3533 = add <4 x i32> %3532, %t2462
  %3534 = sext <4 x i32> %3533 to <4 x i64>
  %3535 = extractelement <4 x i64> %3534, i64 0
  %3536 = getelementptr inbounds float, ptr %f8.host, i64 %3535
  %3537 = load float, ptr %3536, align 4, !tbaa !35
  %3538 = insertelement <4 x float> undef, float %3537, i64 0
  %3539 = extractelement <4 x i64> %3534, i64 1
  %3540 = getelementptr inbounds float, ptr %f8.host, i64 %3539
  %3541 = load float, ptr %3540, align 4, !tbaa !35
  %3542 = insertelement <4 x float> %3538, float %3541, i64 1
  %3543 = extractelement <4 x i64> %3534, i64 2
  %3544 = getelementptr inbounds float, ptr %f8.host, i64 %3543
  %3545 = load float, ptr %3544, align 4, !tbaa !35
  %3546 = insertelement <4 x float> %3542, float %3545, i64 2
  %3547 = extractelement <4 x i64> %3534, i64 3
  %3548 = getelementptr inbounds float, ptr %f8.host, i64 %3547
  %3549 = load float, ptr %3548, align 4, !tbaa !35
  %3550 = insertelement <4 x float> %3546, float %3549, i64 3
  %3551 = fmul <4 x float> %3550, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3552 = fadd <4 x float> %3528, %3551
  %3553 = fmul <4 x float> %3552, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3554 = fadd <4 x float> %3505, %3553
  %3555 = mul nsw <4 x i32> %3447, %248
  %3556 = insertelement <4 x i32> undef, i32 %3446, i64 0
  %3557 = shufflevector <4 x i32> %3556, <4 x i32> undef, <4 x i32> zeroinitializer
  %3558 = add nsw <4 x i32> %3557, <i32 0, i32 2, i32 4, i32 6>
  %3559 = add nsw <4 x i32> %3555, %3558
  %3560 = sext <4 x i32> %3559 to <4 x i64>
  %3561 = extractelement <4 x i64> %3560, i64 0
  %3562 = getelementptr inbounds float, ptr %f7.host, i64 %3561
  %3563 = load float, ptr %3562, align 4, !tbaa !53
  %3564 = insertelement <4 x float> undef, float %3563, i64 0
  %3565 = extractelement <4 x i64> %3560, i64 1
  %3566 = getelementptr inbounds float, ptr %f7.host, i64 %3565
  %3567 = load float, ptr %3566, align 4, !tbaa !53
  %3568 = insertelement <4 x float> %3564, float %3567, i64 1
  %3569 = extractelement <4 x i64> %3560, i64 2
  %3570 = getelementptr inbounds float, ptr %f7.host, i64 %3569
  %3571 = load float, ptr %3570, align 4, !tbaa !53
  %3572 = insertelement <4 x float> %3568, float %3571, i64 2
  %3573 = extractelement <4 x i64> %3560, i64 3
  %3574 = getelementptr inbounds float, ptr %f7.host, i64 %3573
  %3575 = load float, ptr %3574, align 4, !tbaa !53
  %3576 = insertelement <4 x float> %3572, float %3575, i64 3
  %3577 = fsub <4 x float> %3576, %3554
  %3578 = fmul <4 x float> %t2445, %3577
  %3579 = add nsw <4 x i32> %t2456, %3460
  %3580 = sext <4 x i32> %3579 to <4 x i64>
  %3581 = extractelement <4 x i64> %3580, i64 0
  %3582 = getelementptr inbounds float, ptr %f8.host, i64 %3581
  %3583 = load float, ptr %3582, align 4, !tbaa !35
  %3584 = insertelement <4 x float> undef, float %3583, i64 0
  %3585 = extractelement <4 x i64> %3580, i64 1
  %3586 = getelementptr inbounds float, ptr %f8.host, i64 %3585
  %3587 = load float, ptr %3586, align 4, !tbaa !35
  %3588 = insertelement <4 x float> %3584, float %3587, i64 1
  %3589 = extractelement <4 x i64> %3580, i64 2
  %3590 = getelementptr inbounds float, ptr %f8.host, i64 %3589
  %3591 = load float, ptr %3590, align 4, !tbaa !35
  %3592 = insertelement <4 x float> %3588, float %3591, i64 2
  %3593 = extractelement <4 x i64> %3580, i64 3
  %3594 = getelementptr inbounds float, ptr %f8.host, i64 %3593
  %3595 = load float, ptr %3594, align 4, !tbaa !35
  %3596 = insertelement <4 x float> %3592, float %3595, i64 3
  %3597 = fmul <4 x float> %3596, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3598 = add <4 x i32> %3484, %t2456
  %3599 = sext <4 x i32> %3598 to <4 x i64>
  %3600 = extractelement <4 x i64> %3599, i64 0
  %3601 = getelementptr inbounds float, ptr %f8.host, i64 %3600
  %3602 = load float, ptr %3601, align 4, !tbaa !35
  %3603 = insertelement <4 x float> undef, float %3602, i64 0
  %3604 = extractelement <4 x i64> %3599, i64 1
  %3605 = getelementptr inbounds float, ptr %f8.host, i64 %3604
  %3606 = load float, ptr %3605, align 4, !tbaa !35
  %3607 = insertelement <4 x float> %3603, float %3606, i64 1
  %3608 = extractelement <4 x i64> %3599, i64 2
  %3609 = getelementptr inbounds float, ptr %f8.host, i64 %3608
  %3610 = load float, ptr %3609, align 4, !tbaa !35
  %3611 = insertelement <4 x float> %3607, float %3610, i64 2
  %3612 = extractelement <4 x i64> %3599, i64 3
  %3613 = getelementptr inbounds float, ptr %f8.host, i64 %3612
  %3614 = load float, ptr %3613, align 4, !tbaa !35
  %3615 = insertelement <4 x float> %3611, float %3614, i64 3
  %3616 = fmul <4 x float> %3615, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3617 = fadd <4 x float> %3597, %3616
  %3618 = fmul <4 x float> %3617, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3619 = add nsw <4 x i32> %t2456, %3509
  %3620 = sext <4 x i32> %3619 to <4 x i64>
  %3621 = extractelement <4 x i64> %3620, i64 0
  %3622 = getelementptr inbounds float, ptr %f8.host, i64 %3621
  %3623 = load float, ptr %3622, align 4, !tbaa !35
  %3624 = insertelement <4 x float> undef, float %3623, i64 0
  %3625 = extractelement <4 x i64> %3620, i64 1
  %3626 = getelementptr inbounds float, ptr %f8.host, i64 %3625
  %3627 = load float, ptr %3626, align 4, !tbaa !35
  %3628 = insertelement <4 x float> %3624, float %3627, i64 1
  %3629 = extractelement <4 x i64> %3620, i64 2
  %3630 = getelementptr inbounds float, ptr %f8.host, i64 %3629
  %3631 = load float, ptr %3630, align 4, !tbaa !35
  %3632 = insertelement <4 x float> %3628, float %3631, i64 2
  %3633 = extractelement <4 x i64> %3620, i64 3
  %3634 = getelementptr inbounds float, ptr %f8.host, i64 %3633
  %3635 = load float, ptr %3634, align 4, !tbaa !35
  %3636 = insertelement <4 x float> %3632, float %3635, i64 3
  %3637 = fmul <4 x float> %3636, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3638 = add <4 x i32> %3532, %t2456
  %3639 = sext <4 x i32> %3638 to <4 x i64>
  %3640 = extractelement <4 x i64> %3639, i64 0
  %3641 = getelementptr inbounds float, ptr %f8.host, i64 %3640
  %3642 = load float, ptr %3641, align 4, !tbaa !35
  %3643 = insertelement <4 x float> undef, float %3642, i64 0
  %3644 = extractelement <4 x i64> %3639, i64 1
  %3645 = getelementptr inbounds float, ptr %f8.host, i64 %3644
  %3646 = load float, ptr %3645, align 4, !tbaa !35
  %3647 = insertelement <4 x float> %3643, float %3646, i64 1
  %3648 = extractelement <4 x i64> %3639, i64 2
  %3649 = getelementptr inbounds float, ptr %f8.host, i64 %3648
  %3650 = load float, ptr %3649, align 4, !tbaa !35
  %3651 = insertelement <4 x float> %3647, float %3650, i64 2
  %3652 = extractelement <4 x i64> %3639, i64 3
  %3653 = getelementptr inbounds float, ptr %f8.host, i64 %3652
  %3654 = load float, ptr %3653, align 4, !tbaa !35
  %3655 = insertelement <4 x float> %3651, float %3654, i64 3
  %3656 = fmul <4 x float> %3655, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3657 = fadd <4 x float> %3637, %3656
  %3658 = fmul <4 x float> %3657, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3659 = fadd <4 x float> %3618, %3658
  %3660 = mul nsw <4 x i32> %t2452, %248
  %3661 = add nsw <4 x i32> %3660, %3558
  %3662 = sext <4 x i32> %3661 to <4 x i64>
  %3663 = extractelement <4 x i64> %3662, i64 0
  %3664 = getelementptr inbounds float, ptr %f7.host, i64 %3663
  %3665 = load float, ptr %3664, align 4, !tbaa !53
  %3666 = insertelement <4 x float> undef, float %3665, i64 0
  %3667 = extractelement <4 x i64> %3662, i64 1
  %3668 = getelementptr inbounds float, ptr %f7.host, i64 %3667
  %3669 = load float, ptr %3668, align 4, !tbaa !53
  %3670 = insertelement <4 x float> %3666, float %3669, i64 1
  %3671 = extractelement <4 x i64> %3662, i64 2
  %3672 = getelementptr inbounds float, ptr %f7.host, i64 %3671
  %3673 = load float, ptr %3672, align 4, !tbaa !53
  %3674 = insertelement <4 x float> %3670, float %3673, i64 2
  %3675 = extractelement <4 x i64> %3662, i64 3
  %3676 = getelementptr inbounds float, ptr %f7.host, i64 %3675
  %3677 = load float, ptr %3676, align 4, !tbaa !53
  %3678 = insertelement <4 x float> %3674, float %3677, i64 3
  %3679 = fsub <4 x float> %3678, %3659
  %3680 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2445
  %3681 = fmul <4 x float> %3680, %3679
  %3682 = fadd <4 x float> %3578, %3681
  %3683 = sext i32 %3435 to i64
  %3684 = sub nsw i64 %3683, %4
  %3685 = add nsw i64 %3684, %3427
  %3686 = getelementptr inbounds float, ptr %f130.host, i64 %3685
  %3687 = load <4 x float>, ptr %3686, align 4, !tbaa !37
  %3688 = fmul <4 x float> %3687, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3689 = sext i32 %t2441 to i64
  %3690 = sub nsw i64 %3689, %4
  %3691 = add nsw i64 %3428, %3690
  %3692 = getelementptr inbounds float, ptr %f130.host, i64 %3691
  %3693 = load <4 x float>, ptr %3692, align 4, !tbaa !37
  %3694 = fmul <4 x float> %3693, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3695 = fadd <4 x float> %3688, %3694
  %3696 = fmul <4 x float> %3695, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3697 = add nsw i64 %3684, %3429
  %3698 = getelementptr inbounds float, ptr %f130.host, i64 %3697
  %3699 = load <4 x float>, ptr %3698, align 4, !tbaa !37
  %3700 = fmul <4 x float> %3699, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3701 = add nsw i64 %3430, %3690
  %3702 = getelementptr inbounds float, ptr %f130.host, i64 %3701
  %3703 = load <4 x float>, ptr %3702, align 4, !tbaa !37
  %3704 = fmul <4 x float> %3703, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3705 = fadd <4 x float> %3700, %3704
  %3706 = fmul <4 x float> %3705, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3707 = fadd <4 x float> %3696, %3706
  %3708 = fadd <4 x float> %3682, %3707
  %3709 = sub nsw i32 %3451, %f8.v3.min_realized
  %3710 = add nsw i32 %3709, %t2459
  %3711 = insertelement <4 x i32> undef, i32 %3710, i64 0
  %3712 = shufflevector <4 x i32> %3711, <4 x i32> undef, <4 x i32> zeroinitializer
  %3713 = add nsw <4 x i32> %3712, <i32 0, i32 1, i32 2, i32 3>
  %3714 = add nsw <4 x i32> %t2477, %3713
  %3715 = sext <4 x i32> %3714 to <4 x i64>
  %3716 = extractelement <4 x i64> %3715, i64 0
  %3717 = getelementptr inbounds float, ptr %f8.host, i64 %3716
  %3718 = load float, ptr %3717, align 4, !tbaa !35
  %3719 = insertelement <4 x float> undef, float %3718, i64 0
  %3720 = extractelement <4 x i64> %3715, i64 1
  %3721 = getelementptr inbounds float, ptr %f8.host, i64 %3720
  %3722 = load float, ptr %3721, align 4, !tbaa !35
  %3723 = insertelement <4 x float> %3719, float %3722, i64 1
  %3724 = extractelement <4 x i64> %3715, i64 2
  %3725 = getelementptr inbounds float, ptr %f8.host, i64 %3724
  %3726 = load float, ptr %3725, align 4, !tbaa !35
  %3727 = insertelement <4 x float> %3723, float %3726, i64 2
  %3728 = extractelement <4 x i64> %3715, i64 3
  %3729 = getelementptr inbounds float, ptr %f8.host, i64 %3728
  %3730 = load float, ptr %3729, align 4, !tbaa !35
  %3731 = insertelement <4 x float> %3727, float %3730, i64 3
  %3732 = fmul <4 x float> %3731, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3733 = sub nsw i32 %t2463, %f8.v3.min_realized
  %3734 = add nsw i32 %3733, %t2459
  %3735 = insertelement <4 x i32> undef, i32 %3734, i64 0
  %3736 = shufflevector <4 x i32> %3735, <4 x i32> undef, <4 x i32> zeroinitializer
  %3737 = add <4 x i32> %3736, <i32 -1, i32 0, i32 1, i32 2>
  %3738 = add <4 x i32> %3737, %t2477
  %3739 = sext <4 x i32> %3738 to <4 x i64>
  %3740 = extractelement <4 x i64> %3739, i64 0
  %3741 = getelementptr inbounds float, ptr %f8.host, i64 %3740
  %3742 = load float, ptr %3741, align 4, !tbaa !35
  %3743 = insertelement <4 x float> undef, float %3742, i64 0
  %3744 = extractelement <4 x i64> %3739, i64 1
  %3745 = getelementptr inbounds float, ptr %f8.host, i64 %3744
  %3746 = load float, ptr %3745, align 4, !tbaa !35
  %3747 = insertelement <4 x float> %3743, float %3746, i64 1
  %3748 = extractelement <4 x i64> %3739, i64 2
  %3749 = getelementptr inbounds float, ptr %f8.host, i64 %3748
  %3750 = load float, ptr %3749, align 4, !tbaa !35
  %3751 = insertelement <4 x float> %3747, float %3750, i64 2
  %3752 = extractelement <4 x i64> %3739, i64 3
  %3753 = getelementptr inbounds float, ptr %f8.host, i64 %3752
  %3754 = load float, ptr %3753, align 4, !tbaa !35
  %3755 = insertelement <4 x float> %3751, float %3754, i64 3
  %3756 = fmul <4 x float> %3755, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3757 = fadd <4 x float> %3732, %3756
  %3758 = fmul <4 x float> %3757, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3759 = add nsw i32 %3709, %t2454
  %3760 = insertelement <4 x i32> undef, i32 %3759, i64 0
  %3761 = shufflevector <4 x i32> %3760, <4 x i32> undef, <4 x i32> zeroinitializer
  %3762 = add nsw <4 x i32> %3761, <i32 0, i32 1, i32 2, i32 3>
  %3763 = add nsw <4 x i32> %t2477, %3762
  %3764 = sext <4 x i32> %3763 to <4 x i64>
  %3765 = extractelement <4 x i64> %3764, i64 0
  %3766 = getelementptr inbounds float, ptr %f8.host, i64 %3765
  %3767 = load float, ptr %3766, align 4, !tbaa !35
  %3768 = insertelement <4 x float> undef, float %3767, i64 0
  %3769 = extractelement <4 x i64> %3764, i64 1
  %3770 = getelementptr inbounds float, ptr %f8.host, i64 %3769
  %3771 = load float, ptr %3770, align 4, !tbaa !35
  %3772 = insertelement <4 x float> %3768, float %3771, i64 1
  %3773 = extractelement <4 x i64> %3764, i64 2
  %3774 = getelementptr inbounds float, ptr %f8.host, i64 %3773
  %3775 = load float, ptr %3774, align 4, !tbaa !35
  %3776 = insertelement <4 x float> %3772, float %3775, i64 2
  %3777 = extractelement <4 x i64> %3764, i64 3
  %3778 = getelementptr inbounds float, ptr %f8.host, i64 %3777
  %3779 = load float, ptr %3778, align 4, !tbaa !35
  %3780 = insertelement <4 x float> %3776, float %3779, i64 3
  %3781 = fmul <4 x float> %3780, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3782 = add nsw i32 %3733, %t2454
  %3783 = insertelement <4 x i32> undef, i32 %3782, i64 0
  %3784 = shufflevector <4 x i32> %3783, <4 x i32> undef, <4 x i32> zeroinitializer
  %3785 = add <4 x i32> %3784, <i32 -1, i32 0, i32 1, i32 2>
  %3786 = add <4 x i32> %3785, %t2477
  %3787 = sext <4 x i32> %3786 to <4 x i64>
  %3788 = extractelement <4 x i64> %3787, i64 0
  %3789 = getelementptr inbounds float, ptr %f8.host, i64 %3788
  %3790 = load float, ptr %3789, align 4, !tbaa !35
  %3791 = insertelement <4 x float> undef, float %3790, i64 0
  %3792 = extractelement <4 x i64> %3787, i64 1
  %3793 = getelementptr inbounds float, ptr %f8.host, i64 %3792
  %3794 = load float, ptr %3793, align 4, !tbaa !35
  %3795 = insertelement <4 x float> %3791, float %3794, i64 1
  %3796 = extractelement <4 x i64> %3787, i64 2
  %3797 = getelementptr inbounds float, ptr %f8.host, i64 %3796
  %3798 = load float, ptr %3797, align 4, !tbaa !35
  %3799 = insertelement <4 x float> %3795, float %3798, i64 2
  %3800 = extractelement <4 x i64> %3787, i64 3
  %3801 = getelementptr inbounds float, ptr %f8.host, i64 %3800
  %3802 = load float, ptr %3801, align 4, !tbaa !35
  %3803 = insertelement <4 x float> %3799, float %3802, i64 3
  %3804 = fmul <4 x float> %3803, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3805 = fadd <4 x float> %3781, %3804
  %3806 = fmul <4 x float> %3805, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3807 = fadd <4 x float> %3758, %3806
  %3808 = mul nsw <4 x i32> %3455, %248
  %3809 = add i32 %3446, 1
  %3810 = insertelement <4 x i32> undef, i32 %3809, i64 0
  %3811 = shufflevector <4 x i32> %3810, <4 x i32> undef, <4 x i32> zeroinitializer
  %3812 = add nsw <4 x i32> %3811, <i32 0, i32 2, i32 4, i32 6>
  %3813 = add nsw <4 x i32> %3808, %3812
  %3814 = sext <4 x i32> %3813 to <4 x i64>
  %3815 = extractelement <4 x i64> %3814, i64 0
  %3816 = getelementptr inbounds float, ptr %f7.host, i64 %3815
  %3817 = load float, ptr %3816, align 4, !tbaa !53
  %3818 = insertelement <4 x float> undef, float %3817, i64 0
  %3819 = extractelement <4 x i64> %3814, i64 1
  %3820 = getelementptr inbounds float, ptr %f7.host, i64 %3819
  %3821 = load float, ptr %3820, align 4, !tbaa !53
  %3822 = insertelement <4 x float> %3818, float %3821, i64 1
  %3823 = extractelement <4 x i64> %3814, i64 2
  %3824 = getelementptr inbounds float, ptr %f7.host, i64 %3823
  %3825 = load float, ptr %3824, align 4, !tbaa !53
  %3826 = insertelement <4 x float> %3822, float %3825, i64 2
  %3827 = extractelement <4 x i64> %3814, i64 3
  %3828 = getelementptr inbounds float, ptr %f7.host, i64 %3827
  %3829 = load float, ptr %3828, align 4, !tbaa !53
  %3830 = insertelement <4 x float> %3826, float %3829, i64 3
  %3831 = fsub <4 x float> %3830, %3807
  %3832 = fmul <4 x float> %t2466, %3831
  %3833 = add nsw <4 x i32> %t2472, %3713
  %3834 = sext <4 x i32> %3833 to <4 x i64>
  %3835 = extractelement <4 x i64> %3834, i64 0
  %3836 = getelementptr inbounds float, ptr %f8.host, i64 %3835
  %3837 = load float, ptr %3836, align 4, !tbaa !35
  %3838 = insertelement <4 x float> undef, float %3837, i64 0
  %3839 = extractelement <4 x i64> %3834, i64 1
  %3840 = getelementptr inbounds float, ptr %f8.host, i64 %3839
  %3841 = load float, ptr %3840, align 4, !tbaa !35
  %3842 = insertelement <4 x float> %3838, float %3841, i64 1
  %3843 = extractelement <4 x i64> %3834, i64 2
  %3844 = getelementptr inbounds float, ptr %f8.host, i64 %3843
  %3845 = load float, ptr %3844, align 4, !tbaa !35
  %3846 = insertelement <4 x float> %3842, float %3845, i64 2
  %3847 = extractelement <4 x i64> %3834, i64 3
  %3848 = getelementptr inbounds float, ptr %f8.host, i64 %3847
  %3849 = load float, ptr %3848, align 4, !tbaa !35
  %3850 = insertelement <4 x float> %3846, float %3849, i64 3
  %3851 = fmul <4 x float> %3850, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3852 = add <4 x i32> %t2472, %3736
  %3853 = add <4 x i32> %3852, <i32 -1, i32 0, i32 1, i32 2>
  %3854 = sext <4 x i32> %3853 to <4 x i64>
  %3855 = extractelement <4 x i64> %3854, i64 0
  %3856 = getelementptr inbounds float, ptr %f8.host, i64 %3855
  %3857 = load float, ptr %3856, align 4, !tbaa !35
  %3858 = insertelement <4 x float> undef, float %3857, i64 0
  %3859 = extractelement <4 x i64> %3854, i64 1
  %3860 = getelementptr inbounds float, ptr %f8.host, i64 %3859
  %3861 = load float, ptr %3860, align 4, !tbaa !35
  %3862 = insertelement <4 x float> %3858, float %3861, i64 1
  %3863 = extractelement <4 x i64> %3854, i64 2
  %3864 = getelementptr inbounds float, ptr %f8.host, i64 %3863
  %3865 = load float, ptr %3864, align 4, !tbaa !35
  %3866 = insertelement <4 x float> %3862, float %3865, i64 2
  %3867 = extractelement <4 x i64> %3854, i64 3
  %3868 = getelementptr inbounds float, ptr %f8.host, i64 %3867
  %3869 = load float, ptr %3868, align 4, !tbaa !35
  %3870 = insertelement <4 x float> %3866, float %3869, i64 3
  %3871 = fmul <4 x float> %3870, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3872 = fadd <4 x float> %3851, %3871
  %3873 = fmul <4 x float> %3872, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3874 = add nsw <4 x i32> %t2472, %3762
  %3875 = sext <4 x i32> %3874 to <4 x i64>
  %3876 = extractelement <4 x i64> %3875, i64 0
  %3877 = getelementptr inbounds float, ptr %f8.host, i64 %3876
  %3878 = load float, ptr %3877, align 4, !tbaa !35
  %3879 = insertelement <4 x float> undef, float %3878, i64 0
  %3880 = extractelement <4 x i64> %3875, i64 1
  %3881 = getelementptr inbounds float, ptr %f8.host, i64 %3880
  %3882 = load float, ptr %3881, align 4, !tbaa !35
  %3883 = insertelement <4 x float> %3879, float %3882, i64 1
  %3884 = extractelement <4 x i64> %3875, i64 2
  %3885 = getelementptr inbounds float, ptr %f8.host, i64 %3884
  %3886 = load float, ptr %3885, align 4, !tbaa !35
  %3887 = insertelement <4 x float> %3883, float %3886, i64 2
  %3888 = extractelement <4 x i64> %3875, i64 3
  %3889 = getelementptr inbounds float, ptr %f8.host, i64 %3888
  %3890 = load float, ptr %3889, align 4, !tbaa !35
  %3891 = insertelement <4 x float> %3887, float %3890, i64 3
  %3892 = fmul <4 x float> %3891, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3893 = add <4 x i32> %t2472, %3784
  %3894 = add <4 x i32> %3893, <i32 -1, i32 0, i32 1, i32 2>
  %3895 = sext <4 x i32> %3894 to <4 x i64>
  %3896 = extractelement <4 x i64> %3895, i64 0
  %3897 = getelementptr inbounds float, ptr %f8.host, i64 %3896
  %3898 = load float, ptr %3897, align 4, !tbaa !35
  %3899 = insertelement <4 x float> undef, float %3898, i64 0
  %3900 = extractelement <4 x i64> %3895, i64 1
  %3901 = getelementptr inbounds float, ptr %f8.host, i64 %3900
  %3902 = load float, ptr %3901, align 4, !tbaa !35
  %3903 = insertelement <4 x float> %3899, float %3902, i64 1
  %3904 = extractelement <4 x i64> %3895, i64 2
  %3905 = getelementptr inbounds float, ptr %f8.host, i64 %3904
  %3906 = load float, ptr %3905, align 4, !tbaa !35
  %3907 = insertelement <4 x float> %3903, float %3906, i64 2
  %3908 = extractelement <4 x i64> %3895, i64 3
  %3909 = getelementptr inbounds float, ptr %f8.host, i64 %3908
  %3910 = load float, ptr %3909, align 4, !tbaa !35
  %3911 = insertelement <4 x float> %3907, float %3910, i64 3
  %3912 = fmul <4 x float> %3911, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3913 = fadd <4 x float> %3892, %3912
  %3914 = fmul <4 x float> %3913, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3915 = fadd <4 x float> %3873, %3914
  %3916 = mul nsw <4 x i32> %t2469, %248
  %3917 = add nsw <4 x i32> %3916, %3812
  %3918 = sext <4 x i32> %3917 to <4 x i64>
  %3919 = extractelement <4 x i64> %3918, i64 0
  %3920 = getelementptr inbounds float, ptr %f7.host, i64 %3919
  %3921 = load float, ptr %3920, align 4, !tbaa !53
  %3922 = insertelement <4 x float> undef, float %3921, i64 0
  %3923 = extractelement <4 x i64> %3918, i64 1
  %3924 = getelementptr inbounds float, ptr %f7.host, i64 %3923
  %3925 = load float, ptr %3924, align 4, !tbaa !53
  %3926 = insertelement <4 x float> %3922, float %3925, i64 1
  %3927 = extractelement <4 x i64> %3918, i64 2
  %3928 = getelementptr inbounds float, ptr %f7.host, i64 %3927
  %3929 = load float, ptr %3928, align 4, !tbaa !53
  %3930 = insertelement <4 x float> %3926, float %3929, i64 2
  %3931 = extractelement <4 x i64> %3918, i64 3
  %3932 = getelementptr inbounds float, ptr %f7.host, i64 %3931
  %3933 = load float, ptr %3932, align 4, !tbaa !53
  %3934 = insertelement <4 x float> %3930, float %3933, i64 3
  %3935 = fsub <4 x float> %3934, %3915
  %3936 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2466
  %3937 = fmul <4 x float> %3936, %3935
  %3938 = fadd <4 x float> %3832, %3937
  %3939 = sext i32 %3451 to i64
  %3940 = sub nsw i64 %3939, %4
  %3941 = add nsw i64 %3940, %3427
  %3942 = getelementptr inbounds float, ptr %f130.host, i64 %3941
  %3943 = load <4 x float>, ptr %3942, align 4, !tbaa !37
  %3944 = fmul <4 x float> %3943, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3945 = sext i32 %t2463 to i64
  %3946 = sub nsw i64 %3945, %4
  %3947 = add nsw i64 %3428, %3946
  %3948 = getelementptr inbounds float, ptr %f130.host, i64 %3947
  %3949 = load <4 x float>, ptr %3948, align 4, !tbaa !37
  %3950 = fmul <4 x float> %3949, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3951 = fadd <4 x float> %3944, %3950
  %3952 = fmul <4 x float> %3951, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3953 = add nsw i64 %3940, %3429
  %3954 = getelementptr inbounds float, ptr %f130.host, i64 %3953
  %3955 = load <4 x float>, ptr %3954, align 4, !tbaa !37
  %3956 = fmul <4 x float> %3955, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3957 = add nsw i64 %3430, %3946
  %3958 = getelementptr inbounds float, ptr %f130.host, i64 %3957
  %3959 = load <4 x float>, ptr %3958, align 4, !tbaa !37
  %3960 = fmul <4 x float> %3959, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3961 = fadd <4 x float> %3956, %3960
  %3962 = fmul <4 x float> %3961, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3963 = fadd <4 x float> %3952, %3962
  %3964 = fadd <4 x float> %3938, %3963
  %3965 = shufflevector <4 x float> %3708, <4 x float> %3964, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %3966 = sext i32 %3434 to i64
  %3967 = add nsw i64 %3433, %3966
  %3968 = getelementptr inbounds float, ptr %128, i64 %3967
  store <8 x float> %3965, ptr %3968, align 4, !tbaa !63
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %lsr.iv.next286 = add nuw i32 %lsr.iv285, 8
  %.not147 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not147, label %"end for f129.s0.v3.v325", label %"for f129.s0.v3.v324"

"end for f129.s0.v3.v325":                        ; preds = %"for f129.s0.v3.v324", %true_bb21
  br i1 %.not142, label %"produce f12832", label %"for f129.s0.v3.v328.preheader", !prof !4

"for f129.s0.v3.v328.preheader":                  ; preds = %"end for f129.s0.v3.v325"
  %3969 = trunc i64 %3406 to i32
  %3970 = add i32 %3969, 45
  %3971 = ashr i32 %3970, 4
  %3972 = shl nsw i32 %3971, 1
  %3973 = and i32 %3972, 2
  %3974 = ashr i32 %3970, 5
  %t2478 = add nsw i32 %3973, %3974
  %3975 = sub nsw i32 %3971, %f75.v4.min_realized
  %3976 = mul nsw i32 %3975, %228
  %t2481 = add nsw i32 %3175, %3976
  %3977 = sext i32 %t2481 to i64
  %3978 = getelementptr inbounds float, ptr %f75.host, i64 %3977
  %3979 = load <4 x float>, ptr %3978, align 4, !tbaa !13
  %3980 = add nsw i64 %3977, 4
  %3981 = getelementptr inbounds float, ptr %f75.host, i64 %3980
  %3982 = load <4 x float>, ptr %3981, align 4, !tbaa !13
  %3983 = shufflevector <4 x float> %3979, <4 x float> %3982, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2482 = fmul <4 x float> %232, %3983
  %a898 = fptosi <4 x float> %t2482 to <4 x i32>
  %a901 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a898)
  %3984 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a901, <4 x i32> zeroinitializer)
  %3985 = sitofp <4 x i32> %3984 to <4 x float>
  %t2484 = fsub <4 x float> %t2482, %3985
  %3986 = add nsw i32 %t2478, %238
  %t2486 = mul nsw i32 %3986, %235
  %3987 = sub nsw i32 %3974, %237
  %t2488 = mul nsw i32 %3987, %235
  %3988 = sub nsw i32 %3971, %f7.v4.min_realized
  %3989 = mul nsw i32 %3988, %f7.stride.1
  %t2489 = add nsw i32 %3989, %3176
  %t2491 = sub nsw <4 x i32> %3984, %241
  %3990 = add i32 %t2478, %243
  %t2493 = mul nsw i32 %3990, %242
  %t2495 = mul nsw <4 x i32> %t2491, %245
  %3991 = sub nsw i32 %3974, %f8.v4.min_realized
  %t2498 = mul nsw i32 %3991, %242
  %3992 = add nsw <4 x i32> %t2491, <i32 1, i32 1, i32 1, i32 1>
  %t2501 = mul nsw <4 x i32> %3992, %245
  %3993 = shufflevector <4 x float> %3979, <4 x float> %3982, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2503 = fmul <4 x float> %232, %3993
  %a902 = fptosi <4 x float> %t2503 to <4 x i32>
  %a905 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a902)
  %3994 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a905, <4 x i32> zeroinitializer)
  %3995 = sitofp <4 x i32> %3994 to <4 x float>
  %t2505 = fsub <4 x float> %t2503, %3995
  %t2508 = sub nsw <4 x i32> %3994, %241
  %t2511 = mul nsw <4 x i32> %t2508, %245
  %3996 = add nsw <4 x i32> %t2508, <i32 1, i32 1, i32 1, i32 1>
  %t2516 = mul nsw <4 x i32> %3996, %245
  %3997 = add nsw i32 %t2498, %3181
  %3998 = insertelement <4 x i32> undef, i32 %3997, i64 0
  %3999 = shufflevector <4 x i32> %3998, <4 x i32> undef, <4 x i32> zeroinitializer
  %4000 = add nsw <4 x i32> %3999, <i32 0, i32 1, i32 2, i32 3>
  %4001 = add nsw <4 x i32> %t2501, %4000
  %4002 = sext <4 x i32> %4001 to <4 x i64>
  %4003 = extractelement <4 x i64> %4002, i64 0
  %4004 = getelementptr inbounds float, ptr %f8.host, i64 %4003
  %4005 = load float, ptr %4004, align 4, !tbaa !35
  %4006 = insertelement <4 x float> undef, float %4005, i64 0
  %4007 = extractelement <4 x i64> %4002, i64 1
  %4008 = getelementptr inbounds float, ptr %f8.host, i64 %4007
  %4009 = load float, ptr %4008, align 4, !tbaa !35
  %4010 = insertelement <4 x float> %4006, float %4009, i64 1
  %4011 = extractelement <4 x i64> %4002, i64 2
  %4012 = getelementptr inbounds float, ptr %f8.host, i64 %4011
  %4013 = load float, ptr %4012, align 4, !tbaa !35
  %4014 = insertelement <4 x float> %4010, float %4013, i64 2
  %4015 = extractelement <4 x i64> %4002, i64 3
  %4016 = getelementptr inbounds float, ptr %f8.host, i64 %4015
  %4017 = load float, ptr %4016, align 4, !tbaa !35
  %4018 = insertelement <4 x float> %4014, float %4017, i64 3
  %4019 = fmul <4 x float> %4018, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4020 = add nsw i32 %t2498, %3182
  %4021 = insertelement <4 x i32> undef, i32 %4020, i64 0
  %4022 = shufflevector <4 x i32> %4021, <4 x i32> undef, <4 x i32> zeroinitializer
  %4023 = add <4 x i32> %4022, <i32 -1, i32 0, i32 1, i32 2>
  %4024 = add <4 x i32> %4023, %t2501
  %4025 = sext <4 x i32> %4024 to <4 x i64>
  %4026 = extractelement <4 x i64> %4025, i64 0
  %4027 = getelementptr inbounds float, ptr %f8.host, i64 %4026
  %4028 = load float, ptr %4027, align 4, !tbaa !35
  %4029 = insertelement <4 x float> undef, float %4028, i64 0
  %4030 = extractelement <4 x i64> %4025, i64 1
  %4031 = getelementptr inbounds float, ptr %f8.host, i64 %4030
  %4032 = load float, ptr %4031, align 4, !tbaa !35
  %4033 = insertelement <4 x float> %4029, float %4032, i64 1
  %4034 = extractelement <4 x i64> %4025, i64 2
  %4035 = getelementptr inbounds float, ptr %f8.host, i64 %4034
  %4036 = load float, ptr %4035, align 4, !tbaa !35
  %4037 = insertelement <4 x float> %4033, float %4036, i64 2
  %4038 = extractelement <4 x i64> %4025, i64 3
  %4039 = getelementptr inbounds float, ptr %f8.host, i64 %4038
  %4040 = load float, ptr %4039, align 4, !tbaa !35
  %4041 = insertelement <4 x float> %4037, float %4040, i64 3
  %4042 = fmul <4 x float> %4041, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4043 = fadd <4 x float> %4019, %4042
  %4044 = fmul <4 x float> %4043, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4045 = add nsw i32 %t2493, %3181
  %4046 = insertelement <4 x i32> undef, i32 %4045, i64 0
  %4047 = shufflevector <4 x i32> %4046, <4 x i32> undef, <4 x i32> zeroinitializer
  %4048 = add nsw <4 x i32> %4047, <i32 0, i32 1, i32 2, i32 3>
  %4049 = add nsw <4 x i32> %t2501, %4048
  %4050 = sext <4 x i32> %4049 to <4 x i64>
  %4051 = extractelement <4 x i64> %4050, i64 0
  %4052 = getelementptr inbounds float, ptr %f8.host, i64 %4051
  %4053 = load float, ptr %4052, align 4, !tbaa !35
  %4054 = insertelement <4 x float> undef, float %4053, i64 0
  %4055 = extractelement <4 x i64> %4050, i64 1
  %4056 = getelementptr inbounds float, ptr %f8.host, i64 %4055
  %4057 = load float, ptr %4056, align 4, !tbaa !35
  %4058 = insertelement <4 x float> %4054, float %4057, i64 1
  %4059 = extractelement <4 x i64> %4050, i64 2
  %4060 = getelementptr inbounds float, ptr %f8.host, i64 %4059
  %4061 = load float, ptr %4060, align 4, !tbaa !35
  %4062 = insertelement <4 x float> %4058, float %4061, i64 2
  %4063 = extractelement <4 x i64> %4050, i64 3
  %4064 = getelementptr inbounds float, ptr %f8.host, i64 %4063
  %4065 = load float, ptr %4064, align 4, !tbaa !35
  %4066 = insertelement <4 x float> %4062, float %4065, i64 3
  %4067 = fmul <4 x float> %4066, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4068 = add nsw i32 %t2493, %3182
  %4069 = insertelement <4 x i32> undef, i32 %4068, i64 0
  %4070 = shufflevector <4 x i32> %4069, <4 x i32> undef, <4 x i32> zeroinitializer
  %4071 = add <4 x i32> %4070, <i32 -1, i32 0, i32 1, i32 2>
  %4072 = add <4 x i32> %4071, %t2501
  %4073 = sext <4 x i32> %4072 to <4 x i64>
  %4074 = extractelement <4 x i64> %4073, i64 0
  %4075 = getelementptr inbounds float, ptr %f8.host, i64 %4074
  %4076 = load float, ptr %4075, align 4, !tbaa !35
  %4077 = insertelement <4 x float> undef, float %4076, i64 0
  %4078 = extractelement <4 x i64> %4073, i64 1
  %4079 = getelementptr inbounds float, ptr %f8.host, i64 %4078
  %4080 = load float, ptr %4079, align 4, !tbaa !35
  %4081 = insertelement <4 x float> %4077, float %4080, i64 1
  %4082 = extractelement <4 x i64> %4073, i64 2
  %4083 = getelementptr inbounds float, ptr %f8.host, i64 %4082
  %4084 = load float, ptr %4083, align 4, !tbaa !35
  %4085 = insertelement <4 x float> %4081, float %4084, i64 2
  %4086 = extractelement <4 x i64> %4073, i64 3
  %4087 = getelementptr inbounds float, ptr %f8.host, i64 %4086
  %4088 = load float, ptr %4087, align 4, !tbaa !35
  %4089 = insertelement <4 x float> %4085, float %4088, i64 3
  %4090 = fmul <4 x float> %4089, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4091 = fadd <4 x float> %4067, %4090
  %4092 = fmul <4 x float> %4091, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4093 = fadd <4 x float> %4044, %4092
  %4094 = mul nsw <4 x i32> %3992, %248
  %4095 = insertelement <4 x i32> undef, i32 %t2489, i64 0
  %4096 = shufflevector <4 x i32> %4095, <4 x i32> undef, <4 x i32> zeroinitializer
  %4097 = add nsw <4 x i32> %4096, <i32 0, i32 2, i32 4, i32 6>
  %4098 = add nsw <4 x i32> %4094, %4097
  %4099 = sext <4 x i32> %4098 to <4 x i64>
  %4100 = extractelement <4 x i64> %4099, i64 0
  %4101 = getelementptr inbounds float, ptr %f7.host, i64 %4100
  %4102 = load float, ptr %4101, align 4, !tbaa !53
  %4103 = insertelement <4 x float> undef, float %4102, i64 0
  %4104 = extractelement <4 x i64> %4099, i64 1
  %4105 = getelementptr inbounds float, ptr %f7.host, i64 %4104
  %4106 = load float, ptr %4105, align 4, !tbaa !53
  %4107 = insertelement <4 x float> %4103, float %4106, i64 1
  %4108 = extractelement <4 x i64> %4099, i64 2
  %4109 = getelementptr inbounds float, ptr %f7.host, i64 %4108
  %4110 = load float, ptr %4109, align 4, !tbaa !53
  %4111 = insertelement <4 x float> %4107, float %4110, i64 2
  %4112 = extractelement <4 x i64> %4099, i64 3
  %4113 = getelementptr inbounds float, ptr %f7.host, i64 %4112
  %4114 = load float, ptr %4113, align 4, !tbaa !53
  %4115 = insertelement <4 x float> %4111, float %4114, i64 3
  %4116 = fsub <4 x float> %4115, %4093
  %4117 = fmul <4 x float> %t2484, %4116
  %4118 = add nsw <4 x i32> %t2495, %4000
  %4119 = sext <4 x i32> %4118 to <4 x i64>
  %4120 = extractelement <4 x i64> %4119, i64 0
  %4121 = getelementptr inbounds float, ptr %f8.host, i64 %4120
  %4122 = load float, ptr %4121, align 4, !tbaa !35
  %4123 = insertelement <4 x float> undef, float %4122, i64 0
  %4124 = extractelement <4 x i64> %4119, i64 1
  %4125 = getelementptr inbounds float, ptr %f8.host, i64 %4124
  %4126 = load float, ptr %4125, align 4, !tbaa !35
  %4127 = insertelement <4 x float> %4123, float %4126, i64 1
  %4128 = extractelement <4 x i64> %4119, i64 2
  %4129 = getelementptr inbounds float, ptr %f8.host, i64 %4128
  %4130 = load float, ptr %4129, align 4, !tbaa !35
  %4131 = insertelement <4 x float> %4127, float %4130, i64 2
  %4132 = extractelement <4 x i64> %4119, i64 3
  %4133 = getelementptr inbounds float, ptr %f8.host, i64 %4132
  %4134 = load float, ptr %4133, align 4, !tbaa !35
  %4135 = insertelement <4 x float> %4131, float %4134, i64 3
  %4136 = fmul <4 x float> %4135, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4137 = add <4 x i32> %4023, %t2495
  %4138 = sext <4 x i32> %4137 to <4 x i64>
  %4139 = extractelement <4 x i64> %4138, i64 0
  %4140 = getelementptr inbounds float, ptr %f8.host, i64 %4139
  %4141 = load float, ptr %4140, align 4, !tbaa !35
  %4142 = insertelement <4 x float> undef, float %4141, i64 0
  %4143 = extractelement <4 x i64> %4138, i64 1
  %4144 = getelementptr inbounds float, ptr %f8.host, i64 %4143
  %4145 = load float, ptr %4144, align 4, !tbaa !35
  %4146 = insertelement <4 x float> %4142, float %4145, i64 1
  %4147 = extractelement <4 x i64> %4138, i64 2
  %4148 = getelementptr inbounds float, ptr %f8.host, i64 %4147
  %4149 = load float, ptr %4148, align 4, !tbaa !35
  %4150 = insertelement <4 x float> %4146, float %4149, i64 2
  %4151 = extractelement <4 x i64> %4138, i64 3
  %4152 = getelementptr inbounds float, ptr %f8.host, i64 %4151
  %4153 = load float, ptr %4152, align 4, !tbaa !35
  %4154 = insertelement <4 x float> %4150, float %4153, i64 3
  %4155 = fmul <4 x float> %4154, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4156 = fadd <4 x float> %4136, %4155
  %4157 = fmul <4 x float> %4156, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4158 = add nsw <4 x i32> %t2495, %4048
  %4159 = sext <4 x i32> %4158 to <4 x i64>
  %4160 = extractelement <4 x i64> %4159, i64 0
  %4161 = getelementptr inbounds float, ptr %f8.host, i64 %4160
  %4162 = load float, ptr %4161, align 4, !tbaa !35
  %4163 = insertelement <4 x float> undef, float %4162, i64 0
  %4164 = extractelement <4 x i64> %4159, i64 1
  %4165 = getelementptr inbounds float, ptr %f8.host, i64 %4164
  %4166 = load float, ptr %4165, align 4, !tbaa !35
  %4167 = insertelement <4 x float> %4163, float %4166, i64 1
  %4168 = extractelement <4 x i64> %4159, i64 2
  %4169 = getelementptr inbounds float, ptr %f8.host, i64 %4168
  %4170 = load float, ptr %4169, align 4, !tbaa !35
  %4171 = insertelement <4 x float> %4167, float %4170, i64 2
  %4172 = extractelement <4 x i64> %4159, i64 3
  %4173 = getelementptr inbounds float, ptr %f8.host, i64 %4172
  %4174 = load float, ptr %4173, align 4, !tbaa !35
  %4175 = insertelement <4 x float> %4171, float %4174, i64 3
  %4176 = fmul <4 x float> %4175, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4177 = add <4 x i32> %4071, %t2495
  %4178 = sext <4 x i32> %4177 to <4 x i64>
  %4179 = extractelement <4 x i64> %4178, i64 0
  %4180 = getelementptr inbounds float, ptr %f8.host, i64 %4179
  %4181 = load float, ptr %4180, align 4, !tbaa !35
  %4182 = insertelement <4 x float> undef, float %4181, i64 0
  %4183 = extractelement <4 x i64> %4178, i64 1
  %4184 = getelementptr inbounds float, ptr %f8.host, i64 %4183
  %4185 = load float, ptr %4184, align 4, !tbaa !35
  %4186 = insertelement <4 x float> %4182, float %4185, i64 1
  %4187 = extractelement <4 x i64> %4178, i64 2
  %4188 = getelementptr inbounds float, ptr %f8.host, i64 %4187
  %4189 = load float, ptr %4188, align 4, !tbaa !35
  %4190 = insertelement <4 x float> %4186, float %4189, i64 2
  %4191 = extractelement <4 x i64> %4178, i64 3
  %4192 = getelementptr inbounds float, ptr %f8.host, i64 %4191
  %4193 = load float, ptr %4192, align 4, !tbaa !35
  %4194 = insertelement <4 x float> %4190, float %4193, i64 3
  %4195 = fmul <4 x float> %4194, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4196 = fadd <4 x float> %4176, %4195
  %4197 = fmul <4 x float> %4196, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4198 = fadd <4 x float> %4157, %4197
  %4199 = mul nsw <4 x i32> %t2491, %248
  %4200 = add nsw <4 x i32> %4199, %4097
  %4201 = sext <4 x i32> %4200 to <4 x i64>
  %4202 = extractelement <4 x i64> %4201, i64 0
  %4203 = getelementptr inbounds float, ptr %f7.host, i64 %4202
  %4204 = load float, ptr %4203, align 4, !tbaa !53
  %4205 = insertelement <4 x float> undef, float %4204, i64 0
  %4206 = extractelement <4 x i64> %4201, i64 1
  %4207 = getelementptr inbounds float, ptr %f7.host, i64 %4206
  %4208 = load float, ptr %4207, align 4, !tbaa !53
  %4209 = insertelement <4 x float> %4205, float %4208, i64 1
  %4210 = extractelement <4 x i64> %4201, i64 2
  %4211 = getelementptr inbounds float, ptr %f7.host, i64 %4210
  %4212 = load float, ptr %4211, align 4, !tbaa !53
  %4213 = insertelement <4 x float> %4209, float %4212, i64 2
  %4214 = extractelement <4 x i64> %4201, i64 3
  %4215 = getelementptr inbounds float, ptr %f7.host, i64 %4214
  %4216 = load float, ptr %4215, align 4, !tbaa !53
  %4217 = insertelement <4 x float> %4213, float %4216, i64 3
  %4218 = fsub <4 x float> %4217, %4198
  %4219 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2484
  %4220 = fmul <4 x float> %4219, %4218
  %4221 = fadd <4 x float> %4117, %4220
  %4222 = sext i32 %t2488 to i64
  %4223 = add nsw i64 %3184, %4222
  %4224 = getelementptr inbounds float, ptr %f130.host, i64 %4223
  %4225 = load <4 x float>, ptr %4224, align 4, !tbaa !37
  %4226 = fmul <4 x float> %4225, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4227 = add nsw i64 %3187, %4222
  %4228 = getelementptr inbounds float, ptr %f130.host, i64 %4227
  %4229 = load <4 x float>, ptr %4228, align 4, !tbaa !37
  %4230 = fmul <4 x float> %4229, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4231 = fadd <4 x float> %4226, %4230
  %4232 = fmul <4 x float> %4231, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4233 = sext i32 %t2486 to i64
  %4234 = add nsw i64 %3184, %4233
  %4235 = getelementptr inbounds float, ptr %f130.host, i64 %4234
  %4236 = load <4 x float>, ptr %4235, align 4, !tbaa !37
  %4237 = fmul <4 x float> %4236, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4238 = add nsw i64 %3187, %4233
  %4239 = getelementptr inbounds float, ptr %f130.host, i64 %4238
  %4240 = load <4 x float>, ptr %4239, align 4, !tbaa !37
  %4241 = fmul <4 x float> %4240, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4242 = fadd <4 x float> %4237, %4241
  %4243 = fmul <4 x float> %4242, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4244 = fadd <4 x float> %4232, %4243
  %4245 = fadd <4 x float> %4221, %4244
  %4246 = add nsw i32 %t2498, %3188
  %4247 = insertelement <4 x i32> undef, i32 %4246, i64 0
  %4248 = shufflevector <4 x i32> %4247, <4 x i32> undef, <4 x i32> zeroinitializer
  %4249 = add nsw <4 x i32> %4248, <i32 0, i32 1, i32 2, i32 3>
  %4250 = add nsw <4 x i32> %t2516, %4249
  %4251 = sext <4 x i32> %4250 to <4 x i64>
  %4252 = extractelement <4 x i64> %4251, i64 0
  %4253 = getelementptr inbounds float, ptr %f8.host, i64 %4252
  %4254 = load float, ptr %4253, align 4, !tbaa !35
  %4255 = insertelement <4 x float> undef, float %4254, i64 0
  %4256 = extractelement <4 x i64> %4251, i64 1
  %4257 = getelementptr inbounds float, ptr %f8.host, i64 %4256
  %4258 = load float, ptr %4257, align 4, !tbaa !35
  %4259 = insertelement <4 x float> %4255, float %4258, i64 1
  %4260 = extractelement <4 x i64> %4251, i64 2
  %4261 = getelementptr inbounds float, ptr %f8.host, i64 %4260
  %4262 = load float, ptr %4261, align 4, !tbaa !35
  %4263 = insertelement <4 x float> %4259, float %4262, i64 2
  %4264 = extractelement <4 x i64> %4251, i64 3
  %4265 = getelementptr inbounds float, ptr %f8.host, i64 %4264
  %4266 = load float, ptr %4265, align 4, !tbaa !35
  %4267 = insertelement <4 x float> %4263, float %4266, i64 3
  %4268 = fmul <4 x float> %4267, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4269 = add nsw i32 %t2498, %3189
  %4270 = insertelement <4 x i32> undef, i32 %4269, i64 0
  %4271 = shufflevector <4 x i32> %4270, <4 x i32> undef, <4 x i32> zeroinitializer
  %4272 = add <4 x i32> %4271, <i32 -1, i32 0, i32 1, i32 2>
  %4273 = add <4 x i32> %4272, %t2516
  %4274 = sext <4 x i32> %4273 to <4 x i64>
  %4275 = extractelement <4 x i64> %4274, i64 0
  %4276 = getelementptr inbounds float, ptr %f8.host, i64 %4275
  %4277 = load float, ptr %4276, align 4, !tbaa !35
  %4278 = insertelement <4 x float> undef, float %4277, i64 0
  %4279 = extractelement <4 x i64> %4274, i64 1
  %4280 = getelementptr inbounds float, ptr %f8.host, i64 %4279
  %4281 = load float, ptr %4280, align 4, !tbaa !35
  %4282 = insertelement <4 x float> %4278, float %4281, i64 1
  %4283 = extractelement <4 x i64> %4274, i64 2
  %4284 = getelementptr inbounds float, ptr %f8.host, i64 %4283
  %4285 = load float, ptr %4284, align 4, !tbaa !35
  %4286 = insertelement <4 x float> %4282, float %4285, i64 2
  %4287 = extractelement <4 x i64> %4274, i64 3
  %4288 = getelementptr inbounds float, ptr %f8.host, i64 %4287
  %4289 = load float, ptr %4288, align 4, !tbaa !35
  %4290 = insertelement <4 x float> %4286, float %4289, i64 3
  %4291 = fmul <4 x float> %4290, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4292 = fadd <4 x float> %4268, %4291
  %4293 = fmul <4 x float> %4292, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4294 = add nsw i32 %t2493, %3188
  %4295 = insertelement <4 x i32> undef, i32 %4294, i64 0
  %4296 = shufflevector <4 x i32> %4295, <4 x i32> undef, <4 x i32> zeroinitializer
  %4297 = add nsw <4 x i32> %4296, <i32 0, i32 1, i32 2, i32 3>
  %4298 = add nsw <4 x i32> %t2516, %4297
  %4299 = sext <4 x i32> %4298 to <4 x i64>
  %4300 = extractelement <4 x i64> %4299, i64 0
  %4301 = getelementptr inbounds float, ptr %f8.host, i64 %4300
  %4302 = load float, ptr %4301, align 4, !tbaa !35
  %4303 = insertelement <4 x float> undef, float %4302, i64 0
  %4304 = extractelement <4 x i64> %4299, i64 1
  %4305 = getelementptr inbounds float, ptr %f8.host, i64 %4304
  %4306 = load float, ptr %4305, align 4, !tbaa !35
  %4307 = insertelement <4 x float> %4303, float %4306, i64 1
  %4308 = extractelement <4 x i64> %4299, i64 2
  %4309 = getelementptr inbounds float, ptr %f8.host, i64 %4308
  %4310 = load float, ptr %4309, align 4, !tbaa !35
  %4311 = insertelement <4 x float> %4307, float %4310, i64 2
  %4312 = extractelement <4 x i64> %4299, i64 3
  %4313 = getelementptr inbounds float, ptr %f8.host, i64 %4312
  %4314 = load float, ptr %4313, align 4, !tbaa !35
  %4315 = insertelement <4 x float> %4311, float %4314, i64 3
  %4316 = fmul <4 x float> %4315, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4317 = add nsw i32 %t2493, %3189
  %4318 = insertelement <4 x i32> undef, i32 %4317, i64 0
  %4319 = shufflevector <4 x i32> %4318, <4 x i32> undef, <4 x i32> zeroinitializer
  %4320 = add <4 x i32> %4319, <i32 -1, i32 0, i32 1, i32 2>
  %4321 = add <4 x i32> %4320, %t2516
  %4322 = sext <4 x i32> %4321 to <4 x i64>
  %4323 = extractelement <4 x i64> %4322, i64 0
  %4324 = getelementptr inbounds float, ptr %f8.host, i64 %4323
  %4325 = load float, ptr %4324, align 4, !tbaa !35
  %4326 = insertelement <4 x float> undef, float %4325, i64 0
  %4327 = extractelement <4 x i64> %4322, i64 1
  %4328 = getelementptr inbounds float, ptr %f8.host, i64 %4327
  %4329 = load float, ptr %4328, align 4, !tbaa !35
  %4330 = insertelement <4 x float> %4326, float %4329, i64 1
  %4331 = extractelement <4 x i64> %4322, i64 2
  %4332 = getelementptr inbounds float, ptr %f8.host, i64 %4331
  %4333 = load float, ptr %4332, align 4, !tbaa !35
  %4334 = insertelement <4 x float> %4330, float %4333, i64 2
  %4335 = extractelement <4 x i64> %4322, i64 3
  %4336 = getelementptr inbounds float, ptr %f8.host, i64 %4335
  %4337 = load float, ptr %4336, align 4, !tbaa !35
  %4338 = insertelement <4 x float> %4334, float %4337, i64 3
  %4339 = fmul <4 x float> %4338, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4340 = fadd <4 x float> %4316, %4339
  %4341 = fmul <4 x float> %4340, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4342 = fadd <4 x float> %4293, %4341
  %4343 = mul nsw <4 x i32> %3996, %248
  %4344 = add nsw i32 %t2489, 1
  %4345 = insertelement <4 x i32> undef, i32 %4344, i64 0
  %4346 = shufflevector <4 x i32> %4345, <4 x i32> undef, <4 x i32> zeroinitializer
  %4347 = add nsw <4 x i32> %4346, <i32 0, i32 2, i32 4, i32 6>
  %4348 = add nsw <4 x i32> %4343, %4347
  %4349 = sext <4 x i32> %4348 to <4 x i64>
  %4350 = extractelement <4 x i64> %4349, i64 0
  %4351 = getelementptr inbounds float, ptr %f7.host, i64 %4350
  %4352 = load float, ptr %4351, align 4, !tbaa !53
  %4353 = insertelement <4 x float> undef, float %4352, i64 0
  %4354 = extractelement <4 x i64> %4349, i64 1
  %4355 = getelementptr inbounds float, ptr %f7.host, i64 %4354
  %4356 = load float, ptr %4355, align 4, !tbaa !53
  %4357 = insertelement <4 x float> %4353, float %4356, i64 1
  %4358 = extractelement <4 x i64> %4349, i64 2
  %4359 = getelementptr inbounds float, ptr %f7.host, i64 %4358
  %4360 = load float, ptr %4359, align 4, !tbaa !53
  %4361 = insertelement <4 x float> %4357, float %4360, i64 2
  %4362 = extractelement <4 x i64> %4349, i64 3
  %4363 = getelementptr inbounds float, ptr %f7.host, i64 %4362
  %4364 = load float, ptr %4363, align 4, !tbaa !53
  %4365 = insertelement <4 x float> %4361, float %4364, i64 3
  %4366 = fsub <4 x float> %4365, %4342
  %4367 = fmul <4 x float> %t2505, %4366
  %4368 = add nsw <4 x i32> %t2511, %4249
  %4369 = sext <4 x i32> %4368 to <4 x i64>
  %4370 = extractelement <4 x i64> %4369, i64 0
  %4371 = getelementptr inbounds float, ptr %f8.host, i64 %4370
  %4372 = load float, ptr %4371, align 4, !tbaa !35
  %4373 = insertelement <4 x float> undef, float %4372, i64 0
  %4374 = extractelement <4 x i64> %4369, i64 1
  %4375 = getelementptr inbounds float, ptr %f8.host, i64 %4374
  %4376 = load float, ptr %4375, align 4, !tbaa !35
  %4377 = insertelement <4 x float> %4373, float %4376, i64 1
  %4378 = extractelement <4 x i64> %4369, i64 2
  %4379 = getelementptr inbounds float, ptr %f8.host, i64 %4378
  %4380 = load float, ptr %4379, align 4, !tbaa !35
  %4381 = insertelement <4 x float> %4377, float %4380, i64 2
  %4382 = extractelement <4 x i64> %4369, i64 3
  %4383 = getelementptr inbounds float, ptr %f8.host, i64 %4382
  %4384 = load float, ptr %4383, align 4, !tbaa !35
  %4385 = insertelement <4 x float> %4381, float %4384, i64 3
  %4386 = fmul <4 x float> %4385, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4387 = add <4 x i32> %4272, %t2511
  %4388 = sext <4 x i32> %4387 to <4 x i64>
  %4389 = extractelement <4 x i64> %4388, i64 0
  %4390 = getelementptr inbounds float, ptr %f8.host, i64 %4389
  %4391 = load float, ptr %4390, align 4, !tbaa !35
  %4392 = insertelement <4 x float> undef, float %4391, i64 0
  %4393 = extractelement <4 x i64> %4388, i64 1
  %4394 = getelementptr inbounds float, ptr %f8.host, i64 %4393
  %4395 = load float, ptr %4394, align 4, !tbaa !35
  %4396 = insertelement <4 x float> %4392, float %4395, i64 1
  %4397 = extractelement <4 x i64> %4388, i64 2
  %4398 = getelementptr inbounds float, ptr %f8.host, i64 %4397
  %4399 = load float, ptr %4398, align 4, !tbaa !35
  %4400 = insertelement <4 x float> %4396, float %4399, i64 2
  %4401 = extractelement <4 x i64> %4388, i64 3
  %4402 = getelementptr inbounds float, ptr %f8.host, i64 %4401
  %4403 = load float, ptr %4402, align 4, !tbaa !35
  %4404 = insertelement <4 x float> %4400, float %4403, i64 3
  %4405 = fmul <4 x float> %4404, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4406 = fadd <4 x float> %4386, %4405
  %4407 = fmul <4 x float> %4406, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4408 = add nsw <4 x i32> %t2511, %4297
  %4409 = sext <4 x i32> %4408 to <4 x i64>
  %4410 = extractelement <4 x i64> %4409, i64 0
  %4411 = getelementptr inbounds float, ptr %f8.host, i64 %4410
  %4412 = load float, ptr %4411, align 4, !tbaa !35
  %4413 = insertelement <4 x float> undef, float %4412, i64 0
  %4414 = extractelement <4 x i64> %4409, i64 1
  %4415 = getelementptr inbounds float, ptr %f8.host, i64 %4414
  %4416 = load float, ptr %4415, align 4, !tbaa !35
  %4417 = insertelement <4 x float> %4413, float %4416, i64 1
  %4418 = extractelement <4 x i64> %4409, i64 2
  %4419 = getelementptr inbounds float, ptr %f8.host, i64 %4418
  %4420 = load float, ptr %4419, align 4, !tbaa !35
  %4421 = insertelement <4 x float> %4417, float %4420, i64 2
  %4422 = extractelement <4 x i64> %4409, i64 3
  %4423 = getelementptr inbounds float, ptr %f8.host, i64 %4422
  %4424 = load float, ptr %4423, align 4, !tbaa !35
  %4425 = insertelement <4 x float> %4421, float %4424, i64 3
  %4426 = fmul <4 x float> %4425, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4427 = add <4 x i32> %4320, %t2511
  %4428 = sext <4 x i32> %4427 to <4 x i64>
  %4429 = extractelement <4 x i64> %4428, i64 0
  %4430 = getelementptr inbounds float, ptr %f8.host, i64 %4429
  %4431 = load float, ptr %4430, align 4, !tbaa !35
  %4432 = insertelement <4 x float> undef, float %4431, i64 0
  %4433 = extractelement <4 x i64> %4428, i64 1
  %4434 = getelementptr inbounds float, ptr %f8.host, i64 %4433
  %4435 = load float, ptr %4434, align 4, !tbaa !35
  %4436 = insertelement <4 x float> %4432, float %4435, i64 1
  %4437 = extractelement <4 x i64> %4428, i64 2
  %4438 = getelementptr inbounds float, ptr %f8.host, i64 %4437
  %4439 = load float, ptr %4438, align 4, !tbaa !35
  %4440 = insertelement <4 x float> %4436, float %4439, i64 2
  %4441 = extractelement <4 x i64> %4428, i64 3
  %4442 = getelementptr inbounds float, ptr %f8.host, i64 %4441
  %4443 = load float, ptr %4442, align 4, !tbaa !35
  %4444 = insertelement <4 x float> %4440, float %4443, i64 3
  %4445 = fmul <4 x float> %4444, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4446 = fadd <4 x float> %4426, %4445
  %4447 = fmul <4 x float> %4446, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4448 = fadd <4 x float> %4407, %4447
  %4449 = mul nsw <4 x i32> %t2508, %248
  %4450 = add nsw <4 x i32> %4449, %4347
  %4451 = sext <4 x i32> %4450 to <4 x i64>
  %4452 = extractelement <4 x i64> %4451, i64 0
  %4453 = getelementptr inbounds float, ptr %f7.host, i64 %4452
  %4454 = load float, ptr %4453, align 4, !tbaa !53
  %4455 = insertelement <4 x float> undef, float %4454, i64 0
  %4456 = extractelement <4 x i64> %4451, i64 1
  %4457 = getelementptr inbounds float, ptr %f7.host, i64 %4456
  %4458 = load float, ptr %4457, align 4, !tbaa !53
  %4459 = insertelement <4 x float> %4455, float %4458, i64 1
  %4460 = extractelement <4 x i64> %4451, i64 2
  %4461 = getelementptr inbounds float, ptr %f7.host, i64 %4460
  %4462 = load float, ptr %4461, align 4, !tbaa !53
  %4463 = insertelement <4 x float> %4459, float %4462, i64 2
  %4464 = extractelement <4 x i64> %4451, i64 3
  %4465 = getelementptr inbounds float, ptr %f7.host, i64 %4464
  %4466 = load float, ptr %4465, align 4, !tbaa !53
  %4467 = insertelement <4 x float> %4463, float %4466, i64 3
  %4468 = fsub <4 x float> %4467, %4448
  %4469 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2505
  %4470 = fmul <4 x float> %4469, %4468
  %4471 = fadd <4 x float> %4367, %4470
  %4472 = add nsw i64 %3191, %4222
  %4473 = getelementptr inbounds float, ptr %f130.host, i64 %4472
  %4474 = load <4 x float>, ptr %4473, align 4, !tbaa !37
  %4475 = fmul <4 x float> %4474, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4476 = add nsw i64 %3194, %4222
  %4477 = getelementptr inbounds float, ptr %f130.host, i64 %4476
  %4478 = load <4 x float>, ptr %4477, align 4, !tbaa !37
  %4479 = fmul <4 x float> %4478, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4480 = fadd <4 x float> %4475, %4479
  %4481 = fmul <4 x float> %4480, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4482 = add nsw i64 %3191, %4233
  %4483 = getelementptr inbounds float, ptr %f130.host, i64 %4482
  %4484 = load <4 x float>, ptr %4483, align 4, !tbaa !37
  %4485 = fmul <4 x float> %4484, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4486 = add nsw i64 %3194, %4233
  %4487 = getelementptr inbounds float, ptr %f130.host, i64 %4486
  %4488 = load <4 x float>, ptr %4487, align 4, !tbaa !37
  %4489 = fmul <4 x float> %4488, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4490 = fadd <4 x float> %4485, %4489
  %4491 = fmul <4 x float> %4490, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4492 = fadd <4 x float> %4481, %4491
  %4493 = fadd <4 x float> %4471, %4492
  %4494 = shufflevector <4 x float> %4245, <4 x float> %4493, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %narrow143 = sub nsw i32 %3971, %225
  %4495 = sext i32 %narrow143 to i64
  %4496 = mul nsw i64 %250, %4495
  %4497 = add nsw i64 %4496, %3195
  %4498 = getelementptr inbounds float, ptr %128, i64 %4497
  store <8 x float> %4494, ptr %4498, align 4, !tbaa !63
  br label %"produce f12832"

"produce f12832":                                 ; preds = %"for f129.s0.v3.v328.preheader", %"end for f129.s0.v3.v325", %"produce f12919"
  %4499 = trunc i64 %3406 to i32
  %4500 = add i32 %4499, 5
  %4501 = and i32 %4500, 7
  %4502 = icmp eq i32 %4501, 7
  br i1 %4502, label %true_bb34, label %"produce f12745"

true_bb34:                                        ; preds = %"produce f12832"
  br i1 %.inv128, label %"for f128.s0.v3.v337.preheader", label %"end for f128.s0.v3.v338", !prof !5

"for f128.s0.v3.v337.preheader":                  ; preds = %true_bb34
  %4503 = trunc i64 %3406 to i32
  %4504 = add i32 %4503, 21
  %4505 = ashr i32 %4504, 3
  %4506 = shl nsw i32 %4505, 1
  %4507 = and i32 %4506, 2
  %4508 = ashr i32 %4504, 4
  %t2517 = add nsw i32 %4507, %4508
  %4509 = sub nsw i32 %4505, %f74.v4.min_realized
  %4510 = mul nsw i32 %4509, %819
  %4511 = add i32 %3201, %4510
  %4512 = add nsw i32 %t2517, %820
  %t2524 = mul nsw i32 %4512, %117
  %4513 = sub nsw i32 %4508, %225
  %t2526 = mul nsw i32 %4513, %117
  %4514 = sub nsw i32 %4505, %f6.v4.min_realized
  %4515 = mul nsw i32 %4514, %f6.stride.1
  %4516 = add i32 %3202, %4515
  %4517 = add i32 %t2517, %821
  %4518 = mul nsw i32 %4517, %f7.stride.1
  %4519 = sub nsw i32 %4508, %f7.v4.min_realized
  %4520 = mul nsw i32 %4519, %f7.stride.1
  %4521 = sext i32 %t2526 to i64
  %4522 = add nsw i64 %4521, -1
  %4523 = sext i32 %t2524 to i64
  %4524 = add nsw i64 %4523, -1
  %narrow139 = sub nsw i32 %4505, %816
  %4525 = sext i32 %narrow139 to i64
  %4526 = mul nsw i64 %827, %4525
  %4527 = add nsw i64 %4526, %.neg219
  br label %"for f128.s0.v3.v337"

"for f128.s0.v3.v337":                            ; preds = %"for f128.s0.v3.v337.preheader", %"for f128.s0.v3.v337"
  %lsr.iv291 = phi i32 [ %lsr.iv.next292, %"for f128.s0.v3.v337" ], [ 0, %"for f128.s0.v3.v337.preheader" ]
  %lsr.iv289 = phi i32 [ %lsr.iv.next290, %"for f128.s0.v3.v337" ], [ %a907, %"for f128.s0.v3.v337.preheader" ]
  %4528 = add i32 %lsr.iv291, %99
  %4529 = ashr i32 %4528, 1
  %t2518 = add nsw i32 %4529, %3200
  %4530 = add i32 %4511, %lsr.iv291
  %4531 = sext i32 %4530 to i64
  %4532 = getelementptr inbounds float, ptr %f74.host, i64 %4531
  %4533 = load <4 x float>, ptr %4532, align 4, !tbaa !55
  %4534 = add nsw i64 %4531, 4
  %4535 = getelementptr inbounds float, ptr %f74.host, i64 %4534
  %4536 = load <4 x float>, ptr %4535, align 4, !tbaa !55
  %4537 = shufflevector <4 x float> %4533, <4 x float> %4536, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2520 = fmul <4 x float> %232, %4537
  %a908 = fptosi <4 x float> %t2520 to <4 x i32>
  %a911 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a908)
  %4538 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a911, <4 x i32> zeroinitializer)
  %4539 = sitofp <4 x i32> %4538 to <4 x float>
  %t2522 = fsub <4 x float> %t2520, %4539
  %4540 = add i32 %4516, %lsr.iv291
  %t2529 = sub nsw <4 x i32> %4538, %241
  %4541 = sub nsw i32 %t2518, %f7.v3.min_realized
  %t2532 = add nsw i32 %4541, %4518
  %t2533 = mul nsw <4 x i32> %t2529, %248
  %4542 = sub nsw i32 %4529, %f7.v3.min_realized
  %t2535 = add nsw i32 %4542, %4518
  %t2537 = add nsw i32 %4541, %4520
  %t2538 = add nsw i32 %4542, %4520
  %4543 = add nsw <4 x i32> %t2529, <i32 1, i32 1, i32 1, i32 1>
  %t2539 = mul nsw <4 x i32> %4543, %248
  %4544 = add i32 %4528, 1
  %4545 = shl i32 %4544, 1
  %4546 = and i32 %4545, 2
  %4547 = ashr i32 %4544, 1
  %t2540 = add nsw i32 %4546, %4547
  %4548 = shufflevector <4 x float> %4533, <4 x float> %4536, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2541 = fmul <4 x float> %232, %4548
  %a912 = fptosi <4 x float> %t2541 to <4 x i32>
  %a915 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a912)
  %4549 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a915, <4 x i32> zeroinitializer)
  %4550 = sitofp <4 x i32> %4549 to <4 x float>
  %t2543 = fsub <4 x float> %t2541, %4550
  %t2546 = sub nsw <4 x i32> %4549, %241
  %4551 = sub nsw i32 %t2540, %f7.v3.min_realized
  %t2548 = add nsw i32 %4551, %4518
  %t2549 = mul nsw <4 x i32> %t2546, %248
  %4552 = sub nsw i32 %4547, %f7.v3.min_realized
  %t2551 = add nsw i32 %4552, %4518
  %t2552 = add nsw i32 %4551, %4520
  %t2553 = add nsw i32 %4552, %4520
  %4553 = add nsw <4 x i32> %t2546, <i32 1, i32 1, i32 1, i32 1>
  %t2554 = mul nsw <4 x i32> %4553, %248
  %4554 = insertelement <4 x i32> undef, i32 %t2538, i64 0
  %4555 = shufflevector <4 x i32> %4554, <4 x i32> undef, <4 x i32> zeroinitializer
  %4556 = add nsw <4 x i32> %4555, <i32 0, i32 1, i32 2, i32 3>
  %4557 = add nsw <4 x i32> %t2539, %4556
  %4558 = sext <4 x i32> %4557 to <4 x i64>
  %4559 = extractelement <4 x i64> %4558, i64 0
  %4560 = getelementptr inbounds float, ptr %f7.host, i64 %4559
  %4561 = load float, ptr %4560, align 4, !tbaa !53
  %4562 = insertelement <4 x float> undef, float %4561, i64 0
  %4563 = extractelement <4 x i64> %4558, i64 1
  %4564 = getelementptr inbounds float, ptr %f7.host, i64 %4563
  %4565 = load float, ptr %4564, align 4, !tbaa !53
  %4566 = insertelement <4 x float> %4562, float %4565, i64 1
  %4567 = extractelement <4 x i64> %4558, i64 2
  %4568 = getelementptr inbounds float, ptr %f7.host, i64 %4567
  %4569 = load float, ptr %4568, align 4, !tbaa !53
  %4570 = insertelement <4 x float> %4566, float %4569, i64 2
  %4571 = extractelement <4 x i64> %4558, i64 3
  %4572 = getelementptr inbounds float, ptr %f7.host, i64 %4571
  %4573 = load float, ptr %4572, align 4, !tbaa !53
  %4574 = insertelement <4 x float> %4570, float %4573, i64 3
  %4575 = fmul <4 x float> %4574, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4576 = insertelement <4 x i32> undef, i32 %t2537, i64 0
  %4577 = shufflevector <4 x i32> %4576, <4 x i32> undef, <4 x i32> zeroinitializer
  %4578 = add <4 x i32> %4577, <i32 -1, i32 0, i32 1, i32 2>
  %4579 = add <4 x i32> %4578, %t2539
  %4580 = sext <4 x i32> %4579 to <4 x i64>
  %4581 = extractelement <4 x i64> %4580, i64 0
  %4582 = getelementptr inbounds float, ptr %f7.host, i64 %4581
  %4583 = load float, ptr %4582, align 4, !tbaa !53
  %4584 = insertelement <4 x float> undef, float %4583, i64 0
  %4585 = extractelement <4 x i64> %4580, i64 1
  %4586 = getelementptr inbounds float, ptr %f7.host, i64 %4585
  %4587 = load float, ptr %4586, align 4, !tbaa !53
  %4588 = insertelement <4 x float> %4584, float %4587, i64 1
  %4589 = extractelement <4 x i64> %4580, i64 2
  %4590 = getelementptr inbounds float, ptr %f7.host, i64 %4589
  %4591 = load float, ptr %4590, align 4, !tbaa !53
  %4592 = insertelement <4 x float> %4588, float %4591, i64 2
  %4593 = extractelement <4 x i64> %4580, i64 3
  %4594 = getelementptr inbounds float, ptr %f7.host, i64 %4593
  %4595 = load float, ptr %4594, align 4, !tbaa !53
  %4596 = insertelement <4 x float> %4592, float %4595, i64 3
  %4597 = fmul <4 x float> %4596, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4598 = fadd <4 x float> %4575, %4597
  %4599 = fmul <4 x float> %4598, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4600 = insertelement <4 x i32> undef, i32 %t2535, i64 0
  %4601 = shufflevector <4 x i32> %4600, <4 x i32> undef, <4 x i32> zeroinitializer
  %4602 = add nsw <4 x i32> %4601, <i32 0, i32 1, i32 2, i32 3>
  %4603 = add nsw <4 x i32> %t2539, %4602
  %4604 = sext <4 x i32> %4603 to <4 x i64>
  %4605 = extractelement <4 x i64> %4604, i64 0
  %4606 = getelementptr inbounds float, ptr %f7.host, i64 %4605
  %4607 = load float, ptr %4606, align 4, !tbaa !53
  %4608 = insertelement <4 x float> undef, float %4607, i64 0
  %4609 = extractelement <4 x i64> %4604, i64 1
  %4610 = getelementptr inbounds float, ptr %f7.host, i64 %4609
  %4611 = load float, ptr %4610, align 4, !tbaa !53
  %4612 = insertelement <4 x float> %4608, float %4611, i64 1
  %4613 = extractelement <4 x i64> %4604, i64 2
  %4614 = getelementptr inbounds float, ptr %f7.host, i64 %4613
  %4615 = load float, ptr %4614, align 4, !tbaa !53
  %4616 = insertelement <4 x float> %4612, float %4615, i64 2
  %4617 = extractelement <4 x i64> %4604, i64 3
  %4618 = getelementptr inbounds float, ptr %f7.host, i64 %4617
  %4619 = load float, ptr %4618, align 4, !tbaa !53
  %4620 = insertelement <4 x float> %4616, float %4619, i64 3
  %4621 = fmul <4 x float> %4620, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4622 = insertelement <4 x i32> undef, i32 %t2532, i64 0
  %4623 = shufflevector <4 x i32> %4622, <4 x i32> undef, <4 x i32> zeroinitializer
  %4624 = add <4 x i32> %4623, <i32 -1, i32 0, i32 1, i32 2>
  %4625 = add <4 x i32> %4624, %t2539
  %4626 = sext <4 x i32> %4625 to <4 x i64>
  %4627 = extractelement <4 x i64> %4626, i64 0
  %4628 = getelementptr inbounds float, ptr %f7.host, i64 %4627
  %4629 = load float, ptr %4628, align 4, !tbaa !53
  %4630 = insertelement <4 x float> undef, float %4629, i64 0
  %4631 = extractelement <4 x i64> %4626, i64 1
  %4632 = getelementptr inbounds float, ptr %f7.host, i64 %4631
  %4633 = load float, ptr %4632, align 4, !tbaa !53
  %4634 = insertelement <4 x float> %4630, float %4633, i64 1
  %4635 = extractelement <4 x i64> %4626, i64 2
  %4636 = getelementptr inbounds float, ptr %f7.host, i64 %4635
  %4637 = load float, ptr %4636, align 4, !tbaa !53
  %4638 = insertelement <4 x float> %4634, float %4637, i64 2
  %4639 = extractelement <4 x i64> %4626, i64 3
  %4640 = getelementptr inbounds float, ptr %f7.host, i64 %4639
  %4641 = load float, ptr %4640, align 4, !tbaa !53
  %4642 = insertelement <4 x float> %4638, float %4641, i64 3
  %4643 = fmul <4 x float> %4642, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4644 = fadd <4 x float> %4621, %4643
  %4645 = fmul <4 x float> %4644, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4646 = fadd <4 x float> %4599, %4645
  %4647 = mul nsw <4 x i32> %4543, %824
  %4648 = insertelement <4 x i32> undef, i32 %4540, i64 0
  %4649 = shufflevector <4 x i32> %4648, <4 x i32> undef, <4 x i32> zeroinitializer
  %4650 = add nsw <4 x i32> %4649, <i32 0, i32 2, i32 4, i32 6>
  %4651 = add nsw <4 x i32> %4647, %4650
  %4652 = sext <4 x i32> %4651 to <4 x i64>
  %4653 = extractelement <4 x i64> %4652, i64 0
  %4654 = getelementptr inbounds float, ptr %f6.host, i64 %4653
  %4655 = load float, ptr %4654, align 4, !tbaa !49
  %4656 = insertelement <4 x float> undef, float %4655, i64 0
  %4657 = extractelement <4 x i64> %4652, i64 1
  %4658 = getelementptr inbounds float, ptr %f6.host, i64 %4657
  %4659 = load float, ptr %4658, align 4, !tbaa !49
  %4660 = insertelement <4 x float> %4656, float %4659, i64 1
  %4661 = extractelement <4 x i64> %4652, i64 2
  %4662 = getelementptr inbounds float, ptr %f6.host, i64 %4661
  %4663 = load float, ptr %4662, align 4, !tbaa !49
  %4664 = insertelement <4 x float> %4660, float %4663, i64 2
  %4665 = extractelement <4 x i64> %4652, i64 3
  %4666 = getelementptr inbounds float, ptr %f6.host, i64 %4665
  %4667 = load float, ptr %4666, align 4, !tbaa !49
  %4668 = insertelement <4 x float> %4664, float %4667, i64 3
  %4669 = fsub <4 x float> %4668, %4646
  %4670 = fmul <4 x float> %t2522, %4669
  %4671 = add nsw <4 x i32> %t2533, %4556
  %4672 = sext <4 x i32> %4671 to <4 x i64>
  %4673 = extractelement <4 x i64> %4672, i64 0
  %4674 = getelementptr inbounds float, ptr %f7.host, i64 %4673
  %4675 = load float, ptr %4674, align 4, !tbaa !53
  %4676 = insertelement <4 x float> undef, float %4675, i64 0
  %4677 = extractelement <4 x i64> %4672, i64 1
  %4678 = getelementptr inbounds float, ptr %f7.host, i64 %4677
  %4679 = load float, ptr %4678, align 4, !tbaa !53
  %4680 = insertelement <4 x float> %4676, float %4679, i64 1
  %4681 = extractelement <4 x i64> %4672, i64 2
  %4682 = getelementptr inbounds float, ptr %f7.host, i64 %4681
  %4683 = load float, ptr %4682, align 4, !tbaa !53
  %4684 = insertelement <4 x float> %4680, float %4683, i64 2
  %4685 = extractelement <4 x i64> %4672, i64 3
  %4686 = getelementptr inbounds float, ptr %f7.host, i64 %4685
  %4687 = load float, ptr %4686, align 4, !tbaa !53
  %4688 = insertelement <4 x float> %4684, float %4687, i64 3
  %4689 = fmul <4 x float> %4688, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4690 = add <4 x i32> %4578, %t2533
  %4691 = sext <4 x i32> %4690 to <4 x i64>
  %4692 = extractelement <4 x i64> %4691, i64 0
  %4693 = getelementptr inbounds float, ptr %f7.host, i64 %4692
  %4694 = load float, ptr %4693, align 4, !tbaa !53
  %4695 = insertelement <4 x float> undef, float %4694, i64 0
  %4696 = extractelement <4 x i64> %4691, i64 1
  %4697 = getelementptr inbounds float, ptr %f7.host, i64 %4696
  %4698 = load float, ptr %4697, align 4, !tbaa !53
  %4699 = insertelement <4 x float> %4695, float %4698, i64 1
  %4700 = extractelement <4 x i64> %4691, i64 2
  %4701 = getelementptr inbounds float, ptr %f7.host, i64 %4700
  %4702 = load float, ptr %4701, align 4, !tbaa !53
  %4703 = insertelement <4 x float> %4699, float %4702, i64 2
  %4704 = extractelement <4 x i64> %4691, i64 3
  %4705 = getelementptr inbounds float, ptr %f7.host, i64 %4704
  %4706 = load float, ptr %4705, align 4, !tbaa !53
  %4707 = insertelement <4 x float> %4703, float %4706, i64 3
  %4708 = fmul <4 x float> %4707, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4709 = fadd <4 x float> %4689, %4708
  %4710 = fmul <4 x float> %4709, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4711 = add nsw <4 x i32> %t2533, %4602
  %4712 = sext <4 x i32> %4711 to <4 x i64>
  %4713 = extractelement <4 x i64> %4712, i64 0
  %4714 = getelementptr inbounds float, ptr %f7.host, i64 %4713
  %4715 = load float, ptr %4714, align 4, !tbaa !53
  %4716 = insertelement <4 x float> undef, float %4715, i64 0
  %4717 = extractelement <4 x i64> %4712, i64 1
  %4718 = getelementptr inbounds float, ptr %f7.host, i64 %4717
  %4719 = load float, ptr %4718, align 4, !tbaa !53
  %4720 = insertelement <4 x float> %4716, float %4719, i64 1
  %4721 = extractelement <4 x i64> %4712, i64 2
  %4722 = getelementptr inbounds float, ptr %f7.host, i64 %4721
  %4723 = load float, ptr %4722, align 4, !tbaa !53
  %4724 = insertelement <4 x float> %4720, float %4723, i64 2
  %4725 = extractelement <4 x i64> %4712, i64 3
  %4726 = getelementptr inbounds float, ptr %f7.host, i64 %4725
  %4727 = load float, ptr %4726, align 4, !tbaa !53
  %4728 = insertelement <4 x float> %4724, float %4727, i64 3
  %4729 = fmul <4 x float> %4728, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4730 = add <4 x i32> %4624, %t2533
  %4731 = sext <4 x i32> %4730 to <4 x i64>
  %4732 = extractelement <4 x i64> %4731, i64 0
  %4733 = getelementptr inbounds float, ptr %f7.host, i64 %4732
  %4734 = load float, ptr %4733, align 4, !tbaa !53
  %4735 = insertelement <4 x float> undef, float %4734, i64 0
  %4736 = extractelement <4 x i64> %4731, i64 1
  %4737 = getelementptr inbounds float, ptr %f7.host, i64 %4736
  %4738 = load float, ptr %4737, align 4, !tbaa !53
  %4739 = insertelement <4 x float> %4735, float %4738, i64 1
  %4740 = extractelement <4 x i64> %4731, i64 2
  %4741 = getelementptr inbounds float, ptr %f7.host, i64 %4740
  %4742 = load float, ptr %4741, align 4, !tbaa !53
  %4743 = insertelement <4 x float> %4739, float %4742, i64 2
  %4744 = extractelement <4 x i64> %4731, i64 3
  %4745 = getelementptr inbounds float, ptr %f7.host, i64 %4744
  %4746 = load float, ptr %4745, align 4, !tbaa !53
  %4747 = insertelement <4 x float> %4743, float %4746, i64 3
  %4748 = fmul <4 x float> %4747, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4749 = fadd <4 x float> %4729, %4748
  %4750 = fmul <4 x float> %4749, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4751 = fadd <4 x float> %4710, %4750
  %4752 = mul nsw <4 x i32> %t2529, %824
  %4753 = add nsw <4 x i32> %4752, %4650
  %4754 = sext <4 x i32> %4753 to <4 x i64>
  %4755 = extractelement <4 x i64> %4754, i64 0
  %4756 = getelementptr inbounds float, ptr %f6.host, i64 %4755
  %4757 = load float, ptr %4756, align 4, !tbaa !49
  %4758 = insertelement <4 x float> undef, float %4757, i64 0
  %4759 = extractelement <4 x i64> %4754, i64 1
  %4760 = getelementptr inbounds float, ptr %f6.host, i64 %4759
  %4761 = load float, ptr %4760, align 4, !tbaa !49
  %4762 = insertelement <4 x float> %4758, float %4761, i64 1
  %4763 = extractelement <4 x i64> %4754, i64 2
  %4764 = getelementptr inbounds float, ptr %f6.host, i64 %4763
  %4765 = load float, ptr %4764, align 4, !tbaa !49
  %4766 = insertelement <4 x float> %4762, float %4765, i64 2
  %4767 = extractelement <4 x i64> %4754, i64 3
  %4768 = getelementptr inbounds float, ptr %f6.host, i64 %4767
  %4769 = load float, ptr %4768, align 4, !tbaa !49
  %4770 = insertelement <4 x float> %4766, float %4769, i64 3
  %4771 = fsub <4 x float> %4770, %4751
  %4772 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2522
  %4773 = fmul <4 x float> %4772, %4771
  %4774 = fadd <4 x float> %4670, %4773
  %narrow137 = sub nsw i32 %4529, %f129.v3.min_realized
  %4775 = sext i32 %narrow137 to i64
  %4776 = add nsw i64 %4775, %4521
  %4777 = getelementptr inbounds float, ptr %128, i64 %4776
  %4778 = load <4 x float>, ptr %4777, align 4, !tbaa !63
  %4779 = fmul <4 x float> %4778, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4780 = sext i32 %t2518 to i64
  %4781 = sub nsw i64 %4780, %825
  %4782 = add nsw i64 %4522, %4781
  %4783 = getelementptr inbounds float, ptr %128, i64 %4782
  %4784 = load <4 x float>, ptr %4783, align 4, !tbaa !63
  %4785 = fmul <4 x float> %4784, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4786 = fadd <4 x float> %4779, %4785
  %4787 = fmul <4 x float> %4786, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4788 = add nsw i64 %4775, %4523
  %4789 = getelementptr inbounds float, ptr %128, i64 %4788
  %4790 = load <4 x float>, ptr %4789, align 4, !tbaa !63
  %4791 = fmul <4 x float> %4790, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4792 = add nsw i64 %4524, %4781
  %4793 = getelementptr inbounds float, ptr %128, i64 %4792
  %4794 = load <4 x float>, ptr %4793, align 4, !tbaa !63
  %4795 = fmul <4 x float> %4794, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4796 = fadd <4 x float> %4791, %4795
  %4797 = fmul <4 x float> %4796, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4798 = fadd <4 x float> %4787, %4797
  %4799 = fadd <4 x float> %4774, %4798
  %4800 = insertelement <4 x i32> undef, i32 %t2553, i64 0
  %4801 = shufflevector <4 x i32> %4800, <4 x i32> undef, <4 x i32> zeroinitializer
  %4802 = add nsw <4 x i32> %4801, <i32 0, i32 1, i32 2, i32 3>
  %4803 = add nsw <4 x i32> %t2554, %4802
  %4804 = sext <4 x i32> %4803 to <4 x i64>
  %4805 = extractelement <4 x i64> %4804, i64 0
  %4806 = getelementptr inbounds float, ptr %f7.host, i64 %4805
  %4807 = load float, ptr %4806, align 4, !tbaa !53
  %4808 = insertelement <4 x float> undef, float %4807, i64 0
  %4809 = extractelement <4 x i64> %4804, i64 1
  %4810 = getelementptr inbounds float, ptr %f7.host, i64 %4809
  %4811 = load float, ptr %4810, align 4, !tbaa !53
  %4812 = insertelement <4 x float> %4808, float %4811, i64 1
  %4813 = extractelement <4 x i64> %4804, i64 2
  %4814 = getelementptr inbounds float, ptr %f7.host, i64 %4813
  %4815 = load float, ptr %4814, align 4, !tbaa !53
  %4816 = insertelement <4 x float> %4812, float %4815, i64 2
  %4817 = extractelement <4 x i64> %4804, i64 3
  %4818 = getelementptr inbounds float, ptr %f7.host, i64 %4817
  %4819 = load float, ptr %4818, align 4, !tbaa !53
  %4820 = insertelement <4 x float> %4816, float %4819, i64 3
  %4821 = fmul <4 x float> %4820, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4822 = insertelement <4 x i32> undef, i32 %t2552, i64 0
  %4823 = shufflevector <4 x i32> %4822, <4 x i32> undef, <4 x i32> zeroinitializer
  %4824 = add <4 x i32> %4823, <i32 -1, i32 0, i32 1, i32 2>
  %4825 = add <4 x i32> %4824, %t2554
  %4826 = sext <4 x i32> %4825 to <4 x i64>
  %4827 = extractelement <4 x i64> %4826, i64 0
  %4828 = getelementptr inbounds float, ptr %f7.host, i64 %4827
  %4829 = load float, ptr %4828, align 4, !tbaa !53
  %4830 = insertelement <4 x float> undef, float %4829, i64 0
  %4831 = extractelement <4 x i64> %4826, i64 1
  %4832 = getelementptr inbounds float, ptr %f7.host, i64 %4831
  %4833 = load float, ptr %4832, align 4, !tbaa !53
  %4834 = insertelement <4 x float> %4830, float %4833, i64 1
  %4835 = extractelement <4 x i64> %4826, i64 2
  %4836 = getelementptr inbounds float, ptr %f7.host, i64 %4835
  %4837 = load float, ptr %4836, align 4, !tbaa !53
  %4838 = insertelement <4 x float> %4834, float %4837, i64 2
  %4839 = extractelement <4 x i64> %4826, i64 3
  %4840 = getelementptr inbounds float, ptr %f7.host, i64 %4839
  %4841 = load float, ptr %4840, align 4, !tbaa !53
  %4842 = insertelement <4 x float> %4838, float %4841, i64 3
  %4843 = fmul <4 x float> %4842, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4844 = fadd <4 x float> %4821, %4843
  %4845 = fmul <4 x float> %4844, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4846 = insertelement <4 x i32> undef, i32 %t2551, i64 0
  %4847 = shufflevector <4 x i32> %4846, <4 x i32> undef, <4 x i32> zeroinitializer
  %4848 = add nsw <4 x i32> %4847, <i32 0, i32 1, i32 2, i32 3>
  %4849 = add nsw <4 x i32> %t2554, %4848
  %4850 = sext <4 x i32> %4849 to <4 x i64>
  %4851 = extractelement <4 x i64> %4850, i64 0
  %4852 = getelementptr inbounds float, ptr %f7.host, i64 %4851
  %4853 = load float, ptr %4852, align 4, !tbaa !53
  %4854 = insertelement <4 x float> undef, float %4853, i64 0
  %4855 = extractelement <4 x i64> %4850, i64 1
  %4856 = getelementptr inbounds float, ptr %f7.host, i64 %4855
  %4857 = load float, ptr %4856, align 4, !tbaa !53
  %4858 = insertelement <4 x float> %4854, float %4857, i64 1
  %4859 = extractelement <4 x i64> %4850, i64 2
  %4860 = getelementptr inbounds float, ptr %f7.host, i64 %4859
  %4861 = load float, ptr %4860, align 4, !tbaa !53
  %4862 = insertelement <4 x float> %4858, float %4861, i64 2
  %4863 = extractelement <4 x i64> %4850, i64 3
  %4864 = getelementptr inbounds float, ptr %f7.host, i64 %4863
  %4865 = load float, ptr %4864, align 4, !tbaa !53
  %4866 = insertelement <4 x float> %4862, float %4865, i64 3
  %4867 = fmul <4 x float> %4866, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4868 = insertelement <4 x i32> undef, i32 %t2548, i64 0
  %4869 = shufflevector <4 x i32> %4868, <4 x i32> undef, <4 x i32> zeroinitializer
  %4870 = add <4 x i32> %4869, <i32 -1, i32 0, i32 1, i32 2>
  %4871 = add <4 x i32> %4870, %t2554
  %4872 = sext <4 x i32> %4871 to <4 x i64>
  %4873 = extractelement <4 x i64> %4872, i64 0
  %4874 = getelementptr inbounds float, ptr %f7.host, i64 %4873
  %4875 = load float, ptr %4874, align 4, !tbaa !53
  %4876 = insertelement <4 x float> undef, float %4875, i64 0
  %4877 = extractelement <4 x i64> %4872, i64 1
  %4878 = getelementptr inbounds float, ptr %f7.host, i64 %4877
  %4879 = load float, ptr %4878, align 4, !tbaa !53
  %4880 = insertelement <4 x float> %4876, float %4879, i64 1
  %4881 = extractelement <4 x i64> %4872, i64 2
  %4882 = getelementptr inbounds float, ptr %f7.host, i64 %4881
  %4883 = load float, ptr %4882, align 4, !tbaa !53
  %4884 = insertelement <4 x float> %4880, float %4883, i64 2
  %4885 = extractelement <4 x i64> %4872, i64 3
  %4886 = getelementptr inbounds float, ptr %f7.host, i64 %4885
  %4887 = load float, ptr %4886, align 4, !tbaa !53
  %4888 = insertelement <4 x float> %4884, float %4887, i64 3
  %4889 = fmul <4 x float> %4888, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4890 = fadd <4 x float> %4867, %4889
  %4891 = fmul <4 x float> %4890, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4892 = fadd <4 x float> %4845, %4891
  %4893 = mul nsw <4 x i32> %4553, %824
  %4894 = add i32 %4540, 1
  %4895 = insertelement <4 x i32> undef, i32 %4894, i64 0
  %4896 = shufflevector <4 x i32> %4895, <4 x i32> undef, <4 x i32> zeroinitializer
  %4897 = add nsw <4 x i32> %4896, <i32 0, i32 2, i32 4, i32 6>
  %4898 = add nsw <4 x i32> %4893, %4897
  %4899 = sext <4 x i32> %4898 to <4 x i64>
  %4900 = extractelement <4 x i64> %4899, i64 0
  %4901 = getelementptr inbounds float, ptr %f6.host, i64 %4900
  %4902 = load float, ptr %4901, align 4, !tbaa !49
  %4903 = insertelement <4 x float> undef, float %4902, i64 0
  %4904 = extractelement <4 x i64> %4899, i64 1
  %4905 = getelementptr inbounds float, ptr %f6.host, i64 %4904
  %4906 = load float, ptr %4905, align 4, !tbaa !49
  %4907 = insertelement <4 x float> %4903, float %4906, i64 1
  %4908 = extractelement <4 x i64> %4899, i64 2
  %4909 = getelementptr inbounds float, ptr %f6.host, i64 %4908
  %4910 = load float, ptr %4909, align 4, !tbaa !49
  %4911 = insertelement <4 x float> %4907, float %4910, i64 2
  %4912 = extractelement <4 x i64> %4899, i64 3
  %4913 = getelementptr inbounds float, ptr %f6.host, i64 %4912
  %4914 = load float, ptr %4913, align 4, !tbaa !49
  %4915 = insertelement <4 x float> %4911, float %4914, i64 3
  %4916 = fsub <4 x float> %4915, %4892
  %4917 = fmul <4 x float> %t2543, %4916
  %4918 = add nsw <4 x i32> %t2549, %4802
  %4919 = sext <4 x i32> %4918 to <4 x i64>
  %4920 = extractelement <4 x i64> %4919, i64 0
  %4921 = getelementptr inbounds float, ptr %f7.host, i64 %4920
  %4922 = load float, ptr %4921, align 4, !tbaa !53
  %4923 = insertelement <4 x float> undef, float %4922, i64 0
  %4924 = extractelement <4 x i64> %4919, i64 1
  %4925 = getelementptr inbounds float, ptr %f7.host, i64 %4924
  %4926 = load float, ptr %4925, align 4, !tbaa !53
  %4927 = insertelement <4 x float> %4923, float %4926, i64 1
  %4928 = extractelement <4 x i64> %4919, i64 2
  %4929 = getelementptr inbounds float, ptr %f7.host, i64 %4928
  %4930 = load float, ptr %4929, align 4, !tbaa !53
  %4931 = insertelement <4 x float> %4927, float %4930, i64 2
  %4932 = extractelement <4 x i64> %4919, i64 3
  %4933 = getelementptr inbounds float, ptr %f7.host, i64 %4932
  %4934 = load float, ptr %4933, align 4, !tbaa !53
  %4935 = insertelement <4 x float> %4931, float %4934, i64 3
  %4936 = fmul <4 x float> %4935, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4937 = add <4 x i32> %t2549, %4823
  %4938 = add <4 x i32> %4937, <i32 -1, i32 0, i32 1, i32 2>
  %4939 = sext <4 x i32> %4938 to <4 x i64>
  %4940 = extractelement <4 x i64> %4939, i64 0
  %4941 = getelementptr inbounds float, ptr %f7.host, i64 %4940
  %4942 = load float, ptr %4941, align 4, !tbaa !53
  %4943 = insertelement <4 x float> undef, float %4942, i64 0
  %4944 = extractelement <4 x i64> %4939, i64 1
  %4945 = getelementptr inbounds float, ptr %f7.host, i64 %4944
  %4946 = load float, ptr %4945, align 4, !tbaa !53
  %4947 = insertelement <4 x float> %4943, float %4946, i64 1
  %4948 = extractelement <4 x i64> %4939, i64 2
  %4949 = getelementptr inbounds float, ptr %f7.host, i64 %4948
  %4950 = load float, ptr %4949, align 4, !tbaa !53
  %4951 = insertelement <4 x float> %4947, float %4950, i64 2
  %4952 = extractelement <4 x i64> %4939, i64 3
  %4953 = getelementptr inbounds float, ptr %f7.host, i64 %4952
  %4954 = load float, ptr %4953, align 4, !tbaa !53
  %4955 = insertelement <4 x float> %4951, float %4954, i64 3
  %4956 = fmul <4 x float> %4955, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4957 = fadd <4 x float> %4936, %4956
  %4958 = fmul <4 x float> %4957, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4959 = add nsw <4 x i32> %t2549, %4848
  %4960 = sext <4 x i32> %4959 to <4 x i64>
  %4961 = extractelement <4 x i64> %4960, i64 0
  %4962 = getelementptr inbounds float, ptr %f7.host, i64 %4961
  %4963 = load float, ptr %4962, align 4, !tbaa !53
  %4964 = insertelement <4 x float> undef, float %4963, i64 0
  %4965 = extractelement <4 x i64> %4960, i64 1
  %4966 = getelementptr inbounds float, ptr %f7.host, i64 %4965
  %4967 = load float, ptr %4966, align 4, !tbaa !53
  %4968 = insertelement <4 x float> %4964, float %4967, i64 1
  %4969 = extractelement <4 x i64> %4960, i64 2
  %4970 = getelementptr inbounds float, ptr %f7.host, i64 %4969
  %4971 = load float, ptr %4970, align 4, !tbaa !53
  %4972 = insertelement <4 x float> %4968, float %4971, i64 2
  %4973 = extractelement <4 x i64> %4960, i64 3
  %4974 = getelementptr inbounds float, ptr %f7.host, i64 %4973
  %4975 = load float, ptr %4974, align 4, !tbaa !53
  %4976 = insertelement <4 x float> %4972, float %4975, i64 3
  %4977 = fmul <4 x float> %4976, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4978 = add <4 x i32> %t2549, %4869
  %4979 = add <4 x i32> %4978, <i32 -1, i32 0, i32 1, i32 2>
  %4980 = sext <4 x i32> %4979 to <4 x i64>
  %4981 = extractelement <4 x i64> %4980, i64 0
  %4982 = getelementptr inbounds float, ptr %f7.host, i64 %4981
  %4983 = load float, ptr %4982, align 4, !tbaa !53
  %4984 = insertelement <4 x float> undef, float %4983, i64 0
  %4985 = extractelement <4 x i64> %4980, i64 1
  %4986 = getelementptr inbounds float, ptr %f7.host, i64 %4985
  %4987 = load float, ptr %4986, align 4, !tbaa !53
  %4988 = insertelement <4 x float> %4984, float %4987, i64 1
  %4989 = extractelement <4 x i64> %4980, i64 2
  %4990 = getelementptr inbounds float, ptr %f7.host, i64 %4989
  %4991 = load float, ptr %4990, align 4, !tbaa !53
  %4992 = insertelement <4 x float> %4988, float %4991, i64 2
  %4993 = extractelement <4 x i64> %4980, i64 3
  %4994 = getelementptr inbounds float, ptr %f7.host, i64 %4993
  %4995 = load float, ptr %4994, align 4, !tbaa !53
  %4996 = insertelement <4 x float> %4992, float %4995, i64 3
  %4997 = fmul <4 x float> %4996, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4998 = fadd <4 x float> %4977, %4997
  %4999 = fmul <4 x float> %4998, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5000 = fadd <4 x float> %4958, %4999
  %5001 = mul nsw <4 x i32> %t2546, %824
  %5002 = add nsw <4 x i32> %5001, %4897
  %5003 = sext <4 x i32> %5002 to <4 x i64>
  %5004 = extractelement <4 x i64> %5003, i64 0
  %5005 = getelementptr inbounds float, ptr %f6.host, i64 %5004
  %5006 = load float, ptr %5005, align 4, !tbaa !49
  %5007 = insertelement <4 x float> undef, float %5006, i64 0
  %5008 = extractelement <4 x i64> %5003, i64 1
  %5009 = getelementptr inbounds float, ptr %f6.host, i64 %5008
  %5010 = load float, ptr %5009, align 4, !tbaa !49
  %5011 = insertelement <4 x float> %5007, float %5010, i64 1
  %5012 = extractelement <4 x i64> %5003, i64 2
  %5013 = getelementptr inbounds float, ptr %f6.host, i64 %5012
  %5014 = load float, ptr %5013, align 4, !tbaa !49
  %5015 = insertelement <4 x float> %5011, float %5014, i64 2
  %5016 = extractelement <4 x i64> %5003, i64 3
  %5017 = getelementptr inbounds float, ptr %f6.host, i64 %5016
  %5018 = load float, ptr %5017, align 4, !tbaa !49
  %5019 = insertelement <4 x float> %5015, float %5018, i64 3
  %5020 = fsub <4 x float> %5019, %5000
  %5021 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2543
  %5022 = fmul <4 x float> %5021, %5020
  %5023 = fadd <4 x float> %4917, %5022
  %narrow138 = sub nsw i32 %4547, %f129.v3.min_realized
  %5024 = sext i32 %narrow138 to i64
  %5025 = add nsw i64 %5024, %4521
  %5026 = getelementptr inbounds float, ptr %128, i64 %5025
  %5027 = load <4 x float>, ptr %5026, align 4, !tbaa !63
  %5028 = fmul <4 x float> %5027, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5029 = sext i32 %t2540 to i64
  %5030 = sub nsw i64 %5029, %825
  %5031 = add nsw i64 %4522, %5030
  %5032 = getelementptr inbounds float, ptr %128, i64 %5031
  %5033 = load <4 x float>, ptr %5032, align 4, !tbaa !63
  %5034 = fmul <4 x float> %5033, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5035 = fadd <4 x float> %5028, %5034
  %5036 = fmul <4 x float> %5035, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5037 = add nsw i64 %5024, %4523
  %5038 = getelementptr inbounds float, ptr %128, i64 %5037
  %5039 = load <4 x float>, ptr %5038, align 4, !tbaa !63
  %5040 = fmul <4 x float> %5039, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5041 = add nsw i64 %4524, %5030
  %5042 = getelementptr inbounds float, ptr %128, i64 %5041
  %5043 = load <4 x float>, ptr %5042, align 4, !tbaa !63
  %5044 = fmul <4 x float> %5043, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5045 = fadd <4 x float> %5040, %5044
  %5046 = fmul <4 x float> %5045, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5047 = fadd <4 x float> %5036, %5046
  %5048 = fadd <4 x float> %5023, %5047
  %5049 = shufflevector <4 x float> %4799, <4 x float> %5048, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %5050 = sext i32 %4528 to i64
  %5051 = add nsw i64 %4527, %5050
  %5052 = getelementptr inbounds float, ptr %154, i64 %5051
  store <8 x float> %5049, ptr %5052, align 4, !tbaa !65
  %lsr.iv.next290 = add nsw i32 %lsr.iv289, -1
  %lsr.iv.next292 = add nuw i32 %lsr.iv291, 8
  %.not140 = icmp eq i32 %lsr.iv.next290, 0
  br i1 %.not140, label %"end for f128.s0.v3.v338", label %"for f128.s0.v3.v337"

"end for f128.s0.v3.v338":                        ; preds = %"for f128.s0.v3.v337", %true_bb34
  br i1 %.not129, label %"produce f12745", label %"for f128.s0.v3.v341.preheader", !prof !4

"for f128.s0.v3.v341.preheader":                  ; preds = %"end for f128.s0.v3.v338"
  %5053 = trunc i64 %3406 to i32
  %5054 = add i32 %5053, 21
  %5055 = ashr i32 %5054, 3
  %5056 = shl nsw i32 %5055, 1
  %5057 = and i32 %5056, 2
  %5058 = ashr i32 %5054, 4
  %t2555 = add nsw i32 %5057, %5058
  %5059 = sub nsw i32 %5055, %f74.v4.min_realized
  %5060 = mul nsw i32 %5059, %819
  %t2558 = add nsw i32 %3206, %5060
  %5061 = sext i32 %t2558 to i64
  %5062 = getelementptr inbounds float, ptr %f74.host, i64 %5061
  %5063 = load <4 x float>, ptr %5062, align 4, !tbaa !55
  %5064 = add nsw i64 %5061, 4
  %5065 = getelementptr inbounds float, ptr %f74.host, i64 %5064
  %5066 = load <4 x float>, ptr %5065, align 4, !tbaa !55
  %5067 = shufflevector <4 x float> %5063, <4 x float> %5066, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2559 = fmul <4 x float> %232, %5067
  %a918 = fptosi <4 x float> %t2559 to <4 x i32>
  %a921 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a918)
  %5068 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a921, <4 x i32> zeroinitializer)
  %5069 = sitofp <4 x i32> %5068 to <4 x float>
  %t2561 = fsub <4 x float> %t2559, %5069
  %5070 = add nsw i32 %t2555, %820
  %t2563 = mul nsw i32 %5070, %117
  %5071 = sub nsw i32 %5058, %225
  %t2565 = mul nsw i32 %5071, %117
  %5072 = sub nsw i32 %5055, %f6.v4.min_realized
  %5073 = mul nsw i32 %5072, %f6.stride.1
  %t2566 = add nsw i32 %5073, %3207
  %t2568 = sub nsw <4 x i32> %5068, %241
  %5074 = add i32 %t2555, %821
  %5075 = mul nsw i32 %5074, %f7.stride.1
  %t2571 = add nsw i32 %5075, %3208
  %t2572 = mul nsw <4 x i32> %t2568, %248
  %t2574 = add nsw i32 %5075, %3209
  %5076 = sub nsw i32 %5058, %f7.v4.min_realized
  %5077 = mul nsw i32 %5076, %f7.stride.1
  %t2576 = add nsw i32 %5077, %3208
  %t2577 = add nsw i32 %5077, %3209
  %5078 = add nsw <4 x i32> %t2568, <i32 1, i32 1, i32 1, i32 1>
  %t2578 = mul nsw <4 x i32> %5078, %248
  %5079 = shufflevector <4 x float> %5063, <4 x float> %5066, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2580 = fmul <4 x float> %232, %5079
  %a922 = fptosi <4 x float> %t2580 to <4 x i32>
  %a925 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a922)
  %5080 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a925, <4 x i32> zeroinitializer)
  %5081 = sitofp <4 x i32> %5080 to <4 x float>
  %t2582 = fsub <4 x float> %t2580, %5081
  %t2585 = sub nsw <4 x i32> %5080, %241
  %t2587 = add nsw i32 %5075, %3214
  %t2588 = mul nsw <4 x i32> %t2585, %248
  %t2590 = add nsw i32 %5075, %3215
  %t2591 = add nsw i32 %5077, %3214
  %t2592 = add nsw i32 %5077, %3215
  %5082 = add nsw <4 x i32> %t2585, <i32 1, i32 1, i32 1, i32 1>
  %t2593 = mul nsw <4 x i32> %5082, %248
  %5083 = insertelement <4 x i32> undef, i32 %t2577, i64 0
  %5084 = shufflevector <4 x i32> %5083, <4 x i32> undef, <4 x i32> zeroinitializer
  %5085 = add nsw <4 x i32> %5084, <i32 0, i32 1, i32 2, i32 3>
  %5086 = add nsw <4 x i32> %t2578, %5085
  %5087 = sext <4 x i32> %5086 to <4 x i64>
  %5088 = extractelement <4 x i64> %5087, i64 0
  %5089 = getelementptr inbounds float, ptr %f7.host, i64 %5088
  %5090 = load float, ptr %5089, align 4, !tbaa !53
  %5091 = insertelement <4 x float> undef, float %5090, i64 0
  %5092 = extractelement <4 x i64> %5087, i64 1
  %5093 = getelementptr inbounds float, ptr %f7.host, i64 %5092
  %5094 = load float, ptr %5093, align 4, !tbaa !53
  %5095 = insertelement <4 x float> %5091, float %5094, i64 1
  %5096 = extractelement <4 x i64> %5087, i64 2
  %5097 = getelementptr inbounds float, ptr %f7.host, i64 %5096
  %5098 = load float, ptr %5097, align 4, !tbaa !53
  %5099 = insertelement <4 x float> %5095, float %5098, i64 2
  %5100 = extractelement <4 x i64> %5087, i64 3
  %5101 = getelementptr inbounds float, ptr %f7.host, i64 %5100
  %5102 = load float, ptr %5101, align 4, !tbaa !53
  %5103 = insertelement <4 x float> %5099, float %5102, i64 3
  %5104 = fmul <4 x float> %5103, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5105 = insertelement <4 x i32> undef, i32 %t2576, i64 0
  %5106 = shufflevector <4 x i32> %5105, <4 x i32> undef, <4 x i32> zeroinitializer
  %5107 = add <4 x i32> %5106, <i32 -1, i32 0, i32 1, i32 2>
  %5108 = add <4 x i32> %5107, %t2578
  %5109 = sext <4 x i32> %5108 to <4 x i64>
  %5110 = extractelement <4 x i64> %5109, i64 0
  %5111 = getelementptr inbounds float, ptr %f7.host, i64 %5110
  %5112 = load float, ptr %5111, align 4, !tbaa !53
  %5113 = insertelement <4 x float> undef, float %5112, i64 0
  %5114 = extractelement <4 x i64> %5109, i64 1
  %5115 = getelementptr inbounds float, ptr %f7.host, i64 %5114
  %5116 = load float, ptr %5115, align 4, !tbaa !53
  %5117 = insertelement <4 x float> %5113, float %5116, i64 1
  %5118 = extractelement <4 x i64> %5109, i64 2
  %5119 = getelementptr inbounds float, ptr %f7.host, i64 %5118
  %5120 = load float, ptr %5119, align 4, !tbaa !53
  %5121 = insertelement <4 x float> %5117, float %5120, i64 2
  %5122 = extractelement <4 x i64> %5109, i64 3
  %5123 = getelementptr inbounds float, ptr %f7.host, i64 %5122
  %5124 = load float, ptr %5123, align 4, !tbaa !53
  %5125 = insertelement <4 x float> %5121, float %5124, i64 3
  %5126 = fmul <4 x float> %5125, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5127 = fadd <4 x float> %5104, %5126
  %5128 = fmul <4 x float> %5127, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5129 = insertelement <4 x i32> undef, i32 %t2574, i64 0
  %5130 = shufflevector <4 x i32> %5129, <4 x i32> undef, <4 x i32> zeroinitializer
  %5131 = add nsw <4 x i32> %5130, <i32 0, i32 1, i32 2, i32 3>
  %5132 = add nsw <4 x i32> %t2578, %5131
  %5133 = sext <4 x i32> %5132 to <4 x i64>
  %5134 = extractelement <4 x i64> %5133, i64 0
  %5135 = getelementptr inbounds float, ptr %f7.host, i64 %5134
  %5136 = load float, ptr %5135, align 4, !tbaa !53
  %5137 = insertelement <4 x float> undef, float %5136, i64 0
  %5138 = extractelement <4 x i64> %5133, i64 1
  %5139 = getelementptr inbounds float, ptr %f7.host, i64 %5138
  %5140 = load float, ptr %5139, align 4, !tbaa !53
  %5141 = insertelement <4 x float> %5137, float %5140, i64 1
  %5142 = extractelement <4 x i64> %5133, i64 2
  %5143 = getelementptr inbounds float, ptr %f7.host, i64 %5142
  %5144 = load float, ptr %5143, align 4, !tbaa !53
  %5145 = insertelement <4 x float> %5141, float %5144, i64 2
  %5146 = extractelement <4 x i64> %5133, i64 3
  %5147 = getelementptr inbounds float, ptr %f7.host, i64 %5146
  %5148 = load float, ptr %5147, align 4, !tbaa !53
  %5149 = insertelement <4 x float> %5145, float %5148, i64 3
  %5150 = fmul <4 x float> %5149, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5151 = insertelement <4 x i32> undef, i32 %t2571, i64 0
  %5152 = shufflevector <4 x i32> %5151, <4 x i32> undef, <4 x i32> zeroinitializer
  %5153 = add <4 x i32> %5152, <i32 -1, i32 0, i32 1, i32 2>
  %5154 = add <4 x i32> %5153, %t2578
  %5155 = sext <4 x i32> %5154 to <4 x i64>
  %5156 = extractelement <4 x i64> %5155, i64 0
  %5157 = getelementptr inbounds float, ptr %f7.host, i64 %5156
  %5158 = load float, ptr %5157, align 4, !tbaa !53
  %5159 = insertelement <4 x float> undef, float %5158, i64 0
  %5160 = extractelement <4 x i64> %5155, i64 1
  %5161 = getelementptr inbounds float, ptr %f7.host, i64 %5160
  %5162 = load float, ptr %5161, align 4, !tbaa !53
  %5163 = insertelement <4 x float> %5159, float %5162, i64 1
  %5164 = extractelement <4 x i64> %5155, i64 2
  %5165 = getelementptr inbounds float, ptr %f7.host, i64 %5164
  %5166 = load float, ptr %5165, align 4, !tbaa !53
  %5167 = insertelement <4 x float> %5163, float %5166, i64 2
  %5168 = extractelement <4 x i64> %5155, i64 3
  %5169 = getelementptr inbounds float, ptr %f7.host, i64 %5168
  %5170 = load float, ptr %5169, align 4, !tbaa !53
  %5171 = insertelement <4 x float> %5167, float %5170, i64 3
  %5172 = fmul <4 x float> %5171, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5173 = fadd <4 x float> %5150, %5172
  %5174 = fmul <4 x float> %5173, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5175 = fadd <4 x float> %5128, %5174
  %5176 = mul nsw <4 x i32> %5078, %824
  %5177 = insertelement <4 x i32> undef, i32 %t2566, i64 0
  %5178 = shufflevector <4 x i32> %5177, <4 x i32> undef, <4 x i32> zeroinitializer
  %5179 = add nsw <4 x i32> %5178, <i32 0, i32 2, i32 4, i32 6>
  %5180 = add nsw <4 x i32> %5176, %5179
  %5181 = sext <4 x i32> %5180 to <4 x i64>
  %5182 = extractelement <4 x i64> %5181, i64 0
  %5183 = getelementptr inbounds float, ptr %f6.host, i64 %5182
  %5184 = load float, ptr %5183, align 4, !tbaa !49
  %5185 = insertelement <4 x float> undef, float %5184, i64 0
  %5186 = extractelement <4 x i64> %5181, i64 1
  %5187 = getelementptr inbounds float, ptr %f6.host, i64 %5186
  %5188 = load float, ptr %5187, align 4, !tbaa !49
  %5189 = insertelement <4 x float> %5185, float %5188, i64 1
  %5190 = extractelement <4 x i64> %5181, i64 2
  %5191 = getelementptr inbounds float, ptr %f6.host, i64 %5190
  %5192 = load float, ptr %5191, align 4, !tbaa !49
  %5193 = insertelement <4 x float> %5189, float %5192, i64 2
  %5194 = extractelement <4 x i64> %5181, i64 3
  %5195 = getelementptr inbounds float, ptr %f6.host, i64 %5194
  %5196 = load float, ptr %5195, align 4, !tbaa !49
  %5197 = insertelement <4 x float> %5193, float %5196, i64 3
  %5198 = fsub <4 x float> %5197, %5175
  %5199 = fmul <4 x float> %t2561, %5198
  %5200 = add nsw <4 x i32> %t2572, %5085
  %5201 = sext <4 x i32> %5200 to <4 x i64>
  %5202 = extractelement <4 x i64> %5201, i64 0
  %5203 = getelementptr inbounds float, ptr %f7.host, i64 %5202
  %5204 = load float, ptr %5203, align 4, !tbaa !53
  %5205 = insertelement <4 x float> undef, float %5204, i64 0
  %5206 = extractelement <4 x i64> %5201, i64 1
  %5207 = getelementptr inbounds float, ptr %f7.host, i64 %5206
  %5208 = load float, ptr %5207, align 4, !tbaa !53
  %5209 = insertelement <4 x float> %5205, float %5208, i64 1
  %5210 = extractelement <4 x i64> %5201, i64 2
  %5211 = getelementptr inbounds float, ptr %f7.host, i64 %5210
  %5212 = load float, ptr %5211, align 4, !tbaa !53
  %5213 = insertelement <4 x float> %5209, float %5212, i64 2
  %5214 = extractelement <4 x i64> %5201, i64 3
  %5215 = getelementptr inbounds float, ptr %f7.host, i64 %5214
  %5216 = load float, ptr %5215, align 4, !tbaa !53
  %5217 = insertelement <4 x float> %5213, float %5216, i64 3
  %5218 = fmul <4 x float> %5217, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5219 = add <4 x i32> %5107, %t2572
  %5220 = sext <4 x i32> %5219 to <4 x i64>
  %5221 = extractelement <4 x i64> %5220, i64 0
  %5222 = getelementptr inbounds float, ptr %f7.host, i64 %5221
  %5223 = load float, ptr %5222, align 4, !tbaa !53
  %5224 = insertelement <4 x float> undef, float %5223, i64 0
  %5225 = extractelement <4 x i64> %5220, i64 1
  %5226 = getelementptr inbounds float, ptr %f7.host, i64 %5225
  %5227 = load float, ptr %5226, align 4, !tbaa !53
  %5228 = insertelement <4 x float> %5224, float %5227, i64 1
  %5229 = extractelement <4 x i64> %5220, i64 2
  %5230 = getelementptr inbounds float, ptr %f7.host, i64 %5229
  %5231 = load float, ptr %5230, align 4, !tbaa !53
  %5232 = insertelement <4 x float> %5228, float %5231, i64 2
  %5233 = extractelement <4 x i64> %5220, i64 3
  %5234 = getelementptr inbounds float, ptr %f7.host, i64 %5233
  %5235 = load float, ptr %5234, align 4, !tbaa !53
  %5236 = insertelement <4 x float> %5232, float %5235, i64 3
  %5237 = fmul <4 x float> %5236, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5238 = fadd <4 x float> %5218, %5237
  %5239 = fmul <4 x float> %5238, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5240 = add nsw <4 x i32> %t2572, %5131
  %5241 = sext <4 x i32> %5240 to <4 x i64>
  %5242 = extractelement <4 x i64> %5241, i64 0
  %5243 = getelementptr inbounds float, ptr %f7.host, i64 %5242
  %5244 = load float, ptr %5243, align 4, !tbaa !53
  %5245 = insertelement <4 x float> undef, float %5244, i64 0
  %5246 = extractelement <4 x i64> %5241, i64 1
  %5247 = getelementptr inbounds float, ptr %f7.host, i64 %5246
  %5248 = load float, ptr %5247, align 4, !tbaa !53
  %5249 = insertelement <4 x float> %5245, float %5248, i64 1
  %5250 = extractelement <4 x i64> %5241, i64 2
  %5251 = getelementptr inbounds float, ptr %f7.host, i64 %5250
  %5252 = load float, ptr %5251, align 4, !tbaa !53
  %5253 = insertelement <4 x float> %5249, float %5252, i64 2
  %5254 = extractelement <4 x i64> %5241, i64 3
  %5255 = getelementptr inbounds float, ptr %f7.host, i64 %5254
  %5256 = load float, ptr %5255, align 4, !tbaa !53
  %5257 = insertelement <4 x float> %5253, float %5256, i64 3
  %5258 = fmul <4 x float> %5257, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5259 = add <4 x i32> %5153, %t2572
  %5260 = sext <4 x i32> %5259 to <4 x i64>
  %5261 = extractelement <4 x i64> %5260, i64 0
  %5262 = getelementptr inbounds float, ptr %f7.host, i64 %5261
  %5263 = load float, ptr %5262, align 4, !tbaa !53
  %5264 = insertelement <4 x float> undef, float %5263, i64 0
  %5265 = extractelement <4 x i64> %5260, i64 1
  %5266 = getelementptr inbounds float, ptr %f7.host, i64 %5265
  %5267 = load float, ptr %5266, align 4, !tbaa !53
  %5268 = insertelement <4 x float> %5264, float %5267, i64 1
  %5269 = extractelement <4 x i64> %5260, i64 2
  %5270 = getelementptr inbounds float, ptr %f7.host, i64 %5269
  %5271 = load float, ptr %5270, align 4, !tbaa !53
  %5272 = insertelement <4 x float> %5268, float %5271, i64 2
  %5273 = extractelement <4 x i64> %5260, i64 3
  %5274 = getelementptr inbounds float, ptr %f7.host, i64 %5273
  %5275 = load float, ptr %5274, align 4, !tbaa !53
  %5276 = insertelement <4 x float> %5272, float %5275, i64 3
  %5277 = fmul <4 x float> %5276, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5278 = fadd <4 x float> %5258, %5277
  %5279 = fmul <4 x float> %5278, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5280 = fadd <4 x float> %5239, %5279
  %5281 = mul nsw <4 x i32> %t2568, %824
  %5282 = add nsw <4 x i32> %5281, %5179
  %5283 = sext <4 x i32> %5282 to <4 x i64>
  %5284 = extractelement <4 x i64> %5283, i64 0
  %5285 = getelementptr inbounds float, ptr %f6.host, i64 %5284
  %5286 = load float, ptr %5285, align 4, !tbaa !49
  %5287 = insertelement <4 x float> undef, float %5286, i64 0
  %5288 = extractelement <4 x i64> %5283, i64 1
  %5289 = getelementptr inbounds float, ptr %f6.host, i64 %5288
  %5290 = load float, ptr %5289, align 4, !tbaa !49
  %5291 = insertelement <4 x float> %5287, float %5290, i64 1
  %5292 = extractelement <4 x i64> %5283, i64 2
  %5293 = getelementptr inbounds float, ptr %f6.host, i64 %5292
  %5294 = load float, ptr %5293, align 4, !tbaa !49
  %5295 = insertelement <4 x float> %5291, float %5294, i64 2
  %5296 = extractelement <4 x i64> %5283, i64 3
  %5297 = getelementptr inbounds float, ptr %f6.host, i64 %5296
  %5298 = load float, ptr %5297, align 4, !tbaa !49
  %5299 = insertelement <4 x float> %5295, float %5298, i64 3
  %5300 = fsub <4 x float> %5299, %5280
  %5301 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2561
  %5302 = fmul <4 x float> %5301, %5300
  %5303 = fadd <4 x float> %5199, %5302
  %5304 = sext i32 %t2565 to i64
  %5305 = add nsw i64 %5304, %3216
  %5306 = getelementptr inbounds float, ptr %128, i64 %5305
  %5307 = load <4 x float>, ptr %5306, align 4, !tbaa !63
  %5308 = fmul <4 x float> %5307, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5309 = add nsw i64 %3218, %5304
  %5310 = getelementptr inbounds float, ptr %128, i64 %5309
  %5311 = load <4 x float>, ptr %5310, align 4, !tbaa !63
  %5312 = fmul <4 x float> %5311, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5313 = fadd <4 x float> %5308, %5312
  %5314 = fmul <4 x float> %5313, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5315 = sext i32 %t2563 to i64
  %5316 = add nsw i64 %5315, %3216
  %5317 = getelementptr inbounds float, ptr %128, i64 %5316
  %5318 = load <4 x float>, ptr %5317, align 4, !tbaa !63
  %5319 = fmul <4 x float> %5318, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5320 = add nsw i64 %3218, %5315
  %5321 = getelementptr inbounds float, ptr %128, i64 %5320
  %5322 = load <4 x float>, ptr %5321, align 4, !tbaa !63
  %5323 = fmul <4 x float> %5322, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5324 = fadd <4 x float> %5319, %5323
  %5325 = fmul <4 x float> %5324, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5326 = fadd <4 x float> %5314, %5325
  %5327 = fadd <4 x float> %5303, %5326
  %5328 = insertelement <4 x i32> undef, i32 %t2592, i64 0
  %5329 = shufflevector <4 x i32> %5328, <4 x i32> undef, <4 x i32> zeroinitializer
  %5330 = add nsw <4 x i32> %5329, <i32 0, i32 1, i32 2, i32 3>
  %5331 = add nsw <4 x i32> %t2593, %5330
  %5332 = sext <4 x i32> %5331 to <4 x i64>
  %5333 = extractelement <4 x i64> %5332, i64 0
  %5334 = getelementptr inbounds float, ptr %f7.host, i64 %5333
  %5335 = load float, ptr %5334, align 4, !tbaa !53
  %5336 = insertelement <4 x float> undef, float %5335, i64 0
  %5337 = extractelement <4 x i64> %5332, i64 1
  %5338 = getelementptr inbounds float, ptr %f7.host, i64 %5337
  %5339 = load float, ptr %5338, align 4, !tbaa !53
  %5340 = insertelement <4 x float> %5336, float %5339, i64 1
  %5341 = extractelement <4 x i64> %5332, i64 2
  %5342 = getelementptr inbounds float, ptr %f7.host, i64 %5341
  %5343 = load float, ptr %5342, align 4, !tbaa !53
  %5344 = insertelement <4 x float> %5340, float %5343, i64 2
  %5345 = extractelement <4 x i64> %5332, i64 3
  %5346 = getelementptr inbounds float, ptr %f7.host, i64 %5345
  %5347 = load float, ptr %5346, align 4, !tbaa !53
  %5348 = insertelement <4 x float> %5344, float %5347, i64 3
  %5349 = fmul <4 x float> %5348, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5350 = insertelement <4 x i32> undef, i32 %t2591, i64 0
  %5351 = shufflevector <4 x i32> %5350, <4 x i32> undef, <4 x i32> zeroinitializer
  %5352 = add <4 x i32> %5351, <i32 -1, i32 0, i32 1, i32 2>
  %5353 = add <4 x i32> %5352, %t2593
  %5354 = sext <4 x i32> %5353 to <4 x i64>
  %5355 = extractelement <4 x i64> %5354, i64 0
  %5356 = getelementptr inbounds float, ptr %f7.host, i64 %5355
  %5357 = load float, ptr %5356, align 4, !tbaa !53
  %5358 = insertelement <4 x float> undef, float %5357, i64 0
  %5359 = extractelement <4 x i64> %5354, i64 1
  %5360 = getelementptr inbounds float, ptr %f7.host, i64 %5359
  %5361 = load float, ptr %5360, align 4, !tbaa !53
  %5362 = insertelement <4 x float> %5358, float %5361, i64 1
  %5363 = extractelement <4 x i64> %5354, i64 2
  %5364 = getelementptr inbounds float, ptr %f7.host, i64 %5363
  %5365 = load float, ptr %5364, align 4, !tbaa !53
  %5366 = insertelement <4 x float> %5362, float %5365, i64 2
  %5367 = extractelement <4 x i64> %5354, i64 3
  %5368 = getelementptr inbounds float, ptr %f7.host, i64 %5367
  %5369 = load float, ptr %5368, align 4, !tbaa !53
  %5370 = insertelement <4 x float> %5366, float %5369, i64 3
  %5371 = fmul <4 x float> %5370, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5372 = fadd <4 x float> %5349, %5371
  %5373 = fmul <4 x float> %5372, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5374 = insertelement <4 x i32> undef, i32 %t2590, i64 0
  %5375 = shufflevector <4 x i32> %5374, <4 x i32> undef, <4 x i32> zeroinitializer
  %5376 = add nsw <4 x i32> %5375, <i32 0, i32 1, i32 2, i32 3>
  %5377 = add nsw <4 x i32> %t2593, %5376
  %5378 = sext <4 x i32> %5377 to <4 x i64>
  %5379 = extractelement <4 x i64> %5378, i64 0
  %5380 = getelementptr inbounds float, ptr %f7.host, i64 %5379
  %5381 = load float, ptr %5380, align 4, !tbaa !53
  %5382 = insertelement <4 x float> undef, float %5381, i64 0
  %5383 = extractelement <4 x i64> %5378, i64 1
  %5384 = getelementptr inbounds float, ptr %f7.host, i64 %5383
  %5385 = load float, ptr %5384, align 4, !tbaa !53
  %5386 = insertelement <4 x float> %5382, float %5385, i64 1
  %5387 = extractelement <4 x i64> %5378, i64 2
  %5388 = getelementptr inbounds float, ptr %f7.host, i64 %5387
  %5389 = load float, ptr %5388, align 4, !tbaa !53
  %5390 = insertelement <4 x float> %5386, float %5389, i64 2
  %5391 = extractelement <4 x i64> %5378, i64 3
  %5392 = getelementptr inbounds float, ptr %f7.host, i64 %5391
  %5393 = load float, ptr %5392, align 4, !tbaa !53
  %5394 = insertelement <4 x float> %5390, float %5393, i64 3
  %5395 = fmul <4 x float> %5394, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5396 = insertelement <4 x i32> undef, i32 %t2587, i64 0
  %5397 = shufflevector <4 x i32> %5396, <4 x i32> undef, <4 x i32> zeroinitializer
  %5398 = add <4 x i32> %5397, <i32 -1, i32 0, i32 1, i32 2>
  %5399 = add <4 x i32> %5398, %t2593
  %5400 = sext <4 x i32> %5399 to <4 x i64>
  %5401 = extractelement <4 x i64> %5400, i64 0
  %5402 = getelementptr inbounds float, ptr %f7.host, i64 %5401
  %5403 = load float, ptr %5402, align 4, !tbaa !53
  %5404 = insertelement <4 x float> undef, float %5403, i64 0
  %5405 = extractelement <4 x i64> %5400, i64 1
  %5406 = getelementptr inbounds float, ptr %f7.host, i64 %5405
  %5407 = load float, ptr %5406, align 4, !tbaa !53
  %5408 = insertelement <4 x float> %5404, float %5407, i64 1
  %5409 = extractelement <4 x i64> %5400, i64 2
  %5410 = getelementptr inbounds float, ptr %f7.host, i64 %5409
  %5411 = load float, ptr %5410, align 4, !tbaa !53
  %5412 = insertelement <4 x float> %5408, float %5411, i64 2
  %5413 = extractelement <4 x i64> %5400, i64 3
  %5414 = getelementptr inbounds float, ptr %f7.host, i64 %5413
  %5415 = load float, ptr %5414, align 4, !tbaa !53
  %5416 = insertelement <4 x float> %5412, float %5415, i64 3
  %5417 = fmul <4 x float> %5416, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5418 = fadd <4 x float> %5395, %5417
  %5419 = fmul <4 x float> %5418, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5420 = fadd <4 x float> %5373, %5419
  %5421 = mul nsw <4 x i32> %5082, %824
  %5422 = add nsw i32 %t2566, 1
  %5423 = insertelement <4 x i32> undef, i32 %5422, i64 0
  %5424 = shufflevector <4 x i32> %5423, <4 x i32> undef, <4 x i32> zeroinitializer
  %5425 = add nsw <4 x i32> %5424, <i32 0, i32 2, i32 4, i32 6>
  %5426 = add nsw <4 x i32> %5421, %5425
  %5427 = sext <4 x i32> %5426 to <4 x i64>
  %5428 = extractelement <4 x i64> %5427, i64 0
  %5429 = getelementptr inbounds float, ptr %f6.host, i64 %5428
  %5430 = load float, ptr %5429, align 4, !tbaa !49
  %5431 = insertelement <4 x float> undef, float %5430, i64 0
  %5432 = extractelement <4 x i64> %5427, i64 1
  %5433 = getelementptr inbounds float, ptr %f6.host, i64 %5432
  %5434 = load float, ptr %5433, align 4, !tbaa !49
  %5435 = insertelement <4 x float> %5431, float %5434, i64 1
  %5436 = extractelement <4 x i64> %5427, i64 2
  %5437 = getelementptr inbounds float, ptr %f6.host, i64 %5436
  %5438 = load float, ptr %5437, align 4, !tbaa !49
  %5439 = insertelement <4 x float> %5435, float %5438, i64 2
  %5440 = extractelement <4 x i64> %5427, i64 3
  %5441 = getelementptr inbounds float, ptr %f6.host, i64 %5440
  %5442 = load float, ptr %5441, align 4, !tbaa !49
  %5443 = insertelement <4 x float> %5439, float %5442, i64 3
  %5444 = fsub <4 x float> %5443, %5420
  %5445 = fmul <4 x float> %t2582, %5444
  %5446 = add nsw <4 x i32> %t2588, %5330
  %5447 = sext <4 x i32> %5446 to <4 x i64>
  %5448 = extractelement <4 x i64> %5447, i64 0
  %5449 = getelementptr inbounds float, ptr %f7.host, i64 %5448
  %5450 = load float, ptr %5449, align 4, !tbaa !53
  %5451 = insertelement <4 x float> undef, float %5450, i64 0
  %5452 = extractelement <4 x i64> %5447, i64 1
  %5453 = getelementptr inbounds float, ptr %f7.host, i64 %5452
  %5454 = load float, ptr %5453, align 4, !tbaa !53
  %5455 = insertelement <4 x float> %5451, float %5454, i64 1
  %5456 = extractelement <4 x i64> %5447, i64 2
  %5457 = getelementptr inbounds float, ptr %f7.host, i64 %5456
  %5458 = load float, ptr %5457, align 4, !tbaa !53
  %5459 = insertelement <4 x float> %5455, float %5458, i64 2
  %5460 = extractelement <4 x i64> %5447, i64 3
  %5461 = getelementptr inbounds float, ptr %f7.host, i64 %5460
  %5462 = load float, ptr %5461, align 4, !tbaa !53
  %5463 = insertelement <4 x float> %5459, float %5462, i64 3
  %5464 = fmul <4 x float> %5463, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5465 = add <4 x i32> %5352, %t2588
  %5466 = sext <4 x i32> %5465 to <4 x i64>
  %5467 = extractelement <4 x i64> %5466, i64 0
  %5468 = getelementptr inbounds float, ptr %f7.host, i64 %5467
  %5469 = load float, ptr %5468, align 4, !tbaa !53
  %5470 = insertelement <4 x float> undef, float %5469, i64 0
  %5471 = extractelement <4 x i64> %5466, i64 1
  %5472 = getelementptr inbounds float, ptr %f7.host, i64 %5471
  %5473 = load float, ptr %5472, align 4, !tbaa !53
  %5474 = insertelement <4 x float> %5470, float %5473, i64 1
  %5475 = extractelement <4 x i64> %5466, i64 2
  %5476 = getelementptr inbounds float, ptr %f7.host, i64 %5475
  %5477 = load float, ptr %5476, align 4, !tbaa !53
  %5478 = insertelement <4 x float> %5474, float %5477, i64 2
  %5479 = extractelement <4 x i64> %5466, i64 3
  %5480 = getelementptr inbounds float, ptr %f7.host, i64 %5479
  %5481 = load float, ptr %5480, align 4, !tbaa !53
  %5482 = insertelement <4 x float> %5478, float %5481, i64 3
  %5483 = fmul <4 x float> %5482, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5484 = fadd <4 x float> %5464, %5483
  %5485 = fmul <4 x float> %5484, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5486 = add nsw <4 x i32> %t2588, %5376
  %5487 = sext <4 x i32> %5486 to <4 x i64>
  %5488 = extractelement <4 x i64> %5487, i64 0
  %5489 = getelementptr inbounds float, ptr %f7.host, i64 %5488
  %5490 = load float, ptr %5489, align 4, !tbaa !53
  %5491 = insertelement <4 x float> undef, float %5490, i64 0
  %5492 = extractelement <4 x i64> %5487, i64 1
  %5493 = getelementptr inbounds float, ptr %f7.host, i64 %5492
  %5494 = load float, ptr %5493, align 4, !tbaa !53
  %5495 = insertelement <4 x float> %5491, float %5494, i64 1
  %5496 = extractelement <4 x i64> %5487, i64 2
  %5497 = getelementptr inbounds float, ptr %f7.host, i64 %5496
  %5498 = load float, ptr %5497, align 4, !tbaa !53
  %5499 = insertelement <4 x float> %5495, float %5498, i64 2
  %5500 = extractelement <4 x i64> %5487, i64 3
  %5501 = getelementptr inbounds float, ptr %f7.host, i64 %5500
  %5502 = load float, ptr %5501, align 4, !tbaa !53
  %5503 = insertelement <4 x float> %5499, float %5502, i64 3
  %5504 = fmul <4 x float> %5503, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5505 = add <4 x i32> %5398, %t2588
  %5506 = sext <4 x i32> %5505 to <4 x i64>
  %5507 = extractelement <4 x i64> %5506, i64 0
  %5508 = getelementptr inbounds float, ptr %f7.host, i64 %5507
  %5509 = load float, ptr %5508, align 4, !tbaa !53
  %5510 = insertelement <4 x float> undef, float %5509, i64 0
  %5511 = extractelement <4 x i64> %5506, i64 1
  %5512 = getelementptr inbounds float, ptr %f7.host, i64 %5511
  %5513 = load float, ptr %5512, align 4, !tbaa !53
  %5514 = insertelement <4 x float> %5510, float %5513, i64 1
  %5515 = extractelement <4 x i64> %5506, i64 2
  %5516 = getelementptr inbounds float, ptr %f7.host, i64 %5515
  %5517 = load float, ptr %5516, align 4, !tbaa !53
  %5518 = insertelement <4 x float> %5514, float %5517, i64 2
  %5519 = extractelement <4 x i64> %5506, i64 3
  %5520 = getelementptr inbounds float, ptr %f7.host, i64 %5519
  %5521 = load float, ptr %5520, align 4, !tbaa !53
  %5522 = insertelement <4 x float> %5518, float %5521, i64 3
  %5523 = fmul <4 x float> %5522, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5524 = fadd <4 x float> %5504, %5523
  %5525 = fmul <4 x float> %5524, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5526 = fadd <4 x float> %5485, %5525
  %5527 = mul nsw <4 x i32> %t2585, %824
  %5528 = add nsw <4 x i32> %5527, %5425
  %5529 = sext <4 x i32> %5528 to <4 x i64>
  %5530 = extractelement <4 x i64> %5529, i64 0
  %5531 = getelementptr inbounds float, ptr %f6.host, i64 %5530
  %5532 = load float, ptr %5531, align 4, !tbaa !49
  %5533 = insertelement <4 x float> undef, float %5532, i64 0
  %5534 = extractelement <4 x i64> %5529, i64 1
  %5535 = getelementptr inbounds float, ptr %f6.host, i64 %5534
  %5536 = load float, ptr %5535, align 4, !tbaa !49
  %5537 = insertelement <4 x float> %5533, float %5536, i64 1
  %5538 = extractelement <4 x i64> %5529, i64 2
  %5539 = getelementptr inbounds float, ptr %f6.host, i64 %5538
  %5540 = load float, ptr %5539, align 4, !tbaa !49
  %5541 = insertelement <4 x float> %5537, float %5540, i64 2
  %5542 = extractelement <4 x i64> %5529, i64 3
  %5543 = getelementptr inbounds float, ptr %f6.host, i64 %5542
  %5544 = load float, ptr %5543, align 4, !tbaa !49
  %5545 = insertelement <4 x float> %5541, float %5544, i64 3
  %5546 = fsub <4 x float> %5545, %5526
  %5547 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2582
  %5548 = fmul <4 x float> %5547, %5546
  %5549 = fadd <4 x float> %5445, %5548
  %5550 = add nsw i64 %5304, %3219
  %5551 = getelementptr inbounds float, ptr %128, i64 %5550
  %5552 = load <4 x float>, ptr %5551, align 4, !tbaa !63
  %5553 = fmul <4 x float> %5552, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5554 = add nsw i64 %3221, %5304
  %5555 = getelementptr inbounds float, ptr %128, i64 %5554
  %5556 = load <4 x float>, ptr %5555, align 4, !tbaa !63
  %5557 = fmul <4 x float> %5556, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5558 = fadd <4 x float> %5553, %5557
  %5559 = fmul <4 x float> %5558, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5560 = add nsw i64 %5315, %3219
  %5561 = getelementptr inbounds float, ptr %128, i64 %5560
  %5562 = load <4 x float>, ptr %5561, align 4, !tbaa !63
  %5563 = fmul <4 x float> %5562, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5564 = add nsw i64 %3221, %5315
  %5565 = getelementptr inbounds float, ptr %128, i64 %5564
  %5566 = load <4 x float>, ptr %5565, align 4, !tbaa !63
  %5567 = fmul <4 x float> %5566, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5568 = fadd <4 x float> %5563, %5567
  %5569 = fmul <4 x float> %5568, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5570 = fadd <4 x float> %5559, %5569
  %5571 = fadd <4 x float> %5549, %5570
  %5572 = shufflevector <4 x float> %5327, <4 x float> %5571, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %narrow134 = sub nsw i32 %5055, %816
  %5573 = sext i32 %narrow134 to i64
  %5574 = mul nsw i64 %827, %5573
  %5575 = add nsw i64 %5574, %3222
  %5576 = getelementptr inbounds float, ptr %154, i64 %5575
  store <8 x float> %5572, ptr %5576, align 4, !tbaa !65
  br label %"produce f12745"

"produce f12745":                                 ; preds = %"for f128.s0.v3.v341.preheader", %"end for f128.s0.v3.v338", %"produce f12832"
  %5577 = trunc i64 %3406 to i32
  %5578 = add i32 %5577, 1
  %5579 = and i32 %5578, 3
  %5580 = icmp eq i32 %5579, 3
  br i1 %5580, label %true_bb47, label %"produce f12658"

true_bb47:                                        ; preds = %"produce f12745"
  br i1 %.inv, label %"for f127.s0.v3.v350.preheader", label %"end for f127.s0.v3.v351", !prof !5

"for f127.s0.v3.v350.preheader":                  ; preds = %true_bb47
  %5581 = trunc i64 %3406 to i32
  %5582 = add i32 %5581, 9
  %5583 = ashr i32 %5582, 2
  %5584 = shl nsw i32 %5583, 1
  %5585 = and i32 %5584, 2
  %5586 = ashr i32 %5582, 3
  %t2594 = add nsw i32 %5585, %5586
  %5587 = sub nsw i32 %5583, %f73.v4.min_realized
  %5588 = mul nsw i32 %5587, %1386
  %5589 = add i32 %3228, %5588
  %5590 = add nsw i32 %t2594, %1387
  %t2601 = mul nsw i32 %5590, %147
  %5591 = sub nsw i32 %5586, %816
  %t2603 = mul nsw i32 %5591, %147
  %5592 = sub nsw i32 %5583, %f5.v4.min_realized
  %5593 = mul nsw i32 %5592, %f5.stride.1
  %5594 = add i32 %3229, %5593
  %5595 = add i32 %t2594, %1388
  %5596 = mul nsw i32 %5595, %f6.stride.1
  %5597 = sub nsw i32 %5586, %f6.v4.min_realized
  %5598 = mul nsw i32 %5597, %f6.stride.1
  %5599 = sext i32 %t2603 to i64
  %5600 = add nsw i64 %5599, -1
  %5601 = sext i32 %t2601 to i64
  %5602 = add nsw i64 %5601, -1
  %5603 = sext i32 %5583 to i64
  %5604 = sub nsw i64 %5603, %1395
  %5605 = mul nsw i64 %5604, %1394
  %5606 = sub nsw i64 %5605, %1396
  br label %"for f127.s0.v3.v350"

"for f127.s0.v3.v350":                            ; preds = %"for f127.s0.v3.v350.preheader", %"for f127.s0.v3.v350"
  %lsr.iv297 = phi i32 [ %lsr.iv.next298, %"for f127.s0.v3.v350" ], [ 0, %"for f127.s0.v3.v350.preheader" ]
  %lsr.iv295 = phi i32 [ %lsr.iv.next296, %"for f127.s0.v3.v350" ], [ %a927, %"for f127.s0.v3.v350.preheader" ]
  %5607 = add i32 %lsr.iv297, %135
  %5608 = ashr i32 %5607, 1
  %t2595 = add nsw i32 %5608, %3227
  %5609 = add i32 %5589, %lsr.iv297
  %5610 = sext i32 %5609 to i64
  %5611 = getelementptr inbounds float, ptr %f73.host, i64 %5610
  %5612 = load <4 x float>, ptr %5611, align 4, !tbaa !51
  %5613 = add nsw i64 %5610, 4
  %5614 = getelementptr inbounds float, ptr %f73.host, i64 %5613
  %5615 = load <4 x float>, ptr %5614, align 4, !tbaa !51
  %5616 = shufflevector <4 x float> %5612, <4 x float> %5615, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2597 = fmul <4 x float> %232, %5616
  %a928 = fptosi <4 x float> %t2597 to <4 x i32>
  %a931 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a928)
  %5617 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a931, <4 x i32> zeroinitializer)
  %5618 = sitofp <4 x i32> %5617 to <4 x float>
  %t2599 = fsub <4 x float> %t2597, %5618
  %5619 = add i32 %5594, %lsr.iv297
  %t2606 = sub nsw <4 x i32> %5617, %241
  %5620 = sub nsw i32 %t2595, %f6.v3.min_realized
  %t2609 = add nsw i32 %5620, %5596
  %t2610 = mul nsw <4 x i32> %t2606, %824
  %5621 = sub nsw i32 %5608, %f6.v3.min_realized
  %t2612 = add nsw i32 %5621, %5596
  %t2614 = add nsw i32 %5620, %5598
  %t2615 = add nsw i32 %5621, %5598
  %5622 = add nsw <4 x i32> %t2606, <i32 1, i32 1, i32 1, i32 1>
  %t2616 = mul nsw <4 x i32> %5622, %824
  %5623 = add i32 %5607, 1
  %5624 = shl i32 %5623, 1
  %5625 = and i32 %5624, 2
  %5626 = ashr i32 %5623, 1
  %t2617 = add nsw i32 %5625, %5626
  %5627 = shufflevector <4 x float> %5612, <4 x float> %5615, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2618 = fmul <4 x float> %232, %5627
  %a932 = fptosi <4 x float> %t2618 to <4 x i32>
  %a935 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a932)
  %5628 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a935, <4 x i32> zeroinitializer)
  %5629 = sitofp <4 x i32> %5628 to <4 x float>
  %t2620 = fsub <4 x float> %t2618, %5629
  %t2623 = sub nsw <4 x i32> %5628, %241
  %5630 = sub nsw i32 %t2617, %f6.v3.min_realized
  %t2625 = add nsw i32 %5630, %5596
  %t2626 = mul nsw <4 x i32> %t2623, %824
  %5631 = sub nsw i32 %5626, %f6.v3.min_realized
  %t2628 = add nsw i32 %5631, %5596
  %t2629 = add nsw i32 %5630, %5598
  %t2630 = add nsw i32 %5631, %5598
  %5632 = add nsw <4 x i32> %t2623, <i32 1, i32 1, i32 1, i32 1>
  %t2631 = mul nsw <4 x i32> %5632, %824
  %5633 = insertelement <4 x i32> undef, i32 %t2615, i64 0
  %5634 = shufflevector <4 x i32> %5633, <4 x i32> undef, <4 x i32> zeroinitializer
  %5635 = add nsw <4 x i32> %5634, <i32 0, i32 1, i32 2, i32 3>
  %5636 = add nsw <4 x i32> %t2616, %5635
  %5637 = sext <4 x i32> %5636 to <4 x i64>
  %5638 = extractelement <4 x i64> %5637, i64 0
  %5639 = getelementptr inbounds float, ptr %f6.host, i64 %5638
  %5640 = load float, ptr %5639, align 4, !tbaa !49
  %5641 = insertelement <4 x float> undef, float %5640, i64 0
  %5642 = extractelement <4 x i64> %5637, i64 1
  %5643 = getelementptr inbounds float, ptr %f6.host, i64 %5642
  %5644 = load float, ptr %5643, align 4, !tbaa !49
  %5645 = insertelement <4 x float> %5641, float %5644, i64 1
  %5646 = extractelement <4 x i64> %5637, i64 2
  %5647 = getelementptr inbounds float, ptr %f6.host, i64 %5646
  %5648 = load float, ptr %5647, align 4, !tbaa !49
  %5649 = insertelement <4 x float> %5645, float %5648, i64 2
  %5650 = extractelement <4 x i64> %5637, i64 3
  %5651 = getelementptr inbounds float, ptr %f6.host, i64 %5650
  %5652 = load float, ptr %5651, align 4, !tbaa !49
  %5653 = insertelement <4 x float> %5649, float %5652, i64 3
  %5654 = fmul <4 x float> %5653, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5655 = insertelement <4 x i32> undef, i32 %t2614, i64 0
  %5656 = shufflevector <4 x i32> %5655, <4 x i32> undef, <4 x i32> zeroinitializer
  %5657 = add <4 x i32> %5656, <i32 -1, i32 0, i32 1, i32 2>
  %5658 = add <4 x i32> %5657, %t2616
  %5659 = sext <4 x i32> %5658 to <4 x i64>
  %5660 = extractelement <4 x i64> %5659, i64 0
  %5661 = getelementptr inbounds float, ptr %f6.host, i64 %5660
  %5662 = load float, ptr %5661, align 4, !tbaa !49
  %5663 = insertelement <4 x float> undef, float %5662, i64 0
  %5664 = extractelement <4 x i64> %5659, i64 1
  %5665 = getelementptr inbounds float, ptr %f6.host, i64 %5664
  %5666 = load float, ptr %5665, align 4, !tbaa !49
  %5667 = insertelement <4 x float> %5663, float %5666, i64 1
  %5668 = extractelement <4 x i64> %5659, i64 2
  %5669 = getelementptr inbounds float, ptr %f6.host, i64 %5668
  %5670 = load float, ptr %5669, align 4, !tbaa !49
  %5671 = insertelement <4 x float> %5667, float %5670, i64 2
  %5672 = extractelement <4 x i64> %5659, i64 3
  %5673 = getelementptr inbounds float, ptr %f6.host, i64 %5672
  %5674 = load float, ptr %5673, align 4, !tbaa !49
  %5675 = insertelement <4 x float> %5671, float %5674, i64 3
  %5676 = fmul <4 x float> %5675, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5677 = fadd <4 x float> %5654, %5676
  %5678 = fmul <4 x float> %5677, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5679 = insertelement <4 x i32> undef, i32 %t2612, i64 0
  %5680 = shufflevector <4 x i32> %5679, <4 x i32> undef, <4 x i32> zeroinitializer
  %5681 = add nsw <4 x i32> %5680, <i32 0, i32 1, i32 2, i32 3>
  %5682 = add nsw <4 x i32> %t2616, %5681
  %5683 = sext <4 x i32> %5682 to <4 x i64>
  %5684 = extractelement <4 x i64> %5683, i64 0
  %5685 = getelementptr inbounds float, ptr %f6.host, i64 %5684
  %5686 = load float, ptr %5685, align 4, !tbaa !49
  %5687 = insertelement <4 x float> undef, float %5686, i64 0
  %5688 = extractelement <4 x i64> %5683, i64 1
  %5689 = getelementptr inbounds float, ptr %f6.host, i64 %5688
  %5690 = load float, ptr %5689, align 4, !tbaa !49
  %5691 = insertelement <4 x float> %5687, float %5690, i64 1
  %5692 = extractelement <4 x i64> %5683, i64 2
  %5693 = getelementptr inbounds float, ptr %f6.host, i64 %5692
  %5694 = load float, ptr %5693, align 4, !tbaa !49
  %5695 = insertelement <4 x float> %5691, float %5694, i64 2
  %5696 = extractelement <4 x i64> %5683, i64 3
  %5697 = getelementptr inbounds float, ptr %f6.host, i64 %5696
  %5698 = load float, ptr %5697, align 4, !tbaa !49
  %5699 = insertelement <4 x float> %5695, float %5698, i64 3
  %5700 = fmul <4 x float> %5699, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5701 = insertelement <4 x i32> undef, i32 %t2609, i64 0
  %5702 = shufflevector <4 x i32> %5701, <4 x i32> undef, <4 x i32> zeroinitializer
  %5703 = add <4 x i32> %5702, <i32 -1, i32 0, i32 1, i32 2>
  %5704 = add <4 x i32> %5703, %t2616
  %5705 = sext <4 x i32> %5704 to <4 x i64>
  %5706 = extractelement <4 x i64> %5705, i64 0
  %5707 = getelementptr inbounds float, ptr %f6.host, i64 %5706
  %5708 = load float, ptr %5707, align 4, !tbaa !49
  %5709 = insertelement <4 x float> undef, float %5708, i64 0
  %5710 = extractelement <4 x i64> %5705, i64 1
  %5711 = getelementptr inbounds float, ptr %f6.host, i64 %5710
  %5712 = load float, ptr %5711, align 4, !tbaa !49
  %5713 = insertelement <4 x float> %5709, float %5712, i64 1
  %5714 = extractelement <4 x i64> %5705, i64 2
  %5715 = getelementptr inbounds float, ptr %f6.host, i64 %5714
  %5716 = load float, ptr %5715, align 4, !tbaa !49
  %5717 = insertelement <4 x float> %5713, float %5716, i64 2
  %5718 = extractelement <4 x i64> %5705, i64 3
  %5719 = getelementptr inbounds float, ptr %f6.host, i64 %5718
  %5720 = load float, ptr %5719, align 4, !tbaa !49
  %5721 = insertelement <4 x float> %5717, float %5720, i64 3
  %5722 = fmul <4 x float> %5721, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5723 = fadd <4 x float> %5700, %5722
  %5724 = fmul <4 x float> %5723, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5725 = fadd <4 x float> %5678, %5724
  %5726 = mul nsw <4 x i32> %5622, %1391
  %5727 = insertelement <4 x i32> undef, i32 %5619, i64 0
  %5728 = shufflevector <4 x i32> %5727, <4 x i32> undef, <4 x i32> zeroinitializer
  %5729 = add nsw <4 x i32> %5728, <i32 0, i32 2, i32 4, i32 6>
  %5730 = add nsw <4 x i32> %5726, %5729
  %5731 = sext <4 x i32> %5730 to <4 x i64>
  %5732 = extractelement <4 x i64> %5731, i64 0
  %5733 = getelementptr inbounds float, ptr %f5.host, i64 %5732
  %5734 = load float, ptr %5733, align 4, !tbaa !45
  %5735 = insertelement <4 x float> undef, float %5734, i64 0
  %5736 = extractelement <4 x i64> %5731, i64 1
  %5737 = getelementptr inbounds float, ptr %f5.host, i64 %5736
  %5738 = load float, ptr %5737, align 4, !tbaa !45
  %5739 = insertelement <4 x float> %5735, float %5738, i64 1
  %5740 = extractelement <4 x i64> %5731, i64 2
  %5741 = getelementptr inbounds float, ptr %f5.host, i64 %5740
  %5742 = load float, ptr %5741, align 4, !tbaa !45
  %5743 = insertelement <4 x float> %5739, float %5742, i64 2
  %5744 = extractelement <4 x i64> %5731, i64 3
  %5745 = getelementptr inbounds float, ptr %f5.host, i64 %5744
  %5746 = load float, ptr %5745, align 4, !tbaa !45
  %5747 = insertelement <4 x float> %5743, float %5746, i64 3
  %5748 = fsub <4 x float> %5747, %5725
  %5749 = fmul <4 x float> %t2599, %5748
  %5750 = add nsw <4 x i32> %t2610, %5635
  %5751 = sext <4 x i32> %5750 to <4 x i64>
  %5752 = extractelement <4 x i64> %5751, i64 0
  %5753 = getelementptr inbounds float, ptr %f6.host, i64 %5752
  %5754 = load float, ptr %5753, align 4, !tbaa !49
  %5755 = insertelement <4 x float> undef, float %5754, i64 0
  %5756 = extractelement <4 x i64> %5751, i64 1
  %5757 = getelementptr inbounds float, ptr %f6.host, i64 %5756
  %5758 = load float, ptr %5757, align 4, !tbaa !49
  %5759 = insertelement <4 x float> %5755, float %5758, i64 1
  %5760 = extractelement <4 x i64> %5751, i64 2
  %5761 = getelementptr inbounds float, ptr %f6.host, i64 %5760
  %5762 = load float, ptr %5761, align 4, !tbaa !49
  %5763 = insertelement <4 x float> %5759, float %5762, i64 2
  %5764 = extractelement <4 x i64> %5751, i64 3
  %5765 = getelementptr inbounds float, ptr %f6.host, i64 %5764
  %5766 = load float, ptr %5765, align 4, !tbaa !49
  %5767 = insertelement <4 x float> %5763, float %5766, i64 3
  %5768 = fmul <4 x float> %5767, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5769 = add <4 x i32> %5657, %t2610
  %5770 = sext <4 x i32> %5769 to <4 x i64>
  %5771 = extractelement <4 x i64> %5770, i64 0
  %5772 = getelementptr inbounds float, ptr %f6.host, i64 %5771
  %5773 = load float, ptr %5772, align 4, !tbaa !49
  %5774 = insertelement <4 x float> undef, float %5773, i64 0
  %5775 = extractelement <4 x i64> %5770, i64 1
  %5776 = getelementptr inbounds float, ptr %f6.host, i64 %5775
  %5777 = load float, ptr %5776, align 4, !tbaa !49
  %5778 = insertelement <4 x float> %5774, float %5777, i64 1
  %5779 = extractelement <4 x i64> %5770, i64 2
  %5780 = getelementptr inbounds float, ptr %f6.host, i64 %5779
  %5781 = load float, ptr %5780, align 4, !tbaa !49
  %5782 = insertelement <4 x float> %5778, float %5781, i64 2
  %5783 = extractelement <4 x i64> %5770, i64 3
  %5784 = getelementptr inbounds float, ptr %f6.host, i64 %5783
  %5785 = load float, ptr %5784, align 4, !tbaa !49
  %5786 = insertelement <4 x float> %5782, float %5785, i64 3
  %5787 = fmul <4 x float> %5786, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5788 = fadd <4 x float> %5768, %5787
  %5789 = fmul <4 x float> %5788, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5790 = add nsw <4 x i32> %t2610, %5681
  %5791 = sext <4 x i32> %5790 to <4 x i64>
  %5792 = extractelement <4 x i64> %5791, i64 0
  %5793 = getelementptr inbounds float, ptr %f6.host, i64 %5792
  %5794 = load float, ptr %5793, align 4, !tbaa !49
  %5795 = insertelement <4 x float> undef, float %5794, i64 0
  %5796 = extractelement <4 x i64> %5791, i64 1
  %5797 = getelementptr inbounds float, ptr %f6.host, i64 %5796
  %5798 = load float, ptr %5797, align 4, !tbaa !49
  %5799 = insertelement <4 x float> %5795, float %5798, i64 1
  %5800 = extractelement <4 x i64> %5791, i64 2
  %5801 = getelementptr inbounds float, ptr %f6.host, i64 %5800
  %5802 = load float, ptr %5801, align 4, !tbaa !49
  %5803 = insertelement <4 x float> %5799, float %5802, i64 2
  %5804 = extractelement <4 x i64> %5791, i64 3
  %5805 = getelementptr inbounds float, ptr %f6.host, i64 %5804
  %5806 = load float, ptr %5805, align 4, !tbaa !49
  %5807 = insertelement <4 x float> %5803, float %5806, i64 3
  %5808 = fmul <4 x float> %5807, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5809 = add <4 x i32> %5703, %t2610
  %5810 = sext <4 x i32> %5809 to <4 x i64>
  %5811 = extractelement <4 x i64> %5810, i64 0
  %5812 = getelementptr inbounds float, ptr %f6.host, i64 %5811
  %5813 = load float, ptr %5812, align 4, !tbaa !49
  %5814 = insertelement <4 x float> undef, float %5813, i64 0
  %5815 = extractelement <4 x i64> %5810, i64 1
  %5816 = getelementptr inbounds float, ptr %f6.host, i64 %5815
  %5817 = load float, ptr %5816, align 4, !tbaa !49
  %5818 = insertelement <4 x float> %5814, float %5817, i64 1
  %5819 = extractelement <4 x i64> %5810, i64 2
  %5820 = getelementptr inbounds float, ptr %f6.host, i64 %5819
  %5821 = load float, ptr %5820, align 4, !tbaa !49
  %5822 = insertelement <4 x float> %5818, float %5821, i64 2
  %5823 = extractelement <4 x i64> %5810, i64 3
  %5824 = getelementptr inbounds float, ptr %f6.host, i64 %5823
  %5825 = load float, ptr %5824, align 4, !tbaa !49
  %5826 = insertelement <4 x float> %5822, float %5825, i64 3
  %5827 = fmul <4 x float> %5826, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5828 = fadd <4 x float> %5808, %5827
  %5829 = fmul <4 x float> %5828, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5830 = fadd <4 x float> %5789, %5829
  %5831 = mul nsw <4 x i32> %t2606, %1391
  %5832 = add nsw <4 x i32> %5831, %5729
  %5833 = sext <4 x i32> %5832 to <4 x i64>
  %5834 = extractelement <4 x i64> %5833, i64 0
  %5835 = getelementptr inbounds float, ptr %f5.host, i64 %5834
  %5836 = load float, ptr %5835, align 4, !tbaa !45
  %5837 = insertelement <4 x float> undef, float %5836, i64 0
  %5838 = extractelement <4 x i64> %5833, i64 1
  %5839 = getelementptr inbounds float, ptr %f5.host, i64 %5838
  %5840 = load float, ptr %5839, align 4, !tbaa !45
  %5841 = insertelement <4 x float> %5837, float %5840, i64 1
  %5842 = extractelement <4 x i64> %5833, i64 2
  %5843 = getelementptr inbounds float, ptr %f5.host, i64 %5842
  %5844 = load float, ptr %5843, align 4, !tbaa !45
  %5845 = insertelement <4 x float> %5841, float %5844, i64 2
  %5846 = extractelement <4 x i64> %5833, i64 3
  %5847 = getelementptr inbounds float, ptr %f5.host, i64 %5846
  %5848 = load float, ptr %5847, align 4, !tbaa !45
  %5849 = insertelement <4 x float> %5845, float %5848, i64 3
  %5850 = fsub <4 x float> %5849, %5830
  %5851 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2599
  %5852 = fmul <4 x float> %5851, %5850
  %5853 = fadd <4 x float> %5749, %5852
  %narrow125 = sub nsw i32 %5608, %f128.v3.min_realized
  %5854 = sext i32 %narrow125 to i64
  %5855 = add nsw i64 %5854, %5599
  %5856 = getelementptr inbounds float, ptr %154, i64 %5855
  %5857 = load <4 x float>, ptr %5856, align 4, !tbaa !65
  %5858 = fmul <4 x float> %5857, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5859 = sext i32 %t2595 to i64
  %5860 = sub nsw i64 %5859, %1392
  %5861 = add nsw i64 %5600, %5860
  %5862 = getelementptr inbounds float, ptr %154, i64 %5861
  %5863 = load <4 x float>, ptr %5862, align 4, !tbaa !65
  %5864 = fmul <4 x float> %5863, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5865 = fadd <4 x float> %5858, %5864
  %5866 = fmul <4 x float> %5865, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5867 = add nsw i64 %5854, %5601
  %5868 = getelementptr inbounds float, ptr %154, i64 %5867
  %5869 = load <4 x float>, ptr %5868, align 4, !tbaa !65
  %5870 = fmul <4 x float> %5869, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5871 = add nsw i64 %5602, %5860
  %5872 = getelementptr inbounds float, ptr %154, i64 %5871
  %5873 = load <4 x float>, ptr %5872, align 4, !tbaa !65
  %5874 = fmul <4 x float> %5873, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5875 = fadd <4 x float> %5870, %5874
  %5876 = fmul <4 x float> %5875, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5877 = fadd <4 x float> %5866, %5876
  %5878 = fadd <4 x float> %5853, %5877
  %5879 = insertelement <4 x i32> undef, i32 %t2630, i64 0
  %5880 = shufflevector <4 x i32> %5879, <4 x i32> undef, <4 x i32> zeroinitializer
  %5881 = add nsw <4 x i32> %5880, <i32 0, i32 1, i32 2, i32 3>
  %5882 = add nsw <4 x i32> %t2631, %5881
  %5883 = sext <4 x i32> %5882 to <4 x i64>
  %5884 = extractelement <4 x i64> %5883, i64 0
  %5885 = getelementptr inbounds float, ptr %f6.host, i64 %5884
  %5886 = load float, ptr %5885, align 4, !tbaa !49
  %5887 = insertelement <4 x float> undef, float %5886, i64 0
  %5888 = extractelement <4 x i64> %5883, i64 1
  %5889 = getelementptr inbounds float, ptr %f6.host, i64 %5888
  %5890 = load float, ptr %5889, align 4, !tbaa !49
  %5891 = insertelement <4 x float> %5887, float %5890, i64 1
  %5892 = extractelement <4 x i64> %5883, i64 2
  %5893 = getelementptr inbounds float, ptr %f6.host, i64 %5892
  %5894 = load float, ptr %5893, align 4, !tbaa !49
  %5895 = insertelement <4 x float> %5891, float %5894, i64 2
  %5896 = extractelement <4 x i64> %5883, i64 3
  %5897 = getelementptr inbounds float, ptr %f6.host, i64 %5896
  %5898 = load float, ptr %5897, align 4, !tbaa !49
  %5899 = insertelement <4 x float> %5895, float %5898, i64 3
  %5900 = fmul <4 x float> %5899, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5901 = insertelement <4 x i32> undef, i32 %t2629, i64 0
  %5902 = shufflevector <4 x i32> %5901, <4 x i32> undef, <4 x i32> zeroinitializer
  %5903 = add <4 x i32> %5902, <i32 -1, i32 0, i32 1, i32 2>
  %5904 = add <4 x i32> %5903, %t2631
  %5905 = sext <4 x i32> %5904 to <4 x i64>
  %5906 = extractelement <4 x i64> %5905, i64 0
  %5907 = getelementptr inbounds float, ptr %f6.host, i64 %5906
  %5908 = load float, ptr %5907, align 4, !tbaa !49
  %5909 = insertelement <4 x float> undef, float %5908, i64 0
  %5910 = extractelement <4 x i64> %5905, i64 1
  %5911 = getelementptr inbounds float, ptr %f6.host, i64 %5910
  %5912 = load float, ptr %5911, align 4, !tbaa !49
  %5913 = insertelement <4 x float> %5909, float %5912, i64 1
  %5914 = extractelement <4 x i64> %5905, i64 2
  %5915 = getelementptr inbounds float, ptr %f6.host, i64 %5914
  %5916 = load float, ptr %5915, align 4, !tbaa !49
  %5917 = insertelement <4 x float> %5913, float %5916, i64 2
  %5918 = extractelement <4 x i64> %5905, i64 3
  %5919 = getelementptr inbounds float, ptr %f6.host, i64 %5918
  %5920 = load float, ptr %5919, align 4, !tbaa !49
  %5921 = insertelement <4 x float> %5917, float %5920, i64 3
  %5922 = fmul <4 x float> %5921, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5923 = fadd <4 x float> %5900, %5922
  %5924 = fmul <4 x float> %5923, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5925 = insertelement <4 x i32> undef, i32 %t2628, i64 0
  %5926 = shufflevector <4 x i32> %5925, <4 x i32> undef, <4 x i32> zeroinitializer
  %5927 = add nsw <4 x i32> %5926, <i32 0, i32 1, i32 2, i32 3>
  %5928 = add nsw <4 x i32> %t2631, %5927
  %5929 = sext <4 x i32> %5928 to <4 x i64>
  %5930 = extractelement <4 x i64> %5929, i64 0
  %5931 = getelementptr inbounds float, ptr %f6.host, i64 %5930
  %5932 = load float, ptr %5931, align 4, !tbaa !49
  %5933 = insertelement <4 x float> undef, float %5932, i64 0
  %5934 = extractelement <4 x i64> %5929, i64 1
  %5935 = getelementptr inbounds float, ptr %f6.host, i64 %5934
  %5936 = load float, ptr %5935, align 4, !tbaa !49
  %5937 = insertelement <4 x float> %5933, float %5936, i64 1
  %5938 = extractelement <4 x i64> %5929, i64 2
  %5939 = getelementptr inbounds float, ptr %f6.host, i64 %5938
  %5940 = load float, ptr %5939, align 4, !tbaa !49
  %5941 = insertelement <4 x float> %5937, float %5940, i64 2
  %5942 = extractelement <4 x i64> %5929, i64 3
  %5943 = getelementptr inbounds float, ptr %f6.host, i64 %5942
  %5944 = load float, ptr %5943, align 4, !tbaa !49
  %5945 = insertelement <4 x float> %5941, float %5944, i64 3
  %5946 = fmul <4 x float> %5945, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5947 = insertelement <4 x i32> undef, i32 %t2625, i64 0
  %5948 = shufflevector <4 x i32> %5947, <4 x i32> undef, <4 x i32> zeroinitializer
  %5949 = add <4 x i32> %5948, <i32 -1, i32 0, i32 1, i32 2>
  %5950 = add <4 x i32> %5949, %t2631
  %5951 = sext <4 x i32> %5950 to <4 x i64>
  %5952 = extractelement <4 x i64> %5951, i64 0
  %5953 = getelementptr inbounds float, ptr %f6.host, i64 %5952
  %5954 = load float, ptr %5953, align 4, !tbaa !49
  %5955 = insertelement <4 x float> undef, float %5954, i64 0
  %5956 = extractelement <4 x i64> %5951, i64 1
  %5957 = getelementptr inbounds float, ptr %f6.host, i64 %5956
  %5958 = load float, ptr %5957, align 4, !tbaa !49
  %5959 = insertelement <4 x float> %5955, float %5958, i64 1
  %5960 = extractelement <4 x i64> %5951, i64 2
  %5961 = getelementptr inbounds float, ptr %f6.host, i64 %5960
  %5962 = load float, ptr %5961, align 4, !tbaa !49
  %5963 = insertelement <4 x float> %5959, float %5962, i64 2
  %5964 = extractelement <4 x i64> %5951, i64 3
  %5965 = getelementptr inbounds float, ptr %f6.host, i64 %5964
  %5966 = load float, ptr %5965, align 4, !tbaa !49
  %5967 = insertelement <4 x float> %5963, float %5966, i64 3
  %5968 = fmul <4 x float> %5967, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5969 = fadd <4 x float> %5946, %5968
  %5970 = fmul <4 x float> %5969, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5971 = fadd <4 x float> %5924, %5970
  %5972 = mul nsw <4 x i32> %5632, %1391
  %5973 = add i32 %5619, 1
  %5974 = insertelement <4 x i32> undef, i32 %5973, i64 0
  %5975 = shufflevector <4 x i32> %5974, <4 x i32> undef, <4 x i32> zeroinitializer
  %5976 = add nsw <4 x i32> %5975, <i32 0, i32 2, i32 4, i32 6>
  %5977 = add nsw <4 x i32> %5972, %5976
  %5978 = sext <4 x i32> %5977 to <4 x i64>
  %5979 = extractelement <4 x i64> %5978, i64 0
  %5980 = getelementptr inbounds float, ptr %f5.host, i64 %5979
  %5981 = load float, ptr %5980, align 4, !tbaa !45
  %5982 = insertelement <4 x float> undef, float %5981, i64 0
  %5983 = extractelement <4 x i64> %5978, i64 1
  %5984 = getelementptr inbounds float, ptr %f5.host, i64 %5983
  %5985 = load float, ptr %5984, align 4, !tbaa !45
  %5986 = insertelement <4 x float> %5982, float %5985, i64 1
  %5987 = extractelement <4 x i64> %5978, i64 2
  %5988 = getelementptr inbounds float, ptr %f5.host, i64 %5987
  %5989 = load float, ptr %5988, align 4, !tbaa !45
  %5990 = insertelement <4 x float> %5986, float %5989, i64 2
  %5991 = extractelement <4 x i64> %5978, i64 3
  %5992 = getelementptr inbounds float, ptr %f5.host, i64 %5991
  %5993 = load float, ptr %5992, align 4, !tbaa !45
  %5994 = insertelement <4 x float> %5990, float %5993, i64 3
  %5995 = fsub <4 x float> %5994, %5971
  %5996 = fmul <4 x float> %t2620, %5995
  %5997 = add nsw <4 x i32> %t2626, %5881
  %5998 = sext <4 x i32> %5997 to <4 x i64>
  %5999 = extractelement <4 x i64> %5998, i64 0
  %6000 = getelementptr inbounds float, ptr %f6.host, i64 %5999
  %6001 = load float, ptr %6000, align 4, !tbaa !49
  %6002 = insertelement <4 x float> undef, float %6001, i64 0
  %6003 = extractelement <4 x i64> %5998, i64 1
  %6004 = getelementptr inbounds float, ptr %f6.host, i64 %6003
  %6005 = load float, ptr %6004, align 4, !tbaa !49
  %6006 = insertelement <4 x float> %6002, float %6005, i64 1
  %6007 = extractelement <4 x i64> %5998, i64 2
  %6008 = getelementptr inbounds float, ptr %f6.host, i64 %6007
  %6009 = load float, ptr %6008, align 4, !tbaa !49
  %6010 = insertelement <4 x float> %6006, float %6009, i64 2
  %6011 = extractelement <4 x i64> %5998, i64 3
  %6012 = getelementptr inbounds float, ptr %f6.host, i64 %6011
  %6013 = load float, ptr %6012, align 4, !tbaa !49
  %6014 = insertelement <4 x float> %6010, float %6013, i64 3
  %6015 = fmul <4 x float> %6014, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6016 = add <4 x i32> %t2626, %5902
  %6017 = add <4 x i32> %6016, <i32 -1, i32 0, i32 1, i32 2>
  %6018 = sext <4 x i32> %6017 to <4 x i64>
  %6019 = extractelement <4 x i64> %6018, i64 0
  %6020 = getelementptr inbounds float, ptr %f6.host, i64 %6019
  %6021 = load float, ptr %6020, align 4, !tbaa !49
  %6022 = insertelement <4 x float> undef, float %6021, i64 0
  %6023 = extractelement <4 x i64> %6018, i64 1
  %6024 = getelementptr inbounds float, ptr %f6.host, i64 %6023
  %6025 = load float, ptr %6024, align 4, !tbaa !49
  %6026 = insertelement <4 x float> %6022, float %6025, i64 1
  %6027 = extractelement <4 x i64> %6018, i64 2
  %6028 = getelementptr inbounds float, ptr %f6.host, i64 %6027
  %6029 = load float, ptr %6028, align 4, !tbaa !49
  %6030 = insertelement <4 x float> %6026, float %6029, i64 2
  %6031 = extractelement <4 x i64> %6018, i64 3
  %6032 = getelementptr inbounds float, ptr %f6.host, i64 %6031
  %6033 = load float, ptr %6032, align 4, !tbaa !49
  %6034 = insertelement <4 x float> %6030, float %6033, i64 3
  %6035 = fmul <4 x float> %6034, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6036 = fadd <4 x float> %6015, %6035
  %6037 = fmul <4 x float> %6036, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6038 = add nsw <4 x i32> %t2626, %5927
  %6039 = sext <4 x i32> %6038 to <4 x i64>
  %6040 = extractelement <4 x i64> %6039, i64 0
  %6041 = getelementptr inbounds float, ptr %f6.host, i64 %6040
  %6042 = load float, ptr %6041, align 4, !tbaa !49
  %6043 = insertelement <4 x float> undef, float %6042, i64 0
  %6044 = extractelement <4 x i64> %6039, i64 1
  %6045 = getelementptr inbounds float, ptr %f6.host, i64 %6044
  %6046 = load float, ptr %6045, align 4, !tbaa !49
  %6047 = insertelement <4 x float> %6043, float %6046, i64 1
  %6048 = extractelement <4 x i64> %6039, i64 2
  %6049 = getelementptr inbounds float, ptr %f6.host, i64 %6048
  %6050 = load float, ptr %6049, align 4, !tbaa !49
  %6051 = insertelement <4 x float> %6047, float %6050, i64 2
  %6052 = extractelement <4 x i64> %6039, i64 3
  %6053 = getelementptr inbounds float, ptr %f6.host, i64 %6052
  %6054 = load float, ptr %6053, align 4, !tbaa !49
  %6055 = insertelement <4 x float> %6051, float %6054, i64 3
  %6056 = fmul <4 x float> %6055, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6057 = add <4 x i32> %t2626, %5948
  %6058 = add <4 x i32> %6057, <i32 -1, i32 0, i32 1, i32 2>
  %6059 = sext <4 x i32> %6058 to <4 x i64>
  %6060 = extractelement <4 x i64> %6059, i64 0
  %6061 = getelementptr inbounds float, ptr %f6.host, i64 %6060
  %6062 = load float, ptr %6061, align 4, !tbaa !49
  %6063 = insertelement <4 x float> undef, float %6062, i64 0
  %6064 = extractelement <4 x i64> %6059, i64 1
  %6065 = getelementptr inbounds float, ptr %f6.host, i64 %6064
  %6066 = load float, ptr %6065, align 4, !tbaa !49
  %6067 = insertelement <4 x float> %6063, float %6066, i64 1
  %6068 = extractelement <4 x i64> %6059, i64 2
  %6069 = getelementptr inbounds float, ptr %f6.host, i64 %6068
  %6070 = load float, ptr %6069, align 4, !tbaa !49
  %6071 = insertelement <4 x float> %6067, float %6070, i64 2
  %6072 = extractelement <4 x i64> %6059, i64 3
  %6073 = getelementptr inbounds float, ptr %f6.host, i64 %6072
  %6074 = load float, ptr %6073, align 4, !tbaa !49
  %6075 = insertelement <4 x float> %6071, float %6074, i64 3
  %6076 = fmul <4 x float> %6075, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6077 = fadd <4 x float> %6056, %6076
  %6078 = fmul <4 x float> %6077, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6079 = fadd <4 x float> %6037, %6078
  %6080 = mul nsw <4 x i32> %t2623, %1391
  %6081 = add nsw <4 x i32> %6080, %5976
  %6082 = sext <4 x i32> %6081 to <4 x i64>
  %6083 = extractelement <4 x i64> %6082, i64 0
  %6084 = getelementptr inbounds float, ptr %f5.host, i64 %6083
  %6085 = load float, ptr %6084, align 4, !tbaa !45
  %6086 = insertelement <4 x float> undef, float %6085, i64 0
  %6087 = extractelement <4 x i64> %6082, i64 1
  %6088 = getelementptr inbounds float, ptr %f5.host, i64 %6087
  %6089 = load float, ptr %6088, align 4, !tbaa !45
  %6090 = insertelement <4 x float> %6086, float %6089, i64 1
  %6091 = extractelement <4 x i64> %6082, i64 2
  %6092 = getelementptr inbounds float, ptr %f5.host, i64 %6091
  %6093 = load float, ptr %6092, align 4, !tbaa !45
  %6094 = insertelement <4 x float> %6090, float %6093, i64 2
  %6095 = extractelement <4 x i64> %6082, i64 3
  %6096 = getelementptr inbounds float, ptr %f5.host, i64 %6095
  %6097 = load float, ptr %6096, align 4, !tbaa !45
  %6098 = insertelement <4 x float> %6094, float %6097, i64 3
  %6099 = fsub <4 x float> %6098, %6079
  %6100 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2620
  %6101 = fmul <4 x float> %6100, %6099
  %6102 = fadd <4 x float> %5996, %6101
  %narrow126 = sub nsw i32 %5626, %f128.v3.min_realized
  %6103 = sext i32 %narrow126 to i64
  %6104 = add nsw i64 %6103, %5599
  %6105 = getelementptr inbounds float, ptr %154, i64 %6104
  %6106 = load <4 x float>, ptr %6105, align 4, !tbaa !65
  %6107 = fmul <4 x float> %6106, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6108 = sext i32 %t2617 to i64
  %6109 = sub nsw i64 %6108, %1392
  %6110 = add nsw i64 %5600, %6109
  %6111 = getelementptr inbounds float, ptr %154, i64 %6110
  %6112 = load <4 x float>, ptr %6111, align 4, !tbaa !65
  %6113 = fmul <4 x float> %6112, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6114 = fadd <4 x float> %6107, %6113
  %6115 = fmul <4 x float> %6114, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6116 = add nsw i64 %6103, %5601
  %6117 = getelementptr inbounds float, ptr %154, i64 %6116
  %6118 = load <4 x float>, ptr %6117, align 4, !tbaa !65
  %6119 = fmul <4 x float> %6118, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6120 = add nsw i64 %5602, %6109
  %6121 = getelementptr inbounds float, ptr %154, i64 %6120
  %6122 = load <4 x float>, ptr %6121, align 4, !tbaa !65
  %6123 = fmul <4 x float> %6122, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6124 = fadd <4 x float> %6119, %6123
  %6125 = fmul <4 x float> %6124, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6126 = fadd <4 x float> %6115, %6125
  %6127 = fadd <4 x float> %6102, %6126
  %6128 = shufflevector <4 x float> %5878, <4 x float> %6127, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %6129 = sext i32 %5607 to i64
  %6130 = add nsw i64 %5606, %6129
  %6131 = getelementptr inbounds float, ptr %193, i64 %6130
  store <8 x float> %6128, ptr %6131, align 4, !tbaa !67
  %lsr.iv.next296 = add nsw i32 %lsr.iv295, -1
  %lsr.iv.next298 = add nuw i32 %lsr.iv297, 8
  %.not127 = icmp eq i32 %lsr.iv.next296, 0
  br i1 %.not127, label %"end for f127.s0.v3.v351", label %"for f127.s0.v3.v350"

"end for f127.s0.v3.v351":                        ; preds = %"for f127.s0.v3.v350", %true_bb47
  br i1 %.not119, label %"produce f12658", label %"for f127.s0.v3.v354.preheader", !prof !4

"for f127.s0.v3.v354.preheader":                  ; preds = %"end for f127.s0.v3.v351"
  %6132 = trunc i64 %3406 to i32
  %6133 = add i32 %6132, 9
  %6134 = ashr i32 %6133, 2
  %6135 = shl nsw i32 %6134, 1
  %6136 = and i32 %6135, 2
  %6137 = ashr i32 %6133, 3
  %t2632 = add nsw i32 %6136, %6137
  %6138 = sub nsw i32 %6134, %f73.v4.min_realized
  %6139 = mul nsw i32 %6138, %1386
  %t2635 = add nsw i32 %3233, %6139
  %6140 = sext i32 %t2635 to i64
  %6141 = getelementptr inbounds float, ptr %f73.host, i64 %6140
  %6142 = load <4 x float>, ptr %6141, align 4, !tbaa !51
  %6143 = add nsw i64 %6140, 4
  %6144 = getelementptr inbounds float, ptr %f73.host, i64 %6143
  %6145 = load <4 x float>, ptr %6144, align 4, !tbaa !51
  %6146 = shufflevector <4 x float> %6142, <4 x float> %6145, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2636 = fmul <4 x float> %232, %6146
  %a938 = fptosi <4 x float> %t2636 to <4 x i32>
  %a941 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a938)
  %6147 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a941, <4 x i32> zeroinitializer)
  %6148 = sitofp <4 x i32> %6147 to <4 x float>
  %t2638 = fsub <4 x float> %t2636, %6148
  %6149 = add nsw i32 %t2632, %1387
  %t2640 = mul nsw i32 %6149, %147
  %6150 = sub nsw i32 %6137, %816
  %t2642 = mul nsw i32 %6150, %147
  %6151 = sub nsw i32 %6134, %f5.v4.min_realized
  %6152 = mul nsw i32 %6151, %f5.stride.1
  %t2643 = add nsw i32 %6152, %3234
  %t2645 = sub nsw <4 x i32> %6147, %241
  %6153 = add i32 %t2632, %1388
  %6154 = mul nsw i32 %6153, %f6.stride.1
  %t2648 = add nsw i32 %6154, %3235
  %t2649 = mul nsw <4 x i32> %t2645, %824
  %t2651 = add nsw i32 %6154, %3236
  %6155 = sub nsw i32 %6137, %f6.v4.min_realized
  %6156 = mul nsw i32 %6155, %f6.stride.1
  %t2653 = add nsw i32 %6156, %3235
  %t2654 = add nsw i32 %6156, %3236
  %6157 = add nsw <4 x i32> %t2645, <i32 1, i32 1, i32 1, i32 1>
  %t2655 = mul nsw <4 x i32> %6157, %824
  %6158 = shufflevector <4 x float> %6142, <4 x float> %6145, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2657 = fmul <4 x float> %232, %6158
  %a942 = fptosi <4 x float> %t2657 to <4 x i32>
  %a945 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a942)
  %6159 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a945, <4 x i32> zeroinitializer)
  %6160 = sitofp <4 x i32> %6159 to <4 x float>
  %t2659 = fsub <4 x float> %t2657, %6160
  %t2662 = sub nsw <4 x i32> %6159, %241
  %t2664 = add nsw i32 %6154, %3241
  %t2665 = mul nsw <4 x i32> %t2662, %824
  %t2667 = add nsw i32 %6154, %3242
  %t2668 = add nsw i32 %6156, %3241
  %t2669 = add nsw i32 %6156, %3242
  %6161 = add nsw <4 x i32> %t2662, <i32 1, i32 1, i32 1, i32 1>
  %t2670 = mul nsw <4 x i32> %6161, %824
  %6162 = insertelement <4 x i32> undef, i32 %t2654, i64 0
  %6163 = shufflevector <4 x i32> %6162, <4 x i32> undef, <4 x i32> zeroinitializer
  %6164 = add nsw <4 x i32> %6163, <i32 0, i32 1, i32 2, i32 3>
  %6165 = add nsw <4 x i32> %t2655, %6164
  %6166 = sext <4 x i32> %6165 to <4 x i64>
  %6167 = extractelement <4 x i64> %6166, i64 0
  %6168 = getelementptr inbounds float, ptr %f6.host, i64 %6167
  %6169 = load float, ptr %6168, align 4, !tbaa !49
  %6170 = insertelement <4 x float> undef, float %6169, i64 0
  %6171 = extractelement <4 x i64> %6166, i64 1
  %6172 = getelementptr inbounds float, ptr %f6.host, i64 %6171
  %6173 = load float, ptr %6172, align 4, !tbaa !49
  %6174 = insertelement <4 x float> %6170, float %6173, i64 1
  %6175 = extractelement <4 x i64> %6166, i64 2
  %6176 = getelementptr inbounds float, ptr %f6.host, i64 %6175
  %6177 = load float, ptr %6176, align 4, !tbaa !49
  %6178 = insertelement <4 x float> %6174, float %6177, i64 2
  %6179 = extractelement <4 x i64> %6166, i64 3
  %6180 = getelementptr inbounds float, ptr %f6.host, i64 %6179
  %6181 = load float, ptr %6180, align 4, !tbaa !49
  %6182 = insertelement <4 x float> %6178, float %6181, i64 3
  %6183 = fmul <4 x float> %6182, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6184 = insertelement <4 x i32> undef, i32 %t2653, i64 0
  %6185 = shufflevector <4 x i32> %6184, <4 x i32> undef, <4 x i32> zeroinitializer
  %6186 = add <4 x i32> %6185, <i32 -1, i32 0, i32 1, i32 2>
  %6187 = add <4 x i32> %6186, %t2655
  %6188 = sext <4 x i32> %6187 to <4 x i64>
  %6189 = extractelement <4 x i64> %6188, i64 0
  %6190 = getelementptr inbounds float, ptr %f6.host, i64 %6189
  %6191 = load float, ptr %6190, align 4, !tbaa !49
  %6192 = insertelement <4 x float> undef, float %6191, i64 0
  %6193 = extractelement <4 x i64> %6188, i64 1
  %6194 = getelementptr inbounds float, ptr %f6.host, i64 %6193
  %6195 = load float, ptr %6194, align 4, !tbaa !49
  %6196 = insertelement <4 x float> %6192, float %6195, i64 1
  %6197 = extractelement <4 x i64> %6188, i64 2
  %6198 = getelementptr inbounds float, ptr %f6.host, i64 %6197
  %6199 = load float, ptr %6198, align 4, !tbaa !49
  %6200 = insertelement <4 x float> %6196, float %6199, i64 2
  %6201 = extractelement <4 x i64> %6188, i64 3
  %6202 = getelementptr inbounds float, ptr %f6.host, i64 %6201
  %6203 = load float, ptr %6202, align 4, !tbaa !49
  %6204 = insertelement <4 x float> %6200, float %6203, i64 3
  %6205 = fmul <4 x float> %6204, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6206 = fadd <4 x float> %6183, %6205
  %6207 = fmul <4 x float> %6206, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6208 = insertelement <4 x i32> undef, i32 %t2651, i64 0
  %6209 = shufflevector <4 x i32> %6208, <4 x i32> undef, <4 x i32> zeroinitializer
  %6210 = add nsw <4 x i32> %6209, <i32 0, i32 1, i32 2, i32 3>
  %6211 = add nsw <4 x i32> %t2655, %6210
  %6212 = sext <4 x i32> %6211 to <4 x i64>
  %6213 = extractelement <4 x i64> %6212, i64 0
  %6214 = getelementptr inbounds float, ptr %f6.host, i64 %6213
  %6215 = load float, ptr %6214, align 4, !tbaa !49
  %6216 = insertelement <4 x float> undef, float %6215, i64 0
  %6217 = extractelement <4 x i64> %6212, i64 1
  %6218 = getelementptr inbounds float, ptr %f6.host, i64 %6217
  %6219 = load float, ptr %6218, align 4, !tbaa !49
  %6220 = insertelement <4 x float> %6216, float %6219, i64 1
  %6221 = extractelement <4 x i64> %6212, i64 2
  %6222 = getelementptr inbounds float, ptr %f6.host, i64 %6221
  %6223 = load float, ptr %6222, align 4, !tbaa !49
  %6224 = insertelement <4 x float> %6220, float %6223, i64 2
  %6225 = extractelement <4 x i64> %6212, i64 3
  %6226 = getelementptr inbounds float, ptr %f6.host, i64 %6225
  %6227 = load float, ptr %6226, align 4, !tbaa !49
  %6228 = insertelement <4 x float> %6224, float %6227, i64 3
  %6229 = fmul <4 x float> %6228, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6230 = insertelement <4 x i32> undef, i32 %t2648, i64 0
  %6231 = shufflevector <4 x i32> %6230, <4 x i32> undef, <4 x i32> zeroinitializer
  %6232 = add <4 x i32> %6231, <i32 -1, i32 0, i32 1, i32 2>
  %6233 = add <4 x i32> %6232, %t2655
  %6234 = sext <4 x i32> %6233 to <4 x i64>
  %6235 = extractelement <4 x i64> %6234, i64 0
  %6236 = getelementptr inbounds float, ptr %f6.host, i64 %6235
  %6237 = load float, ptr %6236, align 4, !tbaa !49
  %6238 = insertelement <4 x float> undef, float %6237, i64 0
  %6239 = extractelement <4 x i64> %6234, i64 1
  %6240 = getelementptr inbounds float, ptr %f6.host, i64 %6239
  %6241 = load float, ptr %6240, align 4, !tbaa !49
  %6242 = insertelement <4 x float> %6238, float %6241, i64 1
  %6243 = extractelement <4 x i64> %6234, i64 2
  %6244 = getelementptr inbounds float, ptr %f6.host, i64 %6243
  %6245 = load float, ptr %6244, align 4, !tbaa !49
  %6246 = insertelement <4 x float> %6242, float %6245, i64 2
  %6247 = extractelement <4 x i64> %6234, i64 3
  %6248 = getelementptr inbounds float, ptr %f6.host, i64 %6247
  %6249 = load float, ptr %6248, align 4, !tbaa !49
  %6250 = insertelement <4 x float> %6246, float %6249, i64 3
  %6251 = fmul <4 x float> %6250, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6252 = fadd <4 x float> %6229, %6251
  %6253 = fmul <4 x float> %6252, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6254 = fadd <4 x float> %6207, %6253
  %6255 = mul nsw <4 x i32> %6157, %1391
  %6256 = insertelement <4 x i32> undef, i32 %t2643, i64 0
  %6257 = shufflevector <4 x i32> %6256, <4 x i32> undef, <4 x i32> zeroinitializer
  %6258 = add nsw <4 x i32> %6257, <i32 0, i32 2, i32 4, i32 6>
  %6259 = add nsw <4 x i32> %6255, %6258
  %6260 = sext <4 x i32> %6259 to <4 x i64>
  %6261 = extractelement <4 x i64> %6260, i64 0
  %6262 = getelementptr inbounds float, ptr %f5.host, i64 %6261
  %6263 = load float, ptr %6262, align 4, !tbaa !45
  %6264 = insertelement <4 x float> undef, float %6263, i64 0
  %6265 = extractelement <4 x i64> %6260, i64 1
  %6266 = getelementptr inbounds float, ptr %f5.host, i64 %6265
  %6267 = load float, ptr %6266, align 4, !tbaa !45
  %6268 = insertelement <4 x float> %6264, float %6267, i64 1
  %6269 = extractelement <4 x i64> %6260, i64 2
  %6270 = getelementptr inbounds float, ptr %f5.host, i64 %6269
  %6271 = load float, ptr %6270, align 4, !tbaa !45
  %6272 = insertelement <4 x float> %6268, float %6271, i64 2
  %6273 = extractelement <4 x i64> %6260, i64 3
  %6274 = getelementptr inbounds float, ptr %f5.host, i64 %6273
  %6275 = load float, ptr %6274, align 4, !tbaa !45
  %6276 = insertelement <4 x float> %6272, float %6275, i64 3
  %6277 = fsub <4 x float> %6276, %6254
  %6278 = fmul <4 x float> %t2638, %6277
  %6279 = add nsw <4 x i32> %t2649, %6164
  %6280 = sext <4 x i32> %6279 to <4 x i64>
  %6281 = extractelement <4 x i64> %6280, i64 0
  %6282 = getelementptr inbounds float, ptr %f6.host, i64 %6281
  %6283 = load float, ptr %6282, align 4, !tbaa !49
  %6284 = insertelement <4 x float> undef, float %6283, i64 0
  %6285 = extractelement <4 x i64> %6280, i64 1
  %6286 = getelementptr inbounds float, ptr %f6.host, i64 %6285
  %6287 = load float, ptr %6286, align 4, !tbaa !49
  %6288 = insertelement <4 x float> %6284, float %6287, i64 1
  %6289 = extractelement <4 x i64> %6280, i64 2
  %6290 = getelementptr inbounds float, ptr %f6.host, i64 %6289
  %6291 = load float, ptr %6290, align 4, !tbaa !49
  %6292 = insertelement <4 x float> %6288, float %6291, i64 2
  %6293 = extractelement <4 x i64> %6280, i64 3
  %6294 = getelementptr inbounds float, ptr %f6.host, i64 %6293
  %6295 = load float, ptr %6294, align 4, !tbaa !49
  %6296 = insertelement <4 x float> %6292, float %6295, i64 3
  %6297 = fmul <4 x float> %6296, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6298 = add <4 x i32> %6186, %t2649
  %6299 = sext <4 x i32> %6298 to <4 x i64>
  %6300 = extractelement <4 x i64> %6299, i64 0
  %6301 = getelementptr inbounds float, ptr %f6.host, i64 %6300
  %6302 = load float, ptr %6301, align 4, !tbaa !49
  %6303 = insertelement <4 x float> undef, float %6302, i64 0
  %6304 = extractelement <4 x i64> %6299, i64 1
  %6305 = getelementptr inbounds float, ptr %f6.host, i64 %6304
  %6306 = load float, ptr %6305, align 4, !tbaa !49
  %6307 = insertelement <4 x float> %6303, float %6306, i64 1
  %6308 = extractelement <4 x i64> %6299, i64 2
  %6309 = getelementptr inbounds float, ptr %f6.host, i64 %6308
  %6310 = load float, ptr %6309, align 4, !tbaa !49
  %6311 = insertelement <4 x float> %6307, float %6310, i64 2
  %6312 = extractelement <4 x i64> %6299, i64 3
  %6313 = getelementptr inbounds float, ptr %f6.host, i64 %6312
  %6314 = load float, ptr %6313, align 4, !tbaa !49
  %6315 = insertelement <4 x float> %6311, float %6314, i64 3
  %6316 = fmul <4 x float> %6315, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6317 = fadd <4 x float> %6297, %6316
  %6318 = fmul <4 x float> %6317, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6319 = add nsw <4 x i32> %t2649, %6210
  %6320 = sext <4 x i32> %6319 to <4 x i64>
  %6321 = extractelement <4 x i64> %6320, i64 0
  %6322 = getelementptr inbounds float, ptr %f6.host, i64 %6321
  %6323 = load float, ptr %6322, align 4, !tbaa !49
  %6324 = insertelement <4 x float> undef, float %6323, i64 0
  %6325 = extractelement <4 x i64> %6320, i64 1
  %6326 = getelementptr inbounds float, ptr %f6.host, i64 %6325
  %6327 = load float, ptr %6326, align 4, !tbaa !49
  %6328 = insertelement <4 x float> %6324, float %6327, i64 1
  %6329 = extractelement <4 x i64> %6320, i64 2
  %6330 = getelementptr inbounds float, ptr %f6.host, i64 %6329
  %6331 = load float, ptr %6330, align 4, !tbaa !49
  %6332 = insertelement <4 x float> %6328, float %6331, i64 2
  %6333 = extractelement <4 x i64> %6320, i64 3
  %6334 = getelementptr inbounds float, ptr %f6.host, i64 %6333
  %6335 = load float, ptr %6334, align 4, !tbaa !49
  %6336 = insertelement <4 x float> %6332, float %6335, i64 3
  %6337 = fmul <4 x float> %6336, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6338 = add <4 x i32> %6232, %t2649
  %6339 = sext <4 x i32> %6338 to <4 x i64>
  %6340 = extractelement <4 x i64> %6339, i64 0
  %6341 = getelementptr inbounds float, ptr %f6.host, i64 %6340
  %6342 = load float, ptr %6341, align 4, !tbaa !49
  %6343 = insertelement <4 x float> undef, float %6342, i64 0
  %6344 = extractelement <4 x i64> %6339, i64 1
  %6345 = getelementptr inbounds float, ptr %f6.host, i64 %6344
  %6346 = load float, ptr %6345, align 4, !tbaa !49
  %6347 = insertelement <4 x float> %6343, float %6346, i64 1
  %6348 = extractelement <4 x i64> %6339, i64 2
  %6349 = getelementptr inbounds float, ptr %f6.host, i64 %6348
  %6350 = load float, ptr %6349, align 4, !tbaa !49
  %6351 = insertelement <4 x float> %6347, float %6350, i64 2
  %6352 = extractelement <4 x i64> %6339, i64 3
  %6353 = getelementptr inbounds float, ptr %f6.host, i64 %6352
  %6354 = load float, ptr %6353, align 4, !tbaa !49
  %6355 = insertelement <4 x float> %6351, float %6354, i64 3
  %6356 = fmul <4 x float> %6355, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6357 = fadd <4 x float> %6337, %6356
  %6358 = fmul <4 x float> %6357, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6359 = fadd <4 x float> %6318, %6358
  %6360 = mul nsw <4 x i32> %t2645, %1391
  %6361 = add nsw <4 x i32> %6360, %6258
  %6362 = sext <4 x i32> %6361 to <4 x i64>
  %6363 = extractelement <4 x i64> %6362, i64 0
  %6364 = getelementptr inbounds float, ptr %f5.host, i64 %6363
  %6365 = load float, ptr %6364, align 4, !tbaa !45
  %6366 = insertelement <4 x float> undef, float %6365, i64 0
  %6367 = extractelement <4 x i64> %6362, i64 1
  %6368 = getelementptr inbounds float, ptr %f5.host, i64 %6367
  %6369 = load float, ptr %6368, align 4, !tbaa !45
  %6370 = insertelement <4 x float> %6366, float %6369, i64 1
  %6371 = extractelement <4 x i64> %6362, i64 2
  %6372 = getelementptr inbounds float, ptr %f5.host, i64 %6371
  %6373 = load float, ptr %6372, align 4, !tbaa !45
  %6374 = insertelement <4 x float> %6370, float %6373, i64 2
  %6375 = extractelement <4 x i64> %6362, i64 3
  %6376 = getelementptr inbounds float, ptr %f5.host, i64 %6375
  %6377 = load float, ptr %6376, align 4, !tbaa !45
  %6378 = insertelement <4 x float> %6374, float %6377, i64 3
  %6379 = fsub <4 x float> %6378, %6359
  %6380 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2638
  %6381 = fmul <4 x float> %6380, %6379
  %6382 = fadd <4 x float> %6278, %6381
  %6383 = sext i32 %t2642 to i64
  %6384 = add nsw i64 %6383, %3243
  %6385 = getelementptr inbounds float, ptr %154, i64 %6384
  %6386 = load <4 x float>, ptr %6385, align 4, !tbaa !65
  %6387 = fmul <4 x float> %6386, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6388 = add nsw i64 %3245, %6383
  %6389 = getelementptr inbounds float, ptr %154, i64 %6388
  %6390 = load <4 x float>, ptr %6389, align 4, !tbaa !65
  %6391 = fmul <4 x float> %6390, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6392 = fadd <4 x float> %6387, %6391
  %6393 = fmul <4 x float> %6392, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6394 = sext i32 %t2640 to i64
  %6395 = add nsw i64 %6394, %3243
  %6396 = getelementptr inbounds float, ptr %154, i64 %6395
  %6397 = load <4 x float>, ptr %6396, align 4, !tbaa !65
  %6398 = fmul <4 x float> %6397, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6399 = add nsw i64 %3245, %6394
  %6400 = getelementptr inbounds float, ptr %154, i64 %6399
  %6401 = load <4 x float>, ptr %6400, align 4, !tbaa !65
  %6402 = fmul <4 x float> %6401, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6403 = fadd <4 x float> %6398, %6402
  %6404 = fmul <4 x float> %6403, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6405 = fadd <4 x float> %6393, %6404
  %6406 = fadd <4 x float> %6382, %6405
  %6407 = insertelement <4 x i32> undef, i32 %t2669, i64 0
  %6408 = shufflevector <4 x i32> %6407, <4 x i32> undef, <4 x i32> zeroinitializer
  %6409 = add nsw <4 x i32> %6408, <i32 0, i32 1, i32 2, i32 3>
  %6410 = add nsw <4 x i32> %t2670, %6409
  %6411 = sext <4 x i32> %6410 to <4 x i64>
  %6412 = extractelement <4 x i64> %6411, i64 0
  %6413 = getelementptr inbounds float, ptr %f6.host, i64 %6412
  %6414 = load float, ptr %6413, align 4, !tbaa !49
  %6415 = insertelement <4 x float> undef, float %6414, i64 0
  %6416 = extractelement <4 x i64> %6411, i64 1
  %6417 = getelementptr inbounds float, ptr %f6.host, i64 %6416
  %6418 = load float, ptr %6417, align 4, !tbaa !49
  %6419 = insertelement <4 x float> %6415, float %6418, i64 1
  %6420 = extractelement <4 x i64> %6411, i64 2
  %6421 = getelementptr inbounds float, ptr %f6.host, i64 %6420
  %6422 = load float, ptr %6421, align 4, !tbaa !49
  %6423 = insertelement <4 x float> %6419, float %6422, i64 2
  %6424 = extractelement <4 x i64> %6411, i64 3
  %6425 = getelementptr inbounds float, ptr %f6.host, i64 %6424
  %6426 = load float, ptr %6425, align 4, !tbaa !49
  %6427 = insertelement <4 x float> %6423, float %6426, i64 3
  %6428 = fmul <4 x float> %6427, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6429 = insertelement <4 x i32> undef, i32 %t2668, i64 0
  %6430 = shufflevector <4 x i32> %6429, <4 x i32> undef, <4 x i32> zeroinitializer
  %6431 = add <4 x i32> %6430, <i32 -1, i32 0, i32 1, i32 2>
  %6432 = add <4 x i32> %6431, %t2670
  %6433 = sext <4 x i32> %6432 to <4 x i64>
  %6434 = extractelement <4 x i64> %6433, i64 0
  %6435 = getelementptr inbounds float, ptr %f6.host, i64 %6434
  %6436 = load float, ptr %6435, align 4, !tbaa !49
  %6437 = insertelement <4 x float> undef, float %6436, i64 0
  %6438 = extractelement <4 x i64> %6433, i64 1
  %6439 = getelementptr inbounds float, ptr %f6.host, i64 %6438
  %6440 = load float, ptr %6439, align 4, !tbaa !49
  %6441 = insertelement <4 x float> %6437, float %6440, i64 1
  %6442 = extractelement <4 x i64> %6433, i64 2
  %6443 = getelementptr inbounds float, ptr %f6.host, i64 %6442
  %6444 = load float, ptr %6443, align 4, !tbaa !49
  %6445 = insertelement <4 x float> %6441, float %6444, i64 2
  %6446 = extractelement <4 x i64> %6433, i64 3
  %6447 = getelementptr inbounds float, ptr %f6.host, i64 %6446
  %6448 = load float, ptr %6447, align 4, !tbaa !49
  %6449 = insertelement <4 x float> %6445, float %6448, i64 3
  %6450 = fmul <4 x float> %6449, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6451 = fadd <4 x float> %6428, %6450
  %6452 = fmul <4 x float> %6451, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6453 = insertelement <4 x i32> undef, i32 %t2667, i64 0
  %6454 = shufflevector <4 x i32> %6453, <4 x i32> undef, <4 x i32> zeroinitializer
  %6455 = add nsw <4 x i32> %6454, <i32 0, i32 1, i32 2, i32 3>
  %6456 = add nsw <4 x i32> %t2670, %6455
  %6457 = sext <4 x i32> %6456 to <4 x i64>
  %6458 = extractelement <4 x i64> %6457, i64 0
  %6459 = getelementptr inbounds float, ptr %f6.host, i64 %6458
  %6460 = load float, ptr %6459, align 4, !tbaa !49
  %6461 = insertelement <4 x float> undef, float %6460, i64 0
  %6462 = extractelement <4 x i64> %6457, i64 1
  %6463 = getelementptr inbounds float, ptr %f6.host, i64 %6462
  %6464 = load float, ptr %6463, align 4, !tbaa !49
  %6465 = insertelement <4 x float> %6461, float %6464, i64 1
  %6466 = extractelement <4 x i64> %6457, i64 2
  %6467 = getelementptr inbounds float, ptr %f6.host, i64 %6466
  %6468 = load float, ptr %6467, align 4, !tbaa !49
  %6469 = insertelement <4 x float> %6465, float %6468, i64 2
  %6470 = extractelement <4 x i64> %6457, i64 3
  %6471 = getelementptr inbounds float, ptr %f6.host, i64 %6470
  %6472 = load float, ptr %6471, align 4, !tbaa !49
  %6473 = insertelement <4 x float> %6469, float %6472, i64 3
  %6474 = fmul <4 x float> %6473, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6475 = insertelement <4 x i32> undef, i32 %t2664, i64 0
  %6476 = shufflevector <4 x i32> %6475, <4 x i32> undef, <4 x i32> zeroinitializer
  %6477 = add <4 x i32> %6476, <i32 -1, i32 0, i32 1, i32 2>
  %6478 = add <4 x i32> %6477, %t2670
  %6479 = sext <4 x i32> %6478 to <4 x i64>
  %6480 = extractelement <4 x i64> %6479, i64 0
  %6481 = getelementptr inbounds float, ptr %f6.host, i64 %6480
  %6482 = load float, ptr %6481, align 4, !tbaa !49
  %6483 = insertelement <4 x float> undef, float %6482, i64 0
  %6484 = extractelement <4 x i64> %6479, i64 1
  %6485 = getelementptr inbounds float, ptr %f6.host, i64 %6484
  %6486 = load float, ptr %6485, align 4, !tbaa !49
  %6487 = insertelement <4 x float> %6483, float %6486, i64 1
  %6488 = extractelement <4 x i64> %6479, i64 2
  %6489 = getelementptr inbounds float, ptr %f6.host, i64 %6488
  %6490 = load float, ptr %6489, align 4, !tbaa !49
  %6491 = insertelement <4 x float> %6487, float %6490, i64 2
  %6492 = extractelement <4 x i64> %6479, i64 3
  %6493 = getelementptr inbounds float, ptr %f6.host, i64 %6492
  %6494 = load float, ptr %6493, align 4, !tbaa !49
  %6495 = insertelement <4 x float> %6491, float %6494, i64 3
  %6496 = fmul <4 x float> %6495, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6497 = fadd <4 x float> %6474, %6496
  %6498 = fmul <4 x float> %6497, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6499 = fadd <4 x float> %6452, %6498
  %6500 = mul nsw <4 x i32> %6161, %1391
  %6501 = add nsw i32 %t2643, 1
  %6502 = insertelement <4 x i32> undef, i32 %6501, i64 0
  %6503 = shufflevector <4 x i32> %6502, <4 x i32> undef, <4 x i32> zeroinitializer
  %6504 = add nsw <4 x i32> %6503, <i32 0, i32 2, i32 4, i32 6>
  %6505 = add nsw <4 x i32> %6500, %6504
  %6506 = sext <4 x i32> %6505 to <4 x i64>
  %6507 = extractelement <4 x i64> %6506, i64 0
  %6508 = getelementptr inbounds float, ptr %f5.host, i64 %6507
  %6509 = load float, ptr %6508, align 4, !tbaa !45
  %6510 = insertelement <4 x float> undef, float %6509, i64 0
  %6511 = extractelement <4 x i64> %6506, i64 1
  %6512 = getelementptr inbounds float, ptr %f5.host, i64 %6511
  %6513 = load float, ptr %6512, align 4, !tbaa !45
  %6514 = insertelement <4 x float> %6510, float %6513, i64 1
  %6515 = extractelement <4 x i64> %6506, i64 2
  %6516 = getelementptr inbounds float, ptr %f5.host, i64 %6515
  %6517 = load float, ptr %6516, align 4, !tbaa !45
  %6518 = insertelement <4 x float> %6514, float %6517, i64 2
  %6519 = extractelement <4 x i64> %6506, i64 3
  %6520 = getelementptr inbounds float, ptr %f5.host, i64 %6519
  %6521 = load float, ptr %6520, align 4, !tbaa !45
  %6522 = insertelement <4 x float> %6518, float %6521, i64 3
  %6523 = fsub <4 x float> %6522, %6499
  %6524 = fmul <4 x float> %t2659, %6523
  %6525 = add nsw <4 x i32> %t2665, %6409
  %6526 = sext <4 x i32> %6525 to <4 x i64>
  %6527 = extractelement <4 x i64> %6526, i64 0
  %6528 = getelementptr inbounds float, ptr %f6.host, i64 %6527
  %6529 = load float, ptr %6528, align 4, !tbaa !49
  %6530 = insertelement <4 x float> undef, float %6529, i64 0
  %6531 = extractelement <4 x i64> %6526, i64 1
  %6532 = getelementptr inbounds float, ptr %f6.host, i64 %6531
  %6533 = load float, ptr %6532, align 4, !tbaa !49
  %6534 = insertelement <4 x float> %6530, float %6533, i64 1
  %6535 = extractelement <4 x i64> %6526, i64 2
  %6536 = getelementptr inbounds float, ptr %f6.host, i64 %6535
  %6537 = load float, ptr %6536, align 4, !tbaa !49
  %6538 = insertelement <4 x float> %6534, float %6537, i64 2
  %6539 = extractelement <4 x i64> %6526, i64 3
  %6540 = getelementptr inbounds float, ptr %f6.host, i64 %6539
  %6541 = load float, ptr %6540, align 4, !tbaa !49
  %6542 = insertelement <4 x float> %6538, float %6541, i64 3
  %6543 = fmul <4 x float> %6542, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6544 = add <4 x i32> %6431, %t2665
  %6545 = sext <4 x i32> %6544 to <4 x i64>
  %6546 = extractelement <4 x i64> %6545, i64 0
  %6547 = getelementptr inbounds float, ptr %f6.host, i64 %6546
  %6548 = load float, ptr %6547, align 4, !tbaa !49
  %6549 = insertelement <4 x float> undef, float %6548, i64 0
  %6550 = extractelement <4 x i64> %6545, i64 1
  %6551 = getelementptr inbounds float, ptr %f6.host, i64 %6550
  %6552 = load float, ptr %6551, align 4, !tbaa !49
  %6553 = insertelement <4 x float> %6549, float %6552, i64 1
  %6554 = extractelement <4 x i64> %6545, i64 2
  %6555 = getelementptr inbounds float, ptr %f6.host, i64 %6554
  %6556 = load float, ptr %6555, align 4, !tbaa !49
  %6557 = insertelement <4 x float> %6553, float %6556, i64 2
  %6558 = extractelement <4 x i64> %6545, i64 3
  %6559 = getelementptr inbounds float, ptr %f6.host, i64 %6558
  %6560 = load float, ptr %6559, align 4, !tbaa !49
  %6561 = insertelement <4 x float> %6557, float %6560, i64 3
  %6562 = fmul <4 x float> %6561, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6563 = fadd <4 x float> %6543, %6562
  %6564 = fmul <4 x float> %6563, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6565 = add nsw <4 x i32> %t2665, %6455
  %6566 = sext <4 x i32> %6565 to <4 x i64>
  %6567 = extractelement <4 x i64> %6566, i64 0
  %6568 = getelementptr inbounds float, ptr %f6.host, i64 %6567
  %6569 = load float, ptr %6568, align 4, !tbaa !49
  %6570 = insertelement <4 x float> undef, float %6569, i64 0
  %6571 = extractelement <4 x i64> %6566, i64 1
  %6572 = getelementptr inbounds float, ptr %f6.host, i64 %6571
  %6573 = load float, ptr %6572, align 4, !tbaa !49
  %6574 = insertelement <4 x float> %6570, float %6573, i64 1
  %6575 = extractelement <4 x i64> %6566, i64 2
  %6576 = getelementptr inbounds float, ptr %f6.host, i64 %6575
  %6577 = load float, ptr %6576, align 4, !tbaa !49
  %6578 = insertelement <4 x float> %6574, float %6577, i64 2
  %6579 = extractelement <4 x i64> %6566, i64 3
  %6580 = getelementptr inbounds float, ptr %f6.host, i64 %6579
  %6581 = load float, ptr %6580, align 4, !tbaa !49
  %6582 = insertelement <4 x float> %6578, float %6581, i64 3
  %6583 = fmul <4 x float> %6582, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6584 = add <4 x i32> %6477, %t2665
  %6585 = sext <4 x i32> %6584 to <4 x i64>
  %6586 = extractelement <4 x i64> %6585, i64 0
  %6587 = getelementptr inbounds float, ptr %f6.host, i64 %6586
  %6588 = load float, ptr %6587, align 4, !tbaa !49
  %6589 = insertelement <4 x float> undef, float %6588, i64 0
  %6590 = extractelement <4 x i64> %6585, i64 1
  %6591 = getelementptr inbounds float, ptr %f6.host, i64 %6590
  %6592 = load float, ptr %6591, align 4, !tbaa !49
  %6593 = insertelement <4 x float> %6589, float %6592, i64 1
  %6594 = extractelement <4 x i64> %6585, i64 2
  %6595 = getelementptr inbounds float, ptr %f6.host, i64 %6594
  %6596 = load float, ptr %6595, align 4, !tbaa !49
  %6597 = insertelement <4 x float> %6593, float %6596, i64 2
  %6598 = extractelement <4 x i64> %6585, i64 3
  %6599 = getelementptr inbounds float, ptr %f6.host, i64 %6598
  %6600 = load float, ptr %6599, align 4, !tbaa !49
  %6601 = insertelement <4 x float> %6597, float %6600, i64 3
  %6602 = fmul <4 x float> %6601, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6603 = fadd <4 x float> %6583, %6602
  %6604 = fmul <4 x float> %6603, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6605 = fadd <4 x float> %6564, %6604
  %6606 = mul nsw <4 x i32> %t2662, %1391
  %6607 = add nsw <4 x i32> %6606, %6504
  %6608 = sext <4 x i32> %6607 to <4 x i64>
  %6609 = extractelement <4 x i64> %6608, i64 0
  %6610 = getelementptr inbounds float, ptr %f5.host, i64 %6609
  %6611 = load float, ptr %6610, align 4, !tbaa !45
  %6612 = insertelement <4 x float> undef, float %6611, i64 0
  %6613 = extractelement <4 x i64> %6608, i64 1
  %6614 = getelementptr inbounds float, ptr %f5.host, i64 %6613
  %6615 = load float, ptr %6614, align 4, !tbaa !45
  %6616 = insertelement <4 x float> %6612, float %6615, i64 1
  %6617 = extractelement <4 x i64> %6608, i64 2
  %6618 = getelementptr inbounds float, ptr %f5.host, i64 %6617
  %6619 = load float, ptr %6618, align 4, !tbaa !45
  %6620 = insertelement <4 x float> %6616, float %6619, i64 2
  %6621 = extractelement <4 x i64> %6608, i64 3
  %6622 = getelementptr inbounds float, ptr %f5.host, i64 %6621
  %6623 = load float, ptr %6622, align 4, !tbaa !45
  %6624 = insertelement <4 x float> %6620, float %6623, i64 3
  %6625 = fsub <4 x float> %6624, %6605
  %6626 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2659
  %6627 = fmul <4 x float> %6626, %6625
  %6628 = fadd <4 x float> %6524, %6627
  %6629 = add nsw i64 %6383, %3246
  %6630 = getelementptr inbounds float, ptr %154, i64 %6629
  %6631 = load <4 x float>, ptr %6630, align 4, !tbaa !65
  %6632 = fmul <4 x float> %6631, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6633 = add nsw i64 %3248, %6383
  %6634 = getelementptr inbounds float, ptr %154, i64 %6633
  %6635 = load <4 x float>, ptr %6634, align 4, !tbaa !65
  %6636 = fmul <4 x float> %6635, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6637 = fadd <4 x float> %6632, %6636
  %6638 = fmul <4 x float> %6637, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6639 = add nsw i64 %6394, %3246
  %6640 = getelementptr inbounds float, ptr %154, i64 %6639
  %6641 = load <4 x float>, ptr %6640, align 4, !tbaa !65
  %6642 = fmul <4 x float> %6641, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6643 = add nsw i64 %3248, %6394
  %6644 = getelementptr inbounds float, ptr %154, i64 %6643
  %6645 = load <4 x float>, ptr %6644, align 4, !tbaa !65
  %6646 = fmul <4 x float> %6645, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6647 = fadd <4 x float> %6642, %6646
  %6648 = fmul <4 x float> %6647, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6649 = fadd <4 x float> %6638, %6648
  %6650 = fadd <4 x float> %6628, %6649
  %6651 = shufflevector <4 x float> %6406, <4 x float> %6650, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %6652 = sext i32 %6134 to i64
  %6653 = sub nsw i64 %6652, %1395
  %6654 = mul nsw i64 %6653, %1394
  %6655 = add nsw i64 %3250, %6654
  %6656 = getelementptr inbounds float, ptr %193, i64 %6655
  store <8 x float> %6651, ptr %6656, align 4, !tbaa !67
  br label %"produce f12658"

"produce f12658":                                 ; preds = %"for f127.s0.v3.v354.preheader", %"end for f127.s0.v3.v351", %"produce f12745"
  %6657 = trunc i64 %3406 to i32
  %6658 = and i32 %6657, 1
  %.not104.not = icmp eq i32 %6658, 0
  br i1 %.not104.not, label %true_bb60, label %"assert succeeded72"

true_bb60:                                        ; preds = %"produce f12658"
  br i1 %.not201, label %"end for f126.s0.v3.v364", label %"for f126.s0.v3.v363.preheader", !prof !4

"for f126.s0.v3.v363.preheader":                  ; preds = %true_bb60
  %6659 = trunc i64 %3406 to i32
  %6660 = add i32 %6659, 3
  %6661 = ashr i32 %6660, 1
  %6662 = and i32 %6660, 2
  %6663 = ashr i32 %6660, 2
  %t2671 = add nsw i32 %6663, %6662
  %6664 = sub nsw i32 %6661, %f72.v4.min_realized
  %6665 = mul nsw i32 %6664, %1954
  %6666 = add i32 %3255, %6665
  %6667 = add nsw i32 %t2671, %1955
  %t2678 = mul nsw i32 %6667, %178
  %6668 = sub nsw i32 %6663, %f127.v4.min_realized
  %t2680 = mul nsw i32 %6668, %178
  %6669 = sub nsw i32 %6661, %f4.v4.min_realized
  %6670 = mul nsw i32 %6669, %f4.stride.1
  %6671 = add i32 %3256, %6670
  %6672 = add i32 %t2671, %1956
  %6673 = mul nsw i32 %6672, %f5.stride.1
  %6674 = sub nsw i32 %6663, %f5.v4.min_realized
  %6675 = mul nsw i32 %6674, %f5.stride.1
  %6676 = sext i32 %t2680 to i64
  %6677 = add nsw i64 %6676, -1
  %6678 = sext i32 %t2678 to i64
  %6679 = add nsw i64 %6678, -1
  %6680 = sext i32 %6661 to i64
  %6681 = sub nsw i64 %6680, %1962
  %6682 = mul nsw i64 %6681, %1961
  %6683 = add nsw i64 %6682, %3259
  br label %"for f126.s0.v3.v363"

"for f126.s0.v3.v363":                            ; preds = %"for f126.s0.v3.v363.preheader", %"for f126.s0.v3.v363"
  %lsr.iv303 = phi i32 [ %lsr.iv.next304, %"for f126.s0.v3.v363" ], [ 0, %"for f126.s0.v3.v363.preheader" ]
  %lsr.iv301 = phi i32 [ %lsr.iv.next302, %"for f126.s0.v3.v363" ], [ %a947, %"for f126.s0.v3.v363.preheader" ]
  %6684 = add i32 %lsr.iv303, %161
  %6685 = add i32 %6684, -1
  %6686 = shl i32 %6685, 1
  %6687 = and i32 %6686, 2
  %6688 = ashr i32 %6685, 1
  %t2672 = add nsw i32 %6687, %6688
  %6689 = add i32 %6666, %lsr.iv303
  %6690 = sext i32 %6689 to i64
  %6691 = add nsw i64 %6690, -2
  %6692 = getelementptr inbounds float, ptr %f72.host, i64 %6691
  %6693 = load <4 x float>, ptr %6692, align 4, !tbaa !47
  %6694 = add nsw i64 %6690, 2
  %6695 = getelementptr inbounds float, ptr %f72.host, i64 %6694
  %6696 = load <4 x float>, ptr %6695, align 4, !tbaa !47
  %6697 = shufflevector <4 x float> %6693, <4 x float> %6696, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2674 = fmul <4 x float> %232, %6697
  %a948 = fptosi <4 x float> %t2674 to <4 x i32>
  %a951 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a948)
  %6698 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a951, <4 x i32> zeroinitializer)
  %6699 = sitofp <4 x i32> %6698 to <4 x float>
  %t2676 = fsub <4 x float> %t2674, %6699
  %6700 = add i32 %6671, %lsr.iv303
  %t2683 = sub nsw <4 x i32> %6698, %241
  %6701 = sub nsw i32 %t2672, %f5.v3.min_realized
  %t2686 = add nsw i32 %6701, %6673
  %t2687 = mul nsw <4 x i32> %t2683, %1391
  %6702 = sub nsw i32 %6688, %f5.v3.min_realized
  %t2689 = add nsw i32 %6702, %6673
  %t2691 = add nsw i32 %6701, %6675
  %t2692 = add nsw i32 %6702, %6675
  %6703 = add nsw <4 x i32> %t2683, <i32 1, i32 1, i32 1, i32 1>
  %t2693 = mul nsw <4 x i32> %6703, %1391
  %6704 = ashr i32 %6684, 1
  %t2694 = add nsw i32 %6704, %3257
  %6705 = getelementptr inbounds float, ptr %f72.host, i64 %6690
  %6706 = load <4 x float>, ptr %6705, align 4, !tbaa !47
  %6707 = add nsw i64 %6690, 4
  %6708 = getelementptr inbounds float, ptr %f72.host, i64 %6707
  %6709 = load <4 x float>, ptr %6708, align 4, !tbaa !47
  %6710 = shufflevector <4 x float> %6706, <4 x float> %6709, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2695 = fmul <4 x float> %232, %6710
  %a952 = fptosi <4 x float> %t2695 to <4 x i32>
  %a955 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a952)
  %6711 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a955, <4 x i32> zeroinitializer)
  %6712 = sitofp <4 x i32> %6711 to <4 x float>
  %t2697 = fsub <4 x float> %t2695, %6712
  %t2700 = sub nsw <4 x i32> %6711, %241
  %6713 = sub nsw i32 %t2694, %f5.v3.min_realized
  %t2702 = add nsw i32 %6713, %6673
  %t2703 = mul nsw <4 x i32> %t2700, %1391
  %6714 = sub nsw i32 %6704, %f5.v3.min_realized
  %t2705 = add nsw i32 %6714, %6673
  %t2706 = add nsw i32 %6713, %6675
  %t2707 = add nsw i32 %6714, %6675
  %6715 = add nsw <4 x i32> %t2700, <i32 1, i32 1, i32 1, i32 1>
  %t2708 = mul nsw <4 x i32> %6715, %1391
  %6716 = insertelement <4 x i32> undef, i32 %t2692, i64 0
  %6717 = shufflevector <4 x i32> %6716, <4 x i32> undef, <4 x i32> zeroinitializer
  %6718 = add nsw <4 x i32> %6717, <i32 0, i32 1, i32 2, i32 3>
  %6719 = add nsw <4 x i32> %t2693, %6718
  %6720 = sext <4 x i32> %6719 to <4 x i64>
  %6721 = extractelement <4 x i64> %6720, i64 0
  %6722 = getelementptr inbounds float, ptr %f5.host, i64 %6721
  %6723 = load float, ptr %6722, align 4, !tbaa !45
  %6724 = insertelement <4 x float> undef, float %6723, i64 0
  %6725 = extractelement <4 x i64> %6720, i64 1
  %6726 = getelementptr inbounds float, ptr %f5.host, i64 %6725
  %6727 = load float, ptr %6726, align 4, !tbaa !45
  %6728 = insertelement <4 x float> %6724, float %6727, i64 1
  %6729 = extractelement <4 x i64> %6720, i64 2
  %6730 = getelementptr inbounds float, ptr %f5.host, i64 %6729
  %6731 = load float, ptr %6730, align 4, !tbaa !45
  %6732 = insertelement <4 x float> %6728, float %6731, i64 2
  %6733 = extractelement <4 x i64> %6720, i64 3
  %6734 = getelementptr inbounds float, ptr %f5.host, i64 %6733
  %6735 = load float, ptr %6734, align 4, !tbaa !45
  %6736 = insertelement <4 x float> %6732, float %6735, i64 3
  %6737 = fmul <4 x float> %6736, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6738 = insertelement <4 x i32> undef, i32 %t2691, i64 0
  %6739 = shufflevector <4 x i32> %6738, <4 x i32> undef, <4 x i32> zeroinitializer
  %6740 = add <4 x i32> %6739, <i32 -1, i32 0, i32 1, i32 2>
  %6741 = add <4 x i32> %6740, %t2693
  %6742 = sext <4 x i32> %6741 to <4 x i64>
  %6743 = extractelement <4 x i64> %6742, i64 0
  %6744 = getelementptr inbounds float, ptr %f5.host, i64 %6743
  %6745 = load float, ptr %6744, align 4, !tbaa !45
  %6746 = insertelement <4 x float> undef, float %6745, i64 0
  %6747 = extractelement <4 x i64> %6742, i64 1
  %6748 = getelementptr inbounds float, ptr %f5.host, i64 %6747
  %6749 = load float, ptr %6748, align 4, !tbaa !45
  %6750 = insertelement <4 x float> %6746, float %6749, i64 1
  %6751 = extractelement <4 x i64> %6742, i64 2
  %6752 = getelementptr inbounds float, ptr %f5.host, i64 %6751
  %6753 = load float, ptr %6752, align 4, !tbaa !45
  %6754 = insertelement <4 x float> %6750, float %6753, i64 2
  %6755 = extractelement <4 x i64> %6742, i64 3
  %6756 = getelementptr inbounds float, ptr %f5.host, i64 %6755
  %6757 = load float, ptr %6756, align 4, !tbaa !45
  %6758 = insertelement <4 x float> %6754, float %6757, i64 3
  %6759 = fmul <4 x float> %6758, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6760 = fadd <4 x float> %6737, %6759
  %6761 = fmul <4 x float> %6760, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6762 = insertelement <4 x i32> undef, i32 %t2689, i64 0
  %6763 = shufflevector <4 x i32> %6762, <4 x i32> undef, <4 x i32> zeroinitializer
  %6764 = add nsw <4 x i32> %6763, <i32 0, i32 1, i32 2, i32 3>
  %6765 = add nsw <4 x i32> %t2693, %6764
  %6766 = sext <4 x i32> %6765 to <4 x i64>
  %6767 = extractelement <4 x i64> %6766, i64 0
  %6768 = getelementptr inbounds float, ptr %f5.host, i64 %6767
  %6769 = load float, ptr %6768, align 4, !tbaa !45
  %6770 = insertelement <4 x float> undef, float %6769, i64 0
  %6771 = extractelement <4 x i64> %6766, i64 1
  %6772 = getelementptr inbounds float, ptr %f5.host, i64 %6771
  %6773 = load float, ptr %6772, align 4, !tbaa !45
  %6774 = insertelement <4 x float> %6770, float %6773, i64 1
  %6775 = extractelement <4 x i64> %6766, i64 2
  %6776 = getelementptr inbounds float, ptr %f5.host, i64 %6775
  %6777 = load float, ptr %6776, align 4, !tbaa !45
  %6778 = insertelement <4 x float> %6774, float %6777, i64 2
  %6779 = extractelement <4 x i64> %6766, i64 3
  %6780 = getelementptr inbounds float, ptr %f5.host, i64 %6779
  %6781 = load float, ptr %6780, align 4, !tbaa !45
  %6782 = insertelement <4 x float> %6778, float %6781, i64 3
  %6783 = fmul <4 x float> %6782, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6784 = insertelement <4 x i32> undef, i32 %t2686, i64 0
  %6785 = shufflevector <4 x i32> %6784, <4 x i32> undef, <4 x i32> zeroinitializer
  %6786 = add <4 x i32> %6785, <i32 -1, i32 0, i32 1, i32 2>
  %6787 = add <4 x i32> %6786, %t2693
  %6788 = sext <4 x i32> %6787 to <4 x i64>
  %6789 = extractelement <4 x i64> %6788, i64 0
  %6790 = getelementptr inbounds float, ptr %f5.host, i64 %6789
  %6791 = load float, ptr %6790, align 4, !tbaa !45
  %6792 = insertelement <4 x float> undef, float %6791, i64 0
  %6793 = extractelement <4 x i64> %6788, i64 1
  %6794 = getelementptr inbounds float, ptr %f5.host, i64 %6793
  %6795 = load float, ptr %6794, align 4, !tbaa !45
  %6796 = insertelement <4 x float> %6792, float %6795, i64 1
  %6797 = extractelement <4 x i64> %6788, i64 2
  %6798 = getelementptr inbounds float, ptr %f5.host, i64 %6797
  %6799 = load float, ptr %6798, align 4, !tbaa !45
  %6800 = insertelement <4 x float> %6796, float %6799, i64 2
  %6801 = extractelement <4 x i64> %6788, i64 3
  %6802 = getelementptr inbounds float, ptr %f5.host, i64 %6801
  %6803 = load float, ptr %6802, align 4, !tbaa !45
  %6804 = insertelement <4 x float> %6800, float %6803, i64 3
  %6805 = fmul <4 x float> %6804, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6806 = fadd <4 x float> %6783, %6805
  %6807 = fmul <4 x float> %6806, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6808 = fadd <4 x float> %6761, %6807
  %6809 = mul nsw <4 x i32> %6703, %1959
  %6810 = add i32 %6700, -1
  %6811 = insertelement <4 x i32> undef, i32 %6810, i64 0
  %6812 = shufflevector <4 x i32> %6811, <4 x i32> undef, <4 x i32> zeroinitializer
  %6813 = add nsw <4 x i32> %6812, <i32 0, i32 2, i32 4, i32 6>
  %6814 = add nsw <4 x i32> %6809, %6813
  %6815 = sext <4 x i32> %6814 to <4 x i64>
  %6816 = extractelement <4 x i64> %6815, i64 0
  %6817 = getelementptr inbounds float, ptr %f4.host, i64 %6816
  %6818 = load float, ptr %6817, align 4, !tbaa !43
  %6819 = insertelement <4 x float> undef, float %6818, i64 0
  %6820 = extractelement <4 x i64> %6815, i64 1
  %6821 = getelementptr inbounds float, ptr %f4.host, i64 %6820
  %6822 = load float, ptr %6821, align 4, !tbaa !43
  %6823 = insertelement <4 x float> %6819, float %6822, i64 1
  %6824 = extractelement <4 x i64> %6815, i64 2
  %6825 = getelementptr inbounds float, ptr %f4.host, i64 %6824
  %6826 = load float, ptr %6825, align 4, !tbaa !43
  %6827 = insertelement <4 x float> %6823, float %6826, i64 2
  %6828 = extractelement <4 x i64> %6815, i64 3
  %6829 = getelementptr inbounds float, ptr %f4.host, i64 %6828
  %6830 = load float, ptr %6829, align 4, !tbaa !43
  %6831 = insertelement <4 x float> %6827, float %6830, i64 3
  %6832 = fsub <4 x float> %6831, %6808
  %6833 = fmul <4 x float> %t2676, %6832
  %6834 = add nsw <4 x i32> %t2687, %6718
  %6835 = sext <4 x i32> %6834 to <4 x i64>
  %6836 = extractelement <4 x i64> %6835, i64 0
  %6837 = getelementptr inbounds float, ptr %f5.host, i64 %6836
  %6838 = load float, ptr %6837, align 4, !tbaa !45
  %6839 = insertelement <4 x float> undef, float %6838, i64 0
  %6840 = extractelement <4 x i64> %6835, i64 1
  %6841 = getelementptr inbounds float, ptr %f5.host, i64 %6840
  %6842 = load float, ptr %6841, align 4, !tbaa !45
  %6843 = insertelement <4 x float> %6839, float %6842, i64 1
  %6844 = extractelement <4 x i64> %6835, i64 2
  %6845 = getelementptr inbounds float, ptr %f5.host, i64 %6844
  %6846 = load float, ptr %6845, align 4, !tbaa !45
  %6847 = insertelement <4 x float> %6843, float %6846, i64 2
  %6848 = extractelement <4 x i64> %6835, i64 3
  %6849 = getelementptr inbounds float, ptr %f5.host, i64 %6848
  %6850 = load float, ptr %6849, align 4, !tbaa !45
  %6851 = insertelement <4 x float> %6847, float %6850, i64 3
  %6852 = fmul <4 x float> %6851, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6853 = add <4 x i32> %t2687, %6739
  %6854 = add <4 x i32> %6853, <i32 -1, i32 0, i32 1, i32 2>
  %6855 = sext <4 x i32> %6854 to <4 x i64>
  %6856 = extractelement <4 x i64> %6855, i64 0
  %6857 = getelementptr inbounds float, ptr %f5.host, i64 %6856
  %6858 = load float, ptr %6857, align 4, !tbaa !45
  %6859 = insertelement <4 x float> undef, float %6858, i64 0
  %6860 = extractelement <4 x i64> %6855, i64 1
  %6861 = getelementptr inbounds float, ptr %f5.host, i64 %6860
  %6862 = load float, ptr %6861, align 4, !tbaa !45
  %6863 = insertelement <4 x float> %6859, float %6862, i64 1
  %6864 = extractelement <4 x i64> %6855, i64 2
  %6865 = getelementptr inbounds float, ptr %f5.host, i64 %6864
  %6866 = load float, ptr %6865, align 4, !tbaa !45
  %6867 = insertelement <4 x float> %6863, float %6866, i64 2
  %6868 = extractelement <4 x i64> %6855, i64 3
  %6869 = getelementptr inbounds float, ptr %f5.host, i64 %6868
  %6870 = load float, ptr %6869, align 4, !tbaa !45
  %6871 = insertelement <4 x float> %6867, float %6870, i64 3
  %6872 = fmul <4 x float> %6871, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6873 = fadd <4 x float> %6852, %6872
  %6874 = fmul <4 x float> %6873, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6875 = add nsw <4 x i32> %t2687, %6764
  %6876 = sext <4 x i32> %6875 to <4 x i64>
  %6877 = extractelement <4 x i64> %6876, i64 0
  %6878 = getelementptr inbounds float, ptr %f5.host, i64 %6877
  %6879 = load float, ptr %6878, align 4, !tbaa !45
  %6880 = insertelement <4 x float> undef, float %6879, i64 0
  %6881 = extractelement <4 x i64> %6876, i64 1
  %6882 = getelementptr inbounds float, ptr %f5.host, i64 %6881
  %6883 = load float, ptr %6882, align 4, !tbaa !45
  %6884 = insertelement <4 x float> %6880, float %6883, i64 1
  %6885 = extractelement <4 x i64> %6876, i64 2
  %6886 = getelementptr inbounds float, ptr %f5.host, i64 %6885
  %6887 = load float, ptr %6886, align 4, !tbaa !45
  %6888 = insertelement <4 x float> %6884, float %6887, i64 2
  %6889 = extractelement <4 x i64> %6876, i64 3
  %6890 = getelementptr inbounds float, ptr %f5.host, i64 %6889
  %6891 = load float, ptr %6890, align 4, !tbaa !45
  %6892 = insertelement <4 x float> %6888, float %6891, i64 3
  %6893 = fmul <4 x float> %6892, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6894 = add <4 x i32> %t2687, %6785
  %6895 = add <4 x i32> %6894, <i32 -1, i32 0, i32 1, i32 2>
  %6896 = sext <4 x i32> %6895 to <4 x i64>
  %6897 = extractelement <4 x i64> %6896, i64 0
  %6898 = getelementptr inbounds float, ptr %f5.host, i64 %6897
  %6899 = load float, ptr %6898, align 4, !tbaa !45
  %6900 = insertelement <4 x float> undef, float %6899, i64 0
  %6901 = extractelement <4 x i64> %6896, i64 1
  %6902 = getelementptr inbounds float, ptr %f5.host, i64 %6901
  %6903 = load float, ptr %6902, align 4, !tbaa !45
  %6904 = insertelement <4 x float> %6900, float %6903, i64 1
  %6905 = extractelement <4 x i64> %6896, i64 2
  %6906 = getelementptr inbounds float, ptr %f5.host, i64 %6905
  %6907 = load float, ptr %6906, align 4, !tbaa !45
  %6908 = insertelement <4 x float> %6904, float %6907, i64 2
  %6909 = extractelement <4 x i64> %6896, i64 3
  %6910 = getelementptr inbounds float, ptr %f5.host, i64 %6909
  %6911 = load float, ptr %6910, align 4, !tbaa !45
  %6912 = insertelement <4 x float> %6908, float %6911, i64 3
  %6913 = fmul <4 x float> %6912, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6914 = fadd <4 x float> %6893, %6913
  %6915 = fmul <4 x float> %6914, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6916 = fadd <4 x float> %6874, %6915
  %6917 = mul nsw <4 x i32> %t2683, %1959
  %6918 = add nsw <4 x i32> %6917, %6813
  %6919 = sext <4 x i32> %6918 to <4 x i64>
  %6920 = extractelement <4 x i64> %6919, i64 0
  %6921 = getelementptr inbounds float, ptr %f4.host, i64 %6920
  %6922 = load float, ptr %6921, align 4, !tbaa !43
  %6923 = insertelement <4 x float> undef, float %6922, i64 0
  %6924 = extractelement <4 x i64> %6919, i64 1
  %6925 = getelementptr inbounds float, ptr %f4.host, i64 %6924
  %6926 = load float, ptr %6925, align 4, !tbaa !43
  %6927 = insertelement <4 x float> %6923, float %6926, i64 1
  %6928 = extractelement <4 x i64> %6919, i64 2
  %6929 = getelementptr inbounds float, ptr %f4.host, i64 %6928
  %6930 = load float, ptr %6929, align 4, !tbaa !43
  %6931 = insertelement <4 x float> %6927, float %6930, i64 2
  %6932 = extractelement <4 x i64> %6919, i64 3
  %6933 = getelementptr inbounds float, ptr %f4.host, i64 %6932
  %6934 = load float, ptr %6933, align 4, !tbaa !43
  %6935 = insertelement <4 x float> %6931, float %6934, i64 3
  %6936 = fsub <4 x float> %6935, %6916
  %6937 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2676
  %6938 = fmul <4 x float> %6937, %6936
  %6939 = fadd <4 x float> %6833, %6938
  %6940 = sext i32 %6688 to i64
  %6941 = sub nsw i64 %6940, %1396
  %6942 = add nsw i64 %6941, %6676
  %6943 = getelementptr inbounds float, ptr %193, i64 %6942
  %6944 = load <4 x float>, ptr %6943, align 4, !tbaa !67
  %6945 = fmul <4 x float> %6944, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6946 = sext i32 %t2672 to i64
  %6947 = sub nsw i64 %6946, %1396
  %6948 = add nsw i64 %6677, %6947
  %6949 = getelementptr inbounds float, ptr %193, i64 %6948
  %6950 = load <4 x float>, ptr %6949, align 4, !tbaa !67
  %6951 = fmul <4 x float> %6950, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6952 = fadd <4 x float> %6945, %6951
  %6953 = fmul <4 x float> %6952, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6954 = add nsw i64 %6941, %6678
  %6955 = getelementptr inbounds float, ptr %193, i64 %6954
  %6956 = load <4 x float>, ptr %6955, align 4, !tbaa !67
  %6957 = fmul <4 x float> %6956, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6958 = add nsw i64 %6679, %6947
  %6959 = getelementptr inbounds float, ptr %193, i64 %6958
  %6960 = load <4 x float>, ptr %6959, align 4, !tbaa !67
  %6961 = fmul <4 x float> %6960, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6962 = fadd <4 x float> %6957, %6961
  %6963 = fmul <4 x float> %6962, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6964 = fadd <4 x float> %6953, %6963
  %6965 = fadd <4 x float> %6939, %6964
  %6966 = insertelement <4 x i32> undef, i32 %t2707, i64 0
  %6967 = shufflevector <4 x i32> %6966, <4 x i32> undef, <4 x i32> zeroinitializer
  %6968 = add nsw <4 x i32> %6967, <i32 0, i32 1, i32 2, i32 3>
  %6969 = add nsw <4 x i32> %t2708, %6968
  %6970 = sext <4 x i32> %6969 to <4 x i64>
  %6971 = extractelement <4 x i64> %6970, i64 0
  %6972 = getelementptr inbounds float, ptr %f5.host, i64 %6971
  %6973 = load float, ptr %6972, align 4, !tbaa !45
  %6974 = insertelement <4 x float> undef, float %6973, i64 0
  %6975 = extractelement <4 x i64> %6970, i64 1
  %6976 = getelementptr inbounds float, ptr %f5.host, i64 %6975
  %6977 = load float, ptr %6976, align 4, !tbaa !45
  %6978 = insertelement <4 x float> %6974, float %6977, i64 1
  %6979 = extractelement <4 x i64> %6970, i64 2
  %6980 = getelementptr inbounds float, ptr %f5.host, i64 %6979
  %6981 = load float, ptr %6980, align 4, !tbaa !45
  %6982 = insertelement <4 x float> %6978, float %6981, i64 2
  %6983 = extractelement <4 x i64> %6970, i64 3
  %6984 = getelementptr inbounds float, ptr %f5.host, i64 %6983
  %6985 = load float, ptr %6984, align 4, !tbaa !45
  %6986 = insertelement <4 x float> %6982, float %6985, i64 3
  %6987 = fmul <4 x float> %6986, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6988 = insertelement <4 x i32> undef, i32 %t2706, i64 0
  %6989 = shufflevector <4 x i32> %6988, <4 x i32> undef, <4 x i32> zeroinitializer
  %6990 = add <4 x i32> %6989, <i32 -1, i32 0, i32 1, i32 2>
  %6991 = add <4 x i32> %6990, %t2708
  %6992 = sext <4 x i32> %6991 to <4 x i64>
  %6993 = extractelement <4 x i64> %6992, i64 0
  %6994 = getelementptr inbounds float, ptr %f5.host, i64 %6993
  %6995 = load float, ptr %6994, align 4, !tbaa !45
  %6996 = insertelement <4 x float> undef, float %6995, i64 0
  %6997 = extractelement <4 x i64> %6992, i64 1
  %6998 = getelementptr inbounds float, ptr %f5.host, i64 %6997
  %6999 = load float, ptr %6998, align 4, !tbaa !45
  %7000 = insertelement <4 x float> %6996, float %6999, i64 1
  %7001 = extractelement <4 x i64> %6992, i64 2
  %7002 = getelementptr inbounds float, ptr %f5.host, i64 %7001
  %7003 = load float, ptr %7002, align 4, !tbaa !45
  %7004 = insertelement <4 x float> %7000, float %7003, i64 2
  %7005 = extractelement <4 x i64> %6992, i64 3
  %7006 = getelementptr inbounds float, ptr %f5.host, i64 %7005
  %7007 = load float, ptr %7006, align 4, !tbaa !45
  %7008 = insertelement <4 x float> %7004, float %7007, i64 3
  %7009 = fmul <4 x float> %7008, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7010 = fadd <4 x float> %6987, %7009
  %7011 = fmul <4 x float> %7010, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7012 = insertelement <4 x i32> undef, i32 %t2705, i64 0
  %7013 = shufflevector <4 x i32> %7012, <4 x i32> undef, <4 x i32> zeroinitializer
  %7014 = add nsw <4 x i32> %7013, <i32 0, i32 1, i32 2, i32 3>
  %7015 = add nsw <4 x i32> %t2708, %7014
  %7016 = sext <4 x i32> %7015 to <4 x i64>
  %7017 = extractelement <4 x i64> %7016, i64 0
  %7018 = getelementptr inbounds float, ptr %f5.host, i64 %7017
  %7019 = load float, ptr %7018, align 4, !tbaa !45
  %7020 = insertelement <4 x float> undef, float %7019, i64 0
  %7021 = extractelement <4 x i64> %7016, i64 1
  %7022 = getelementptr inbounds float, ptr %f5.host, i64 %7021
  %7023 = load float, ptr %7022, align 4, !tbaa !45
  %7024 = insertelement <4 x float> %7020, float %7023, i64 1
  %7025 = extractelement <4 x i64> %7016, i64 2
  %7026 = getelementptr inbounds float, ptr %f5.host, i64 %7025
  %7027 = load float, ptr %7026, align 4, !tbaa !45
  %7028 = insertelement <4 x float> %7024, float %7027, i64 2
  %7029 = extractelement <4 x i64> %7016, i64 3
  %7030 = getelementptr inbounds float, ptr %f5.host, i64 %7029
  %7031 = load float, ptr %7030, align 4, !tbaa !45
  %7032 = insertelement <4 x float> %7028, float %7031, i64 3
  %7033 = fmul <4 x float> %7032, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7034 = insertelement <4 x i32> undef, i32 %t2702, i64 0
  %7035 = shufflevector <4 x i32> %7034, <4 x i32> undef, <4 x i32> zeroinitializer
  %7036 = add <4 x i32> %7035, <i32 -1, i32 0, i32 1, i32 2>
  %7037 = add <4 x i32> %7036, %t2708
  %7038 = sext <4 x i32> %7037 to <4 x i64>
  %7039 = extractelement <4 x i64> %7038, i64 0
  %7040 = getelementptr inbounds float, ptr %f5.host, i64 %7039
  %7041 = load float, ptr %7040, align 4, !tbaa !45
  %7042 = insertelement <4 x float> undef, float %7041, i64 0
  %7043 = extractelement <4 x i64> %7038, i64 1
  %7044 = getelementptr inbounds float, ptr %f5.host, i64 %7043
  %7045 = load float, ptr %7044, align 4, !tbaa !45
  %7046 = insertelement <4 x float> %7042, float %7045, i64 1
  %7047 = extractelement <4 x i64> %7038, i64 2
  %7048 = getelementptr inbounds float, ptr %f5.host, i64 %7047
  %7049 = load float, ptr %7048, align 4, !tbaa !45
  %7050 = insertelement <4 x float> %7046, float %7049, i64 2
  %7051 = extractelement <4 x i64> %7038, i64 3
  %7052 = getelementptr inbounds float, ptr %f5.host, i64 %7051
  %7053 = load float, ptr %7052, align 4, !tbaa !45
  %7054 = insertelement <4 x float> %7050, float %7053, i64 3
  %7055 = fmul <4 x float> %7054, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7056 = fadd <4 x float> %7033, %7055
  %7057 = fmul <4 x float> %7056, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7058 = fadd <4 x float> %7011, %7057
  %7059 = mul nsw <4 x i32> %6715, %1959
  %7060 = insertelement <4 x i32> undef, i32 %6700, i64 0
  %7061 = shufflevector <4 x i32> %7060, <4 x i32> undef, <4 x i32> zeroinitializer
  %7062 = add nsw <4 x i32> %7061, <i32 0, i32 2, i32 4, i32 6>
  %7063 = add nsw <4 x i32> %7059, %7062
  %7064 = sext <4 x i32> %7063 to <4 x i64>
  %7065 = extractelement <4 x i64> %7064, i64 0
  %7066 = getelementptr inbounds float, ptr %f4.host, i64 %7065
  %7067 = load float, ptr %7066, align 4, !tbaa !43
  %7068 = insertelement <4 x float> undef, float %7067, i64 0
  %7069 = extractelement <4 x i64> %7064, i64 1
  %7070 = getelementptr inbounds float, ptr %f4.host, i64 %7069
  %7071 = load float, ptr %7070, align 4, !tbaa !43
  %7072 = insertelement <4 x float> %7068, float %7071, i64 1
  %7073 = extractelement <4 x i64> %7064, i64 2
  %7074 = getelementptr inbounds float, ptr %f4.host, i64 %7073
  %7075 = load float, ptr %7074, align 4, !tbaa !43
  %7076 = insertelement <4 x float> %7072, float %7075, i64 2
  %7077 = extractelement <4 x i64> %7064, i64 3
  %7078 = getelementptr inbounds float, ptr %f4.host, i64 %7077
  %7079 = load float, ptr %7078, align 4, !tbaa !43
  %7080 = insertelement <4 x float> %7076, float %7079, i64 3
  %7081 = fsub <4 x float> %7080, %7058
  %7082 = fmul <4 x float> %t2697, %7081
  %7083 = add nsw <4 x i32> %t2703, %6968
  %7084 = sext <4 x i32> %7083 to <4 x i64>
  %7085 = extractelement <4 x i64> %7084, i64 0
  %7086 = getelementptr inbounds float, ptr %f5.host, i64 %7085
  %7087 = load float, ptr %7086, align 4, !tbaa !45
  %7088 = insertelement <4 x float> undef, float %7087, i64 0
  %7089 = extractelement <4 x i64> %7084, i64 1
  %7090 = getelementptr inbounds float, ptr %f5.host, i64 %7089
  %7091 = load float, ptr %7090, align 4, !tbaa !45
  %7092 = insertelement <4 x float> %7088, float %7091, i64 1
  %7093 = extractelement <4 x i64> %7084, i64 2
  %7094 = getelementptr inbounds float, ptr %f5.host, i64 %7093
  %7095 = load float, ptr %7094, align 4, !tbaa !45
  %7096 = insertelement <4 x float> %7092, float %7095, i64 2
  %7097 = extractelement <4 x i64> %7084, i64 3
  %7098 = getelementptr inbounds float, ptr %f5.host, i64 %7097
  %7099 = load float, ptr %7098, align 4, !tbaa !45
  %7100 = insertelement <4 x float> %7096, float %7099, i64 3
  %7101 = fmul <4 x float> %7100, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7102 = add <4 x i32> %6990, %t2703
  %7103 = sext <4 x i32> %7102 to <4 x i64>
  %7104 = extractelement <4 x i64> %7103, i64 0
  %7105 = getelementptr inbounds float, ptr %f5.host, i64 %7104
  %7106 = load float, ptr %7105, align 4, !tbaa !45
  %7107 = insertelement <4 x float> undef, float %7106, i64 0
  %7108 = extractelement <4 x i64> %7103, i64 1
  %7109 = getelementptr inbounds float, ptr %f5.host, i64 %7108
  %7110 = load float, ptr %7109, align 4, !tbaa !45
  %7111 = insertelement <4 x float> %7107, float %7110, i64 1
  %7112 = extractelement <4 x i64> %7103, i64 2
  %7113 = getelementptr inbounds float, ptr %f5.host, i64 %7112
  %7114 = load float, ptr %7113, align 4, !tbaa !45
  %7115 = insertelement <4 x float> %7111, float %7114, i64 2
  %7116 = extractelement <4 x i64> %7103, i64 3
  %7117 = getelementptr inbounds float, ptr %f5.host, i64 %7116
  %7118 = load float, ptr %7117, align 4, !tbaa !45
  %7119 = insertelement <4 x float> %7115, float %7118, i64 3
  %7120 = fmul <4 x float> %7119, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7121 = fadd <4 x float> %7101, %7120
  %7122 = fmul <4 x float> %7121, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7123 = add nsw <4 x i32> %t2703, %7014
  %7124 = sext <4 x i32> %7123 to <4 x i64>
  %7125 = extractelement <4 x i64> %7124, i64 0
  %7126 = getelementptr inbounds float, ptr %f5.host, i64 %7125
  %7127 = load float, ptr %7126, align 4, !tbaa !45
  %7128 = insertelement <4 x float> undef, float %7127, i64 0
  %7129 = extractelement <4 x i64> %7124, i64 1
  %7130 = getelementptr inbounds float, ptr %f5.host, i64 %7129
  %7131 = load float, ptr %7130, align 4, !tbaa !45
  %7132 = insertelement <4 x float> %7128, float %7131, i64 1
  %7133 = extractelement <4 x i64> %7124, i64 2
  %7134 = getelementptr inbounds float, ptr %f5.host, i64 %7133
  %7135 = load float, ptr %7134, align 4, !tbaa !45
  %7136 = insertelement <4 x float> %7132, float %7135, i64 2
  %7137 = extractelement <4 x i64> %7124, i64 3
  %7138 = getelementptr inbounds float, ptr %f5.host, i64 %7137
  %7139 = load float, ptr %7138, align 4, !tbaa !45
  %7140 = insertelement <4 x float> %7136, float %7139, i64 3
  %7141 = fmul <4 x float> %7140, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7142 = add <4 x i32> %7036, %t2703
  %7143 = sext <4 x i32> %7142 to <4 x i64>
  %7144 = extractelement <4 x i64> %7143, i64 0
  %7145 = getelementptr inbounds float, ptr %f5.host, i64 %7144
  %7146 = load float, ptr %7145, align 4, !tbaa !45
  %7147 = insertelement <4 x float> undef, float %7146, i64 0
  %7148 = extractelement <4 x i64> %7143, i64 1
  %7149 = getelementptr inbounds float, ptr %f5.host, i64 %7148
  %7150 = load float, ptr %7149, align 4, !tbaa !45
  %7151 = insertelement <4 x float> %7147, float %7150, i64 1
  %7152 = extractelement <4 x i64> %7143, i64 2
  %7153 = getelementptr inbounds float, ptr %f5.host, i64 %7152
  %7154 = load float, ptr %7153, align 4, !tbaa !45
  %7155 = insertelement <4 x float> %7151, float %7154, i64 2
  %7156 = extractelement <4 x i64> %7143, i64 3
  %7157 = getelementptr inbounds float, ptr %f5.host, i64 %7156
  %7158 = load float, ptr %7157, align 4, !tbaa !45
  %7159 = insertelement <4 x float> %7155, float %7158, i64 3
  %7160 = fmul <4 x float> %7159, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7161 = fadd <4 x float> %7141, %7160
  %7162 = fmul <4 x float> %7161, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7163 = fadd <4 x float> %7122, %7162
  %7164 = mul nsw <4 x i32> %t2700, %1959
  %7165 = add nsw <4 x i32> %7164, %7062
  %7166 = sext <4 x i32> %7165 to <4 x i64>
  %7167 = extractelement <4 x i64> %7166, i64 0
  %7168 = getelementptr inbounds float, ptr %f4.host, i64 %7167
  %7169 = load float, ptr %7168, align 4, !tbaa !43
  %7170 = insertelement <4 x float> undef, float %7169, i64 0
  %7171 = extractelement <4 x i64> %7166, i64 1
  %7172 = getelementptr inbounds float, ptr %f4.host, i64 %7171
  %7173 = load float, ptr %7172, align 4, !tbaa !43
  %7174 = insertelement <4 x float> %7170, float %7173, i64 1
  %7175 = extractelement <4 x i64> %7166, i64 2
  %7176 = getelementptr inbounds float, ptr %f4.host, i64 %7175
  %7177 = load float, ptr %7176, align 4, !tbaa !43
  %7178 = insertelement <4 x float> %7174, float %7177, i64 2
  %7179 = extractelement <4 x i64> %7166, i64 3
  %7180 = getelementptr inbounds float, ptr %f4.host, i64 %7179
  %7181 = load float, ptr %7180, align 4, !tbaa !43
  %7182 = insertelement <4 x float> %7178, float %7181, i64 3
  %7183 = fsub <4 x float> %7182, %7163
  %7184 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2697
  %7185 = fmul <4 x float> %7184, %7183
  %7186 = fadd <4 x float> %7082, %7185
  %7187 = sext i32 %6704 to i64
  %7188 = sub nsw i64 %7187, %1396
  %7189 = add nsw i64 %7188, %6676
  %7190 = getelementptr inbounds float, ptr %193, i64 %7189
  %7191 = load <4 x float>, ptr %7190, align 4, !tbaa !67
  %7192 = fmul <4 x float> %7191, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7193 = sext i32 %t2694 to i64
  %7194 = sub nsw i64 %7193, %1396
  %7195 = add nsw i64 %6677, %7194
  %7196 = getelementptr inbounds float, ptr %193, i64 %7195
  %7197 = load <4 x float>, ptr %7196, align 4, !tbaa !67
  %7198 = fmul <4 x float> %7197, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7199 = fadd <4 x float> %7192, %7198
  %7200 = fmul <4 x float> %7199, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7201 = add nsw i64 %7188, %6678
  %7202 = getelementptr inbounds float, ptr %193, i64 %7201
  %7203 = load <4 x float>, ptr %7202, align 4, !tbaa !67
  %7204 = fmul <4 x float> %7203, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7205 = add nsw i64 %6679, %7194
  %7206 = getelementptr inbounds float, ptr %193, i64 %7205
  %7207 = load <4 x float>, ptr %7206, align 4, !tbaa !67
  %7208 = fmul <4 x float> %7207, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7209 = fadd <4 x float> %7204, %7208
  %7210 = fmul <4 x float> %7209, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7211 = fadd <4 x float> %7200, %7210
  %7212 = fadd <4 x float> %7186, %7211
  %7213 = shufflevector <4 x float> %6965, <4 x float> %7212, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %7214 = sext i32 %6684 to i64
  %7215 = add nsw i64 %6683, %7214
  %7216 = getelementptr inbounds float, ptr %222, i64 %7215
  store <8 x float> %7213, ptr %7216, align 4, !tbaa !69
  %lsr.iv.next302 = add i32 %lsr.iv301, -1
  %lsr.iv.next304 = add nuw i32 %lsr.iv303, 8
  %.not118 = icmp eq i32 %lsr.iv.next302, 0
  br i1 %.not118, label %"end for f126.s0.v3.v364", label %"for f126.s0.v3.v363"

"end for f126.s0.v3.v364":                        ; preds = %"for f126.s0.v3.v363", %true_bb60
  br i1 %3260, label %"for f126.s0.v3.v366.preheader", label %"assert succeeded72", !prof !5

"for f126.s0.v3.v366.preheader":                  ; preds = %"end for f126.s0.v3.v364"
  %7217 = trunc i64 %3406 to i32
  %7218 = add i32 %7217, 3
  %7219 = ashr i32 %7218, 1
  %7220 = and i32 %7218, 2
  %7221 = ashr i32 %7218, 2
  %t2709 = add nsw i32 %7221, %7220
  %7222 = sub nsw i32 %7219, %f72.v4.min_realized
  %7223 = mul nsw i32 %7222, %1954
  %t2712 = add nsw i32 %3263, %7223
  %7224 = sext i32 %t2712 to i64
  %7225 = getelementptr inbounds float, ptr %f72.host, i64 %7224
  %7226 = load <4 x float>, ptr %7225, align 4, !tbaa !47
  %7227 = add nsw i64 %7224, 4
  %7228 = getelementptr inbounds float, ptr %f72.host, i64 %7227
  %7229 = load <4 x float>, ptr %7228, align 4, !tbaa !47
  %7230 = shufflevector <4 x float> %7226, <4 x float> %7229, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2713 = fmul <4 x float> %232, %7230
  %a958 = fptosi <4 x float> %t2713 to <4 x i32>
  %a961 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a958)
  %7231 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a961, <4 x i32> zeroinitializer)
  %7232 = sitofp <4 x i32> %7231 to <4 x float>
  %t2715 = fsub <4 x float> %t2713, %7232
  %7233 = add nsw i32 %t2709, %1955
  %t2717 = mul nsw i32 %7233, %178
  %7234 = sub nsw i32 %7221, %f127.v4.min_realized
  %t2719 = mul nsw i32 %7234, %178
  %7235 = sub nsw i32 %7219, %f4.v4.min_realized
  %7236 = mul nsw i32 %7235, %f4.stride.1
  %t2720 = add nsw i32 %7236, %3264
  %t2722 = sub nsw <4 x i32> %7231, %241
  %7237 = add i32 %t2709, %1956
  %7238 = mul nsw i32 %7237, %f5.stride.1
  %t2725 = add nsw i32 %7238, %3265
  %t2726 = mul nsw <4 x i32> %t2722, %1391
  %t2728 = add nsw i32 %7238, %3266
  %7239 = sub nsw i32 %7221, %f5.v4.min_realized
  %7240 = mul nsw i32 %7239, %f5.stride.1
  %t2730 = add nsw i32 %7240, %3265
  %t2731 = add nsw i32 %7240, %3266
  %7241 = add nsw <4 x i32> %t2722, <i32 1, i32 1, i32 1, i32 1>
  %t2732 = mul nsw <4 x i32> %7241, %1391
  %7242 = shufflevector <4 x float> %7226, <4 x float> %7229, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2734 = fmul <4 x float> %232, %7242
  %a962 = fptosi <4 x float> %t2734 to <4 x i32>
  %a965 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a962)
  %7243 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a965, <4 x i32> zeroinitializer)
  %7244 = sitofp <4 x i32> %7243 to <4 x float>
  %t2736 = fsub <4 x float> %t2734, %7244
  %t2739 = sub nsw <4 x i32> %7243, %241
  %t2741 = add nsw i32 %7238, %3270
  %t2742 = mul nsw <4 x i32> %t2739, %1391
  %t2744 = add nsw i32 %7238, %3271
  %t2745 = add nsw i32 %7240, %3270
  %t2746 = add nsw i32 %7240, %3271
  %7245 = add nsw <4 x i32> %t2739, <i32 1, i32 1, i32 1, i32 1>
  %t2747 = mul nsw <4 x i32> %7245, %1391
  %7246 = insertelement <4 x i32> undef, i32 %t2731, i64 0
  %7247 = shufflevector <4 x i32> %7246, <4 x i32> undef, <4 x i32> zeroinitializer
  %7248 = add nsw <4 x i32> %7247, <i32 0, i32 1, i32 2, i32 3>
  %7249 = add nsw <4 x i32> %t2732, %7248
  %7250 = sext <4 x i32> %7249 to <4 x i64>
  %7251 = extractelement <4 x i64> %7250, i64 0
  %7252 = getelementptr inbounds float, ptr %f5.host, i64 %7251
  %7253 = load float, ptr %7252, align 4, !tbaa !45
  %7254 = insertelement <4 x float> undef, float %7253, i64 0
  %7255 = extractelement <4 x i64> %7250, i64 1
  %7256 = getelementptr inbounds float, ptr %f5.host, i64 %7255
  %7257 = load float, ptr %7256, align 4, !tbaa !45
  %7258 = insertelement <4 x float> %7254, float %7257, i64 1
  %7259 = extractelement <4 x i64> %7250, i64 2
  %7260 = getelementptr inbounds float, ptr %f5.host, i64 %7259
  %7261 = load float, ptr %7260, align 4, !tbaa !45
  %7262 = insertelement <4 x float> %7258, float %7261, i64 2
  %7263 = extractelement <4 x i64> %7250, i64 3
  %7264 = getelementptr inbounds float, ptr %f5.host, i64 %7263
  %7265 = load float, ptr %7264, align 4, !tbaa !45
  %7266 = insertelement <4 x float> %7262, float %7265, i64 3
  %7267 = fmul <4 x float> %7266, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7268 = insertelement <4 x i32> undef, i32 %t2730, i64 0
  %7269 = shufflevector <4 x i32> %7268, <4 x i32> undef, <4 x i32> zeroinitializer
  %7270 = add <4 x i32> %7269, <i32 -1, i32 0, i32 1, i32 2>
  %7271 = add <4 x i32> %7270, %t2732
  %7272 = sext <4 x i32> %7271 to <4 x i64>
  %7273 = extractelement <4 x i64> %7272, i64 0
  %7274 = getelementptr inbounds float, ptr %f5.host, i64 %7273
  %7275 = load float, ptr %7274, align 4, !tbaa !45
  %7276 = insertelement <4 x float> undef, float %7275, i64 0
  %7277 = extractelement <4 x i64> %7272, i64 1
  %7278 = getelementptr inbounds float, ptr %f5.host, i64 %7277
  %7279 = load float, ptr %7278, align 4, !tbaa !45
  %7280 = insertelement <4 x float> %7276, float %7279, i64 1
  %7281 = extractelement <4 x i64> %7272, i64 2
  %7282 = getelementptr inbounds float, ptr %f5.host, i64 %7281
  %7283 = load float, ptr %7282, align 4, !tbaa !45
  %7284 = insertelement <4 x float> %7280, float %7283, i64 2
  %7285 = extractelement <4 x i64> %7272, i64 3
  %7286 = getelementptr inbounds float, ptr %f5.host, i64 %7285
  %7287 = load float, ptr %7286, align 4, !tbaa !45
  %7288 = insertelement <4 x float> %7284, float %7287, i64 3
  %7289 = fmul <4 x float> %7288, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7290 = fadd <4 x float> %7267, %7289
  %7291 = fmul <4 x float> %7290, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7292 = insertelement <4 x i32> undef, i32 %t2728, i64 0
  %7293 = shufflevector <4 x i32> %7292, <4 x i32> undef, <4 x i32> zeroinitializer
  %7294 = add nsw <4 x i32> %7293, <i32 0, i32 1, i32 2, i32 3>
  %7295 = add nsw <4 x i32> %t2732, %7294
  %7296 = sext <4 x i32> %7295 to <4 x i64>
  %7297 = extractelement <4 x i64> %7296, i64 0
  %7298 = getelementptr inbounds float, ptr %f5.host, i64 %7297
  %7299 = load float, ptr %7298, align 4, !tbaa !45
  %7300 = insertelement <4 x float> undef, float %7299, i64 0
  %7301 = extractelement <4 x i64> %7296, i64 1
  %7302 = getelementptr inbounds float, ptr %f5.host, i64 %7301
  %7303 = load float, ptr %7302, align 4, !tbaa !45
  %7304 = insertelement <4 x float> %7300, float %7303, i64 1
  %7305 = extractelement <4 x i64> %7296, i64 2
  %7306 = getelementptr inbounds float, ptr %f5.host, i64 %7305
  %7307 = load float, ptr %7306, align 4, !tbaa !45
  %7308 = insertelement <4 x float> %7304, float %7307, i64 2
  %7309 = extractelement <4 x i64> %7296, i64 3
  %7310 = getelementptr inbounds float, ptr %f5.host, i64 %7309
  %7311 = load float, ptr %7310, align 4, !tbaa !45
  %7312 = insertelement <4 x float> %7308, float %7311, i64 3
  %7313 = fmul <4 x float> %7312, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7314 = insertelement <4 x i32> undef, i32 %t2725, i64 0
  %7315 = shufflevector <4 x i32> %7314, <4 x i32> undef, <4 x i32> zeroinitializer
  %7316 = add <4 x i32> %7315, <i32 -1, i32 0, i32 1, i32 2>
  %7317 = add <4 x i32> %7316, %t2732
  %7318 = sext <4 x i32> %7317 to <4 x i64>
  %7319 = extractelement <4 x i64> %7318, i64 0
  %7320 = getelementptr inbounds float, ptr %f5.host, i64 %7319
  %7321 = load float, ptr %7320, align 4, !tbaa !45
  %7322 = insertelement <4 x float> undef, float %7321, i64 0
  %7323 = extractelement <4 x i64> %7318, i64 1
  %7324 = getelementptr inbounds float, ptr %f5.host, i64 %7323
  %7325 = load float, ptr %7324, align 4, !tbaa !45
  %7326 = insertelement <4 x float> %7322, float %7325, i64 1
  %7327 = extractelement <4 x i64> %7318, i64 2
  %7328 = getelementptr inbounds float, ptr %f5.host, i64 %7327
  %7329 = load float, ptr %7328, align 4, !tbaa !45
  %7330 = insertelement <4 x float> %7326, float %7329, i64 2
  %7331 = extractelement <4 x i64> %7318, i64 3
  %7332 = getelementptr inbounds float, ptr %f5.host, i64 %7331
  %7333 = load float, ptr %7332, align 4, !tbaa !45
  %7334 = insertelement <4 x float> %7330, float %7333, i64 3
  %7335 = fmul <4 x float> %7334, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7336 = fadd <4 x float> %7313, %7335
  %7337 = fmul <4 x float> %7336, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7338 = fadd <4 x float> %7291, %7337
  %7339 = mul nsw <4 x i32> %7241, %1959
  %7340 = insertelement <4 x i32> undef, i32 %t2720, i64 0
  %7341 = shufflevector <4 x i32> %7340, <4 x i32> undef, <4 x i32> zeroinitializer
  %7342 = add nsw <4 x i32> %7341, <i32 0, i32 2, i32 4, i32 6>
  %7343 = add nsw <4 x i32> %7339, %7342
  %7344 = sext <4 x i32> %7343 to <4 x i64>
  %7345 = extractelement <4 x i64> %7344, i64 0
  %7346 = getelementptr inbounds float, ptr %f4.host, i64 %7345
  %7347 = load float, ptr %7346, align 4, !tbaa !43
  %7348 = insertelement <4 x float> undef, float %7347, i64 0
  %7349 = extractelement <4 x i64> %7344, i64 1
  %7350 = getelementptr inbounds float, ptr %f4.host, i64 %7349
  %7351 = load float, ptr %7350, align 4, !tbaa !43
  %7352 = insertelement <4 x float> %7348, float %7351, i64 1
  %7353 = extractelement <4 x i64> %7344, i64 2
  %7354 = getelementptr inbounds float, ptr %f4.host, i64 %7353
  %7355 = load float, ptr %7354, align 4, !tbaa !43
  %7356 = insertelement <4 x float> %7352, float %7355, i64 2
  %7357 = extractelement <4 x i64> %7344, i64 3
  %7358 = getelementptr inbounds float, ptr %f4.host, i64 %7357
  %7359 = load float, ptr %7358, align 4, !tbaa !43
  %7360 = insertelement <4 x float> %7356, float %7359, i64 3
  %7361 = fsub <4 x float> %7360, %7338
  %7362 = fmul <4 x float> %t2715, %7361
  %7363 = add nsw <4 x i32> %t2726, %7248
  %7364 = sext <4 x i32> %7363 to <4 x i64>
  %7365 = extractelement <4 x i64> %7364, i64 0
  %7366 = getelementptr inbounds float, ptr %f5.host, i64 %7365
  %7367 = load float, ptr %7366, align 4, !tbaa !45
  %7368 = insertelement <4 x float> undef, float %7367, i64 0
  %7369 = extractelement <4 x i64> %7364, i64 1
  %7370 = getelementptr inbounds float, ptr %f5.host, i64 %7369
  %7371 = load float, ptr %7370, align 4, !tbaa !45
  %7372 = insertelement <4 x float> %7368, float %7371, i64 1
  %7373 = extractelement <4 x i64> %7364, i64 2
  %7374 = getelementptr inbounds float, ptr %f5.host, i64 %7373
  %7375 = load float, ptr %7374, align 4, !tbaa !45
  %7376 = insertelement <4 x float> %7372, float %7375, i64 2
  %7377 = extractelement <4 x i64> %7364, i64 3
  %7378 = getelementptr inbounds float, ptr %f5.host, i64 %7377
  %7379 = load float, ptr %7378, align 4, !tbaa !45
  %7380 = insertelement <4 x float> %7376, float %7379, i64 3
  %7381 = fmul <4 x float> %7380, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7382 = add <4 x i32> %7270, %t2726
  %7383 = sext <4 x i32> %7382 to <4 x i64>
  %7384 = extractelement <4 x i64> %7383, i64 0
  %7385 = getelementptr inbounds float, ptr %f5.host, i64 %7384
  %7386 = load float, ptr %7385, align 4, !tbaa !45
  %7387 = insertelement <4 x float> undef, float %7386, i64 0
  %7388 = extractelement <4 x i64> %7383, i64 1
  %7389 = getelementptr inbounds float, ptr %f5.host, i64 %7388
  %7390 = load float, ptr %7389, align 4, !tbaa !45
  %7391 = insertelement <4 x float> %7387, float %7390, i64 1
  %7392 = extractelement <4 x i64> %7383, i64 2
  %7393 = getelementptr inbounds float, ptr %f5.host, i64 %7392
  %7394 = load float, ptr %7393, align 4, !tbaa !45
  %7395 = insertelement <4 x float> %7391, float %7394, i64 2
  %7396 = extractelement <4 x i64> %7383, i64 3
  %7397 = getelementptr inbounds float, ptr %f5.host, i64 %7396
  %7398 = load float, ptr %7397, align 4, !tbaa !45
  %7399 = insertelement <4 x float> %7395, float %7398, i64 3
  %7400 = fmul <4 x float> %7399, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7401 = fadd <4 x float> %7381, %7400
  %7402 = fmul <4 x float> %7401, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7403 = add nsw <4 x i32> %t2726, %7294
  %7404 = sext <4 x i32> %7403 to <4 x i64>
  %7405 = extractelement <4 x i64> %7404, i64 0
  %7406 = getelementptr inbounds float, ptr %f5.host, i64 %7405
  %7407 = load float, ptr %7406, align 4, !tbaa !45
  %7408 = insertelement <4 x float> undef, float %7407, i64 0
  %7409 = extractelement <4 x i64> %7404, i64 1
  %7410 = getelementptr inbounds float, ptr %f5.host, i64 %7409
  %7411 = load float, ptr %7410, align 4, !tbaa !45
  %7412 = insertelement <4 x float> %7408, float %7411, i64 1
  %7413 = extractelement <4 x i64> %7404, i64 2
  %7414 = getelementptr inbounds float, ptr %f5.host, i64 %7413
  %7415 = load float, ptr %7414, align 4, !tbaa !45
  %7416 = insertelement <4 x float> %7412, float %7415, i64 2
  %7417 = extractelement <4 x i64> %7404, i64 3
  %7418 = getelementptr inbounds float, ptr %f5.host, i64 %7417
  %7419 = load float, ptr %7418, align 4, !tbaa !45
  %7420 = insertelement <4 x float> %7416, float %7419, i64 3
  %7421 = fmul <4 x float> %7420, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7422 = add <4 x i32> %7316, %t2726
  %7423 = sext <4 x i32> %7422 to <4 x i64>
  %7424 = extractelement <4 x i64> %7423, i64 0
  %7425 = getelementptr inbounds float, ptr %f5.host, i64 %7424
  %7426 = load float, ptr %7425, align 4, !tbaa !45
  %7427 = insertelement <4 x float> undef, float %7426, i64 0
  %7428 = extractelement <4 x i64> %7423, i64 1
  %7429 = getelementptr inbounds float, ptr %f5.host, i64 %7428
  %7430 = load float, ptr %7429, align 4, !tbaa !45
  %7431 = insertelement <4 x float> %7427, float %7430, i64 1
  %7432 = extractelement <4 x i64> %7423, i64 2
  %7433 = getelementptr inbounds float, ptr %f5.host, i64 %7432
  %7434 = load float, ptr %7433, align 4, !tbaa !45
  %7435 = insertelement <4 x float> %7431, float %7434, i64 2
  %7436 = extractelement <4 x i64> %7423, i64 3
  %7437 = getelementptr inbounds float, ptr %f5.host, i64 %7436
  %7438 = load float, ptr %7437, align 4, !tbaa !45
  %7439 = insertelement <4 x float> %7435, float %7438, i64 3
  %7440 = fmul <4 x float> %7439, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7441 = fadd <4 x float> %7421, %7440
  %7442 = fmul <4 x float> %7441, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7443 = fadd <4 x float> %7402, %7442
  %7444 = mul nsw <4 x i32> %t2722, %1959
  %7445 = add nsw <4 x i32> %7444, %7342
  %7446 = sext <4 x i32> %7445 to <4 x i64>
  %7447 = extractelement <4 x i64> %7446, i64 0
  %7448 = getelementptr inbounds float, ptr %f4.host, i64 %7447
  %7449 = load float, ptr %7448, align 4, !tbaa !43
  %7450 = insertelement <4 x float> undef, float %7449, i64 0
  %7451 = extractelement <4 x i64> %7446, i64 1
  %7452 = getelementptr inbounds float, ptr %f4.host, i64 %7451
  %7453 = load float, ptr %7452, align 4, !tbaa !43
  %7454 = insertelement <4 x float> %7450, float %7453, i64 1
  %7455 = extractelement <4 x i64> %7446, i64 2
  %7456 = getelementptr inbounds float, ptr %f4.host, i64 %7455
  %7457 = load float, ptr %7456, align 4, !tbaa !43
  %7458 = insertelement <4 x float> %7454, float %7457, i64 2
  %7459 = extractelement <4 x i64> %7446, i64 3
  %7460 = getelementptr inbounds float, ptr %f4.host, i64 %7459
  %7461 = load float, ptr %7460, align 4, !tbaa !43
  %7462 = insertelement <4 x float> %7458, float %7461, i64 3
  %7463 = fsub <4 x float> %7462, %7443
  %7464 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2715
  %7465 = fmul <4 x float> %7464, %7463
  %7466 = fadd <4 x float> %7362, %7465
  %7467 = sext i32 %t2719 to i64
  %7468 = add nsw i64 %3273, %7467
  %7469 = getelementptr inbounds float, ptr %193, i64 %7468
  %7470 = load <4 x float>, ptr %7469, align 4, !tbaa !67
  %7471 = fmul <4 x float> %7470, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7472 = add nsw i64 %3276, %7467
  %7473 = getelementptr inbounds float, ptr %193, i64 %7472
  %7474 = load <4 x float>, ptr %7473, align 4, !tbaa !67
  %7475 = fmul <4 x float> %7474, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7476 = fadd <4 x float> %7471, %7475
  %7477 = fmul <4 x float> %7476, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7478 = sext i32 %t2717 to i64
  %7479 = add nsw i64 %3273, %7478
  %7480 = getelementptr inbounds float, ptr %193, i64 %7479
  %7481 = load <4 x float>, ptr %7480, align 4, !tbaa !67
  %7482 = fmul <4 x float> %7481, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7483 = add nsw i64 %3276, %7478
  %7484 = getelementptr inbounds float, ptr %193, i64 %7483
  %7485 = load <4 x float>, ptr %7484, align 4, !tbaa !67
  %7486 = fmul <4 x float> %7485, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7487 = fadd <4 x float> %7482, %7486
  %7488 = fmul <4 x float> %7487, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7489 = fadd <4 x float> %7477, %7488
  %7490 = fadd <4 x float> %7466, %7489
  %7491 = insertelement <4 x i32> undef, i32 %t2746, i64 0
  %7492 = shufflevector <4 x i32> %7491, <4 x i32> undef, <4 x i32> zeroinitializer
  %7493 = add nsw <4 x i32> %7492, <i32 0, i32 1, i32 2, i32 3>
  %7494 = add nsw <4 x i32> %t2747, %7493
  %7495 = sext <4 x i32> %7494 to <4 x i64>
  %7496 = extractelement <4 x i64> %7495, i64 0
  %7497 = getelementptr inbounds float, ptr %f5.host, i64 %7496
  %7498 = load float, ptr %7497, align 4, !tbaa !45
  %7499 = insertelement <4 x float> undef, float %7498, i64 0
  %7500 = extractelement <4 x i64> %7495, i64 1
  %7501 = getelementptr inbounds float, ptr %f5.host, i64 %7500
  %7502 = load float, ptr %7501, align 4, !tbaa !45
  %7503 = insertelement <4 x float> %7499, float %7502, i64 1
  %7504 = extractelement <4 x i64> %7495, i64 2
  %7505 = getelementptr inbounds float, ptr %f5.host, i64 %7504
  %7506 = load float, ptr %7505, align 4, !tbaa !45
  %7507 = insertelement <4 x float> %7503, float %7506, i64 2
  %7508 = extractelement <4 x i64> %7495, i64 3
  %7509 = getelementptr inbounds float, ptr %f5.host, i64 %7508
  %7510 = load float, ptr %7509, align 4, !tbaa !45
  %7511 = insertelement <4 x float> %7507, float %7510, i64 3
  %7512 = fmul <4 x float> %7511, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7513 = insertelement <4 x i32> undef, i32 %t2745, i64 0
  %7514 = shufflevector <4 x i32> %7513, <4 x i32> undef, <4 x i32> zeroinitializer
  %7515 = add <4 x i32> %7514, <i32 -1, i32 0, i32 1, i32 2>
  %7516 = add <4 x i32> %7515, %t2747
  %7517 = sext <4 x i32> %7516 to <4 x i64>
  %7518 = extractelement <4 x i64> %7517, i64 0
  %7519 = getelementptr inbounds float, ptr %f5.host, i64 %7518
  %7520 = load float, ptr %7519, align 4, !tbaa !45
  %7521 = insertelement <4 x float> undef, float %7520, i64 0
  %7522 = extractelement <4 x i64> %7517, i64 1
  %7523 = getelementptr inbounds float, ptr %f5.host, i64 %7522
  %7524 = load float, ptr %7523, align 4, !tbaa !45
  %7525 = insertelement <4 x float> %7521, float %7524, i64 1
  %7526 = extractelement <4 x i64> %7517, i64 2
  %7527 = getelementptr inbounds float, ptr %f5.host, i64 %7526
  %7528 = load float, ptr %7527, align 4, !tbaa !45
  %7529 = insertelement <4 x float> %7525, float %7528, i64 2
  %7530 = extractelement <4 x i64> %7517, i64 3
  %7531 = getelementptr inbounds float, ptr %f5.host, i64 %7530
  %7532 = load float, ptr %7531, align 4, !tbaa !45
  %7533 = insertelement <4 x float> %7529, float %7532, i64 3
  %7534 = fmul <4 x float> %7533, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7535 = fadd <4 x float> %7512, %7534
  %7536 = fmul <4 x float> %7535, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7537 = insertelement <4 x i32> undef, i32 %t2744, i64 0
  %7538 = shufflevector <4 x i32> %7537, <4 x i32> undef, <4 x i32> zeroinitializer
  %7539 = add nsw <4 x i32> %7538, <i32 0, i32 1, i32 2, i32 3>
  %7540 = add nsw <4 x i32> %t2747, %7539
  %7541 = sext <4 x i32> %7540 to <4 x i64>
  %7542 = extractelement <4 x i64> %7541, i64 0
  %7543 = getelementptr inbounds float, ptr %f5.host, i64 %7542
  %7544 = load float, ptr %7543, align 4, !tbaa !45
  %7545 = insertelement <4 x float> undef, float %7544, i64 0
  %7546 = extractelement <4 x i64> %7541, i64 1
  %7547 = getelementptr inbounds float, ptr %f5.host, i64 %7546
  %7548 = load float, ptr %7547, align 4, !tbaa !45
  %7549 = insertelement <4 x float> %7545, float %7548, i64 1
  %7550 = extractelement <4 x i64> %7541, i64 2
  %7551 = getelementptr inbounds float, ptr %f5.host, i64 %7550
  %7552 = load float, ptr %7551, align 4, !tbaa !45
  %7553 = insertelement <4 x float> %7549, float %7552, i64 2
  %7554 = extractelement <4 x i64> %7541, i64 3
  %7555 = getelementptr inbounds float, ptr %f5.host, i64 %7554
  %7556 = load float, ptr %7555, align 4, !tbaa !45
  %7557 = insertelement <4 x float> %7553, float %7556, i64 3
  %7558 = fmul <4 x float> %7557, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7559 = insertelement <4 x i32> undef, i32 %t2741, i64 0
  %7560 = shufflevector <4 x i32> %7559, <4 x i32> undef, <4 x i32> zeroinitializer
  %7561 = add <4 x i32> %7560, <i32 -1, i32 0, i32 1, i32 2>
  %7562 = add <4 x i32> %7561, %t2747
  %7563 = sext <4 x i32> %7562 to <4 x i64>
  %7564 = extractelement <4 x i64> %7563, i64 0
  %7565 = getelementptr inbounds float, ptr %f5.host, i64 %7564
  %7566 = load float, ptr %7565, align 4, !tbaa !45
  %7567 = insertelement <4 x float> undef, float %7566, i64 0
  %7568 = extractelement <4 x i64> %7563, i64 1
  %7569 = getelementptr inbounds float, ptr %f5.host, i64 %7568
  %7570 = load float, ptr %7569, align 4, !tbaa !45
  %7571 = insertelement <4 x float> %7567, float %7570, i64 1
  %7572 = extractelement <4 x i64> %7563, i64 2
  %7573 = getelementptr inbounds float, ptr %f5.host, i64 %7572
  %7574 = load float, ptr %7573, align 4, !tbaa !45
  %7575 = insertelement <4 x float> %7571, float %7574, i64 2
  %7576 = extractelement <4 x i64> %7563, i64 3
  %7577 = getelementptr inbounds float, ptr %f5.host, i64 %7576
  %7578 = load float, ptr %7577, align 4, !tbaa !45
  %7579 = insertelement <4 x float> %7575, float %7578, i64 3
  %7580 = fmul <4 x float> %7579, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7581 = fadd <4 x float> %7558, %7580
  %7582 = fmul <4 x float> %7581, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7583 = fadd <4 x float> %7536, %7582
  %7584 = mul nsw <4 x i32> %7245, %1959
  %7585 = add nsw i32 %t2720, 1
  %7586 = insertelement <4 x i32> undef, i32 %7585, i64 0
  %7587 = shufflevector <4 x i32> %7586, <4 x i32> undef, <4 x i32> zeroinitializer
  %7588 = add nsw <4 x i32> %7587, <i32 0, i32 2, i32 4, i32 6>
  %7589 = add nsw <4 x i32> %7584, %7588
  %7590 = sext <4 x i32> %7589 to <4 x i64>
  %7591 = extractelement <4 x i64> %7590, i64 0
  %7592 = getelementptr inbounds float, ptr %f4.host, i64 %7591
  %7593 = load float, ptr %7592, align 4, !tbaa !43
  %7594 = insertelement <4 x float> undef, float %7593, i64 0
  %7595 = extractelement <4 x i64> %7590, i64 1
  %7596 = getelementptr inbounds float, ptr %f4.host, i64 %7595
  %7597 = load float, ptr %7596, align 4, !tbaa !43
  %7598 = insertelement <4 x float> %7594, float %7597, i64 1
  %7599 = extractelement <4 x i64> %7590, i64 2
  %7600 = getelementptr inbounds float, ptr %f4.host, i64 %7599
  %7601 = load float, ptr %7600, align 4, !tbaa !43
  %7602 = insertelement <4 x float> %7598, float %7601, i64 2
  %7603 = extractelement <4 x i64> %7590, i64 3
  %7604 = getelementptr inbounds float, ptr %f4.host, i64 %7603
  %7605 = load float, ptr %7604, align 4, !tbaa !43
  %7606 = insertelement <4 x float> %7602, float %7605, i64 3
  %7607 = fsub <4 x float> %7606, %7583
  %7608 = fmul <4 x float> %t2736, %7607
  %7609 = add nsw <4 x i32> %t2742, %7493
  %7610 = sext <4 x i32> %7609 to <4 x i64>
  %7611 = extractelement <4 x i64> %7610, i64 0
  %7612 = getelementptr inbounds float, ptr %f5.host, i64 %7611
  %7613 = load float, ptr %7612, align 4, !tbaa !45
  %7614 = insertelement <4 x float> undef, float %7613, i64 0
  %7615 = extractelement <4 x i64> %7610, i64 1
  %7616 = getelementptr inbounds float, ptr %f5.host, i64 %7615
  %7617 = load float, ptr %7616, align 4, !tbaa !45
  %7618 = insertelement <4 x float> %7614, float %7617, i64 1
  %7619 = extractelement <4 x i64> %7610, i64 2
  %7620 = getelementptr inbounds float, ptr %f5.host, i64 %7619
  %7621 = load float, ptr %7620, align 4, !tbaa !45
  %7622 = insertelement <4 x float> %7618, float %7621, i64 2
  %7623 = extractelement <4 x i64> %7610, i64 3
  %7624 = getelementptr inbounds float, ptr %f5.host, i64 %7623
  %7625 = load float, ptr %7624, align 4, !tbaa !45
  %7626 = insertelement <4 x float> %7622, float %7625, i64 3
  %7627 = fmul <4 x float> %7626, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7628 = add <4 x i32> %7515, %t2742
  %7629 = sext <4 x i32> %7628 to <4 x i64>
  %7630 = extractelement <4 x i64> %7629, i64 0
  %7631 = getelementptr inbounds float, ptr %f5.host, i64 %7630
  %7632 = load float, ptr %7631, align 4, !tbaa !45
  %7633 = insertelement <4 x float> undef, float %7632, i64 0
  %7634 = extractelement <4 x i64> %7629, i64 1
  %7635 = getelementptr inbounds float, ptr %f5.host, i64 %7634
  %7636 = load float, ptr %7635, align 4, !tbaa !45
  %7637 = insertelement <4 x float> %7633, float %7636, i64 1
  %7638 = extractelement <4 x i64> %7629, i64 2
  %7639 = getelementptr inbounds float, ptr %f5.host, i64 %7638
  %7640 = load float, ptr %7639, align 4, !tbaa !45
  %7641 = insertelement <4 x float> %7637, float %7640, i64 2
  %7642 = extractelement <4 x i64> %7629, i64 3
  %7643 = getelementptr inbounds float, ptr %f5.host, i64 %7642
  %7644 = load float, ptr %7643, align 4, !tbaa !45
  %7645 = insertelement <4 x float> %7641, float %7644, i64 3
  %7646 = fmul <4 x float> %7645, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7647 = fadd <4 x float> %7627, %7646
  %7648 = fmul <4 x float> %7647, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7649 = add nsw <4 x i32> %t2742, %7539
  %7650 = sext <4 x i32> %7649 to <4 x i64>
  %7651 = extractelement <4 x i64> %7650, i64 0
  %7652 = getelementptr inbounds float, ptr %f5.host, i64 %7651
  %7653 = load float, ptr %7652, align 4, !tbaa !45
  %7654 = insertelement <4 x float> undef, float %7653, i64 0
  %7655 = extractelement <4 x i64> %7650, i64 1
  %7656 = getelementptr inbounds float, ptr %f5.host, i64 %7655
  %7657 = load float, ptr %7656, align 4, !tbaa !45
  %7658 = insertelement <4 x float> %7654, float %7657, i64 1
  %7659 = extractelement <4 x i64> %7650, i64 2
  %7660 = getelementptr inbounds float, ptr %f5.host, i64 %7659
  %7661 = load float, ptr %7660, align 4, !tbaa !45
  %7662 = insertelement <4 x float> %7658, float %7661, i64 2
  %7663 = extractelement <4 x i64> %7650, i64 3
  %7664 = getelementptr inbounds float, ptr %f5.host, i64 %7663
  %7665 = load float, ptr %7664, align 4, !tbaa !45
  %7666 = insertelement <4 x float> %7662, float %7665, i64 3
  %7667 = fmul <4 x float> %7666, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7668 = add <4 x i32> %7561, %t2742
  %7669 = sext <4 x i32> %7668 to <4 x i64>
  %7670 = extractelement <4 x i64> %7669, i64 0
  %7671 = getelementptr inbounds float, ptr %f5.host, i64 %7670
  %7672 = load float, ptr %7671, align 4, !tbaa !45
  %7673 = insertelement <4 x float> undef, float %7672, i64 0
  %7674 = extractelement <4 x i64> %7669, i64 1
  %7675 = getelementptr inbounds float, ptr %f5.host, i64 %7674
  %7676 = load float, ptr %7675, align 4, !tbaa !45
  %7677 = insertelement <4 x float> %7673, float %7676, i64 1
  %7678 = extractelement <4 x i64> %7669, i64 2
  %7679 = getelementptr inbounds float, ptr %f5.host, i64 %7678
  %7680 = load float, ptr %7679, align 4, !tbaa !45
  %7681 = insertelement <4 x float> %7677, float %7680, i64 2
  %7682 = extractelement <4 x i64> %7669, i64 3
  %7683 = getelementptr inbounds float, ptr %f5.host, i64 %7682
  %7684 = load float, ptr %7683, align 4, !tbaa !45
  %7685 = insertelement <4 x float> %7681, float %7684, i64 3
  %7686 = fmul <4 x float> %7685, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7687 = fadd <4 x float> %7667, %7686
  %7688 = fmul <4 x float> %7687, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7689 = fadd <4 x float> %7648, %7688
  %7690 = mul nsw <4 x i32> %t2739, %1959
  %7691 = add nsw <4 x i32> %7690, %7588
  %7692 = sext <4 x i32> %7691 to <4 x i64>
  %7693 = extractelement <4 x i64> %7692, i64 0
  %7694 = getelementptr inbounds float, ptr %f4.host, i64 %7693
  %7695 = load float, ptr %7694, align 4, !tbaa !43
  %7696 = insertelement <4 x float> undef, float %7695, i64 0
  %7697 = extractelement <4 x i64> %7692, i64 1
  %7698 = getelementptr inbounds float, ptr %f4.host, i64 %7697
  %7699 = load float, ptr %7698, align 4, !tbaa !43
  %7700 = insertelement <4 x float> %7696, float %7699, i64 1
  %7701 = extractelement <4 x i64> %7692, i64 2
  %7702 = getelementptr inbounds float, ptr %f4.host, i64 %7701
  %7703 = load float, ptr %7702, align 4, !tbaa !43
  %7704 = insertelement <4 x float> %7700, float %7703, i64 2
  %7705 = extractelement <4 x i64> %7692, i64 3
  %7706 = getelementptr inbounds float, ptr %f4.host, i64 %7705
  %7707 = load float, ptr %7706, align 4, !tbaa !43
  %7708 = insertelement <4 x float> %7704, float %7707, i64 3
  %7709 = fsub <4 x float> %7708, %7689
  %7710 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2736
  %7711 = fmul <4 x float> %7710, %7709
  %7712 = fadd <4 x float> %7608, %7711
  %7713 = add nsw i64 %3278, %7467
  %7714 = getelementptr inbounds float, ptr %193, i64 %7713
  %7715 = load <4 x float>, ptr %7714, align 4, !tbaa !67
  %7716 = fmul <4 x float> %7715, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7717 = add nsw i64 %3281, %7467
  %7718 = getelementptr inbounds float, ptr %193, i64 %7717
  %7719 = load <4 x float>, ptr %7718, align 4, !tbaa !67
  %7720 = fmul <4 x float> %7719, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7721 = fadd <4 x float> %7716, %7720
  %7722 = fmul <4 x float> %7721, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7723 = add nsw i64 %3278, %7478
  %7724 = getelementptr inbounds float, ptr %193, i64 %7723
  %7725 = load <4 x float>, ptr %7724, align 4, !tbaa !67
  %7726 = fmul <4 x float> %7725, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7727 = add nsw i64 %3281, %7478
  %7728 = getelementptr inbounds float, ptr %193, i64 %7727
  %7729 = load <4 x float>, ptr %7728, align 4, !tbaa !67
  %7730 = fmul <4 x float> %7729, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7731 = fadd <4 x float> %7726, %7730
  %7732 = fmul <4 x float> %7731, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7733 = fadd <4 x float> %7722, %7732
  %7734 = fadd <4 x float> %7712, %7733
  %7735 = shufflevector <4 x float> %7490, <4 x float> %7734, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %7736 = sext i32 %7219 to i64
  %7737 = sub nsw i64 %7736, %1962
  %7738 = mul nsw i64 %7737, %1961
  %7739 = add nsw i64 %3283, %7738
  %7740 = getelementptr inbounds float, ptr %222, i64 %7739
  store <8 x float> %7735, ptr %7740, align 4, !tbaa !69
  br label %"assert succeeded72"

"assert succeeded72":                             ; preds = %"for f126.s0.v3.v366.preheader", %"produce f12658", %"end for f126.s0.v3.v364"
  %7741 = tail call ptr @halide_malloc(ptr %__user_context, i64 %2525)
  %.not105 = icmp eq ptr %7741, null
  br i1 %.not105, label %"assert failed73", label %"produce f12576", !prof !4

"assert failed73":                                ; preds = %"assert succeeded72"
  %7742 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f12576":                                 ; preds = %"assert succeeded72"
  br i1 %.not200, label %"end for f125.s0.v3.v378", label %"for f125.s0.v3.v377.preheader", !prof !4

"for f125.s0.v3.v377.preheader":                  ; preds = %"produce f12576"
  %scevgep = getelementptr i8, ptr %7741, i64 %3134
  %scevgep309 = getelementptr i8, ptr %scevgep, i64 %3286
  %7743 = add i32 %3405, %3136
  %7744 = shl nuw nsw i32 %6658, 1
  %7745 = ashr i32 %6657, 1
  %t2749 = add nsw i32 %7745, %3290
  %7746 = add i32 %t2749, %7744
  %t2763 = mul nsw i32 %7746, %207
  %7747 = sub nsw i32 %7745, %158
  %t2765 = mul nsw i32 %7747, %207
  %7748 = add i32 %7743, %7745
  %7749 = mul i32 %7748, %f4.stride.1
  %7750 = sub nsw i32 %7745, %f4.v4.min_realized
  %7751 = mul nsw i32 %7750, %f4.stride.1
  %7752 = sext i32 %t2765 to i64
  %7753 = add nsw i64 %7752, -1
  %7754 = sext i32 %t2763 to i64
  %7755 = add nsw i64 %7754, -1
  br label %"for f125.s0.v3.v377"

"for f125.s0.v3.v377":                            ; preds = %"for f125.s0.v3.v377", %"for f125.s0.v3.v377.preheader"
  %lsr.iv331 = phi i32 [ %lsr.iv329, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next332, %"for f125.s0.v3.v377" ]
  %lsr.iv311 = phi i64 [ 0, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next312, %"for f125.s0.v3.v377" ]
  %lsr.iv307 = phi i32 [ %a970, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next308, %"for f125.s0.v3.v377" ]
  %7756 = sext i32 %lsr.iv331 to i64
  %7757 = getelementptr inbounds float, ptr %f2.host, i64 %7756
  %7758 = load <4 x float>, ptr %7757, align 4, !tbaa !41
  %7759 = add nsw i64 %7756, 4
  %7760 = getelementptr inbounds float, ptr %f2.host, i64 %7759
  %7761 = load <4 x float>, ptr %7760, align 4, !tbaa !41
  %t2754 = shufflevector <4 x float> %7758, <4 x float> %7761, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2755 = shufflevector <4 x float> %7758, <4 x float> %7761, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2756 = fmul <4 x float> %232, %t2754
  %t2757 = fmul <4 x float> %232, %t2755
  %a971 = fptosi <4 x float> %t2757 to <4 x i32>
  %a978 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a971)
  %7762 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a978, <4 x i32> zeroinitializer)
  %t2759 = sitofp <4 x i32> %7762 to <4 x float>
  %t2760 = fmul <4 x float> %3289, %t2759
  %7763 = add nuw nsw <4 x i32> %7762, <i32 1, i32 1, i32 1, i32 1>
  %7764 = sitofp <4 x i32> %7763 to <4 x float>
  %t2761 = fmul <4 x float> %3289, %7764
  %7765 = fmul <4 x float> %t2757, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a976 = fptosi <4 x float> %7765 to <4 x i32>
  %a975 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a976)
  %7766 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a975, <4 x i32> zeroinitializer)
  %7767 = shl <4 x i32> %7762, <i32 8, i32 8, i32 8, i32 8>
  %.neg253 = sub <4 x i32> %.neg251, %7767
  %t2766 = add <4 x i32> %.neg253, %7766
  %t2771 = sub nsw <4 x i32> %7762, %241
  %t2772 = mul nsw <4 x i32> %t2771, %1959
  %7768 = add nsw <4 x i32> %t2771, <i32 1, i32 1, i32 1, i32 1>
  %t2778 = mul nsw <4 x i32> %7768, %1959
  %a979 = fptosi <4 x float> %t2756 to <4 x i32>
  %a986 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a979)
  %7769 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a986, <4 x i32> zeroinitializer)
  %t2782 = sitofp <4 x i32> %7769 to <4 x float>
  %t2783 = fmul <4 x float> %3289, %t2782
  %7770 = add nuw nsw <4 x i32> %7769, <i32 1, i32 1, i32 1, i32 1>
  %7771 = sitofp <4 x i32> %7770 to <4 x float>
  %t2784 = fmul <4 x float> %3289, %7771
  %7772 = fmul <4 x float> %t2756, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a984 = fptosi <4 x float> %7772 to <4 x i32>
  %a983 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a984)
  %7773 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a983, <4 x i32> zeroinitializer)
  %7774 = shl <4 x i32> %7769, <i32 8, i32 8, i32 8, i32 8>
  %.neg255 = sub <4 x i32> %.neg251, %7774
  %t2787 = add <4 x i32> %.neg255, %7773
  %t2790 = sub nsw <4 x i32> %7769, %241
  %t2791 = mul nsw <4 x i32> %t2790, %1959
  %7775 = add nsw <4 x i32> %t2790, <i32 1, i32 1, i32 1, i32 1>
  %t2796 = mul nsw <4 x i32> %7775, %1959
  %7776 = trunc i64 %lsr.iv311 to i32
  %7777 = sub i32 %7776, %f4.v3.min_realized
  %7778 = add i32 %7751, %7777
  %tmp336 = add i32 %7778, %161
  %7779 = insertelement <4 x i32> undef, i32 %tmp336, i64 0
  %7780 = shufflevector <4 x i32> %7779, <4 x i32> undef, <4 x i32> zeroinitializer
  %7781 = add nsw <4 x i32> %7780, <i32 0, i32 1, i32 2, i32 3>
  %7782 = add nsw <4 x i32> %t2778, %7781
  %7783 = sext <4 x i32> %7782 to <4 x i64>
  %7784 = extractelement <4 x i64> %7783, i64 0
  %7785 = getelementptr inbounds float, ptr %f4.host, i64 %7784
  %7786 = load float, ptr %7785, align 4, !tbaa !43
  %7787 = insertelement <4 x float> undef, float %7786, i64 0
  %7788 = extractelement <4 x i64> %7783, i64 1
  %7789 = getelementptr inbounds float, ptr %f4.host, i64 %7788
  %7790 = load float, ptr %7789, align 4, !tbaa !43
  %7791 = insertelement <4 x float> %7787, float %7790, i64 1
  %7792 = extractelement <4 x i64> %7783, i64 2
  %7793 = getelementptr inbounds float, ptr %f4.host, i64 %7792
  %7794 = load float, ptr %7793, align 4, !tbaa !43
  %7795 = insertelement <4 x float> %7791, float %7794, i64 2
  %7796 = extractelement <4 x i64> %7783, i64 3
  %7797 = getelementptr inbounds float, ptr %f4.host, i64 %7796
  %7798 = load float, ptr %7797, align 4, !tbaa !43
  %7799 = insertelement <4 x float> %7795, float %7798, i64 3
  %7800 = fmul <4 x float> %7799, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7801 = trunc i64 %lsr.iv311 to i32
  %7802 = sub i32 %7801, %f4.v3.min_realized
  %7803 = add i32 %7802, %3148
  %7804 = add i32 %7803, %161
  %tmp342 = add i32 %7804, %7751
  %7805 = insertelement <4 x i32> undef, i32 %tmp342, i64 0
  %7806 = shufflevector <4 x i32> %7805, <4 x i32> undef, <4 x i32> zeroinitializer
  %7807 = add <4 x i32> %7806, <i32 -1, i32 0, i32 1, i32 2>
  %7808 = add <4 x i32> %7807, %t2778
  %7809 = sext <4 x i32> %7808 to <4 x i64>
  %7810 = extractelement <4 x i64> %7809, i64 0
  %7811 = getelementptr inbounds float, ptr %f4.host, i64 %7810
  %7812 = load float, ptr %7811, align 4, !tbaa !43
  %7813 = insertelement <4 x float> undef, float %7812, i64 0
  %7814 = extractelement <4 x i64> %7809, i64 1
  %7815 = getelementptr inbounds float, ptr %f4.host, i64 %7814
  %7816 = load float, ptr %7815, align 4, !tbaa !43
  %7817 = insertelement <4 x float> %7813, float %7816, i64 1
  %7818 = extractelement <4 x i64> %7809, i64 2
  %7819 = getelementptr inbounds float, ptr %f4.host, i64 %7818
  %7820 = load float, ptr %7819, align 4, !tbaa !43
  %7821 = insertelement <4 x float> %7817, float %7820, i64 2
  %7822 = extractelement <4 x i64> %7809, i64 3
  %7823 = getelementptr inbounds float, ptr %f4.host, i64 %7822
  %7824 = load float, ptr %7823, align 4, !tbaa !43
  %7825 = insertelement <4 x float> %7821, float %7824, i64 3
  %7826 = fmul <4 x float> %7825, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7827 = fadd <4 x float> %7800, %7826
  %7828 = fmul <4 x float> %7827, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7829 = add i32 %7749, %7777
  %tmp338 = add i32 %7829, %161
  %7830 = insertelement <4 x i32> undef, i32 %tmp338, i64 0
  %7831 = shufflevector <4 x i32> %7830, <4 x i32> undef, <4 x i32> zeroinitializer
  %7832 = add nsw <4 x i32> %7831, <i32 0, i32 1, i32 2, i32 3>
  %7833 = add nsw <4 x i32> %t2778, %7832
  %7834 = sext <4 x i32> %7833 to <4 x i64>
  %7835 = extractelement <4 x i64> %7834, i64 0
  %7836 = getelementptr inbounds float, ptr %f4.host, i64 %7835
  %7837 = load float, ptr %7836, align 4, !tbaa !43
  %7838 = insertelement <4 x float> undef, float %7837, i64 0
  %7839 = extractelement <4 x i64> %7834, i64 1
  %7840 = getelementptr inbounds float, ptr %f4.host, i64 %7839
  %7841 = load float, ptr %7840, align 4, !tbaa !43
  %7842 = insertelement <4 x float> %7838, float %7841, i64 1
  %7843 = extractelement <4 x i64> %7834, i64 2
  %7844 = getelementptr inbounds float, ptr %f4.host, i64 %7843
  %7845 = load float, ptr %7844, align 4, !tbaa !43
  %7846 = insertelement <4 x float> %7842, float %7845, i64 2
  %7847 = extractelement <4 x i64> %7834, i64 3
  %7848 = getelementptr inbounds float, ptr %f4.host, i64 %7847
  %7849 = load float, ptr %7848, align 4, !tbaa !43
  %7850 = insertelement <4 x float> %7846, float %7849, i64 3
  %7851 = fmul <4 x float> %7850, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp344 = add i32 %7804, %7749
  %7852 = insertelement <4 x i32> undef, i32 %tmp344, i64 0
  %7853 = shufflevector <4 x i32> %7852, <4 x i32> undef, <4 x i32> zeroinitializer
  %7854 = add <4 x i32> %7853, <i32 -1, i32 0, i32 1, i32 2>
  %7855 = add <4 x i32> %7854, %t2778
  %7856 = sext <4 x i32> %7855 to <4 x i64>
  %7857 = extractelement <4 x i64> %7856, i64 0
  %7858 = getelementptr inbounds float, ptr %f4.host, i64 %7857
  %7859 = load float, ptr %7858, align 4, !tbaa !43
  %7860 = insertelement <4 x float> undef, float %7859, i64 0
  %7861 = extractelement <4 x i64> %7856, i64 1
  %7862 = getelementptr inbounds float, ptr %f4.host, i64 %7861
  %7863 = load float, ptr %7862, align 4, !tbaa !43
  %7864 = insertelement <4 x float> %7860, float %7863, i64 1
  %7865 = extractelement <4 x i64> %7856, i64 2
  %7866 = getelementptr inbounds float, ptr %f4.host, i64 %7865
  %7867 = load float, ptr %7866, align 4, !tbaa !43
  %7868 = insertelement <4 x float> %7864, float %7867, i64 2
  %7869 = extractelement <4 x i64> %7856, i64 3
  %7870 = getelementptr inbounds float, ptr %f4.host, i64 %7869
  %7871 = load float, ptr %7870, align 4, !tbaa !43
  %7872 = insertelement <4 x float> %7868, float %7871, i64 3
  %7873 = fmul <4 x float> %7872, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7874 = fadd <4 x float> %7851, %7873
  %7875 = fmul <4 x float> %7874, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7876 = fadd <4 x float> %7828, %7875
  %7877 = sext <4 x i32> %t2766 to <4 x i64>
  %7878 = extractelement <4 x i64> %7877, i64 0
  %7879 = getelementptr inbounds float, ptr %f0.host, i64 %7878
  %7880 = load float, ptr %7879, align 4, !tbaa !6
  %7881 = insertelement <4 x float> undef, float %7880, i64 0
  %7882 = extractelement <4 x i64> %7877, i64 1
  %7883 = getelementptr inbounds float, ptr %f0.host, i64 %7882
  %7884 = load float, ptr %7883, align 4, !tbaa !6
  %7885 = insertelement <4 x float> %7881, float %7884, i64 1
  %7886 = extractelement <4 x i64> %7877, i64 2
  %7887 = getelementptr inbounds float, ptr %f0.host, i64 %7886
  %7888 = load float, ptr %7887, align 4, !tbaa !6
  %7889 = insertelement <4 x float> %7885, float %7888, i64 2
  %7890 = extractelement <4 x i64> %7877, i64 3
  %7891 = getelementptr inbounds float, ptr %f0.host, i64 %7890
  %7892 = load float, ptr %7891, align 4, !tbaa !6
  %7893 = insertelement <4 x float> %7889, float %7892, i64 3
  %7894 = fsub <4 x float> %t2755, %t2761
  %7895 = fmul <4 x float> %3298, %7894
  %7896 = fadd <4 x float> %t2761, %7895
  %7897 = fadd <4 x float> %7896, %7893
  %7898 = fsub <4 x float> %7897, %7876
  %7899 = fsub <4 x float> %t2757, %t2759
  %7900 = fmul <4 x float> %7899, %7898
  %7901 = add nsw <4 x i32> %t2772, %7781
  %7902 = sext <4 x i32> %7901 to <4 x i64>
  %7903 = extractelement <4 x i64> %7902, i64 0
  %7904 = getelementptr inbounds float, ptr %f4.host, i64 %7903
  %7905 = load float, ptr %7904, align 4, !tbaa !43
  %7906 = insertelement <4 x float> undef, float %7905, i64 0
  %7907 = extractelement <4 x i64> %7902, i64 1
  %7908 = getelementptr inbounds float, ptr %f4.host, i64 %7907
  %7909 = load float, ptr %7908, align 4, !tbaa !43
  %7910 = insertelement <4 x float> %7906, float %7909, i64 1
  %7911 = extractelement <4 x i64> %7902, i64 2
  %7912 = getelementptr inbounds float, ptr %f4.host, i64 %7911
  %7913 = load float, ptr %7912, align 4, !tbaa !43
  %7914 = insertelement <4 x float> %7910, float %7913, i64 2
  %7915 = extractelement <4 x i64> %7902, i64 3
  %7916 = getelementptr inbounds float, ptr %f4.host, i64 %7915
  %7917 = load float, ptr %7916, align 4, !tbaa !43
  %7918 = insertelement <4 x float> %7914, float %7917, i64 3
  %7919 = fmul <4 x float> %7918, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7920 = add <4 x i32> %7807, %t2772
  %7921 = sext <4 x i32> %7920 to <4 x i64>
  %7922 = extractelement <4 x i64> %7921, i64 0
  %7923 = getelementptr inbounds float, ptr %f4.host, i64 %7922
  %7924 = load float, ptr %7923, align 4, !tbaa !43
  %7925 = insertelement <4 x float> undef, float %7924, i64 0
  %7926 = extractelement <4 x i64> %7921, i64 1
  %7927 = getelementptr inbounds float, ptr %f4.host, i64 %7926
  %7928 = load float, ptr %7927, align 4, !tbaa !43
  %7929 = insertelement <4 x float> %7925, float %7928, i64 1
  %7930 = extractelement <4 x i64> %7921, i64 2
  %7931 = getelementptr inbounds float, ptr %f4.host, i64 %7930
  %7932 = load float, ptr %7931, align 4, !tbaa !43
  %7933 = insertelement <4 x float> %7929, float %7932, i64 2
  %7934 = extractelement <4 x i64> %7921, i64 3
  %7935 = getelementptr inbounds float, ptr %f4.host, i64 %7934
  %7936 = load float, ptr %7935, align 4, !tbaa !43
  %7937 = insertelement <4 x float> %7933, float %7936, i64 3
  %7938 = fmul <4 x float> %7937, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7939 = fadd <4 x float> %7919, %7938
  %7940 = fmul <4 x float> %7939, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7941 = add nsw <4 x i32> %t2772, %7832
  %7942 = sext <4 x i32> %7941 to <4 x i64>
  %7943 = extractelement <4 x i64> %7942, i64 0
  %7944 = getelementptr inbounds float, ptr %f4.host, i64 %7943
  %7945 = load float, ptr %7944, align 4, !tbaa !43
  %7946 = insertelement <4 x float> undef, float %7945, i64 0
  %7947 = extractelement <4 x i64> %7942, i64 1
  %7948 = getelementptr inbounds float, ptr %f4.host, i64 %7947
  %7949 = load float, ptr %7948, align 4, !tbaa !43
  %7950 = insertelement <4 x float> %7946, float %7949, i64 1
  %7951 = extractelement <4 x i64> %7942, i64 2
  %7952 = getelementptr inbounds float, ptr %f4.host, i64 %7951
  %7953 = load float, ptr %7952, align 4, !tbaa !43
  %7954 = insertelement <4 x float> %7950, float %7953, i64 2
  %7955 = extractelement <4 x i64> %7942, i64 3
  %7956 = getelementptr inbounds float, ptr %f4.host, i64 %7955
  %7957 = load float, ptr %7956, align 4, !tbaa !43
  %7958 = insertelement <4 x float> %7954, float %7957, i64 3
  %7959 = fmul <4 x float> %7958, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7960 = add <4 x i32> %7854, %t2772
  %7961 = sext <4 x i32> %7960 to <4 x i64>
  %7962 = extractelement <4 x i64> %7961, i64 0
  %7963 = getelementptr inbounds float, ptr %f4.host, i64 %7962
  %7964 = load float, ptr %7963, align 4, !tbaa !43
  %7965 = insertelement <4 x float> undef, float %7964, i64 0
  %7966 = extractelement <4 x i64> %7961, i64 1
  %7967 = getelementptr inbounds float, ptr %f4.host, i64 %7966
  %7968 = load float, ptr %7967, align 4, !tbaa !43
  %7969 = insertelement <4 x float> %7965, float %7968, i64 1
  %7970 = extractelement <4 x i64> %7961, i64 2
  %7971 = getelementptr inbounds float, ptr %f4.host, i64 %7970
  %7972 = load float, ptr %7971, align 4, !tbaa !43
  %7973 = insertelement <4 x float> %7969, float %7972, i64 2
  %7974 = extractelement <4 x i64> %7961, i64 3
  %7975 = getelementptr inbounds float, ptr %f4.host, i64 %7974
  %7976 = load float, ptr %7975, align 4, !tbaa !43
  %7977 = insertelement <4 x float> %7973, float %7976, i64 3
  %7978 = fmul <4 x float> %7977, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7979 = fadd <4 x float> %7959, %7978
  %7980 = fmul <4 x float> %7979, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7981 = fadd <4 x float> %7940, %7980
  %7982 = add nsw <4 x i32> %t2766, <i32 256, i32 256, i32 256, i32 256>
  %7983 = sext <4 x i32> %7982 to <4 x i64>
  %7984 = extractelement <4 x i64> %7983, i64 0
  %7985 = getelementptr inbounds float, ptr %f0.host, i64 %7984
  %7986 = load float, ptr %7985, align 4, !tbaa !6
  %7987 = insertelement <4 x float> undef, float %7986, i64 0
  %7988 = extractelement <4 x i64> %7983, i64 1
  %7989 = getelementptr inbounds float, ptr %f0.host, i64 %7988
  %7990 = load float, ptr %7989, align 4, !tbaa !6
  %7991 = insertelement <4 x float> %7987, float %7990, i64 1
  %7992 = extractelement <4 x i64> %7983, i64 2
  %7993 = getelementptr inbounds float, ptr %f0.host, i64 %7992
  %7994 = load float, ptr %7993, align 4, !tbaa !6
  %7995 = insertelement <4 x float> %7991, float %7994, i64 2
  %7996 = extractelement <4 x i64> %7983, i64 3
  %7997 = getelementptr inbounds float, ptr %f0.host, i64 %7996
  %7998 = load float, ptr %7997, align 4, !tbaa !6
  %7999 = insertelement <4 x float> %7995, float %7998, i64 3
  %8000 = fsub <4 x float> %t2755, %t2760
  %8001 = fmul <4 x float> %3298, %8000
  %8002 = fadd <4 x float> %t2760, %8001
  %8003 = fadd <4 x float> %8002, %7999
  %8004 = fsub <4 x float> %8003, %7981
  %8005 = fsub <4 x float> %t2759, %t2757
  %8006 = fadd <4 x float> %8005, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8007 = fmul <4 x float> %8006, %8004
  %8008 = fadd <4 x float> %7900, %8007
  %tmp334 = add i32 %161, %7801
  %8009 = sext i32 %tmp334 to i64
  %8010 = sub nsw i64 %8009, %1963
  %8011 = add nsw i64 %8010, %7752
  %8012 = getelementptr inbounds float, ptr %222, i64 %8011
  %8013 = load <4 x float>, ptr %8012, align 4, !tbaa !69
  %8014 = fmul <4 x float> %8013, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp340 = add i32 %3299, %7801
  %8015 = sext i32 %tmp340 to i64
  %8016 = sub nsw i64 %8015, %1963
  %8017 = add nsw i64 %7753, %8016
  %8018 = getelementptr inbounds float, ptr %222, i64 %8017
  %8019 = load <4 x float>, ptr %8018, align 4, !tbaa !69
  %8020 = fmul <4 x float> %8019, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8021 = fadd <4 x float> %8014, %8020
  %8022 = fmul <4 x float> %8021, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8023 = add nsw i64 %8010, %7754
  %8024 = getelementptr inbounds float, ptr %222, i64 %8023
  %8025 = load <4 x float>, ptr %8024, align 4, !tbaa !69
  %8026 = fmul <4 x float> %8025, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8027 = add nsw i64 %7755, %8016
  %8028 = getelementptr inbounds float, ptr %222, i64 %8027
  %8029 = load <4 x float>, ptr %8028, align 4, !tbaa !69
  %8030 = fmul <4 x float> %8029, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8031 = fadd <4 x float> %8026, %8030
  %8032 = fmul <4 x float> %8031, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8033 = fadd <4 x float> %8022, %8032
  %8034 = fadd <4 x float> %8008, %8033
  %tmp318 = add i32 %7778, %3296
  %8035 = insertelement <4 x i32> undef, i32 %tmp318, i64 0
  %8036 = shufflevector <4 x i32> %8035, <4 x i32> undef, <4 x i32> zeroinitializer
  %8037 = add nsw <4 x i32> %8036, <i32 0, i32 1, i32 2, i32 3>
  %8038 = add nsw <4 x i32> %t2796, %8037
  %8039 = sext <4 x i32> %8038 to <4 x i64>
  %8040 = extractelement <4 x i64> %8039, i64 0
  %8041 = getelementptr inbounds float, ptr %f4.host, i64 %8040
  %8042 = load float, ptr %8041, align 4, !tbaa !43
  %8043 = insertelement <4 x float> undef, float %8042, i64 0
  %8044 = extractelement <4 x i64> %8039, i64 1
  %8045 = getelementptr inbounds float, ptr %f4.host, i64 %8044
  %8046 = load float, ptr %8045, align 4, !tbaa !43
  %8047 = insertelement <4 x float> %8043, float %8046, i64 1
  %8048 = extractelement <4 x i64> %8039, i64 2
  %8049 = getelementptr inbounds float, ptr %f4.host, i64 %8048
  %8050 = load float, ptr %8049, align 4, !tbaa !43
  %8051 = insertelement <4 x float> %8047, float %8050, i64 2
  %8052 = extractelement <4 x i64> %8039, i64 3
  %8053 = getelementptr inbounds float, ptr %f4.host, i64 %8052
  %8054 = load float, ptr %8053, align 4, !tbaa !43
  %8055 = insertelement <4 x float> %8051, float %8054, i64 3
  %8056 = fmul <4 x float> %8055, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8057 = add i32 %7802, %3141
  %8058 = add i32 %8057, %3296
  %tmp326 = add i32 %8058, %7751
  %8059 = insertelement <4 x i32> undef, i32 %tmp326, i64 0
  %8060 = shufflevector <4 x i32> %8059, <4 x i32> undef, <4 x i32> zeroinitializer
  %8061 = add <4 x i32> %8060, <i32 -1, i32 0, i32 1, i32 2>
  %8062 = add <4 x i32> %8061, %t2796
  %8063 = sext <4 x i32> %8062 to <4 x i64>
  %8064 = extractelement <4 x i64> %8063, i64 0
  %8065 = getelementptr inbounds float, ptr %f4.host, i64 %8064
  %8066 = load float, ptr %8065, align 4, !tbaa !43
  %8067 = insertelement <4 x float> undef, float %8066, i64 0
  %8068 = extractelement <4 x i64> %8063, i64 1
  %8069 = getelementptr inbounds float, ptr %f4.host, i64 %8068
  %8070 = load float, ptr %8069, align 4, !tbaa !43
  %8071 = insertelement <4 x float> %8067, float %8070, i64 1
  %8072 = extractelement <4 x i64> %8063, i64 2
  %8073 = getelementptr inbounds float, ptr %f4.host, i64 %8072
  %8074 = load float, ptr %8073, align 4, !tbaa !43
  %8075 = insertelement <4 x float> %8071, float %8074, i64 2
  %8076 = extractelement <4 x i64> %8063, i64 3
  %8077 = getelementptr inbounds float, ptr %f4.host, i64 %8076
  %8078 = load float, ptr %8077, align 4, !tbaa !43
  %8079 = insertelement <4 x float> %8075, float %8078, i64 3
  %8080 = fmul <4 x float> %8079, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8081 = fadd <4 x float> %8056, %8080
  %8082 = fmul <4 x float> %8081, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp322 = add i32 %7829, %3296
  %8083 = insertelement <4 x i32> undef, i32 %tmp322, i64 0
  %8084 = shufflevector <4 x i32> %8083, <4 x i32> undef, <4 x i32> zeroinitializer
  %8085 = add nsw <4 x i32> %8084, <i32 0, i32 1, i32 2, i32 3>
  %8086 = add nsw <4 x i32> %t2796, %8085
  %8087 = sext <4 x i32> %8086 to <4 x i64>
  %8088 = extractelement <4 x i64> %8087, i64 0
  %8089 = getelementptr inbounds float, ptr %f4.host, i64 %8088
  %8090 = load float, ptr %8089, align 4, !tbaa !43
  %8091 = insertelement <4 x float> undef, float %8090, i64 0
  %8092 = extractelement <4 x i64> %8087, i64 1
  %8093 = getelementptr inbounds float, ptr %f4.host, i64 %8092
  %8094 = load float, ptr %8093, align 4, !tbaa !43
  %8095 = insertelement <4 x float> %8091, float %8094, i64 1
  %8096 = extractelement <4 x i64> %8087, i64 2
  %8097 = getelementptr inbounds float, ptr %f4.host, i64 %8096
  %8098 = load float, ptr %8097, align 4, !tbaa !43
  %8099 = insertelement <4 x float> %8095, float %8098, i64 2
  %8100 = extractelement <4 x i64> %8087, i64 3
  %8101 = getelementptr inbounds float, ptr %f4.host, i64 %8100
  %8102 = load float, ptr %8101, align 4, !tbaa !43
  %8103 = insertelement <4 x float> %8099, float %8102, i64 3
  %8104 = fmul <4 x float> %8103, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp328 = add i32 %8058, %7749
  %8105 = insertelement <4 x i32> undef, i32 %tmp328, i64 0
  %8106 = shufflevector <4 x i32> %8105, <4 x i32> undef, <4 x i32> zeroinitializer
  %8107 = add <4 x i32> %8106, <i32 -1, i32 0, i32 1, i32 2>
  %8108 = add <4 x i32> %8107, %t2796
  %8109 = sext <4 x i32> %8108 to <4 x i64>
  %8110 = extractelement <4 x i64> %8109, i64 0
  %8111 = getelementptr inbounds float, ptr %f4.host, i64 %8110
  %8112 = load float, ptr %8111, align 4, !tbaa !43
  %8113 = insertelement <4 x float> undef, float %8112, i64 0
  %8114 = extractelement <4 x i64> %8109, i64 1
  %8115 = getelementptr inbounds float, ptr %f4.host, i64 %8114
  %8116 = load float, ptr %8115, align 4, !tbaa !43
  %8117 = insertelement <4 x float> %8113, float %8116, i64 1
  %8118 = extractelement <4 x i64> %8109, i64 2
  %8119 = getelementptr inbounds float, ptr %f4.host, i64 %8118
  %8120 = load float, ptr %8119, align 4, !tbaa !43
  %8121 = insertelement <4 x float> %8117, float %8120, i64 2
  %8122 = extractelement <4 x i64> %8109, i64 3
  %8123 = getelementptr inbounds float, ptr %f4.host, i64 %8122
  %8124 = load float, ptr %8123, align 4, !tbaa !43
  %8125 = insertelement <4 x float> %8121, float %8124, i64 3
  %8126 = fmul <4 x float> %8125, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8127 = fadd <4 x float> %8104, %8126
  %8128 = fmul <4 x float> %8127, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8129 = fadd <4 x float> %8082, %8128
  %8130 = sext <4 x i32> %t2787 to <4 x i64>
  %8131 = extractelement <4 x i64> %8130, i64 0
  %8132 = getelementptr inbounds float, ptr %f0.host, i64 %8131
  %8133 = load float, ptr %8132, align 4, !tbaa !6
  %8134 = insertelement <4 x float> undef, float %8133, i64 0
  %8135 = extractelement <4 x i64> %8130, i64 1
  %8136 = getelementptr inbounds float, ptr %f0.host, i64 %8135
  %8137 = load float, ptr %8136, align 4, !tbaa !6
  %8138 = insertelement <4 x float> %8134, float %8137, i64 1
  %8139 = extractelement <4 x i64> %8130, i64 2
  %8140 = getelementptr inbounds float, ptr %f0.host, i64 %8139
  %8141 = load float, ptr %8140, align 4, !tbaa !6
  %8142 = insertelement <4 x float> %8138, float %8141, i64 2
  %8143 = extractelement <4 x i64> %8130, i64 3
  %8144 = getelementptr inbounds float, ptr %f0.host, i64 %8143
  %8145 = load float, ptr %8144, align 4, !tbaa !6
  %8146 = insertelement <4 x float> %8142, float %8145, i64 3
  %8147 = fsub <4 x float> %t2754, %t2784
  %8148 = fmul <4 x float> %3298, %8147
  %8149 = fadd <4 x float> %t2784, %8148
  %8150 = fadd <4 x float> %8149, %8146
  %8151 = fsub <4 x float> %8150, %8129
  %8152 = fsub <4 x float> %t2756, %t2782
  %8153 = fmul <4 x float> %8152, %8151
  %8154 = add nsw <4 x i32> %t2791, %8037
  %8155 = sext <4 x i32> %8154 to <4 x i64>
  %8156 = extractelement <4 x i64> %8155, i64 0
  %8157 = getelementptr inbounds float, ptr %f4.host, i64 %8156
  %8158 = load float, ptr %8157, align 4, !tbaa !43
  %8159 = insertelement <4 x float> undef, float %8158, i64 0
  %8160 = extractelement <4 x i64> %8155, i64 1
  %8161 = getelementptr inbounds float, ptr %f4.host, i64 %8160
  %8162 = load float, ptr %8161, align 4, !tbaa !43
  %8163 = insertelement <4 x float> %8159, float %8162, i64 1
  %8164 = extractelement <4 x i64> %8155, i64 2
  %8165 = getelementptr inbounds float, ptr %f4.host, i64 %8164
  %8166 = load float, ptr %8165, align 4, !tbaa !43
  %8167 = insertelement <4 x float> %8163, float %8166, i64 2
  %8168 = extractelement <4 x i64> %8155, i64 3
  %8169 = getelementptr inbounds float, ptr %f4.host, i64 %8168
  %8170 = load float, ptr %8169, align 4, !tbaa !43
  %8171 = insertelement <4 x float> %8167, float %8170, i64 3
  %8172 = fmul <4 x float> %8171, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8173 = add <4 x i32> %8061, %t2791
  %8174 = sext <4 x i32> %8173 to <4 x i64>
  %8175 = extractelement <4 x i64> %8174, i64 0
  %8176 = getelementptr inbounds float, ptr %f4.host, i64 %8175
  %8177 = load float, ptr %8176, align 4, !tbaa !43
  %8178 = insertelement <4 x float> undef, float %8177, i64 0
  %8179 = extractelement <4 x i64> %8174, i64 1
  %8180 = getelementptr inbounds float, ptr %f4.host, i64 %8179
  %8181 = load float, ptr %8180, align 4, !tbaa !43
  %8182 = insertelement <4 x float> %8178, float %8181, i64 1
  %8183 = extractelement <4 x i64> %8174, i64 2
  %8184 = getelementptr inbounds float, ptr %f4.host, i64 %8183
  %8185 = load float, ptr %8184, align 4, !tbaa !43
  %8186 = insertelement <4 x float> %8182, float %8185, i64 2
  %8187 = extractelement <4 x i64> %8174, i64 3
  %8188 = getelementptr inbounds float, ptr %f4.host, i64 %8187
  %8189 = load float, ptr %8188, align 4, !tbaa !43
  %8190 = insertelement <4 x float> %8186, float %8189, i64 3
  %8191 = fmul <4 x float> %8190, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8192 = fadd <4 x float> %8172, %8191
  %8193 = fmul <4 x float> %8192, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8194 = add nsw <4 x i32> %t2791, %8085
  %8195 = sext <4 x i32> %8194 to <4 x i64>
  %8196 = extractelement <4 x i64> %8195, i64 0
  %8197 = getelementptr inbounds float, ptr %f4.host, i64 %8196
  %8198 = load float, ptr %8197, align 4, !tbaa !43
  %8199 = insertelement <4 x float> undef, float %8198, i64 0
  %8200 = extractelement <4 x i64> %8195, i64 1
  %8201 = getelementptr inbounds float, ptr %f4.host, i64 %8200
  %8202 = load float, ptr %8201, align 4, !tbaa !43
  %8203 = insertelement <4 x float> %8199, float %8202, i64 1
  %8204 = extractelement <4 x i64> %8195, i64 2
  %8205 = getelementptr inbounds float, ptr %f4.host, i64 %8204
  %8206 = load float, ptr %8205, align 4, !tbaa !43
  %8207 = insertelement <4 x float> %8203, float %8206, i64 2
  %8208 = extractelement <4 x i64> %8195, i64 3
  %8209 = getelementptr inbounds float, ptr %f4.host, i64 %8208
  %8210 = load float, ptr %8209, align 4, !tbaa !43
  %8211 = insertelement <4 x float> %8207, float %8210, i64 3
  %8212 = fmul <4 x float> %8211, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8213 = add <4 x i32> %8107, %t2791
  %8214 = sext <4 x i32> %8213 to <4 x i64>
  %8215 = extractelement <4 x i64> %8214, i64 0
  %8216 = getelementptr inbounds float, ptr %f4.host, i64 %8215
  %8217 = load float, ptr %8216, align 4, !tbaa !43
  %8218 = insertelement <4 x float> undef, float %8217, i64 0
  %8219 = extractelement <4 x i64> %8214, i64 1
  %8220 = getelementptr inbounds float, ptr %f4.host, i64 %8219
  %8221 = load float, ptr %8220, align 4, !tbaa !43
  %8222 = insertelement <4 x float> %8218, float %8221, i64 1
  %8223 = extractelement <4 x i64> %8214, i64 2
  %8224 = getelementptr inbounds float, ptr %f4.host, i64 %8223
  %8225 = load float, ptr %8224, align 4, !tbaa !43
  %8226 = insertelement <4 x float> %8222, float %8225, i64 2
  %8227 = extractelement <4 x i64> %8214, i64 3
  %8228 = getelementptr inbounds float, ptr %f4.host, i64 %8227
  %8229 = load float, ptr %8228, align 4, !tbaa !43
  %8230 = insertelement <4 x float> %8226, float %8229, i64 3
  %8231 = fmul <4 x float> %8230, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8232 = fadd <4 x float> %8212, %8231
  %8233 = fmul <4 x float> %8232, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8234 = fadd <4 x float> %8193, %8233
  %8235 = add nsw <4 x i32> %t2787, <i32 256, i32 256, i32 256, i32 256>
  %8236 = sext <4 x i32> %8235 to <4 x i64>
  %8237 = extractelement <4 x i64> %8236, i64 0
  %8238 = getelementptr inbounds float, ptr %f0.host, i64 %8237
  %8239 = load float, ptr %8238, align 4, !tbaa !6
  %8240 = insertelement <4 x float> undef, float %8239, i64 0
  %8241 = extractelement <4 x i64> %8236, i64 1
  %8242 = getelementptr inbounds float, ptr %f0.host, i64 %8241
  %8243 = load float, ptr %8242, align 4, !tbaa !6
  %8244 = insertelement <4 x float> %8240, float %8243, i64 1
  %8245 = extractelement <4 x i64> %8236, i64 2
  %8246 = getelementptr inbounds float, ptr %f0.host, i64 %8245
  %8247 = load float, ptr %8246, align 4, !tbaa !6
  %8248 = insertelement <4 x float> %8244, float %8247, i64 2
  %8249 = extractelement <4 x i64> %8236, i64 3
  %8250 = getelementptr inbounds float, ptr %f0.host, i64 %8249
  %8251 = load float, ptr %8250, align 4, !tbaa !6
  %8252 = insertelement <4 x float> %8248, float %8251, i64 3
  %8253 = fsub <4 x float> %t2754, %t2783
  %8254 = fmul <4 x float> %3298, %8253
  %8255 = fadd <4 x float> %t2783, %8254
  %8256 = fadd <4 x float> %8255, %8252
  %8257 = fsub <4 x float> %8256, %8234
  %8258 = fsub <4 x float> %t2782, %t2756
  %8259 = fadd <4 x float> %8258, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8260 = fmul <4 x float> %8259, %8257
  %8261 = fadd <4 x float> %8153, %8260
  %tmp316 = add i32 %3296, %7801
  %8262 = sext i32 %tmp316 to i64
  %8263 = sub nsw i64 %8262, %1963
  %8264 = add nsw i64 %8263, %7752
  %8265 = getelementptr inbounds float, ptr %222, i64 %8264
  %8266 = load <4 x float>, ptr %8265, align 4, !tbaa !69
  %8267 = fmul <4 x float> %8266, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp324 = add i32 %3300, %7801
  %8268 = sext i32 %tmp324 to i64
  %8269 = sub nsw i64 %8268, %1963
  %8270 = add nsw i64 %7753, %8269
  %8271 = getelementptr inbounds float, ptr %222, i64 %8270
  %8272 = load <4 x float>, ptr %8271, align 4, !tbaa !69
  %8273 = fmul <4 x float> %8272, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8274 = fadd <4 x float> %8267, %8273
  %8275 = fmul <4 x float> %8274, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8276 = add nsw i64 %8263, %7754
  %8277 = getelementptr inbounds float, ptr %222, i64 %8276
  %8278 = load <4 x float>, ptr %8277, align 4, !tbaa !69
  %8279 = fmul <4 x float> %8278, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8280 = add nsw i64 %7755, %8269
  %8281 = getelementptr inbounds float, ptr %222, i64 %8280
  %8282 = load <4 x float>, ptr %8281, align 4, !tbaa !69
  %8283 = fmul <4 x float> %8282, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8284 = fadd <4 x float> %8279, %8283
  %8285 = fmul <4 x float> %8284, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8286 = fadd <4 x float> %8275, %8285
  %8287 = fadd <4 x float> %8261, %8286
  %8288 = shufflevector <4 x float> %8034, <4 x float> %8287, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %8289 = shl i64 %lsr.iv311, 3
  %uglygep = getelementptr i8, ptr %scevgep309, i64 %8289
  store <8 x float> %8288, ptr %uglygep, align 4, !tbaa !71
  %lsr.iv.next308 = add i32 %lsr.iv307, -1
  %lsr.iv.next312 = add nuw nsw i64 %lsr.iv311, 4
  %lsr.iv.next332 = add i32 %lsr.iv331, 8
  %.not116 = icmp eq i32 %lsr.iv.next308, 0
  br i1 %.not116, label %"end for f125.s0.v3.v378", label %"for f125.s0.v3.v377"

"end for f125.s0.v3.v378":                        ; preds = %"for f125.s0.v3.v377", %"produce f12576"
  br i1 %3301, label %"for f125.s0.v3.v380.preheader", label %"consume f12583", !prof !5

"for f125.s0.v3.v380.preheader":                  ; preds = %"end for f125.s0.v3.v378"
  %8290 = shl nuw nsw i32 %6658, 1
  %8291 = ashr i32 %6657, 1
  %t2799 = add nsw i32 %8290, %8291
  %8292 = sub nsw i64 %3406, %10
  %8293 = mul nsw i64 %8292, %3351
  %8294 = add nsw i64 %8293, %3352
  %8295 = add nsw i64 %8294, -8
  %8296 = getelementptr inbounds float, ptr %f2.host, i64 %8295
  %8297 = load <4 x float>, ptr %8296, align 4, !tbaa !41
  %8298 = add nsw i64 %8294, -4
  %8299 = getelementptr inbounds float, ptr %f2.host, i64 %8298
  %8300 = load <4 x float>, ptr %8299, align 4, !tbaa !41
  %t2803 = shufflevector <4 x float> %8297, <4 x float> %8300, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2804 = shufflevector <4 x float> %8297, <4 x float> %8300, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2805 = fmul <4 x float> %232, %t2803
  %t2806 = fmul <4 x float> %232, %t2804
  %a989 = fptosi <4 x float> %t2806 to <4 x i32>
  %a996 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a989)
  %8301 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a996, <4 x i32> zeroinitializer)
  %t2808 = sitofp <4 x i32> %8301 to <4 x float>
  %t2809 = fmul <4 x float> %3289, %t2808
  %8302 = add nuw nsw <4 x i32> %8301, <i32 1, i32 1, i32 1, i32 1>
  %8303 = sitofp <4 x i32> %8302 to <4 x float>
  %t2810 = fmul <4 x float> %3289, %8303
  %8304 = add i32 %t2799, %3290
  %t2812 = mul nsw i32 %8304, %207
  %8305 = sub nsw i32 %8291, %158
  %t2814 = mul nsw i32 %8305, %207
  %8306 = fmul <4 x float> %t2806, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a994 = fptosi <4 x float> %8306 to <4 x i32>
  %a993 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a994)
  %8307 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a993, <4 x i32> zeroinitializer)
  %8308 = shl <4 x i32> %8301, <i32 8, i32 8, i32 8, i32 8>
  %.neg258 = sub <4 x i32> %.neg251, %8308
  %t2815 = add <4 x i32> %.neg258, %8307
  %8309 = add i32 %t2799, %3136
  %8310 = mul nsw i32 %8309, %f4.stride.1
  %t2820 = sub nsw <4 x i32> %8301, %241
  %t2821 = mul nsw <4 x i32> %t2820, %1959
  %8311 = sub nsw i32 %8291, %f4.v4.min_realized
  %8312 = mul nsw i32 %8311, %f4.stride.1
  %8313 = add nsw <4 x i32> %t2820, <i32 1, i32 1, i32 1, i32 1>
  %t2827 = mul nsw <4 x i32> %8313, %1959
  %a997 = fptosi <4 x float> %t2805 to <4 x i32>
  %a1004 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a997)
  %8314 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1004, <4 x i32> zeroinitializer)
  %t2830 = sitofp <4 x i32> %8314 to <4 x float>
  %t2831 = fmul <4 x float> %3289, %t2830
  %8315 = add nuw nsw <4 x i32> %8314, <i32 1, i32 1, i32 1, i32 1>
  %8316 = sitofp <4 x i32> %8315 to <4 x float>
  %t2832 = fmul <4 x float> %3289, %8316
  %8317 = fmul <4 x float> %t2805, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1002 = fptosi <4 x float> %8317 to <4 x i32>
  %a1001 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a1002)
  %8318 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1001, <4 x i32> zeroinitializer)
  %8319 = shl <4 x i32> %8314, <i32 8, i32 8, i32 8, i32 8>
  %.neg260 = sub <4 x i32> %.neg251, %8319
  %t2835 = add <4 x i32> %.neg260, %8318
  %t2837 = add nsw i32 %8310, %3312
  %t2838 = sub nsw <4 x i32> %8314, %241
  %t2839 = mul nsw <4 x i32> %t2838, %1959
  %t2841 = add nsw i32 %8310, %3313
  %t2842 = add nsw i32 %8312, %3312
  %t2843 = add nsw i32 %8312, %3313
  %8320 = add nsw <4 x i32> %t2838, <i32 1, i32 1, i32 1, i32 1>
  %t2844 = mul nsw <4 x i32> %8320, %1959
  %8321 = add i32 %t2826, %8312
  %8322 = insertelement <4 x i32> undef, i32 %8321, i64 0
  %8323 = shufflevector <4 x i32> %8322, <4 x i32> undef, <4 x i32> zeroinitializer
  %8324 = add nsw <4 x i32> %8323, <i32 0, i32 1, i32 2, i32 3>
  %8325 = add nsw <4 x i32> %t2827, %8324
  %8326 = sext <4 x i32> %8325 to <4 x i64>
  %8327 = extractelement <4 x i64> %8326, i64 0
  %8328 = getelementptr inbounds float, ptr %f4.host, i64 %8327
  %8329 = load float, ptr %8328, align 4, !tbaa !43
  %8330 = insertelement <4 x float> undef, float %8329, i64 0
  %8331 = extractelement <4 x i64> %8326, i64 1
  %8332 = getelementptr inbounds float, ptr %f4.host, i64 %8331
  %8333 = load float, ptr %8332, align 4, !tbaa !43
  %8334 = insertelement <4 x float> %8330, float %8333, i64 1
  %8335 = extractelement <4 x i64> %8326, i64 2
  %8336 = getelementptr inbounds float, ptr %f4.host, i64 %8335
  %8337 = load float, ptr %8336, align 4, !tbaa !43
  %8338 = insertelement <4 x float> %8334, float %8337, i64 2
  %8339 = extractelement <4 x i64> %8326, i64 3
  %8340 = getelementptr inbounds float, ptr %f4.host, i64 %8339
  %8341 = load float, ptr %8340, align 4, !tbaa !43
  %8342 = insertelement <4 x float> %8338, float %8341, i64 3
  %8343 = fmul <4 x float> %8342, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8344 = add i32 %t2825, %8312
  %8345 = insertelement <4 x i32> undef, i32 %8344, i64 0
  %8346 = shufflevector <4 x i32> %8345, <4 x i32> undef, <4 x i32> zeroinitializer
  %8347 = add <4 x i32> %8346, <i32 -1, i32 0, i32 1, i32 2>
  %8348 = add <4 x i32> %8347, %t2827
  %8349 = sext <4 x i32> %8348 to <4 x i64>
  %8350 = extractelement <4 x i64> %8349, i64 0
  %8351 = getelementptr inbounds float, ptr %f4.host, i64 %8350
  %8352 = load float, ptr %8351, align 4, !tbaa !43
  %8353 = insertelement <4 x float> undef, float %8352, i64 0
  %8354 = extractelement <4 x i64> %8349, i64 1
  %8355 = getelementptr inbounds float, ptr %f4.host, i64 %8354
  %8356 = load float, ptr %8355, align 4, !tbaa !43
  %8357 = insertelement <4 x float> %8353, float %8356, i64 1
  %8358 = extractelement <4 x i64> %8349, i64 2
  %8359 = getelementptr inbounds float, ptr %f4.host, i64 %8358
  %8360 = load float, ptr %8359, align 4, !tbaa !43
  %8361 = insertelement <4 x float> %8357, float %8360, i64 2
  %8362 = extractelement <4 x i64> %8349, i64 3
  %8363 = getelementptr inbounds float, ptr %f4.host, i64 %8362
  %8364 = load float, ptr %8363, align 4, !tbaa !43
  %8365 = insertelement <4 x float> %8361, float %8364, i64 3
  %8366 = fmul <4 x float> %8365, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8367 = fadd <4 x float> %8343, %8366
  %8368 = fmul <4 x float> %8367, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8369 = add i32 %t2826, %8310
  %8370 = insertelement <4 x i32> undef, i32 %8369, i64 0
  %8371 = shufflevector <4 x i32> %8370, <4 x i32> undef, <4 x i32> zeroinitializer
  %8372 = add nsw <4 x i32> %8371, <i32 0, i32 1, i32 2, i32 3>
  %8373 = add nsw <4 x i32> %t2827, %8372
  %8374 = sext <4 x i32> %8373 to <4 x i64>
  %8375 = extractelement <4 x i64> %8374, i64 0
  %8376 = getelementptr inbounds float, ptr %f4.host, i64 %8375
  %8377 = load float, ptr %8376, align 4, !tbaa !43
  %8378 = insertelement <4 x float> undef, float %8377, i64 0
  %8379 = extractelement <4 x i64> %8374, i64 1
  %8380 = getelementptr inbounds float, ptr %f4.host, i64 %8379
  %8381 = load float, ptr %8380, align 4, !tbaa !43
  %8382 = insertelement <4 x float> %8378, float %8381, i64 1
  %8383 = extractelement <4 x i64> %8374, i64 2
  %8384 = getelementptr inbounds float, ptr %f4.host, i64 %8383
  %8385 = load float, ptr %8384, align 4, !tbaa !43
  %8386 = insertelement <4 x float> %8382, float %8385, i64 2
  %8387 = extractelement <4 x i64> %8374, i64 3
  %8388 = getelementptr inbounds float, ptr %f4.host, i64 %8387
  %8389 = load float, ptr %8388, align 4, !tbaa !43
  %8390 = insertelement <4 x float> %8386, float %8389, i64 3
  %8391 = fmul <4 x float> %8390, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8392 = add i32 %t2825, %8310
  %8393 = insertelement <4 x i32> undef, i32 %8392, i64 0
  %8394 = shufflevector <4 x i32> %8393, <4 x i32> undef, <4 x i32> zeroinitializer
  %8395 = add <4 x i32> %8394, <i32 -1, i32 0, i32 1, i32 2>
  %8396 = add <4 x i32> %8395, %t2827
  %8397 = sext <4 x i32> %8396 to <4 x i64>
  %8398 = extractelement <4 x i64> %8397, i64 0
  %8399 = getelementptr inbounds float, ptr %f4.host, i64 %8398
  %8400 = load float, ptr %8399, align 4, !tbaa !43
  %8401 = insertelement <4 x float> undef, float %8400, i64 0
  %8402 = extractelement <4 x i64> %8397, i64 1
  %8403 = getelementptr inbounds float, ptr %f4.host, i64 %8402
  %8404 = load float, ptr %8403, align 4, !tbaa !43
  %8405 = insertelement <4 x float> %8401, float %8404, i64 1
  %8406 = extractelement <4 x i64> %8397, i64 2
  %8407 = getelementptr inbounds float, ptr %f4.host, i64 %8406
  %8408 = load float, ptr %8407, align 4, !tbaa !43
  %8409 = insertelement <4 x float> %8405, float %8408, i64 2
  %8410 = extractelement <4 x i64> %8397, i64 3
  %8411 = getelementptr inbounds float, ptr %f4.host, i64 %8410
  %8412 = load float, ptr %8411, align 4, !tbaa !43
  %8413 = insertelement <4 x float> %8409, float %8412, i64 3
  %8414 = fmul <4 x float> %8413, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8415 = fadd <4 x float> %8391, %8414
  %8416 = fmul <4 x float> %8415, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8417 = fadd <4 x float> %8368, %8416
  %8418 = sext <4 x i32> %t2815 to <4 x i64>
  %8419 = extractelement <4 x i64> %8418, i64 0
  %8420 = getelementptr inbounds float, ptr %f0.host, i64 %8419
  %8421 = load float, ptr %8420, align 4, !tbaa !6
  %8422 = insertelement <4 x float> undef, float %8421, i64 0
  %8423 = extractelement <4 x i64> %8418, i64 1
  %8424 = getelementptr inbounds float, ptr %f0.host, i64 %8423
  %8425 = load float, ptr %8424, align 4, !tbaa !6
  %8426 = insertelement <4 x float> %8422, float %8425, i64 1
  %8427 = extractelement <4 x i64> %8418, i64 2
  %8428 = getelementptr inbounds float, ptr %f0.host, i64 %8427
  %8429 = load float, ptr %8428, align 4, !tbaa !6
  %8430 = insertelement <4 x float> %8426, float %8429, i64 2
  %8431 = extractelement <4 x i64> %8418, i64 3
  %8432 = getelementptr inbounds float, ptr %f0.host, i64 %8431
  %8433 = load float, ptr %8432, align 4, !tbaa !6
  %8434 = insertelement <4 x float> %8430, float %8433, i64 3
  %8435 = fsub <4 x float> %t2804, %t2810
  %8436 = fmul <4 x float> %3298, %8435
  %8437 = fadd <4 x float> %t2810, %8436
  %8438 = fadd <4 x float> %8437, %8434
  %8439 = fsub <4 x float> %8438, %8417
  %8440 = fsub <4 x float> %t2806, %t2808
  %8441 = fmul <4 x float> %8440, %8439
  %8442 = add nsw <4 x i32> %t2821, %8324
  %8443 = sext <4 x i32> %8442 to <4 x i64>
  %8444 = extractelement <4 x i64> %8443, i64 0
  %8445 = getelementptr inbounds float, ptr %f4.host, i64 %8444
  %8446 = load float, ptr %8445, align 4, !tbaa !43
  %8447 = insertelement <4 x float> undef, float %8446, i64 0
  %8448 = extractelement <4 x i64> %8443, i64 1
  %8449 = getelementptr inbounds float, ptr %f4.host, i64 %8448
  %8450 = load float, ptr %8449, align 4, !tbaa !43
  %8451 = insertelement <4 x float> %8447, float %8450, i64 1
  %8452 = extractelement <4 x i64> %8443, i64 2
  %8453 = getelementptr inbounds float, ptr %f4.host, i64 %8452
  %8454 = load float, ptr %8453, align 4, !tbaa !43
  %8455 = insertelement <4 x float> %8451, float %8454, i64 2
  %8456 = extractelement <4 x i64> %8443, i64 3
  %8457 = getelementptr inbounds float, ptr %f4.host, i64 %8456
  %8458 = load float, ptr %8457, align 4, !tbaa !43
  %8459 = insertelement <4 x float> %8455, float %8458, i64 3
  %8460 = fmul <4 x float> %8459, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8461 = add <4 x i32> %8347, %t2821
  %8462 = sext <4 x i32> %8461 to <4 x i64>
  %8463 = extractelement <4 x i64> %8462, i64 0
  %8464 = getelementptr inbounds float, ptr %f4.host, i64 %8463
  %8465 = load float, ptr %8464, align 4, !tbaa !43
  %8466 = insertelement <4 x float> undef, float %8465, i64 0
  %8467 = extractelement <4 x i64> %8462, i64 1
  %8468 = getelementptr inbounds float, ptr %f4.host, i64 %8467
  %8469 = load float, ptr %8468, align 4, !tbaa !43
  %8470 = insertelement <4 x float> %8466, float %8469, i64 1
  %8471 = extractelement <4 x i64> %8462, i64 2
  %8472 = getelementptr inbounds float, ptr %f4.host, i64 %8471
  %8473 = load float, ptr %8472, align 4, !tbaa !43
  %8474 = insertelement <4 x float> %8470, float %8473, i64 2
  %8475 = extractelement <4 x i64> %8462, i64 3
  %8476 = getelementptr inbounds float, ptr %f4.host, i64 %8475
  %8477 = load float, ptr %8476, align 4, !tbaa !43
  %8478 = insertelement <4 x float> %8474, float %8477, i64 3
  %8479 = fmul <4 x float> %8478, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8480 = fadd <4 x float> %8460, %8479
  %8481 = fmul <4 x float> %8480, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8482 = add nsw <4 x i32> %t2821, %8372
  %8483 = sext <4 x i32> %8482 to <4 x i64>
  %8484 = extractelement <4 x i64> %8483, i64 0
  %8485 = getelementptr inbounds float, ptr %f4.host, i64 %8484
  %8486 = load float, ptr %8485, align 4, !tbaa !43
  %8487 = insertelement <4 x float> undef, float %8486, i64 0
  %8488 = extractelement <4 x i64> %8483, i64 1
  %8489 = getelementptr inbounds float, ptr %f4.host, i64 %8488
  %8490 = load float, ptr %8489, align 4, !tbaa !43
  %8491 = insertelement <4 x float> %8487, float %8490, i64 1
  %8492 = extractelement <4 x i64> %8483, i64 2
  %8493 = getelementptr inbounds float, ptr %f4.host, i64 %8492
  %8494 = load float, ptr %8493, align 4, !tbaa !43
  %8495 = insertelement <4 x float> %8491, float %8494, i64 2
  %8496 = extractelement <4 x i64> %8483, i64 3
  %8497 = getelementptr inbounds float, ptr %f4.host, i64 %8496
  %8498 = load float, ptr %8497, align 4, !tbaa !43
  %8499 = insertelement <4 x float> %8495, float %8498, i64 3
  %8500 = fmul <4 x float> %8499, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8501 = add <4 x i32> %8395, %t2821
  %8502 = sext <4 x i32> %8501 to <4 x i64>
  %8503 = extractelement <4 x i64> %8502, i64 0
  %8504 = getelementptr inbounds float, ptr %f4.host, i64 %8503
  %8505 = load float, ptr %8504, align 4, !tbaa !43
  %8506 = insertelement <4 x float> undef, float %8505, i64 0
  %8507 = extractelement <4 x i64> %8502, i64 1
  %8508 = getelementptr inbounds float, ptr %f4.host, i64 %8507
  %8509 = load float, ptr %8508, align 4, !tbaa !43
  %8510 = insertelement <4 x float> %8506, float %8509, i64 1
  %8511 = extractelement <4 x i64> %8502, i64 2
  %8512 = getelementptr inbounds float, ptr %f4.host, i64 %8511
  %8513 = load float, ptr %8512, align 4, !tbaa !43
  %8514 = insertelement <4 x float> %8510, float %8513, i64 2
  %8515 = extractelement <4 x i64> %8502, i64 3
  %8516 = getelementptr inbounds float, ptr %f4.host, i64 %8515
  %8517 = load float, ptr %8516, align 4, !tbaa !43
  %8518 = insertelement <4 x float> %8514, float %8517, i64 3
  %8519 = fmul <4 x float> %8518, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8520 = fadd <4 x float> %8500, %8519
  %8521 = fmul <4 x float> %8520, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8522 = fadd <4 x float> %8481, %8521
  %8523 = add nsw <4 x i32> %t2815, <i32 256, i32 256, i32 256, i32 256>
  %8524 = sext <4 x i32> %8523 to <4 x i64>
  %8525 = extractelement <4 x i64> %8524, i64 0
  %8526 = getelementptr inbounds float, ptr %f0.host, i64 %8525
  %8527 = load float, ptr %8526, align 4, !tbaa !6
  %8528 = insertelement <4 x float> undef, float %8527, i64 0
  %8529 = extractelement <4 x i64> %8524, i64 1
  %8530 = getelementptr inbounds float, ptr %f0.host, i64 %8529
  %8531 = load float, ptr %8530, align 4, !tbaa !6
  %8532 = insertelement <4 x float> %8528, float %8531, i64 1
  %8533 = extractelement <4 x i64> %8524, i64 2
  %8534 = getelementptr inbounds float, ptr %f0.host, i64 %8533
  %8535 = load float, ptr %8534, align 4, !tbaa !6
  %8536 = insertelement <4 x float> %8532, float %8535, i64 2
  %8537 = extractelement <4 x i64> %8524, i64 3
  %8538 = getelementptr inbounds float, ptr %f0.host, i64 %8537
  %8539 = load float, ptr %8538, align 4, !tbaa !6
  %8540 = insertelement <4 x float> %8536, float %8539, i64 3
  %8541 = fsub <4 x float> %t2804, %t2809
  %8542 = fmul <4 x float> %3298, %8541
  %8543 = fadd <4 x float> %t2809, %8542
  %8544 = fadd <4 x float> %8543, %8540
  %8545 = fsub <4 x float> %8544, %8522
  %8546 = fsub <4 x float> %t2808, %t2806
  %8547 = fadd <4 x float> %8546, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8548 = fmul <4 x float> %8547, %8545
  %8549 = fadd <4 x float> %8441, %8548
  %8550 = sext i32 %t2814 to i64
  %8551 = add nsw i64 %3316, %8550
  %8552 = getelementptr inbounds float, ptr %222, i64 %8551
  %8553 = load <4 x float>, ptr %8552, align 4, !tbaa !69
  %8554 = fmul <4 x float> %8553, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8555 = add nsw i64 %3319, %8550
  %8556 = getelementptr inbounds float, ptr %222, i64 %8555
  %8557 = load <4 x float>, ptr %8556, align 4, !tbaa !69
  %8558 = fmul <4 x float> %8557, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8559 = fadd <4 x float> %8554, %8558
  %8560 = fmul <4 x float> %8559, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8561 = sext i32 %t2812 to i64
  %8562 = add nsw i64 %3316, %8561
  %8563 = getelementptr inbounds float, ptr %222, i64 %8562
  %8564 = load <4 x float>, ptr %8563, align 4, !tbaa !69
  %8565 = fmul <4 x float> %8564, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8566 = add nsw i64 %3319, %8561
  %8567 = getelementptr inbounds float, ptr %222, i64 %8566
  %8568 = load <4 x float>, ptr %8567, align 4, !tbaa !69
  %8569 = fmul <4 x float> %8568, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8570 = fadd <4 x float> %8565, %8569
  %8571 = fmul <4 x float> %8570, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8572 = fadd <4 x float> %8560, %8571
  %8573 = fadd <4 x float> %8549, %8572
  %8574 = insertelement <4 x i32> undef, i32 %t2843, i64 0
  %8575 = shufflevector <4 x i32> %8574, <4 x i32> undef, <4 x i32> zeroinitializer
  %8576 = add nsw <4 x i32> %8575, <i32 0, i32 1, i32 2, i32 3>
  %8577 = add nsw <4 x i32> %t2844, %8576
  %8578 = sext <4 x i32> %8577 to <4 x i64>
  %8579 = extractelement <4 x i64> %8578, i64 0
  %8580 = getelementptr inbounds float, ptr %f4.host, i64 %8579
  %8581 = load float, ptr %8580, align 4, !tbaa !43
  %8582 = insertelement <4 x float> undef, float %8581, i64 0
  %8583 = extractelement <4 x i64> %8578, i64 1
  %8584 = getelementptr inbounds float, ptr %f4.host, i64 %8583
  %8585 = load float, ptr %8584, align 4, !tbaa !43
  %8586 = insertelement <4 x float> %8582, float %8585, i64 1
  %8587 = extractelement <4 x i64> %8578, i64 2
  %8588 = getelementptr inbounds float, ptr %f4.host, i64 %8587
  %8589 = load float, ptr %8588, align 4, !tbaa !43
  %8590 = insertelement <4 x float> %8586, float %8589, i64 2
  %8591 = extractelement <4 x i64> %8578, i64 3
  %8592 = getelementptr inbounds float, ptr %f4.host, i64 %8591
  %8593 = load float, ptr %8592, align 4, !tbaa !43
  %8594 = insertelement <4 x float> %8590, float %8593, i64 3
  %8595 = fmul <4 x float> %8594, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8596 = insertelement <4 x i32> undef, i32 %t2842, i64 0
  %8597 = shufflevector <4 x i32> %8596, <4 x i32> undef, <4 x i32> zeroinitializer
  %8598 = add <4 x i32> %8597, <i32 -1, i32 0, i32 1, i32 2>
  %8599 = add <4 x i32> %8598, %t2844
  %8600 = sext <4 x i32> %8599 to <4 x i64>
  %8601 = extractelement <4 x i64> %8600, i64 0
  %8602 = getelementptr inbounds float, ptr %f4.host, i64 %8601
  %8603 = load float, ptr %8602, align 4, !tbaa !43
  %8604 = insertelement <4 x float> undef, float %8603, i64 0
  %8605 = extractelement <4 x i64> %8600, i64 1
  %8606 = getelementptr inbounds float, ptr %f4.host, i64 %8605
  %8607 = load float, ptr %8606, align 4, !tbaa !43
  %8608 = insertelement <4 x float> %8604, float %8607, i64 1
  %8609 = extractelement <4 x i64> %8600, i64 2
  %8610 = getelementptr inbounds float, ptr %f4.host, i64 %8609
  %8611 = load float, ptr %8610, align 4, !tbaa !43
  %8612 = insertelement <4 x float> %8608, float %8611, i64 2
  %8613 = extractelement <4 x i64> %8600, i64 3
  %8614 = getelementptr inbounds float, ptr %f4.host, i64 %8613
  %8615 = load float, ptr %8614, align 4, !tbaa !43
  %8616 = insertelement <4 x float> %8612, float %8615, i64 3
  %8617 = fmul <4 x float> %8616, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8618 = fadd <4 x float> %8595, %8617
  %8619 = fmul <4 x float> %8618, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8620 = insertelement <4 x i32> undef, i32 %t2841, i64 0
  %8621 = shufflevector <4 x i32> %8620, <4 x i32> undef, <4 x i32> zeroinitializer
  %8622 = add nsw <4 x i32> %8621, <i32 0, i32 1, i32 2, i32 3>
  %8623 = add nsw <4 x i32> %t2844, %8622
  %8624 = sext <4 x i32> %8623 to <4 x i64>
  %8625 = extractelement <4 x i64> %8624, i64 0
  %8626 = getelementptr inbounds float, ptr %f4.host, i64 %8625
  %8627 = load float, ptr %8626, align 4, !tbaa !43
  %8628 = insertelement <4 x float> undef, float %8627, i64 0
  %8629 = extractelement <4 x i64> %8624, i64 1
  %8630 = getelementptr inbounds float, ptr %f4.host, i64 %8629
  %8631 = load float, ptr %8630, align 4, !tbaa !43
  %8632 = insertelement <4 x float> %8628, float %8631, i64 1
  %8633 = extractelement <4 x i64> %8624, i64 2
  %8634 = getelementptr inbounds float, ptr %f4.host, i64 %8633
  %8635 = load float, ptr %8634, align 4, !tbaa !43
  %8636 = insertelement <4 x float> %8632, float %8635, i64 2
  %8637 = extractelement <4 x i64> %8624, i64 3
  %8638 = getelementptr inbounds float, ptr %f4.host, i64 %8637
  %8639 = load float, ptr %8638, align 4, !tbaa !43
  %8640 = insertelement <4 x float> %8636, float %8639, i64 3
  %8641 = fmul <4 x float> %8640, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8642 = insertelement <4 x i32> undef, i32 %t2837, i64 0
  %8643 = shufflevector <4 x i32> %8642, <4 x i32> undef, <4 x i32> zeroinitializer
  %8644 = add <4 x i32> %8643, <i32 -1, i32 0, i32 1, i32 2>
  %8645 = add <4 x i32> %8644, %t2844
  %8646 = sext <4 x i32> %8645 to <4 x i64>
  %8647 = extractelement <4 x i64> %8646, i64 0
  %8648 = getelementptr inbounds float, ptr %f4.host, i64 %8647
  %8649 = load float, ptr %8648, align 4, !tbaa !43
  %8650 = insertelement <4 x float> undef, float %8649, i64 0
  %8651 = extractelement <4 x i64> %8646, i64 1
  %8652 = getelementptr inbounds float, ptr %f4.host, i64 %8651
  %8653 = load float, ptr %8652, align 4, !tbaa !43
  %8654 = insertelement <4 x float> %8650, float %8653, i64 1
  %8655 = extractelement <4 x i64> %8646, i64 2
  %8656 = getelementptr inbounds float, ptr %f4.host, i64 %8655
  %8657 = load float, ptr %8656, align 4, !tbaa !43
  %8658 = insertelement <4 x float> %8654, float %8657, i64 2
  %8659 = extractelement <4 x i64> %8646, i64 3
  %8660 = getelementptr inbounds float, ptr %f4.host, i64 %8659
  %8661 = load float, ptr %8660, align 4, !tbaa !43
  %8662 = insertelement <4 x float> %8658, float %8661, i64 3
  %8663 = fmul <4 x float> %8662, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8664 = fadd <4 x float> %8641, %8663
  %8665 = fmul <4 x float> %8664, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8666 = fadd <4 x float> %8619, %8665
  %8667 = sext <4 x i32> %t2835 to <4 x i64>
  %8668 = extractelement <4 x i64> %8667, i64 0
  %8669 = getelementptr inbounds float, ptr %f0.host, i64 %8668
  %8670 = load float, ptr %8669, align 4, !tbaa !6
  %8671 = insertelement <4 x float> undef, float %8670, i64 0
  %8672 = extractelement <4 x i64> %8667, i64 1
  %8673 = getelementptr inbounds float, ptr %f0.host, i64 %8672
  %8674 = load float, ptr %8673, align 4, !tbaa !6
  %8675 = insertelement <4 x float> %8671, float %8674, i64 1
  %8676 = extractelement <4 x i64> %8667, i64 2
  %8677 = getelementptr inbounds float, ptr %f0.host, i64 %8676
  %8678 = load float, ptr %8677, align 4, !tbaa !6
  %8679 = insertelement <4 x float> %8675, float %8678, i64 2
  %8680 = extractelement <4 x i64> %8667, i64 3
  %8681 = getelementptr inbounds float, ptr %f0.host, i64 %8680
  %8682 = load float, ptr %8681, align 4, !tbaa !6
  %8683 = insertelement <4 x float> %8679, float %8682, i64 3
  %8684 = fsub <4 x float> %t2803, %t2832
  %8685 = fmul <4 x float> %3298, %8684
  %8686 = fadd <4 x float> %t2832, %8685
  %8687 = fadd <4 x float> %8686, %8683
  %8688 = fsub <4 x float> %8687, %8666
  %8689 = fsub <4 x float> %t2805, %t2830
  %8690 = fmul <4 x float> %8689, %8688
  %8691 = add nsw <4 x i32> %t2839, %8576
  %8692 = sext <4 x i32> %8691 to <4 x i64>
  %8693 = extractelement <4 x i64> %8692, i64 0
  %8694 = getelementptr inbounds float, ptr %f4.host, i64 %8693
  %8695 = load float, ptr %8694, align 4, !tbaa !43
  %8696 = insertelement <4 x float> undef, float %8695, i64 0
  %8697 = extractelement <4 x i64> %8692, i64 1
  %8698 = getelementptr inbounds float, ptr %f4.host, i64 %8697
  %8699 = load float, ptr %8698, align 4, !tbaa !43
  %8700 = insertelement <4 x float> %8696, float %8699, i64 1
  %8701 = extractelement <4 x i64> %8692, i64 2
  %8702 = getelementptr inbounds float, ptr %f4.host, i64 %8701
  %8703 = load float, ptr %8702, align 4, !tbaa !43
  %8704 = insertelement <4 x float> %8700, float %8703, i64 2
  %8705 = extractelement <4 x i64> %8692, i64 3
  %8706 = getelementptr inbounds float, ptr %f4.host, i64 %8705
  %8707 = load float, ptr %8706, align 4, !tbaa !43
  %8708 = insertelement <4 x float> %8704, float %8707, i64 3
  %8709 = fmul <4 x float> %8708, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8710 = add <4 x i32> %8598, %t2839
  %8711 = sext <4 x i32> %8710 to <4 x i64>
  %8712 = extractelement <4 x i64> %8711, i64 0
  %8713 = getelementptr inbounds float, ptr %f4.host, i64 %8712
  %8714 = load float, ptr %8713, align 4, !tbaa !43
  %8715 = insertelement <4 x float> undef, float %8714, i64 0
  %8716 = extractelement <4 x i64> %8711, i64 1
  %8717 = getelementptr inbounds float, ptr %f4.host, i64 %8716
  %8718 = load float, ptr %8717, align 4, !tbaa !43
  %8719 = insertelement <4 x float> %8715, float %8718, i64 1
  %8720 = extractelement <4 x i64> %8711, i64 2
  %8721 = getelementptr inbounds float, ptr %f4.host, i64 %8720
  %8722 = load float, ptr %8721, align 4, !tbaa !43
  %8723 = insertelement <4 x float> %8719, float %8722, i64 2
  %8724 = extractelement <4 x i64> %8711, i64 3
  %8725 = getelementptr inbounds float, ptr %f4.host, i64 %8724
  %8726 = load float, ptr %8725, align 4, !tbaa !43
  %8727 = insertelement <4 x float> %8723, float %8726, i64 3
  %8728 = fmul <4 x float> %8727, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8729 = fadd <4 x float> %8709, %8728
  %8730 = fmul <4 x float> %8729, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8731 = add nsw <4 x i32> %t2839, %8622
  %8732 = sext <4 x i32> %8731 to <4 x i64>
  %8733 = extractelement <4 x i64> %8732, i64 0
  %8734 = getelementptr inbounds float, ptr %f4.host, i64 %8733
  %8735 = load float, ptr %8734, align 4, !tbaa !43
  %8736 = insertelement <4 x float> undef, float %8735, i64 0
  %8737 = extractelement <4 x i64> %8732, i64 1
  %8738 = getelementptr inbounds float, ptr %f4.host, i64 %8737
  %8739 = load float, ptr %8738, align 4, !tbaa !43
  %8740 = insertelement <4 x float> %8736, float %8739, i64 1
  %8741 = extractelement <4 x i64> %8732, i64 2
  %8742 = getelementptr inbounds float, ptr %f4.host, i64 %8741
  %8743 = load float, ptr %8742, align 4, !tbaa !43
  %8744 = insertelement <4 x float> %8740, float %8743, i64 2
  %8745 = extractelement <4 x i64> %8732, i64 3
  %8746 = getelementptr inbounds float, ptr %f4.host, i64 %8745
  %8747 = load float, ptr %8746, align 4, !tbaa !43
  %8748 = insertelement <4 x float> %8744, float %8747, i64 3
  %8749 = fmul <4 x float> %8748, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8750 = add <4 x i32> %8644, %t2839
  %8751 = sext <4 x i32> %8750 to <4 x i64>
  %8752 = extractelement <4 x i64> %8751, i64 0
  %8753 = getelementptr inbounds float, ptr %f4.host, i64 %8752
  %8754 = load float, ptr %8753, align 4, !tbaa !43
  %8755 = insertelement <4 x float> undef, float %8754, i64 0
  %8756 = extractelement <4 x i64> %8751, i64 1
  %8757 = getelementptr inbounds float, ptr %f4.host, i64 %8756
  %8758 = load float, ptr %8757, align 4, !tbaa !43
  %8759 = insertelement <4 x float> %8755, float %8758, i64 1
  %8760 = extractelement <4 x i64> %8751, i64 2
  %8761 = getelementptr inbounds float, ptr %f4.host, i64 %8760
  %8762 = load float, ptr %8761, align 4, !tbaa !43
  %8763 = insertelement <4 x float> %8759, float %8762, i64 2
  %8764 = extractelement <4 x i64> %8751, i64 3
  %8765 = getelementptr inbounds float, ptr %f4.host, i64 %8764
  %8766 = load float, ptr %8765, align 4, !tbaa !43
  %8767 = insertelement <4 x float> %8763, float %8766, i64 3
  %8768 = fmul <4 x float> %8767, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8769 = fadd <4 x float> %8749, %8768
  %8770 = fmul <4 x float> %8769, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8771 = fadd <4 x float> %8730, %8770
  %8772 = add nsw <4 x i32> %t2835, <i32 256, i32 256, i32 256, i32 256>
  %8773 = sext <4 x i32> %8772 to <4 x i64>
  %8774 = extractelement <4 x i64> %8773, i64 0
  %8775 = getelementptr inbounds float, ptr %f0.host, i64 %8774
  %8776 = load float, ptr %8775, align 4, !tbaa !6
  %8777 = insertelement <4 x float> undef, float %8776, i64 0
  %8778 = extractelement <4 x i64> %8773, i64 1
  %8779 = getelementptr inbounds float, ptr %f0.host, i64 %8778
  %8780 = load float, ptr %8779, align 4, !tbaa !6
  %8781 = insertelement <4 x float> %8777, float %8780, i64 1
  %8782 = extractelement <4 x i64> %8773, i64 2
  %8783 = getelementptr inbounds float, ptr %f0.host, i64 %8782
  %8784 = load float, ptr %8783, align 4, !tbaa !6
  %8785 = insertelement <4 x float> %8781, float %8784, i64 2
  %8786 = extractelement <4 x i64> %8773, i64 3
  %8787 = getelementptr inbounds float, ptr %f0.host, i64 %8786
  %8788 = load float, ptr %8787, align 4, !tbaa !6
  %8789 = insertelement <4 x float> %8785, float %8788, i64 3
  %8790 = fsub <4 x float> %t2803, %t2831
  %8791 = fmul <4 x float> %3298, %8790
  %8792 = fadd <4 x float> %t2831, %8791
  %8793 = fadd <4 x float> %8792, %8789
  %8794 = fsub <4 x float> %8793, %8771
  %8795 = fsub <4 x float> %t2830, %t2805
  %8796 = fadd <4 x float> %8795, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8797 = fmul <4 x float> %8796, %8794
  %8798 = fadd <4 x float> %8690, %8797
  %8799 = add nsw i64 %3321, %8550
  %8800 = getelementptr inbounds float, ptr %222, i64 %8799
  %8801 = load <4 x float>, ptr %8800, align 4, !tbaa !69
  %8802 = fmul <4 x float> %8801, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8803 = add nsw i64 %3324, %8550
  %8804 = getelementptr inbounds float, ptr %222, i64 %8803
  %8805 = load <4 x float>, ptr %8804, align 4, !tbaa !69
  %8806 = fmul <4 x float> %8805, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8807 = fadd <4 x float> %8802, %8806
  %8808 = fmul <4 x float> %8807, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8809 = add nsw i64 %3321, %8561
  %8810 = getelementptr inbounds float, ptr %222, i64 %8809
  %8811 = load <4 x float>, ptr %8810, align 4, !tbaa !69
  %8812 = fmul <4 x float> %8811, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8813 = add nsw i64 %3324, %8561
  %8814 = getelementptr inbounds float, ptr %222, i64 %8813
  %8815 = load <4 x float>, ptr %8814, align 4, !tbaa !69
  %8816 = fmul <4 x float> %8815, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8817 = fadd <4 x float> %8812, %8816
  %8818 = fmul <4 x float> %8817, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8819 = fadd <4 x float> %8808, %8818
  %8820 = fadd <4 x float> %8798, %8819
  %8821 = shufflevector <4 x float> %8573, <4 x float> %8820, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %8822 = getelementptr inbounds float, ptr %7741, i64 %3327
  store <8 x float> %8821, ptr %8822, align 4, !tbaa !71
  br label %"consume f12583"

"consume f12583":                                 ; preds = %"for f125.s0.v3.v380.preheader", %"end for f125.s0.v3.v378"
  br i1 %3338, label %"for local_laplacian.s0.v3.v384.preheader", label %"end for local_laplacian.s0.v3.v385", !prof !5

"for local_laplacian.s0.v3.v384.preheader":       ; preds = %"consume f12583"
  %8823 = add nsw i64 %3105, %indvars.iv325
  %8824 = mul nsw i64 %8823, %3104
  %8825 = sub i64 %8824, %8
  %8826 = trunc i64 %3406 to i32
  %8827 = mul i32 %input.stride.1, %8826
  br label %"for local_laplacian.s0.v3.v384"

"for local_laplacian.s0.v3.v384":                 ; preds = %"for local_laplacian.s0.v3.v384.preheader", %"end for local_laplacian.s0.v589"
  %local_laplacian.s0.v3.v386 = phi i32 [ %8903, %"end for local_laplacian.s0.v589" ], [ 0, %"for local_laplacian.s0.v3.v384.preheader" ]
  br i1 %3339, label %"for local_laplacian.s0.v588.preheader", label %"end for local_laplacian.s0.v589", !prof !5

"for local_laplacian.s0.v588.preheader":          ; preds = %"for local_laplacian.s0.v3.v384"
  %8828 = shl nsw i32 %local_laplacian.s0.v3.v386, 3
  %a1013 = add nsw i32 %8828, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base87 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1013)
  %8829 = sext i32 %local_laplacian.s0.v3.v277.base87 to i64
  %8830 = add i64 %lsr.iv349, %8829
  %scevgep351 = getelementptr i16, ptr %local_laplacian.host, i64 %8830
  %8831 = add i64 %8825, %8829
  %8832 = getelementptr inbounds float, ptr %f2.host, i64 %8831
  %8833 = load <8 x float>, ptr %8832, align 4, !tbaa !41
  %8834 = fadd <8 x float> %8833, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8835 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base87, i64 0
  %8836 = shufflevector <8 x i32> %8835, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1019 = add nsw <8 x i32> %8836, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1018 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1021.pre-phi, <8 x i32> %a1019)
  %8837 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1018, <8 x i32> %b1020.pre-phi)
  %8838 = sub nsw i64 %8829, %.pre-phi338
  %8839 = getelementptr inbounds float, ptr %7741, i64 %8838
  %8840 = load <8 x float>, ptr %8839, align 4, !tbaa !71
  br label %"for local_laplacian.s0.v588"

"end for local_laplacian.s0.v3.v385":             ; preds = %"end for local_laplacian.s0.v589", %"consume f12583"
  br i1 %.not176, label %"end for local_laplacian.s0.v3.v391", label %"for local_laplacian.s0.v3.v390.preheader", !prof !4

"for local_laplacian.s0.v3.v390.preheader":       ; preds = %"end for local_laplacian.s0.v3.v385"
  %8841 = sub nsw i64 %3406, %10
  %8842 = mul nsw i64 %8841, %3104
  %8843 = sub i64 %8842, %8
  %8844 = mul nsw i64 %3406, %53
  %8845 = sub i64 %8844, %3161
  %8846 = add i64 %lsr.iv367, %3346
  %8847 = add i64 %lsr.iv374, %3347
  %8848 = add nsw i64 %3105, %indvars.iv325
  %8849 = mul nsw i64 %8848, %3104
  %8850 = sub i64 %8849, %8
  %8851 = add i64 %lsr.iv367, %3349
  br label %"for local_laplacian.s0.v3.v390"

"for local_laplacian.s0.v588":                    ; preds = %"for local_laplacian.s0.v588", %"for local_laplacian.s0.v588.preheader"
  %lsr.iv352 = phi ptr [ %scevgep351, %"for local_laplacian.s0.v588.preheader" ], [ %scevgep354, %"for local_laplacian.s0.v588" ]
  %lsr.iv347 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v588.preheader" ], [ %lsr.iv.next348, %"for local_laplacian.s0.v588" ]
  %a1017 = phi i32 [ %b1028, %"for local_laplacian.s0.v588.preheader" ], [ %8902, %"for local_laplacian.s0.v588" ]
  %a1016 = tail call i32 @llvm.smin.i32(i32 %b1019.pre-phi, i32 %a1017)
  %8852 = tail call i32 @llvm.smax.i32(i32 %a1016, i32 %b1146)
  %8853 = mul nsw i32 %8852, %input.stride.2
  %.scalar329 = add i32 %8853, %8827
  %.scalar330 = sub i32 %.scalar329, %.pre-phi353
  %8854 = insertelement <8 x i32> undef, i32 %.scalar330, i64 0
  %8855 = shufflevector <8 x i32> %8854, <8 x i32> poison, <8 x i32> zeroinitializer
  %8856 = add <8 x i32> %8855, %8837
  %8857 = shufflevector <8 x i32> %8856, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8858 = sext <4 x i32> %8857 to <4 x i64>
  %8859 = extractelement <4 x i64> %8858, i64 0
  %8860 = getelementptr inbounds i16, ptr %input.host, i64 %8859
  %8861 = load i16, ptr %8860, align 2, !tbaa !39
  %8862 = insertelement <8 x i16> undef, i16 %8861, i64 0
  %8863 = extractelement <4 x i64> %8858, i64 1
  %8864 = getelementptr inbounds i16, ptr %input.host, i64 %8863
  %8865 = load i16, ptr %8864, align 2, !tbaa !39
  %8866 = insertelement <8 x i16> %8862, i16 %8865, i64 1
  %8867 = extractelement <4 x i64> %8858, i64 2
  %8868 = getelementptr inbounds i16, ptr %input.host, i64 %8867
  %8869 = load i16, ptr %8868, align 2, !tbaa !39
  %8870 = insertelement <8 x i16> %8866, i16 %8869, i64 2
  %8871 = extractelement <4 x i64> %8858, i64 3
  %8872 = getelementptr inbounds i16, ptr %input.host, i64 %8871
  %8873 = load i16, ptr %8872, align 2, !tbaa !39
  %8874 = insertelement <8 x i16> %8870, i16 %8873, i64 3
  %8875 = shufflevector <8 x i32> %8856, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8876 = sext <4 x i32> %8875 to <4 x i64>
  %8877 = extractelement <4 x i64> %8876, i64 0
  %8878 = getelementptr inbounds i16, ptr %input.host, i64 %8877
  %8879 = load i16, ptr %8878, align 2, !tbaa !39
  %8880 = insertelement <8 x i16> %8874, i16 %8879, i64 4
  %8881 = extractelement <4 x i64> %8876, i64 1
  %8882 = getelementptr inbounds i16, ptr %input.host, i64 %8881
  %8883 = load i16, ptr %8882, align 2, !tbaa !39
  %8884 = insertelement <8 x i16> %8880, i16 %8883, i64 5
  %8885 = extractelement <4 x i64> %8876, i64 2
  %8886 = getelementptr inbounds i16, ptr %input.host, i64 %8885
  %8887 = load i16, ptr %8886, align 2, !tbaa !39
  %8888 = insertelement <8 x i16> %8884, i16 %8887, i64 6
  %8889 = extractelement <4 x i64> %8876, i64 3
  %8890 = getelementptr inbounds i16, ptr %input.host, i64 %8889
  %8891 = load i16, ptr %8890, align 2, !tbaa !39
  %8892 = insertelement <8 x i16> %8888, i16 %8891, i64 7
  %8893 = uitofp <8 x i16> %8892 to <8 x float>
  %8894 = fmul <8 x float> %8893, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8895 = fadd <8 x float> %8894, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8896 = fmul <8 x float> %8840, %8895
  %a1015 = fdiv <8 x float> %8896, %8834
  %8897 = fcmp olt <8 x float> %a1015, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1014 = select <8 x i1> %8897, <8 x float> %a1015, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8898 = fcmp ogt <8 x float> %a1014, zeroinitializer
  %8899 = select <8 x i1> %8898, <8 x float> %a1014, <8 x float> zeroinitializer
  %8900 = fmul <8 x float> %8899, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8901 = fptoui <8 x float> %8900 to <8 x i16>
  store <8 x i16> %8901, ptr %lsr.iv352, align 2, !tbaa !73
  %8902 = add nsw i32 %a1017, 1
  %lsr.iv.next348 = add i32 %lsr.iv347, -1
  %scevgep354 = getelementptr i1, ptr %lsr.iv352, i64 %3103
  %.not114 = icmp eq i32 %lsr.iv.next348, 0
  br i1 %.not114, label %"end for local_laplacian.s0.v589", label %"for local_laplacian.s0.v588"

"end for local_laplacian.s0.v589":                ; preds = %"for local_laplacian.s0.v588", %"for local_laplacian.s0.v3.v384"
  %8903 = add nuw nsw i32 %local_laplacian.s0.v3.v386, 1
  %.not113 = icmp eq i32 %8903, %local_laplacian.s0.v3.v3.prologue
  br i1 %.not113, label %"end for local_laplacian.s0.v3.v385", label %"for local_laplacian.s0.v3.v384"

"for local_laplacian.s0.v3.v390":                 ; preds = %"for local_laplacian.s0.v3.v390.preheader", %"end for local_laplacian.s0.v5100"
  %local_laplacian.s0.v3.v392 = phi i32 [ %8978, %"end for local_laplacian.s0.v5100" ], [ %local_laplacian.s0.v3.v3.prologue, %"for local_laplacian.s0.v3.v390.preheader" ]
  %8904 = shl nsw i32 %local_laplacian.s0.v3.v392, 3
  %a1020 = add nsw i32 %8904, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base93 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1020)
  br i1 %3340, label %"for local_laplacian.s0.v594.preheader", label %"end for local_laplacian.s0.v595", !prof !5

"for local_laplacian.s0.v594.preheader":          ; preds = %"for local_laplacian.s0.v3.v390"
  %8905 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %8906 = add i64 %lsr.iv349, %8905
  %scevgep360 = getelementptr i16, ptr %local_laplacian.host, i64 %8906
  %8907 = add i64 %8843, %8905
  %8908 = getelementptr inbounds float, ptr %f2.host, i64 %8907
  %8909 = load <8 x float>, ptr %8908, align 4, !tbaa !41
  %8910 = fadd <8 x float> %8909, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8911 = add i64 %8845, %8905
  %8912 = sub nsw i64 %8905, %.pre-phi338
  %8913 = getelementptr inbounds float, ptr %7741, i64 %8912
  %8914 = load <8 x float>, ptr %8913, align 4, !tbaa !71
  br label %"for local_laplacian.s0.v594"

"end for local_laplacian.s0.v3.v391":             ; preds = %"end for local_laplacian.s0.v5100", %"end for local_laplacian.s0.v3.v385"
  br i1 %3350, label %"for local_laplacian.s0.v3.v3102.preheader", label %if.then.i268, !prof !5

"for local_laplacian.s0.v3.v3102.preheader":      ; preds = %"end for local_laplacian.s0.v3.v391"
  %8915 = add nsw i64 %3105, %indvars.iv325
  %8916 = mul nsw i64 %8915, %3104
  %8917 = sub i64 %8916, %8
  %8918 = trunc i64 %3406 to i32
  %8919 = mul i32 %input.stride.1, %8918
  br label %"for local_laplacian.s0.v3.v3102"

"for local_laplacian.s0.v594":                    ; preds = %"for local_laplacian.s0.v594", %"for local_laplacian.s0.v594.preheader"
  %lsr.iv361 = phi ptr [ %scevgep360, %"for local_laplacian.s0.v594.preheader" ], [ %scevgep363, %"for local_laplacian.s0.v594" ]
  %lsr.iv356 = phi i64 [ %69, %"for local_laplacian.s0.v594.preheader" ], [ %lsr.iv.next357, %"for local_laplacian.s0.v594" ]
  %a1029 = tail call i64 @llvm.smin.i64(i64 %b1032, i64 %lsr.iv356)
  %8920 = tail call i64 @llvm.smax.i64(i64 %a1029, i64 %b1037)
  %8921 = mul nsw i64 %8920, %55
  %8922 = add i64 %8911, %8921
  %8923 = getelementptr inbounds i16, ptr %input.host, i64 %8922
  %8924 = load <8 x i16>, ptr %8923, align 2, !tbaa !39
  %8925 = uitofp <8 x i16> %8924 to <8 x float>
  %8926 = fmul <8 x float> %8925, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8927 = fadd <8 x float> %8926, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8928 = fmul <8 x float> %8914, %8927
  %a1028 = fdiv <8 x float> %8928, %8910
  %8929 = fcmp olt <8 x float> %a1028, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1027 = select <8 x i1> %8929, <8 x float> %a1028, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8930 = fcmp ogt <8 x float> %a1027, zeroinitializer
  %8931 = select <8 x i1> %8930, <8 x float> %a1027, <8 x float> zeroinitializer
  %8932 = fmul <8 x float> %8931, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8933 = fptoui <8 x float> %8932 to <8 x i16>
  store <8 x i16> %8933, ptr %lsr.iv361, align 2, !tbaa !73
  %lsr.iv.next357 = add nsw i64 %lsr.iv356, 1
  %tmp358 = trunc i64 %lsr.iv.next357 to i32
  %scevgep363 = getelementptr i1, ptr %lsr.iv361, i64 %3103
  %.not112 = icmp eq i32 %local_laplacian.s0.v5.prologue, %tmp358
  br i1 %.not112, label %"end for local_laplacian.s0.v595", label %"for local_laplacian.s0.v594"

"end for local_laplacian.s0.v595":                ; preds = %"for local_laplacian.s0.v594", %"for local_laplacian.s0.v3.v390"
  br i1 %3341, label %"for local_laplacian.s0.v596.preheader", label %"end for local_laplacian.s0.v597", !prof !5

"for local_laplacian.s0.v596.preheader":          ; preds = %"end for local_laplacian.s0.v595"
  %8934 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %8935 = add i64 %8846, %8934
  %scevgep369 = getelementptr i16, ptr %local_laplacian.host, i64 %8935
  %8936 = add i64 %8847, %8934
  %scevgep376 = getelementptr i16, ptr %input.host, i64 %8936
  %8937 = add i64 %8850, %8934
  %8938 = getelementptr inbounds float, ptr %f2.host, i64 %8937
  %8939 = load <8 x float>, ptr %8938, align 4, !tbaa !41
  %8940 = fadd <8 x float> %8939, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8941 = sub nsw i64 %8934, %.pre-phi338
  %8942 = getelementptr inbounds float, ptr %7741, i64 %8941
  %8943 = load <8 x float>, ptr %8942, align 4, !tbaa !71
  br label %"for local_laplacian.s0.v596"

"for local_laplacian.s0.v596":                    ; preds = %"for local_laplacian.s0.v596", %"for local_laplacian.s0.v596.preheader"
  %lsr.iv377 = phi ptr [ %scevgep376, %"for local_laplacian.s0.v596.preheader" ], [ %scevgep379, %"for local_laplacian.s0.v596" ]
  %lsr.iv370 = phi ptr [ %scevgep369, %"for local_laplacian.s0.v596.preheader" ], [ %scevgep372, %"for local_laplacian.s0.v596" ]
  %lsr.iv365 = phi i32 [ %3344, %"for local_laplacian.s0.v596.preheader" ], [ %lsr.iv.next366, %"for local_laplacian.s0.v596" ]
  %8944 = load <8 x i16>, ptr %lsr.iv377, align 2, !tbaa !39
  %8945 = uitofp <8 x i16> %8944 to <8 x float>
  %8946 = fmul <8 x float> %8945, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8947 = fadd <8 x float> %8946, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8948 = fmul <8 x float> %8943, %8947
  %a1032 = fdiv <8 x float> %8948, %8940
  %8949 = fcmp olt <8 x float> %a1032, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1031 = select <8 x i1> %8949, <8 x float> %a1032, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8950 = fcmp ogt <8 x float> %a1031, zeroinitializer
  %8951 = select <8 x i1> %8950, <8 x float> %a1031, <8 x float> zeroinitializer
  %8952 = fmul <8 x float> %8951, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8953 = fptoui <8 x float> %8952 to <8 x i16>
  store <8 x i16> %8953, ptr %lsr.iv370, align 2, !tbaa !73
  %lsr.iv.next366 = add i32 %lsr.iv365, -1
  %scevgep372 = getelementptr i1, ptr %lsr.iv370, i64 %3103
  %scevgep379 = getelementptr i1, ptr %lsr.iv377, i64 %3163
  %.not111 = icmp eq i32 %lsr.iv.next366, 0
  br i1 %.not111, label %"end for local_laplacian.s0.v597", label %"for local_laplacian.s0.v596"

"end for local_laplacian.s0.v597":                ; preds = %"for local_laplacian.s0.v596", %"end for local_laplacian.s0.v595"
  br i1 %3342, label %"for local_laplacian.s0.v599.preheader", label %"end for local_laplacian.s0.v5100", !prof !5

"for local_laplacian.s0.v599.preheader":          ; preds = %"end for local_laplacian.s0.v597"
  %8954 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %8955 = add i64 %8851, %8954
  %scevgep385 = getelementptr i16, ptr %local_laplacian.host, i64 %8955
  %8956 = add i64 %8843, %8954
  %8957 = getelementptr inbounds float, ptr %f2.host, i64 %8956
  %8958 = load <8 x float>, ptr %8957, align 4, !tbaa !41
  %8959 = fadd <8 x float> %8958, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8960 = add i64 %8845, %8954
  %8961 = sub nsw i64 %8954, %.pre-phi338
  %8962 = getelementptr inbounds float, ptr %7741, i64 %8961
  %8963 = load <8 x float>, ptr %8962, align 4, !tbaa !71
  br label %"for local_laplacian.s0.v599"

"for local_laplacian.s0.v599":                    ; preds = %"for local_laplacian.s0.v599", %"for local_laplacian.s0.v599.preheader"
  %lsr.iv386 = phi ptr [ %scevgep385, %"for local_laplacian.s0.v599.preheader" ], [ %scevgep388, %"for local_laplacian.s0.v599" ]
  %lsr.iv381 = phi i64 [ %3348, %"for local_laplacian.s0.v599.preheader" ], [ %lsr.iv.next382, %"for local_laplacian.s0.v599" ]
  %a1035 = tail call i64 @llvm.smin.i64(i64 %b1032, i64 %lsr.iv381)
  %8964 = tail call i64 @llvm.smax.i64(i64 %a1035, i64 %b1037)
  %8965 = mul nsw i64 %8964, %55
  %8966 = add i64 %8960, %8965
  %8967 = getelementptr inbounds i16, ptr %input.host, i64 %8966
  %8968 = load <8 x i16>, ptr %8967, align 2, !tbaa !39
  %8969 = uitofp <8 x i16> %8968 to <8 x float>
  %8970 = fmul <8 x float> %8969, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8971 = fadd <8 x float> %8970, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8972 = fmul <8 x float> %8963, %8971
  %a1034 = fdiv <8 x float> %8972, %8959
  %8973 = fcmp olt <8 x float> %a1034, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1033 = select <8 x i1> %8973, <8 x float> %a1034, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8974 = fcmp ogt <8 x float> %a1033, zeroinitializer
  %8975 = select <8 x i1> %8974, <8 x float> %a1033, <8 x float> zeroinitializer
  %8976 = fmul <8 x float> %8975, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8977 = fptoui <8 x float> %8976 to <8 x i16>
  store <8 x i16> %8977, ptr %lsr.iv386, align 2, !tbaa !73
  %lsr.iv.next382 = add nsw i64 %lsr.iv381, 1
  %tmp383 = trunc i64 %lsr.iv.next382 to i32
  %scevgep388 = getelementptr i1, ptr %lsr.iv386, i64 %3103
  %.not110 = icmp eq i32 %3164, %tmp383
  br i1 %.not110, label %"end for local_laplacian.s0.v5100", label %"for local_laplacian.s0.v599"

"end for local_laplacian.s0.v5100":               ; preds = %"for local_laplacian.s0.v599", %"end for local_laplacian.s0.v597"
  %8978 = add nsw i32 %local_laplacian.s0.v3.v392, 1
  %.not109 = icmp eq i32 %8978, %local_laplacian.s0.v3.v3.epilogue
  br i1 %.not109, label %"end for local_laplacian.s0.v3.v391", label %"for local_laplacian.s0.v3.v390"

"for local_laplacian.s0.v3.v3102":                ; preds = %"for local_laplacian.s0.v3.v3102.preheader", %"end for local_laplacian.s0.v5107"
  %local_laplacian.s0.v3.v3104 = phi i32 [ %9043, %"end for local_laplacian.s0.v5107" ], [ %local_laplacian.s0.v3.v3.epilogue, %"for local_laplacian.s0.v3.v3102.preheader" ]
  br i1 %3339, label %"for local_laplacian.s0.v5106.preheader", label %"end for local_laplacian.s0.v5107", !prof !5

"for local_laplacian.s0.v5106.preheader":         ; preds = %"for local_laplacian.s0.v3.v3102"
  %8979 = shl nsw i32 %local_laplacian.s0.v3.v3104, 3
  %a1037 = add nsw i32 %8979, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base105 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1037)
  %8980 = sext i32 %local_laplacian.s0.v3.v277.base105 to i64
  %8981 = add i64 %lsr.iv349, %8980
  %scevgep392 = getelementptr i16, ptr %local_laplacian.host, i64 %8981
  %8982 = add i64 %8917, %8980
  %8983 = getelementptr inbounds float, ptr %f2.host, i64 %8982
  %8984 = load <8 x float>, ptr %8983, align 4, !tbaa !41
  %8985 = fadd <8 x float> %8984, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8986 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base105, i64 0
  %8987 = shufflevector <8 x i32> %8986, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1043 = add nsw <8 x i32> %8987, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1042 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1021.pre-phi, <8 x i32> %a1043)
  %8988 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1042, <8 x i32> %b1020.pre-phi)
  %8989 = sub nsw i64 %8980, %.pre-phi338
  %8990 = getelementptr inbounds float, ptr %7741, i64 %8989
  %8991 = load <8 x float>, ptr %8990, align 4, !tbaa !71
  br label %"for local_laplacian.s0.v5106"

if.then.i268:                                     ; preds = %"end for local_laplacian.s0.v5107", %"end for local_laplacian.s0.v3.v391"
  tail call void @halide_free(ptr %__user_context, ptr nonnull %7741) #7
  %indvars.iv.next326 = add nuw nsw i64 %indvars.iv325, 1
  %lsr.iv.next320 = xor i1 %lsr.iv319, true
  %lsr.iv.next330 = add i32 %lsr.iv329, %3143
  %lsr.iv.next350 = add i64 %lsr.iv349, %73
  %lsr.iv.next368 = add i64 %lsr.iv367, %73
  %lsr.iv.next375 = add i64 %lsr.iv374, %53
  %.not106 = icmp eq i64 %indvars.iv.next326, 64
  br i1 %.not106, label %if.then.i256, label %"produce f12919"

"for local_laplacian.s0.v5106":                   ; preds = %"for local_laplacian.s0.v5106", %"for local_laplacian.s0.v5106.preheader"
  %lsr.iv393 = phi ptr [ %scevgep392, %"for local_laplacian.s0.v5106.preheader" ], [ %scevgep395, %"for local_laplacian.s0.v5106" ]
  %lsr.iv390 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5106.preheader" ], [ %lsr.iv.next391, %"for local_laplacian.s0.v5106" ]
  %a1041 = phi i32 [ %b1028, %"for local_laplacian.s0.v5106.preheader" ], [ %9042, %"for local_laplacian.s0.v5106" ]
  %a1040 = tail call i32 @llvm.smin.i32(i32 %b1019.pre-phi, i32 %a1041)
  %8992 = tail call i32 @llvm.smax.i32(i32 %a1040, i32 %b1146)
  %8993 = mul nsw i32 %8992, %input.stride.2
  %.scalar331 = add i32 %8993, %8919
  %.scalar332 = sub i32 %.scalar331, %.pre-phi353
  %8994 = insertelement <8 x i32> undef, i32 %.scalar332, i64 0
  %8995 = shufflevector <8 x i32> %8994, <8 x i32> poison, <8 x i32> zeroinitializer
  %8996 = add <8 x i32> %8995, %8988
  %8997 = shufflevector <8 x i32> %8996, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8998 = sext <4 x i32> %8997 to <4 x i64>
  %8999 = extractelement <4 x i64> %8998, i64 0
  %9000 = getelementptr inbounds i16, ptr %input.host, i64 %8999
  %9001 = load i16, ptr %9000, align 2, !tbaa !39
  %9002 = insertelement <8 x i16> undef, i16 %9001, i64 0
  %9003 = extractelement <4 x i64> %8998, i64 1
  %9004 = getelementptr inbounds i16, ptr %input.host, i64 %9003
  %9005 = load i16, ptr %9004, align 2, !tbaa !39
  %9006 = insertelement <8 x i16> %9002, i16 %9005, i64 1
  %9007 = extractelement <4 x i64> %8998, i64 2
  %9008 = getelementptr inbounds i16, ptr %input.host, i64 %9007
  %9009 = load i16, ptr %9008, align 2, !tbaa !39
  %9010 = insertelement <8 x i16> %9006, i16 %9009, i64 2
  %9011 = extractelement <4 x i64> %8998, i64 3
  %9012 = getelementptr inbounds i16, ptr %input.host, i64 %9011
  %9013 = load i16, ptr %9012, align 2, !tbaa !39
  %9014 = insertelement <8 x i16> %9010, i16 %9013, i64 3
  %9015 = shufflevector <8 x i32> %8996, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9016 = sext <4 x i32> %9015 to <4 x i64>
  %9017 = extractelement <4 x i64> %9016, i64 0
  %9018 = getelementptr inbounds i16, ptr %input.host, i64 %9017
  %9019 = load i16, ptr %9018, align 2, !tbaa !39
  %9020 = insertelement <8 x i16> %9014, i16 %9019, i64 4
  %9021 = extractelement <4 x i64> %9016, i64 1
  %9022 = getelementptr inbounds i16, ptr %input.host, i64 %9021
  %9023 = load i16, ptr %9022, align 2, !tbaa !39
  %9024 = insertelement <8 x i16> %9020, i16 %9023, i64 5
  %9025 = extractelement <4 x i64> %9016, i64 2
  %9026 = getelementptr inbounds i16, ptr %input.host, i64 %9025
  %9027 = load i16, ptr %9026, align 2, !tbaa !39
  %9028 = insertelement <8 x i16> %9024, i16 %9027, i64 6
  %9029 = extractelement <4 x i64> %9016, i64 3
  %9030 = getelementptr inbounds i16, ptr %input.host, i64 %9029
  %9031 = load i16, ptr %9030, align 2, !tbaa !39
  %9032 = insertelement <8 x i16> %9028, i16 %9031, i64 7
  %9033 = uitofp <8 x i16> %9032 to <8 x float>
  %9034 = fmul <8 x float> %9033, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %9035 = fadd <8 x float> %9034, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9036 = fmul <8 x float> %8991, %9035
  %a1039 = fdiv <8 x float> %9036, %8985
  %9037 = fcmp olt <8 x float> %a1039, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1038 = select <8 x i1> %9037, <8 x float> %a1039, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9038 = fcmp ogt <8 x float> %a1038, zeroinitializer
  %9039 = select <8 x i1> %9038, <8 x float> %a1038, <8 x float> zeroinitializer
  %9040 = fmul <8 x float> %9039, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %9041 = fptoui <8 x float> %9040 to <8 x i16>
  store <8 x i16> %9041, ptr %lsr.iv393, align 2, !tbaa !73
  %9042 = add nsw i32 %a1041, 1
  %lsr.iv.next391 = add i32 %lsr.iv390, -1
  %scevgep395 = getelementptr i1, ptr %lsr.iv393, i64 %3103
  %.not108 = icmp eq i32 %lsr.iv.next391, 0
  br i1 %.not108, label %"end for local_laplacian.s0.v5107", label %"for local_laplacian.s0.v5106"

"end for local_laplacian.s0.v5107":               ; preds = %"for local_laplacian.s0.v5106", %"for local_laplacian.s0.v3.v3102"
  %9043 = add nsw i32 %local_laplacian.s0.v3.v3104, 1
  %.not107 = icmp eq i32 %9043, %3100
  br i1 %.not107, label %if.then.i268, label %"for local_laplacian.s0.v3.v3102"

"assert failed112":                               ; preds = %false_bb
  %9044 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.28, i64 %120, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded113":                            ; preds = %false_bb
  %9045 = add nuw nsw i64 %120, 4
  %9046 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9045)
  %.not76 = icmp eq ptr %9046, null
  br i1 %.not76, label %"assert failed114", label %"assert succeeded115", !prof !4

"assert failed114":                               ; preds = %"assert succeeded113"
  %9047 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded115":                            ; preds = %"assert succeeded113"
  %a1055 = add nsw i32 %a1120, -6
  %b1057 = add nsw i32 %95, -23
  %9048 = tail call i32 @llvm.smin.i32(i32 %b1057, i32 %a1055)
  %9049 = ashr i32 %9048, 3
  %a1054 = add nsw i32 %9049, -1
  %b1056 = ashr i32 %96, 3
  %.not160 = icmp slt i32 %b1056, %9049
  %f128.v3.min_realized117 = select i1 %.not160, i32 %b1056, i32 %a1054
  %9050 = ashr i32 %a1055, 2
  %9051 = add nsw i32 %95, 5
  %9052 = ashr i32 %9051, 2
  %9053 = sub nsw i32 %9052, %9050
  %9054 = lshr i32 %9053, 3
  %9055 = and i32 %9053, -8
  %a1061 = add nsw i32 %9055, %9050
  %b1063 = ashr i32 %b1057, 2
  %9056 = tail call i32 @llvm.smin.i32(i32 %b1063, i32 %a1061)
  %9057 = add nsw i32 %9056, 9
  %a1060 = ashr i32 %9057, 1
  %b1062 = add nsw i32 %104, 7
  %9058 = tail call i32 @llvm.smax.i32(i32 %a1060, i32 %b1062)
  %f128.v3.extent_realized.s118 = sub nsw i32 %9058, %f128.v3.min_realized117
  %t3094 = and i32 %113, 7
  %9059 = add nuw nsw i32 %t3094, 99
  %9060 = lshr i32 %9059, 3
  %9061 = zext i32 %9060 to i64
  %9062 = add nsw i32 %f128.v3.extent_realized.s118, 1
  %9063 = zext i32 %9062 to i64
  %9064 = shl nuw nsw i64 %9063, 2
  %9065 = mul nuw nsw i64 %9064, %9061
  %9066 = icmp ult i64 %9065, 2147483648
  br i1 %9066, label %"assert succeeded120", label %"assert failed119", !prof !5

"assert failed119":                               ; preds = %"assert succeeded115"
  %9067 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.29, i64 %9065, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded120":                            ; preds = %"assert succeeded115"
  %9068 = add nuw nsw i64 %9065, 4
  %9069 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9068)
  %.not77 = icmp eq ptr %9069, null
  br i1 %.not77, label %"assert failed121", label %"assert succeeded122", !prof !4

"assert failed121":                               ; preds = %"assert succeeded120"
  %9070 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded122":                            ; preds = %"assert succeeded120"
  %9071 = ashr i32 %local_laplacian.s0.v4.v4.base, 1
  %a1064 = add nsw i32 %9071, -1
  %9072 = add nsw i32 %local_laplacian.s0.v4.v4.base, 3
  %b1066 = ashr i32 %9072, 1
  %.not161 = icmp slt i32 %b1066, %9071
  %9073 = select i1 %.not161, i32 %b1066, i32 %a1064
  %9074 = ashr i32 %9073, 1
  %a1063 = add nsw i32 %9074, -1
  %9075 = add nsw i32 %local_laplacian.s0.v4.v4.base, -6
  %b1065 = ashr i32 %9075, 2
  %.not162 = icmp slt i32 %b1065, %9074
  %f127.v4.min_realized124 = select i1 %.not162, i32 %b1065, i32 %a1063
  %9076 = ashr i32 %a1120, 1
  %a1066 = add nsw i32 %9076, -1
  %9077 = add nsw i32 %95, -13
  %b1068 = ashr i32 %9077, 1
  %.not163 = icmp slt i32 %b1068, %9076
  %9078 = select i1 %.not163, i32 %b1068, i32 %a1066
  %9079 = ashr i32 %9078, 1
  %a1065 = add nsw i32 %9079, -1
  %b1067 = ashr i32 %9048, 2
  %.not164 = icmp slt i32 %b1067, %9079
  %f127.v3.min_realized125 = select i1 %.not164, i32 %b1067, i32 %a1065
  %9080 = add nsw i32 %95, 1
  %9081 = ashr i32 %9080, 1
  %9082 = sub nsw i32 %9081, %9076
  %9083 = add nsw i32 %9082, 1
  %9084 = and i32 %9083, -8
  %9085 = add nsw i32 %9084, %9076
  %a1072 = add nsw i32 %9085, -1
  %.not165 = icmp slt i32 %b1068, %9085
  %9086 = select i1 %.not165, i32 %b1068, i32 %a1072
  %9087 = add nsw i32 %9086, 9
  %a1071 = ashr i32 %9087, 1
  %b1073 = add nsw i32 %9056, 7
  %9088 = tail call i32 @llvm.smax.i32(i32 %a1071, i32 %b1073)
  %f127.v3.extent_realized.s126 = sub nsw i32 %9088, %f127.v3.min_realized125
  %9089 = add nsw i32 %local_laplacian.s0.v4.v4.base, 69
  %9090 = ashr i32 %9089, 2
  %t3095 = add nsw i32 %9090, 1
  %9091 = sub nsw i32 %t3095, %f127.v4.min_realized124
  %9092 = zext i32 %9091 to i64
  %9093 = add nsw i32 %f127.v3.extent_realized.s126, 1
  %9094 = zext i32 %9093 to i64
  %9095 = shl nuw nsw i64 %9094, 2
  %9096 = mul i64 %9095, %9092
  %9097 = icmp ult i64 %9096, 2147483648
  %9098 = and i64 %9095, 4294967292
  %9099 = mul nuw i64 %9098, %9092
  %9100 = lshr i64 %9099, 32
  %9101 = lshr i64 %9094, 30
  %9102 = mul nuw nsw i64 %9101, %9092
  %9103 = add nuw nsw i64 %9100, %9102
  %9104 = icmp ult i64 %9103, 4294967296
  %9105 = and i1 %9097, %9104
  br i1 %9105, label %"assert succeeded128", label %"assert failed127", !prof !5

"assert failed127":                               ; preds = %"assert succeeded122"
  %9106 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.30, i64 %9096, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded128":                            ; preds = %"assert succeeded122"
  %9107 = add nuw nsw i64 %9096, 4
  %9108 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9107)
  %.not196 = icmp eq ptr %9108, null
  br i1 %.not196, label %"assert failed129", label %"assert succeeded130", !prof !4

"assert failed129":                               ; preds = %"assert succeeded128"
  %9109 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded130":                            ; preds = %"assert succeeded128"
  %b1078 = add nsw i32 %95, -8
  %9110 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1120)
  %9111 = ashr i32 %9110, 1
  %a1075 = add nsw i32 %9111, -1
  %.not166 = icmp slt i32 %9078, %9111
  %f126.v3.min_realized133 = select i1 %.not166, i32 %9078, i32 %a1075
  %9112 = sub nsw i32 %95, %a1120
  %9113 = add nsw i32 %9112, -1
  %9114 = and i32 %9113, -8
  %a1082 = add nsw i32 %9114, %a1120
  %9115 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1082)
  %9116 = add nsw i32 %9115, 9
  %a1081 = ashr i32 %9116, 1
  %b1083 = add nsw i32 %9086, 7
  %9117 = tail call i32 @llvm.smax.i32(i32 %a1081, i32 %b1083)
  %f126.v3.extent_realized.s134 = sub nsw i32 %9117, %f126.v3.min_realized133
  %9118 = add nsw i32 %local_laplacian.s0.v4.v4.base, 65
  %9119 = ashr i32 %9118, 1
  %t3096 = add nsw i32 %9119, 1
  %9120 = sub i32 %t3096, %9073
  %9121 = zext i32 %9120 to i64
  %9122 = add nsw i32 %f126.v3.extent_realized.s134, 1
  %9123 = zext i32 %9122 to i64
  %9124 = shl nuw nsw i64 %9123, 2
  %9125 = mul i64 %9124, %9121
  %9126 = icmp ult i64 %9125, 2147483648
  %9127 = and i64 %9124, 4294967292
  %9128 = mul nuw i64 %9127, %9121
  %9129 = lshr i64 %9128, 32
  %9130 = lshr i64 %9123, 30
  %9131 = mul nuw nsw i64 %9130, %9121
  %9132 = add nuw nsw i64 %9129, %9131
  %9133 = icmp ult i64 %9132, 4294967296
  %9134 = and i1 %9126, %9133
  br i1 %9134, label %"assert succeeded136", label %"assert failed135", !prof !5

"assert failed135":                               ; preds = %"assert succeeded130"
  %9135 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.31, i64 %9125, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded136":                            ; preds = %"assert succeeded130"
  %9136 = add nuw nsw i64 %9125, 4
  %9137 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9136)
  %.not197 = icmp eq ptr %9137, null
  br i1 %.not197, label %"assert failed137", label %"for local_laplacian.s0.v4.v4140.preheader", !prof !4

"assert failed137":                               ; preds = %"assert succeeded136"
  %9138 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"for local_laplacian.s0.v4.v4140.preheader":      ; preds = %"assert succeeded136"
  %9139 = sext i32 %local_laplacian.s0.v4.v4.base to i64
  %reass.add = sub nsw i64 %9139, %66
  %reass.mul = mul nsw i64 %reass.add, %73
  %9140 = sub i64 %reass.mul, %62
  %9141 = shl nsw i64 %75, 1
  %9142 = tail call i32 @llvm.smax.i32(i32 %9112, i32 8)
  %t3097 = zext i32 %9142 to i64
  %9143 = shl nuw nsw i64 %t3097, 2
  %9144 = icmp ult i32 %9142, 536870912
  %9145 = add nuw nsw i32 %125, 1
  %9146 = icmp slt i32 %109, 0
  %9147 = add nsw i32 %f75.v3.extent_realized.s, 1
  %9148 = add nsw i32 %levels, -1
  %9149 = sitofp i32 %9148 to float
  %9150 = insertelement <4 x float> undef, float %9149, i64 0
  %9151 = shufflevector <4 x float> %9150, <4 x float> undef, <4 x i32> zeroinitializer
  %9152 = add nsw i32 %levels, -2
  %9153 = insertelement <4 x i32> undef, i32 %9152, i64 0
  %b1087 = shufflevector <4 x i32> %9153, <4 x i32> undef, <4 x i32> zeroinitializer
  %9154 = add nsw i32 %f130.v3.extent_realized.s, 1
  %9155 = add nsw i32 %local_laplacian.min.1.required, -62
  %9156 = ashr i32 %9155, 5
  %9157 = xor i32 %9156, -1
  %9158 = tail call i32 @llvm.smax.i32(i32 %a1139, i32 0)
  %9159 = insertelement <4 x i32> undef, i32 %9158, i64 0
  %9160 = shufflevector <4 x i32> %9159, <4 x i32> undef, <4 x i32> zeroinitializer
  %9161 = add nsw i32 %f8.v3.extent_realized.s, 1
  %9162 = xor i32 %f8.v4.min_realized, -1
  %9163 = insertelement <4 x i32> undef, i32 %f8.stride.2, i64 0
  %9164 = shufflevector <4 x i32> %9163, <4 x i32> undef, <4 x i32> zeroinitializer
  %9165 = add nsw i32 %f7.v3.extent_realized.s, 1
  %9166 = insertelement <4 x i32> undef, i32 %9165, i64 0
  %9167 = shufflevector <4 x i32> %9166, <4 x i32> undef, <4 x i32> zeroinitializer
  %9168 = sext i32 %f129.v3.extent_realized.s to i64
  %9169 = add nsw i64 %9168, 1
  %9170 = add nsw i32 %local_laplacian.s0.v4.v4.base, -30
  %9171 = ashr i32 %9170, 4
  %9172 = sext i32 %9171 to i64
  %narrow = sub nsw i32 0, %f129.v3.min_realized
  %.neg205 = sext i32 %narrow to i64
  %9173 = add nuw nsw i32 %124, 1
  %9174 = icmp slt i32 %102, 0
  %9175 = add nsw i32 %f74.v3.extent_realized.s, 1
  %9176 = xor i32 %9171, -1
  %9177 = xor i32 %f7.v4.min_realized, -1
  %9178 = add nsw i32 %f6.v3.extent_realized.s, 1
  %9179 = insertelement <4 x i32> undef, i32 %9178, i64 0
  %9180 = shufflevector <4 x i32> %9179, <4 x i32> undef, <4 x i32> zeroinitializer
  %9181 = sext i32 %f129.v3.min_realized to i64
  %9182 = sext i32 %f128.v3.extent_realized.s118 to i64
  %9183 = add nsw i64 %9182, 1
  %9184 = add nsw i32 %local_laplacian.s0.v4.v4.base, -14
  %9185 = ashr i32 %9184, 3
  %9186 = sext i32 %9185 to i64
  %narrow274 = sub nsw i32 0, %f128.v3.min_realized117
  %.neg206 = sext i32 %narrow274 to i64
  %9187 = add nuw nsw i32 %9054, 1
  %9188 = icmp slt i32 %9053, 0
  %9189 = add nsw i32 %f73.v3.extent_realized.s, 1
  %9190 = xor i32 %9185, -1
  %9191 = xor i32 %f6.v4.min_realized, -1
  %9192 = add nsw i32 %f5.v3.extent_realized.s, 1
  %9193 = insertelement <4 x i32> undef, i32 %9192, i64 0
  %9194 = shufflevector <4 x i32> %9193, <4 x i32> undef, <4 x i32> zeroinitializer
  %9195 = sext i32 %f128.v3.min_realized117 to i64
  %9196 = sext i32 %f127.v3.extent_realized.s126 to i64
  %9197 = add nsw i64 %9196, 1
  %9198 = sext i32 %f127.v4.min_realized124 to i64
  %9199 = sext i32 %f127.v3.min_realized125 to i64
  %9200 = add nsw i32 %9082, 9
  %9201 = lshr i32 %9200, 3
  %9202 = icmp slt i32 %9082, -1
  %9203 = add nsw i32 %f72.v3.extent_realized.s, 1
  %9204 = xor i32 %f127.v4.min_realized124, -1
  %9205 = xor i32 %f5.v4.min_realized, -1
  %9206 = add nsw i32 %f4.v3.extent_realized.s, 1
  %9207 = insertelement <4 x i32> undef, i32 %9206, i64 0
  %9208 = shufflevector <4 x i32> %9207, <4 x i32> undef, <4 x i32> zeroinitializer
  %9209 = sext i32 %f126.v3.extent_realized.s134 to i64
  %9210 = add nsw i64 %9209, 1
  %9211 = sext i32 %9073 to i64
  %9212 = sext i32 %f126.v3.min_realized133 to i64
  %9213 = add nuw nsw i64 %9143, 4
  %9214 = add nsw i32 %9112, 7
  %9215 = lshr i32 %9214, 3
  %9216 = icmp sgt i32 %9112, 0
  %9217 = add nsw i32 %f2.v3.extent_realized.s, 1
  %9218 = fdiv float 1.000000e+00, %9149
  %9219 = insertelement <4 x float> undef, float %9218, i64 0
  %9220 = shufflevector <4 x float> %9219, <4 x float> undef, <4 x i32> zeroinitializer
  %9221 = xor i32 %9073, -1
  %9222 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %9223 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %9222
  %.neg209 = shufflevector <4 x i32> %9223, <4 x i32> poison, <4 x i32> zeroinitializer
  %9224 = shl nsw i32 %levels, 8
  %9225 = add nsw i32 %9224, -256
  %9226 = insertelement <4 x i32> undef, i32 %9225, i64 0
  %b1132 = shufflevector <4 x i32> %9226, <4 x i32> undef, <4 x i32> zeroinitializer
  %9227 = xor i32 %f4.v4.min_realized, -1
  %9228 = insertelement <4 x float> undef, float %beta, i64 0
  %9229 = shufflevector <4 x float> %9228, <4 x float> undef, <4 x i32> zeroinitializer
  %9230 = sext i32 %9110 to i64
  %9231 = add nsw i32 %local_laplacian.extent.0, 7
  %9232 = ashr i32 %9231, 3
  %9233 = icmp sgt i32 %local_laplacian.extent.0, 0
  %9234 = icmp sgt i32 %local_laplacian.extent.2, 0
  %9235 = add nsw i64 %6, 1
  %9236 = sub nsw i64 %9139, %10
  %9237 = mul nsw i32 %input.stride.2, %b1146
  %9238 = mul nsw i32 %input.stride.1, %b1148
  %9239 = add nsw i32 %9238, %input.min.0
  %9240 = add nsw i32 %9239, %9237
  %9241 = add nsw i32 %b1146, %input.extent.2
  %b1147 = add nsw i32 %9241, -1
  %9242 = add i32 %input.extent.1, -1
  %b1149 = add i32 %9242, %b1148
  %9243 = add nsw i32 %input.min.0, %input.extent.0
  %9244 = add nsw i32 %9243, -1
  %9245 = insertelement <8 x i32> undef, i32 %9244, i64 0
  %b1151 = shufflevector <8 x i32> %9245, <8 x i32> undef, <8 x i32> zeroinitializer
  %9246 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %b1150 = shufflevector <8 x i32> %9246, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %"produce f129143"

if.then.i271:                                     ; preds = %if.then.i283
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9046) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9069) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9108) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9137) #7
  br label %destructor_block.thread

"produce f129143":                                ; preds = %if.then.i283, %"for local_laplacian.s0.v4.v4140.preheader"
  %indvars.iv306 = phi i64 [ %indvars.iv.next307, %if.then.i283 ], [ 0, %"for local_laplacian.s0.v4.v4140.preheader" ]
  %lsr.iv446 = phi i64 [ %lsr.iv.next447, %if.then.i283 ], [ %9140, %"for local_laplacian.s0.v4.v4140.preheader" ]
  %9247 = icmp ne i64 %indvars.iv306, 0
  %9248 = trunc i64 %indvars.iv306 to i32
  %9249 = add nsw i32 %local_laplacian.s0.v4.v4.base, %9248
  %9250 = add nsw i32 %9249, 3
  %9251 = ashr i32 %9250, 1
  %9252 = ashr i32 %9249, 1
  %9253 = add nsw i32 %9252, -1
  %9254 = sext i1 %9247 to i32
  %9255 = and i32 %9251, %9254
  %9256 = select i1 %9247, i32 0, i32 %9253
  %f126.s0.v4.min_2 = or i32 %9255, %9256
  %9257 = add nsw i32 %9249, 9
  %9258 = ashr i32 %9257, 2
  %9259 = add nsw i32 %9249, -6
  %9260 = ashr i32 %9259, 2
  %9261 = and i32 %9258, %9254
  %9262 = select i1 %9247, i32 0, i32 %9260
  %f127.s0.v4.min_2 = or i32 %9261, %9262
  %9263 = add nsw i32 %9249, 21
  %9264 = ashr i32 %9263, 3
  %9265 = add nsw i32 %9249, -14
  %9266 = ashr i32 %9265, 3
  %9267 = and i32 %9264, %9254
  %9268 = select i1 %9247, i32 0, i32 %9266
  %f128.s0.v4.min_2 = or i32 %9267, %9268
  %9269 = add nsw i32 %9249, 45
  %9270 = ashr i32 %9269, 4
  %9271 = add nsw i32 %9249, -30
  %9272 = ashr i32 %9271, 4
  %9273 = and i32 %9270, %9254
  %9274 = select i1 %9247, i32 0, i32 %9272
  %f129.s0.v4.min_2 = or i32 %9273, %9274
  %9275 = add nsw i32 %9249, 30
  %9276 = ashr i32 %9275, 4
  %.not78 = icmp sgt i32 %f129.s0.v4.min_2, %9276
  %brmerge = select i1 %.not78, i1 true, i1 %9146
  br i1 %brmerge, label %"produce f128153", label %"for f129.s0.v4145.us.preheader", !prof !75

"for f129.s0.v4145.us.preheader":                 ; preds = %"produce f129143"
  %9277 = sext i32 %f129.s0.v4.min_2 to i64
  %sext = sext i32 %9276 to i64
  br label %"for f129.s0.v4145.us"

"for f129.s0.v4145.us":                           ; preds = %"for f129.s0.v4145.us.preheader", %"end for f129.s0.v3.v3149.loopexit.us"
  %indvars.iv = phi i64 [ %9277, %"for f129.s0.v4145.us.preheader" ], [ %indvars.iv.next, %"end for f129.s0.v3.v3149.loopexit.us" ]
  %9278 = trunc i64 %indvars.iv to i32
  %9279 = shl i32 %9278, 1
  %9280 = and i32 %9279, 2
  %9281 = ashr i32 %9278, 1
  %t2863.us = add nsw i32 %9280, %9281
  %9282 = trunc i64 %indvars.iv to i32
  %9283 = sub i32 %9282, %f75.v4.min_realized
  %9284 = mul i32 %9283, %9147
  %9285 = sub i32 %9284, %f75.v3.min_realized
  %9286 = add nsw i32 %t2863.us, %9157
  %t2870.us = mul nsw i32 %9286, %9154
  %9287 = sub nsw i32 %9281, %9156
  %t2872.us = mul nsw i32 %9287, %9154
  %9288 = add i32 %t2863.us, %9162
  %t2877.us = mul nsw i32 %9288, %9161
  %9289 = sub nsw i32 %9281, %f8.v4.min_realized
  %t2882.us = mul nsw i32 %9289, %9161
  %9290 = sext i32 %t2872.us to i64
  %9291 = add nsw i64 %9290, -1
  %9292 = sext i32 %t2870.us to i64
  %9293 = add nsw i64 %9292, -1
  %9294 = sub nsw i64 %indvars.iv, %9172
  %9295 = mul nsw i64 %9294, %9169
  %9296 = add i64 %9295, %.neg205
  %9297 = trunc i64 %indvars.iv to i32
  %9298 = sub i32 %9297, %f7.v4.min_realized
  %9299 = mul i32 %9298, %f7.stride.1
  br label %"for f129.s0.v3.v3148.us"

"for f129.s0.v3.v3148.us":                        ; preds = %"for f129.s0.v4145.us", %"for f129.s0.v3.v3148.us"
  %lsr.iv426.us = phi i32 [ %lsr.iv.next427.us, %"for f129.s0.v3.v3148.us" ], [ 0, %"for f129.s0.v4145.us" ]
  %lsr.iv424.us = phi i32 [ %lsr.iv.next425.us, %"for f129.s0.v3.v3148.us" ], [ %9145, %"for f129.s0.v4145.us" ]
  %9300 = add i32 %lsr.iv426.us, %106
  %f129.s0.v3.v363.base151.us = tail call i32 @llvm.smin.i32(i32 %b793, i32 %9300)
  %9301 = shl i32 %f129.s0.v3.v363.base151.us, 1
  %9302 = and i32 %9301, 2
  %9303 = ashr i32 %f129.s0.v3.v363.base151.us, 1
  %t2864.us = add nsw i32 %9302, %9303
  %t2865.us = add i32 %9285, %f129.s0.v3.v363.base151.us
  %9304 = sext i32 %t2865.us to i64
  %9305 = getelementptr inbounds float, ptr %f75.host, i64 %9304
  %9306 = load <4 x float>, ptr %9305, align 4, !tbaa !13
  %9307 = add nsw i64 %9304, 4
  %9308 = getelementptr inbounds float, ptr %f75.host, i64 %9307
  %9309 = load <4 x float>, ptr %9308, align 4, !tbaa !13
  %9310 = shufflevector <4 x float> %9306, <4 x float> %9309, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2866.us = fmul <4 x float> %9151, %9310
  %a1085.us = fptosi <4 x float> %t2866.us to <4 x i32>
  %a1088.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1085.us)
  %9311 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1088.us, <4 x i32> zeroinitializer)
  %9312 = sitofp <4 x i32> %9311 to <4 x float>
  %t2868.us = fsub <4 x float> %t2866.us, %9312
  %9313 = sub nsw i32 %f129.s0.v3.v363.base151.us, %f7.v3.min_realized
  %t2873.us = add nsw i32 %9313, %9299
  %t2875.us = sub nsw <4 x i32> %9311, %9160
  %t2879.us = mul nsw <4 x i32> %t2875.us, %9164
  %9314 = add nsw <4 x i32> %t2875.us, <i32 1, i32 1, i32 1, i32 1>
  %t2885.us = mul nsw <4 x i32> %9314, %9164
  %9315 = add nsw i32 %f129.s0.v3.v363.base151.us, 1
  %9316 = shl i32 %9315, 1
  %9317 = and i32 %9316, 2
  %9318 = ashr i32 %9315, 1
  %t2886.us = add nsw i32 %9317, %9318
  %9319 = shufflevector <4 x float> %9306, <4 x float> %9309, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2887.us = fmul <4 x float> %9151, %9319
  %a1089.us = fptosi <4 x float> %t2887.us to <4 x i32>
  %a1092.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1089.us)
  %9320 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1092.us, <4 x i32> zeroinitializer)
  %9321 = sitofp <4 x i32> %9320 to <4 x float>
  %t2889.us = fsub <4 x float> %t2887.us, %9321
  %t2892.us = sub nsw <4 x i32> %9320, %9160
  %t2895.us = mul nsw <4 x i32> %t2892.us, %9164
  %9322 = add nsw <4 x i32> %t2892.us, <i32 1, i32 1, i32 1, i32 1>
  %t2900.us = mul nsw <4 x i32> %9322, %9164
  %9323 = sub nsw i32 %9303, %f8.v3.min_realized
  %9324 = add nsw i32 %9323, %t2882.us
  %9325 = insertelement <4 x i32> undef, i32 %9324, i64 0
  %9326 = shufflevector <4 x i32> %9325, <4 x i32> undef, <4 x i32> zeroinitializer
  %9327 = add nsw <4 x i32> %9326, <i32 0, i32 1, i32 2, i32 3>
  %9328 = add nsw <4 x i32> %t2885.us, %9327
  %9329 = sext <4 x i32> %9328 to <4 x i64>
  %9330 = extractelement <4 x i64> %9329, i64 0
  %9331 = getelementptr inbounds float, ptr %f8.host, i64 %9330
  %9332 = load float, ptr %9331, align 4, !tbaa !35
  %9333 = insertelement <4 x float> undef, float %9332, i64 0
  %9334 = extractelement <4 x i64> %9329, i64 1
  %9335 = getelementptr inbounds float, ptr %f8.host, i64 %9334
  %9336 = load float, ptr %9335, align 4, !tbaa !35
  %9337 = insertelement <4 x float> %9333, float %9336, i64 1
  %9338 = extractelement <4 x i64> %9329, i64 2
  %9339 = getelementptr inbounds float, ptr %f8.host, i64 %9338
  %9340 = load float, ptr %9339, align 4, !tbaa !35
  %9341 = insertelement <4 x float> %9337, float %9340, i64 2
  %9342 = extractelement <4 x i64> %9329, i64 3
  %9343 = getelementptr inbounds float, ptr %f8.host, i64 %9342
  %9344 = load float, ptr %9343, align 4, !tbaa !35
  %9345 = insertelement <4 x float> %9341, float %9344, i64 3
  %9346 = fmul <4 x float> %9345, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9347 = sub nsw i32 %t2864.us, %f8.v3.min_realized
  %9348 = add nsw i32 %9347, %t2882.us
  %9349 = insertelement <4 x i32> undef, i32 %9348, i64 0
  %9350 = shufflevector <4 x i32> %9349, <4 x i32> undef, <4 x i32> zeroinitializer
  %9351 = add <4 x i32> %9350, <i32 -1, i32 0, i32 1, i32 2>
  %9352 = add <4 x i32> %9351, %t2885.us
  %9353 = sext <4 x i32> %9352 to <4 x i64>
  %9354 = extractelement <4 x i64> %9353, i64 0
  %9355 = getelementptr inbounds float, ptr %f8.host, i64 %9354
  %9356 = load float, ptr %9355, align 4, !tbaa !35
  %9357 = insertelement <4 x float> undef, float %9356, i64 0
  %9358 = extractelement <4 x i64> %9353, i64 1
  %9359 = getelementptr inbounds float, ptr %f8.host, i64 %9358
  %9360 = load float, ptr %9359, align 4, !tbaa !35
  %9361 = insertelement <4 x float> %9357, float %9360, i64 1
  %9362 = extractelement <4 x i64> %9353, i64 2
  %9363 = getelementptr inbounds float, ptr %f8.host, i64 %9362
  %9364 = load float, ptr %9363, align 4, !tbaa !35
  %9365 = insertelement <4 x float> %9361, float %9364, i64 2
  %9366 = extractelement <4 x i64> %9353, i64 3
  %9367 = getelementptr inbounds float, ptr %f8.host, i64 %9366
  %9368 = load float, ptr %9367, align 4, !tbaa !35
  %9369 = insertelement <4 x float> %9365, float %9368, i64 3
  %9370 = fmul <4 x float> %9369, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9371 = fadd <4 x float> %9346, %9370
  %9372 = fmul <4 x float> %9371, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9373 = add nsw i32 %9323, %t2877.us
  %9374 = insertelement <4 x i32> undef, i32 %9373, i64 0
  %9375 = shufflevector <4 x i32> %9374, <4 x i32> undef, <4 x i32> zeroinitializer
  %9376 = add nsw <4 x i32> %9375, <i32 0, i32 1, i32 2, i32 3>
  %9377 = add nsw <4 x i32> %t2885.us, %9376
  %9378 = sext <4 x i32> %9377 to <4 x i64>
  %9379 = extractelement <4 x i64> %9378, i64 0
  %9380 = getelementptr inbounds float, ptr %f8.host, i64 %9379
  %9381 = load float, ptr %9380, align 4, !tbaa !35
  %9382 = insertelement <4 x float> undef, float %9381, i64 0
  %9383 = extractelement <4 x i64> %9378, i64 1
  %9384 = getelementptr inbounds float, ptr %f8.host, i64 %9383
  %9385 = load float, ptr %9384, align 4, !tbaa !35
  %9386 = insertelement <4 x float> %9382, float %9385, i64 1
  %9387 = extractelement <4 x i64> %9378, i64 2
  %9388 = getelementptr inbounds float, ptr %f8.host, i64 %9387
  %9389 = load float, ptr %9388, align 4, !tbaa !35
  %9390 = insertelement <4 x float> %9386, float %9389, i64 2
  %9391 = extractelement <4 x i64> %9378, i64 3
  %9392 = getelementptr inbounds float, ptr %f8.host, i64 %9391
  %9393 = load float, ptr %9392, align 4, !tbaa !35
  %9394 = insertelement <4 x float> %9390, float %9393, i64 3
  %9395 = fmul <4 x float> %9394, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9396 = add nsw i32 %9347, %t2877.us
  %9397 = insertelement <4 x i32> undef, i32 %9396, i64 0
  %9398 = shufflevector <4 x i32> %9397, <4 x i32> undef, <4 x i32> zeroinitializer
  %9399 = add <4 x i32> %9398, <i32 -1, i32 0, i32 1, i32 2>
  %9400 = add <4 x i32> %9399, %t2885.us
  %9401 = sext <4 x i32> %9400 to <4 x i64>
  %9402 = extractelement <4 x i64> %9401, i64 0
  %9403 = getelementptr inbounds float, ptr %f8.host, i64 %9402
  %9404 = load float, ptr %9403, align 4, !tbaa !35
  %9405 = insertelement <4 x float> undef, float %9404, i64 0
  %9406 = extractelement <4 x i64> %9401, i64 1
  %9407 = getelementptr inbounds float, ptr %f8.host, i64 %9406
  %9408 = load float, ptr %9407, align 4, !tbaa !35
  %9409 = insertelement <4 x float> %9405, float %9408, i64 1
  %9410 = extractelement <4 x i64> %9401, i64 2
  %9411 = getelementptr inbounds float, ptr %f8.host, i64 %9410
  %9412 = load float, ptr %9411, align 4, !tbaa !35
  %9413 = insertelement <4 x float> %9409, float %9412, i64 2
  %9414 = extractelement <4 x i64> %9401, i64 3
  %9415 = getelementptr inbounds float, ptr %f8.host, i64 %9414
  %9416 = load float, ptr %9415, align 4, !tbaa !35
  %9417 = insertelement <4 x float> %9413, float %9416, i64 3
  %9418 = fmul <4 x float> %9417, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9419 = fadd <4 x float> %9395, %9418
  %9420 = fmul <4 x float> %9419, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9421 = fadd <4 x float> %9372, %9420
  %9422 = mul nsw <4 x i32> %9314, %9167
  %9423 = insertelement <4 x i32> undef, i32 %t2873.us, i64 0
  %9424 = shufflevector <4 x i32> %9423, <4 x i32> undef, <4 x i32> zeroinitializer
  %9425 = add nsw <4 x i32> %9424, <i32 0, i32 2, i32 4, i32 6>
  %9426 = add nsw <4 x i32> %9422, %9425
  %9427 = sext <4 x i32> %9426 to <4 x i64>
  %9428 = extractelement <4 x i64> %9427, i64 0
  %9429 = getelementptr inbounds float, ptr %f7.host, i64 %9428
  %9430 = load float, ptr %9429, align 4, !tbaa !53
  %9431 = insertelement <4 x float> undef, float %9430, i64 0
  %9432 = extractelement <4 x i64> %9427, i64 1
  %9433 = getelementptr inbounds float, ptr %f7.host, i64 %9432
  %9434 = load float, ptr %9433, align 4, !tbaa !53
  %9435 = insertelement <4 x float> %9431, float %9434, i64 1
  %9436 = extractelement <4 x i64> %9427, i64 2
  %9437 = getelementptr inbounds float, ptr %f7.host, i64 %9436
  %9438 = load float, ptr %9437, align 4, !tbaa !53
  %9439 = insertelement <4 x float> %9435, float %9438, i64 2
  %9440 = extractelement <4 x i64> %9427, i64 3
  %9441 = getelementptr inbounds float, ptr %f7.host, i64 %9440
  %9442 = load float, ptr %9441, align 4, !tbaa !53
  %9443 = insertelement <4 x float> %9439, float %9442, i64 3
  %9444 = fsub <4 x float> %9443, %9421
  %9445 = fmul <4 x float> %t2868.us, %9444
  %9446 = add nsw <4 x i32> %t2879.us, %9327
  %9447 = sext <4 x i32> %9446 to <4 x i64>
  %9448 = extractelement <4 x i64> %9447, i64 0
  %9449 = getelementptr inbounds float, ptr %f8.host, i64 %9448
  %9450 = load float, ptr %9449, align 4, !tbaa !35
  %9451 = insertelement <4 x float> undef, float %9450, i64 0
  %9452 = extractelement <4 x i64> %9447, i64 1
  %9453 = getelementptr inbounds float, ptr %f8.host, i64 %9452
  %9454 = load float, ptr %9453, align 4, !tbaa !35
  %9455 = insertelement <4 x float> %9451, float %9454, i64 1
  %9456 = extractelement <4 x i64> %9447, i64 2
  %9457 = getelementptr inbounds float, ptr %f8.host, i64 %9456
  %9458 = load float, ptr %9457, align 4, !tbaa !35
  %9459 = insertelement <4 x float> %9455, float %9458, i64 2
  %9460 = extractelement <4 x i64> %9447, i64 3
  %9461 = getelementptr inbounds float, ptr %f8.host, i64 %9460
  %9462 = load float, ptr %9461, align 4, !tbaa !35
  %9463 = insertelement <4 x float> %9459, float %9462, i64 3
  %9464 = fmul <4 x float> %9463, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9465 = add <4 x i32> %t2879.us, %9350
  %9466 = add <4 x i32> %9465, <i32 -1, i32 0, i32 1, i32 2>
  %9467 = sext <4 x i32> %9466 to <4 x i64>
  %9468 = extractelement <4 x i64> %9467, i64 0
  %9469 = getelementptr inbounds float, ptr %f8.host, i64 %9468
  %9470 = load float, ptr %9469, align 4, !tbaa !35
  %9471 = insertelement <4 x float> undef, float %9470, i64 0
  %9472 = extractelement <4 x i64> %9467, i64 1
  %9473 = getelementptr inbounds float, ptr %f8.host, i64 %9472
  %9474 = load float, ptr %9473, align 4, !tbaa !35
  %9475 = insertelement <4 x float> %9471, float %9474, i64 1
  %9476 = extractelement <4 x i64> %9467, i64 2
  %9477 = getelementptr inbounds float, ptr %f8.host, i64 %9476
  %9478 = load float, ptr %9477, align 4, !tbaa !35
  %9479 = insertelement <4 x float> %9475, float %9478, i64 2
  %9480 = extractelement <4 x i64> %9467, i64 3
  %9481 = getelementptr inbounds float, ptr %f8.host, i64 %9480
  %9482 = load float, ptr %9481, align 4, !tbaa !35
  %9483 = insertelement <4 x float> %9479, float %9482, i64 3
  %9484 = fmul <4 x float> %9483, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9485 = fadd <4 x float> %9464, %9484
  %9486 = fmul <4 x float> %9485, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9487 = add nsw <4 x i32> %t2879.us, %9376
  %9488 = sext <4 x i32> %9487 to <4 x i64>
  %9489 = extractelement <4 x i64> %9488, i64 0
  %9490 = getelementptr inbounds float, ptr %f8.host, i64 %9489
  %9491 = load float, ptr %9490, align 4, !tbaa !35
  %9492 = insertelement <4 x float> undef, float %9491, i64 0
  %9493 = extractelement <4 x i64> %9488, i64 1
  %9494 = getelementptr inbounds float, ptr %f8.host, i64 %9493
  %9495 = load float, ptr %9494, align 4, !tbaa !35
  %9496 = insertelement <4 x float> %9492, float %9495, i64 1
  %9497 = extractelement <4 x i64> %9488, i64 2
  %9498 = getelementptr inbounds float, ptr %f8.host, i64 %9497
  %9499 = load float, ptr %9498, align 4, !tbaa !35
  %9500 = insertelement <4 x float> %9496, float %9499, i64 2
  %9501 = extractelement <4 x i64> %9488, i64 3
  %9502 = getelementptr inbounds float, ptr %f8.host, i64 %9501
  %9503 = load float, ptr %9502, align 4, !tbaa !35
  %9504 = insertelement <4 x float> %9500, float %9503, i64 3
  %9505 = fmul <4 x float> %9504, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9506 = add <4 x i32> %t2879.us, %9398
  %9507 = add <4 x i32> %9506, <i32 -1, i32 0, i32 1, i32 2>
  %9508 = sext <4 x i32> %9507 to <4 x i64>
  %9509 = extractelement <4 x i64> %9508, i64 0
  %9510 = getelementptr inbounds float, ptr %f8.host, i64 %9509
  %9511 = load float, ptr %9510, align 4, !tbaa !35
  %9512 = insertelement <4 x float> undef, float %9511, i64 0
  %9513 = extractelement <4 x i64> %9508, i64 1
  %9514 = getelementptr inbounds float, ptr %f8.host, i64 %9513
  %9515 = load float, ptr %9514, align 4, !tbaa !35
  %9516 = insertelement <4 x float> %9512, float %9515, i64 1
  %9517 = extractelement <4 x i64> %9508, i64 2
  %9518 = getelementptr inbounds float, ptr %f8.host, i64 %9517
  %9519 = load float, ptr %9518, align 4, !tbaa !35
  %9520 = insertelement <4 x float> %9516, float %9519, i64 2
  %9521 = extractelement <4 x i64> %9508, i64 3
  %9522 = getelementptr inbounds float, ptr %f8.host, i64 %9521
  %9523 = load float, ptr %9522, align 4, !tbaa !35
  %9524 = insertelement <4 x float> %9520, float %9523, i64 3
  %9525 = fmul <4 x float> %9524, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9526 = fadd <4 x float> %9505, %9525
  %9527 = fmul <4 x float> %9526, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9528 = fadd <4 x float> %9486, %9527
  %9529 = mul nsw <4 x i32> %t2875.us, %9167
  %9530 = add nsw <4 x i32> %9529, %9425
  %9531 = sext <4 x i32> %9530 to <4 x i64>
  %9532 = extractelement <4 x i64> %9531, i64 0
  %9533 = getelementptr inbounds float, ptr %f7.host, i64 %9532
  %9534 = load float, ptr %9533, align 4, !tbaa !53
  %9535 = insertelement <4 x float> undef, float %9534, i64 0
  %9536 = extractelement <4 x i64> %9531, i64 1
  %9537 = getelementptr inbounds float, ptr %f7.host, i64 %9536
  %9538 = load float, ptr %9537, align 4, !tbaa !53
  %9539 = insertelement <4 x float> %9535, float %9538, i64 1
  %9540 = extractelement <4 x i64> %9531, i64 2
  %9541 = getelementptr inbounds float, ptr %f7.host, i64 %9540
  %9542 = load float, ptr %9541, align 4, !tbaa !53
  %9543 = insertelement <4 x float> %9539, float %9542, i64 2
  %9544 = extractelement <4 x i64> %9531, i64 3
  %9545 = getelementptr inbounds float, ptr %f7.host, i64 %9544
  %9546 = load float, ptr %9545, align 4, !tbaa !53
  %9547 = insertelement <4 x float> %9543, float %9546, i64 3
  %9548 = fsub <4 x float> %9547, %9528
  %9549 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2868.us
  %9550 = fmul <4 x float> %9549, %9548
  %9551 = fadd <4 x float> %9445, %9550
  %9552 = sext i32 %9303 to i64
  %9553 = sub nsw i64 %9552, %4
  %9554 = add nsw i64 %9553, %9290
  %9555 = getelementptr inbounds float, ptr %f130.host, i64 %9554
  %9556 = load <4 x float>, ptr %9555, align 4, !tbaa !37
  %9557 = fmul <4 x float> %9556, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9558 = sext i32 %t2864.us to i64
  %9559 = sub nsw i64 %9558, %4
  %9560 = add nsw i64 %9291, %9559
  %9561 = getelementptr inbounds float, ptr %f130.host, i64 %9560
  %9562 = load <4 x float>, ptr %9561, align 4, !tbaa !37
  %9563 = fmul <4 x float> %9562, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9564 = fadd <4 x float> %9557, %9563
  %9565 = fmul <4 x float> %9564, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9566 = add nsw i64 %9553, %9292
  %9567 = getelementptr inbounds float, ptr %f130.host, i64 %9566
  %9568 = load <4 x float>, ptr %9567, align 4, !tbaa !37
  %9569 = fmul <4 x float> %9568, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9570 = add nsw i64 %9293, %9559
  %9571 = getelementptr inbounds float, ptr %f130.host, i64 %9570
  %9572 = load <4 x float>, ptr %9571, align 4, !tbaa !37
  %9573 = fmul <4 x float> %9572, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9574 = fadd <4 x float> %9569, %9573
  %9575 = fmul <4 x float> %9574, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9576 = fadd <4 x float> %9565, %9575
  %9577 = fadd <4 x float> %9551, %9576
  %9578 = sub nsw i32 %9318, %f8.v3.min_realized
  %9579 = add nsw i32 %9578, %t2882.us
  %9580 = insertelement <4 x i32> undef, i32 %9579, i64 0
  %9581 = shufflevector <4 x i32> %9580, <4 x i32> undef, <4 x i32> zeroinitializer
  %9582 = add nsw <4 x i32> %9581, <i32 0, i32 1, i32 2, i32 3>
  %9583 = add nsw <4 x i32> %t2900.us, %9582
  %9584 = sext <4 x i32> %9583 to <4 x i64>
  %9585 = extractelement <4 x i64> %9584, i64 0
  %9586 = getelementptr inbounds float, ptr %f8.host, i64 %9585
  %9587 = load float, ptr %9586, align 4, !tbaa !35
  %9588 = insertelement <4 x float> undef, float %9587, i64 0
  %9589 = extractelement <4 x i64> %9584, i64 1
  %9590 = getelementptr inbounds float, ptr %f8.host, i64 %9589
  %9591 = load float, ptr %9590, align 4, !tbaa !35
  %9592 = insertelement <4 x float> %9588, float %9591, i64 1
  %9593 = extractelement <4 x i64> %9584, i64 2
  %9594 = getelementptr inbounds float, ptr %f8.host, i64 %9593
  %9595 = load float, ptr %9594, align 4, !tbaa !35
  %9596 = insertelement <4 x float> %9592, float %9595, i64 2
  %9597 = extractelement <4 x i64> %9584, i64 3
  %9598 = getelementptr inbounds float, ptr %f8.host, i64 %9597
  %9599 = load float, ptr %9598, align 4, !tbaa !35
  %9600 = insertelement <4 x float> %9596, float %9599, i64 3
  %9601 = fmul <4 x float> %9600, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9602 = sub nsw i32 %t2886.us, %f8.v3.min_realized
  %9603 = add nsw i32 %9602, %t2882.us
  %9604 = insertelement <4 x i32> undef, i32 %9603, i64 0
  %9605 = shufflevector <4 x i32> %9604, <4 x i32> undef, <4 x i32> zeroinitializer
  %9606 = add nsw <4 x i32> %9605, <i32 0, i32 1, i32 2, i32 3>
  %9607 = add <4 x i32> %t2900.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %9608 = add <4 x i32> %9607, %9606
  %9609 = sext <4 x i32> %9608 to <4 x i64>
  %9610 = extractelement <4 x i64> %9609, i64 0
  %9611 = getelementptr inbounds float, ptr %f8.host, i64 %9610
  %9612 = load float, ptr %9611, align 4, !tbaa !35
  %9613 = insertelement <4 x float> undef, float %9612, i64 0
  %9614 = extractelement <4 x i64> %9609, i64 1
  %9615 = getelementptr inbounds float, ptr %f8.host, i64 %9614
  %9616 = load float, ptr %9615, align 4, !tbaa !35
  %9617 = insertelement <4 x float> %9613, float %9616, i64 1
  %9618 = extractelement <4 x i64> %9609, i64 2
  %9619 = getelementptr inbounds float, ptr %f8.host, i64 %9618
  %9620 = load float, ptr %9619, align 4, !tbaa !35
  %9621 = insertelement <4 x float> %9617, float %9620, i64 2
  %9622 = extractelement <4 x i64> %9609, i64 3
  %9623 = getelementptr inbounds float, ptr %f8.host, i64 %9622
  %9624 = load float, ptr %9623, align 4, !tbaa !35
  %9625 = insertelement <4 x float> %9621, float %9624, i64 3
  %9626 = fmul <4 x float> %9625, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9627 = fadd <4 x float> %9601, %9626
  %9628 = fmul <4 x float> %9627, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9629 = add nsw i32 %9578, %t2877.us
  %9630 = insertelement <4 x i32> undef, i32 %9629, i64 0
  %9631 = shufflevector <4 x i32> %9630, <4 x i32> undef, <4 x i32> zeroinitializer
  %9632 = add nsw <4 x i32> %9631, <i32 0, i32 1, i32 2, i32 3>
  %9633 = add nsw <4 x i32> %t2900.us, %9632
  %9634 = sext <4 x i32> %9633 to <4 x i64>
  %9635 = extractelement <4 x i64> %9634, i64 0
  %9636 = getelementptr inbounds float, ptr %f8.host, i64 %9635
  %9637 = load float, ptr %9636, align 4, !tbaa !35
  %9638 = insertelement <4 x float> undef, float %9637, i64 0
  %9639 = extractelement <4 x i64> %9634, i64 1
  %9640 = getelementptr inbounds float, ptr %f8.host, i64 %9639
  %9641 = load float, ptr %9640, align 4, !tbaa !35
  %9642 = insertelement <4 x float> %9638, float %9641, i64 1
  %9643 = extractelement <4 x i64> %9634, i64 2
  %9644 = getelementptr inbounds float, ptr %f8.host, i64 %9643
  %9645 = load float, ptr %9644, align 4, !tbaa !35
  %9646 = insertelement <4 x float> %9642, float %9645, i64 2
  %9647 = extractelement <4 x i64> %9634, i64 3
  %9648 = getelementptr inbounds float, ptr %f8.host, i64 %9647
  %9649 = load float, ptr %9648, align 4, !tbaa !35
  %9650 = insertelement <4 x float> %9646, float %9649, i64 3
  %9651 = fmul <4 x float> %9650, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9652 = add nsw i32 %9602, %t2877.us
  %9653 = insertelement <4 x i32> undef, i32 %9652, i64 0
  %9654 = shufflevector <4 x i32> %9653, <4 x i32> undef, <4 x i32> zeroinitializer
  %9655 = add nsw <4 x i32> %9654, <i32 0, i32 1, i32 2, i32 3>
  %9656 = add <4 x i32> %9607, %9655
  %9657 = sext <4 x i32> %9656 to <4 x i64>
  %9658 = extractelement <4 x i64> %9657, i64 0
  %9659 = getelementptr inbounds float, ptr %f8.host, i64 %9658
  %9660 = load float, ptr %9659, align 4, !tbaa !35
  %9661 = insertelement <4 x float> undef, float %9660, i64 0
  %9662 = extractelement <4 x i64> %9657, i64 1
  %9663 = getelementptr inbounds float, ptr %f8.host, i64 %9662
  %9664 = load float, ptr %9663, align 4, !tbaa !35
  %9665 = insertelement <4 x float> %9661, float %9664, i64 1
  %9666 = extractelement <4 x i64> %9657, i64 2
  %9667 = getelementptr inbounds float, ptr %f8.host, i64 %9666
  %9668 = load float, ptr %9667, align 4, !tbaa !35
  %9669 = insertelement <4 x float> %9665, float %9668, i64 2
  %9670 = extractelement <4 x i64> %9657, i64 3
  %9671 = getelementptr inbounds float, ptr %f8.host, i64 %9670
  %9672 = load float, ptr %9671, align 4, !tbaa !35
  %9673 = insertelement <4 x float> %9669, float %9672, i64 3
  %9674 = fmul <4 x float> %9673, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9675 = fadd <4 x float> %9651, %9674
  %9676 = fmul <4 x float> %9675, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9677 = fadd <4 x float> %9628, %9676
  %9678 = mul nsw <4 x i32> %9322, %9167
  %9679 = add nsw i32 %t2873.us, 1
  %9680 = insertelement <4 x i32> undef, i32 %9679, i64 0
  %9681 = shufflevector <4 x i32> %9680, <4 x i32> undef, <4 x i32> zeroinitializer
  %9682 = add nsw <4 x i32> %9681, <i32 0, i32 2, i32 4, i32 6>
  %9683 = add nsw <4 x i32> %9678, %9682
  %9684 = sext <4 x i32> %9683 to <4 x i64>
  %9685 = extractelement <4 x i64> %9684, i64 0
  %9686 = getelementptr inbounds float, ptr %f7.host, i64 %9685
  %9687 = load float, ptr %9686, align 4, !tbaa !53
  %9688 = insertelement <4 x float> undef, float %9687, i64 0
  %9689 = extractelement <4 x i64> %9684, i64 1
  %9690 = getelementptr inbounds float, ptr %f7.host, i64 %9689
  %9691 = load float, ptr %9690, align 4, !tbaa !53
  %9692 = insertelement <4 x float> %9688, float %9691, i64 1
  %9693 = extractelement <4 x i64> %9684, i64 2
  %9694 = getelementptr inbounds float, ptr %f7.host, i64 %9693
  %9695 = load float, ptr %9694, align 4, !tbaa !53
  %9696 = insertelement <4 x float> %9692, float %9695, i64 2
  %9697 = extractelement <4 x i64> %9684, i64 3
  %9698 = getelementptr inbounds float, ptr %f7.host, i64 %9697
  %9699 = load float, ptr %9698, align 4, !tbaa !53
  %9700 = insertelement <4 x float> %9696, float %9699, i64 3
  %9701 = fsub <4 x float> %9700, %9677
  %9702 = fmul <4 x float> %t2889.us, %9701
  %9703 = add nsw <4 x i32> %t2895.us, %9582
  %9704 = sext <4 x i32> %9703 to <4 x i64>
  %9705 = extractelement <4 x i64> %9704, i64 0
  %9706 = getelementptr inbounds float, ptr %f8.host, i64 %9705
  %9707 = load float, ptr %9706, align 4, !tbaa !35
  %9708 = insertelement <4 x float> undef, float %9707, i64 0
  %9709 = extractelement <4 x i64> %9704, i64 1
  %9710 = getelementptr inbounds float, ptr %f8.host, i64 %9709
  %9711 = load float, ptr %9710, align 4, !tbaa !35
  %9712 = insertelement <4 x float> %9708, float %9711, i64 1
  %9713 = extractelement <4 x i64> %9704, i64 2
  %9714 = getelementptr inbounds float, ptr %f8.host, i64 %9713
  %9715 = load float, ptr %9714, align 4, !tbaa !35
  %9716 = insertelement <4 x float> %9712, float %9715, i64 2
  %9717 = extractelement <4 x i64> %9704, i64 3
  %9718 = getelementptr inbounds float, ptr %f8.host, i64 %9717
  %9719 = load float, ptr %9718, align 4, !tbaa !35
  %9720 = insertelement <4 x float> %9716, float %9719, i64 3
  %9721 = fmul <4 x float> %9720, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9722 = add <4 x i32> %t2895.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %9723 = add <4 x i32> %9722, %9606
  %9724 = sext <4 x i32> %9723 to <4 x i64>
  %9725 = extractelement <4 x i64> %9724, i64 0
  %9726 = getelementptr inbounds float, ptr %f8.host, i64 %9725
  %9727 = load float, ptr %9726, align 4, !tbaa !35
  %9728 = insertelement <4 x float> undef, float %9727, i64 0
  %9729 = extractelement <4 x i64> %9724, i64 1
  %9730 = getelementptr inbounds float, ptr %f8.host, i64 %9729
  %9731 = load float, ptr %9730, align 4, !tbaa !35
  %9732 = insertelement <4 x float> %9728, float %9731, i64 1
  %9733 = extractelement <4 x i64> %9724, i64 2
  %9734 = getelementptr inbounds float, ptr %f8.host, i64 %9733
  %9735 = load float, ptr %9734, align 4, !tbaa !35
  %9736 = insertelement <4 x float> %9732, float %9735, i64 2
  %9737 = extractelement <4 x i64> %9724, i64 3
  %9738 = getelementptr inbounds float, ptr %f8.host, i64 %9737
  %9739 = load float, ptr %9738, align 4, !tbaa !35
  %9740 = insertelement <4 x float> %9736, float %9739, i64 3
  %9741 = fmul <4 x float> %9740, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9742 = fadd <4 x float> %9721, %9741
  %9743 = fmul <4 x float> %9742, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9744 = add nsw <4 x i32> %t2895.us, %9632
  %9745 = sext <4 x i32> %9744 to <4 x i64>
  %9746 = extractelement <4 x i64> %9745, i64 0
  %9747 = getelementptr inbounds float, ptr %f8.host, i64 %9746
  %9748 = load float, ptr %9747, align 4, !tbaa !35
  %9749 = insertelement <4 x float> undef, float %9748, i64 0
  %9750 = extractelement <4 x i64> %9745, i64 1
  %9751 = getelementptr inbounds float, ptr %f8.host, i64 %9750
  %9752 = load float, ptr %9751, align 4, !tbaa !35
  %9753 = insertelement <4 x float> %9749, float %9752, i64 1
  %9754 = extractelement <4 x i64> %9745, i64 2
  %9755 = getelementptr inbounds float, ptr %f8.host, i64 %9754
  %9756 = load float, ptr %9755, align 4, !tbaa !35
  %9757 = insertelement <4 x float> %9753, float %9756, i64 2
  %9758 = extractelement <4 x i64> %9745, i64 3
  %9759 = getelementptr inbounds float, ptr %f8.host, i64 %9758
  %9760 = load float, ptr %9759, align 4, !tbaa !35
  %9761 = insertelement <4 x float> %9757, float %9760, i64 3
  %9762 = fmul <4 x float> %9761, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9763 = add <4 x i32> %9722, %9655
  %9764 = sext <4 x i32> %9763 to <4 x i64>
  %9765 = extractelement <4 x i64> %9764, i64 0
  %9766 = getelementptr inbounds float, ptr %f8.host, i64 %9765
  %9767 = load float, ptr %9766, align 4, !tbaa !35
  %9768 = insertelement <4 x float> undef, float %9767, i64 0
  %9769 = extractelement <4 x i64> %9764, i64 1
  %9770 = getelementptr inbounds float, ptr %f8.host, i64 %9769
  %9771 = load float, ptr %9770, align 4, !tbaa !35
  %9772 = insertelement <4 x float> %9768, float %9771, i64 1
  %9773 = extractelement <4 x i64> %9764, i64 2
  %9774 = getelementptr inbounds float, ptr %f8.host, i64 %9773
  %9775 = load float, ptr %9774, align 4, !tbaa !35
  %9776 = insertelement <4 x float> %9772, float %9775, i64 2
  %9777 = extractelement <4 x i64> %9764, i64 3
  %9778 = getelementptr inbounds float, ptr %f8.host, i64 %9777
  %9779 = load float, ptr %9778, align 4, !tbaa !35
  %9780 = insertelement <4 x float> %9776, float %9779, i64 3
  %9781 = fmul <4 x float> %9780, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9782 = fadd <4 x float> %9762, %9781
  %9783 = fmul <4 x float> %9782, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9784 = fadd <4 x float> %9743, %9783
  %9785 = mul nsw <4 x i32> %t2892.us, %9167
  %9786 = add nsw <4 x i32> %9785, %9682
  %9787 = sext <4 x i32> %9786 to <4 x i64>
  %9788 = extractelement <4 x i64> %9787, i64 0
  %9789 = getelementptr inbounds float, ptr %f7.host, i64 %9788
  %9790 = load float, ptr %9789, align 4, !tbaa !53
  %9791 = insertelement <4 x float> undef, float %9790, i64 0
  %9792 = extractelement <4 x i64> %9787, i64 1
  %9793 = getelementptr inbounds float, ptr %f7.host, i64 %9792
  %9794 = load float, ptr %9793, align 4, !tbaa !53
  %9795 = insertelement <4 x float> %9791, float %9794, i64 1
  %9796 = extractelement <4 x i64> %9787, i64 2
  %9797 = getelementptr inbounds float, ptr %f7.host, i64 %9796
  %9798 = load float, ptr %9797, align 4, !tbaa !53
  %9799 = insertelement <4 x float> %9795, float %9798, i64 2
  %9800 = extractelement <4 x i64> %9787, i64 3
  %9801 = getelementptr inbounds float, ptr %f7.host, i64 %9800
  %9802 = load float, ptr %9801, align 4, !tbaa !53
  %9803 = insertelement <4 x float> %9799, float %9802, i64 3
  %9804 = fsub <4 x float> %9803, %9784
  %9805 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2889.us
  %9806 = fmul <4 x float> %9805, %9804
  %9807 = fadd <4 x float> %9702, %9806
  %9808 = sext i32 %9318 to i64
  %9809 = sub nsw i64 %9808, %4
  %9810 = add nsw i64 %9809, %9290
  %9811 = getelementptr inbounds float, ptr %f130.host, i64 %9810
  %9812 = load <4 x float>, ptr %9811, align 4, !tbaa !37
  %9813 = fmul <4 x float> %9812, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9814 = sext i32 %t2886.us to i64
  %9815 = sub nsw i64 %9814, %4
  %9816 = add nsw i64 %9291, %9815
  %9817 = getelementptr inbounds float, ptr %f130.host, i64 %9816
  %9818 = load <4 x float>, ptr %9817, align 4, !tbaa !37
  %9819 = fmul <4 x float> %9818, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9820 = fadd <4 x float> %9813, %9819
  %9821 = fmul <4 x float> %9820, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9822 = add nsw i64 %9809, %9292
  %9823 = getelementptr inbounds float, ptr %f130.host, i64 %9822
  %9824 = load <4 x float>, ptr %9823, align 4, !tbaa !37
  %9825 = fmul <4 x float> %9824, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9826 = add nsw i64 %9293, %9815
  %9827 = getelementptr inbounds float, ptr %f130.host, i64 %9826
  %9828 = load <4 x float>, ptr %9827, align 4, !tbaa !37
  %9829 = fmul <4 x float> %9828, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9830 = fadd <4 x float> %9825, %9829
  %9831 = fmul <4 x float> %9830, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9832 = fadd <4 x float> %9821, %9831
  %9833 = fadd <4 x float> %9807, %9832
  %9834 = shufflevector <4 x float> %9577, <4 x float> %9833, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %9835 = sext i32 %f129.s0.v3.v363.base151.us to i64
  %9836 = add i64 %9296, %9835
  %9837 = getelementptr inbounds float, ptr %9046, i64 %9836
  store <8 x float> %9834, ptr %9837, align 4, !tbaa !63
  %lsr.iv.next425.us = add nsw i32 %lsr.iv424.us, -1
  %lsr.iv.next427.us = add i32 %lsr.iv426.us, 8
  %.not96.us = icmp eq i32 %lsr.iv.next425.us, 0
  br i1 %.not96.us, label %"end for f129.s0.v3.v3149.loopexit.us", label %"for f129.s0.v3.v3148.us"

"end for f129.s0.v3.v3149.loopexit.us":           ; preds = %"for f129.s0.v3.v3148.us"
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %9838 = icmp eq i64 %indvars.iv, %sext
  br i1 %9838, label %"produce f128153", label %"for f129.s0.v4145.us"

"produce f128153":                                ; preds = %"end for f129.s0.v3.v3149.loopexit.us", %"produce f129143"
  %9839 = add nsw i32 %9249, 14
  %9840 = ashr i32 %9839, 3
  %.not79 = icmp sgt i32 %f128.s0.v4.min_2, %9840
  %brmerge446 = select i1 %.not79, i1 true, i1 %9174
  br i1 %brmerge446, label %"produce f127163", label %"for f128.s0.v4155.us.preheader", !prof !75

"for f128.s0.v4155.us.preheader":                 ; preds = %"produce f128153"
  %9841 = sext i32 %f128.s0.v4.min_2 to i64
  %sext296 = sext i32 %9840 to i64
  br label %"for f128.s0.v4155.us"

"for f128.s0.v4155.us":                           ; preds = %"for f128.s0.v4155.us.preheader", %"end for f128.s0.v3.v3159.loopexit.us"
  %indvars.iv294 = phi i64 [ %9841, %"for f128.s0.v4155.us.preheader" ], [ %indvars.iv.next295, %"end for f128.s0.v3.v3159.loopexit.us" ]
  %9842 = trunc i64 %indvars.iv294 to i32
  %9843 = shl i32 %9842, 1
  %9844 = and i32 %9843, 2
  %9845 = ashr i32 %9842, 1
  %t2901.us = add nsw i32 %9844, %9845
  %9846 = trunc i64 %indvars.iv294 to i32
  %9847 = sub i32 %9846, %f74.v4.min_realized
  %9848 = mul i32 %9847, %9175
  %9849 = sub i32 %9848, %f74.v3.min_realized
  %9850 = add nsw i32 %t2901.us, %9176
  %t2908.us = mul nsw i32 %9850, %117
  %9851 = sub nsw i32 %9845, %9171
  %t2910.us = mul nsw i32 %9851, %117
  %9852 = add i32 %t2901.us, %9177
  %9853 = mul nsw i32 %9852, %f7.stride.1
  %9854 = sub nsw i32 %9845, %f7.v4.min_realized
  %9855 = mul nsw i32 %9854, %f7.stride.1
  %9856 = sext i32 %t2910.us to i64
  %9857 = add nsw i64 %9856, -1
  %9858 = sext i32 %t2908.us to i64
  %9859 = add nsw i64 %9858, -1
  %9860 = sub nsw i64 %indvars.iv294, %9186
  %9861 = mul nsw i64 %9860, %9183
  %9862 = add i64 %9861, %.neg206
  %9863 = trunc i64 %indvars.iv294 to i32
  %9864 = sub i32 %9863, %f6.v4.min_realized
  %9865 = mul i32 %9864, %f6.stride.1
  br label %"for f128.s0.v3.v3158.us"

"for f128.s0.v3.v3158.us":                        ; preds = %"for f128.s0.v4155.us", %"for f128.s0.v3.v3158.us"
  %lsr.iv430.us = phi i32 [ %lsr.iv.next431.us, %"for f128.s0.v3.v3158.us" ], [ 0, %"for f128.s0.v4155.us" ]
  %lsr.iv428.us = phi i32 [ %lsr.iv.next429.us, %"for f128.s0.v3.v3158.us" ], [ %9173, %"for f128.s0.v4155.us" ]
  %9866 = add i32 %lsr.iv430.us, %99
  %f128.s0.v3.v343.base161.us = tail call i32 @llvm.smin.i32(i32 %b792, i32 %9866)
  %9867 = shl i32 %f128.s0.v3.v343.base161.us, 1
  %9868 = and i32 %9867, 2
  %9869 = ashr i32 %f128.s0.v3.v343.base161.us, 1
  %t2902.us = add nsw i32 %9868, %9869
  %t2903.us = add i32 %9849, %f128.s0.v3.v343.base161.us
  %9870 = sext i32 %t2903.us to i64
  %9871 = getelementptr inbounds float, ptr %f74.host, i64 %9870
  %9872 = load <4 x float>, ptr %9871, align 4, !tbaa !55
  %9873 = add nsw i64 %9870, 4
  %9874 = getelementptr inbounds float, ptr %f74.host, i64 %9873
  %9875 = load <4 x float>, ptr %9874, align 4, !tbaa !55
  %9876 = shufflevector <4 x float> %9872, <4 x float> %9875, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2904.us = fmul <4 x float> %9151, %9876
  %a1094.us = fptosi <4 x float> %t2904.us to <4 x i32>
  %a1097.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1094.us)
  %9877 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1097.us, <4 x i32> zeroinitializer)
  %9878 = sitofp <4 x i32> %9877 to <4 x float>
  %t2906.us = fsub <4 x float> %t2904.us, %9878
  %9879 = sub nsw i32 %f128.s0.v3.v343.base161.us, %f6.v3.min_realized
  %t2911.us = add nsw i32 %9879, %9865
  %t2913.us = sub nsw <4 x i32> %9877, %9160
  %9880 = sub nsw i32 %t2902.us, %f7.v3.min_realized
  %t2916.us = add nsw i32 %9880, %9853
  %t2917.us = mul nsw <4 x i32> %t2913.us, %9167
  %9881 = sub nsw i32 %9869, %f7.v3.min_realized
  %t2919.us = add nsw i32 %9881, %9853
  %t2921.us = add nsw i32 %9880, %9855
  %t2922.us = add nsw i32 %9881, %9855
  %9882 = add nsw <4 x i32> %t2913.us, <i32 1, i32 1, i32 1, i32 1>
  %t2923.us = mul nsw <4 x i32> %9882, %9167
  %9883 = add nsw i32 %f128.s0.v3.v343.base161.us, 1
  %9884 = shl i32 %9883, 1
  %9885 = and i32 %9884, 2
  %9886 = ashr i32 %9883, 1
  %t2924.us = add nsw i32 %9885, %9886
  %9887 = shufflevector <4 x float> %9872, <4 x float> %9875, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2925.us = fmul <4 x float> %9151, %9887
  %a1098.us = fptosi <4 x float> %t2925.us to <4 x i32>
  %a1101.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1098.us)
  %9888 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1101.us, <4 x i32> zeroinitializer)
  %9889 = sitofp <4 x i32> %9888 to <4 x float>
  %t2927.us = fsub <4 x float> %t2925.us, %9889
  %t2930.us = sub nsw <4 x i32> %9888, %9160
  %9890 = sub nsw i32 %t2924.us, %f7.v3.min_realized
  %t2932.us = add nsw i32 %9890, %9853
  %t2933.us = mul nsw <4 x i32> %t2930.us, %9167
  %9891 = sub nsw i32 %9886, %f7.v3.min_realized
  %t2935.us = add nsw i32 %9891, %9853
  %t2936.us = add nsw i32 %9890, %9855
  %t2937.us = add nsw i32 %9891, %9855
  %9892 = add nsw <4 x i32> %t2930.us, <i32 1, i32 1, i32 1, i32 1>
  %t2938.us = mul nsw <4 x i32> %9892, %9167
  %9893 = insertelement <4 x i32> undef, i32 %t2922.us, i64 0
  %9894 = shufflevector <4 x i32> %9893, <4 x i32> undef, <4 x i32> zeroinitializer
  %9895 = add nsw <4 x i32> %9894, <i32 0, i32 1, i32 2, i32 3>
  %9896 = add nsw <4 x i32> %t2923.us, %9895
  %9897 = sext <4 x i32> %9896 to <4 x i64>
  %9898 = extractelement <4 x i64> %9897, i64 0
  %9899 = getelementptr inbounds float, ptr %f7.host, i64 %9898
  %9900 = load float, ptr %9899, align 4, !tbaa !53
  %9901 = insertelement <4 x float> undef, float %9900, i64 0
  %9902 = extractelement <4 x i64> %9897, i64 1
  %9903 = getelementptr inbounds float, ptr %f7.host, i64 %9902
  %9904 = load float, ptr %9903, align 4, !tbaa !53
  %9905 = insertelement <4 x float> %9901, float %9904, i64 1
  %9906 = extractelement <4 x i64> %9897, i64 2
  %9907 = getelementptr inbounds float, ptr %f7.host, i64 %9906
  %9908 = load float, ptr %9907, align 4, !tbaa !53
  %9909 = insertelement <4 x float> %9905, float %9908, i64 2
  %9910 = extractelement <4 x i64> %9897, i64 3
  %9911 = getelementptr inbounds float, ptr %f7.host, i64 %9910
  %9912 = load float, ptr %9911, align 4, !tbaa !53
  %9913 = insertelement <4 x float> %9909, float %9912, i64 3
  %9914 = fmul <4 x float> %9913, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9915 = insertelement <4 x i32> undef, i32 %t2921.us, i64 0
  %9916 = shufflevector <4 x i32> %9915, <4 x i32> undef, <4 x i32> zeroinitializer
  %9917 = add <4 x i32> %9916, <i32 -1, i32 0, i32 1, i32 2>
  %9918 = add <4 x i32> %9917, %t2923.us
  %9919 = sext <4 x i32> %9918 to <4 x i64>
  %9920 = extractelement <4 x i64> %9919, i64 0
  %9921 = getelementptr inbounds float, ptr %f7.host, i64 %9920
  %9922 = load float, ptr %9921, align 4, !tbaa !53
  %9923 = insertelement <4 x float> undef, float %9922, i64 0
  %9924 = extractelement <4 x i64> %9919, i64 1
  %9925 = getelementptr inbounds float, ptr %f7.host, i64 %9924
  %9926 = load float, ptr %9925, align 4, !tbaa !53
  %9927 = insertelement <4 x float> %9923, float %9926, i64 1
  %9928 = extractelement <4 x i64> %9919, i64 2
  %9929 = getelementptr inbounds float, ptr %f7.host, i64 %9928
  %9930 = load float, ptr %9929, align 4, !tbaa !53
  %9931 = insertelement <4 x float> %9927, float %9930, i64 2
  %9932 = extractelement <4 x i64> %9919, i64 3
  %9933 = getelementptr inbounds float, ptr %f7.host, i64 %9932
  %9934 = load float, ptr %9933, align 4, !tbaa !53
  %9935 = insertelement <4 x float> %9931, float %9934, i64 3
  %9936 = fmul <4 x float> %9935, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9937 = fadd <4 x float> %9914, %9936
  %9938 = fmul <4 x float> %9937, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9939 = insertelement <4 x i32> undef, i32 %t2919.us, i64 0
  %9940 = shufflevector <4 x i32> %9939, <4 x i32> undef, <4 x i32> zeroinitializer
  %9941 = add nsw <4 x i32> %9940, <i32 0, i32 1, i32 2, i32 3>
  %9942 = add nsw <4 x i32> %t2923.us, %9941
  %9943 = sext <4 x i32> %9942 to <4 x i64>
  %9944 = extractelement <4 x i64> %9943, i64 0
  %9945 = getelementptr inbounds float, ptr %f7.host, i64 %9944
  %9946 = load float, ptr %9945, align 4, !tbaa !53
  %9947 = insertelement <4 x float> undef, float %9946, i64 0
  %9948 = extractelement <4 x i64> %9943, i64 1
  %9949 = getelementptr inbounds float, ptr %f7.host, i64 %9948
  %9950 = load float, ptr %9949, align 4, !tbaa !53
  %9951 = insertelement <4 x float> %9947, float %9950, i64 1
  %9952 = extractelement <4 x i64> %9943, i64 2
  %9953 = getelementptr inbounds float, ptr %f7.host, i64 %9952
  %9954 = load float, ptr %9953, align 4, !tbaa !53
  %9955 = insertelement <4 x float> %9951, float %9954, i64 2
  %9956 = extractelement <4 x i64> %9943, i64 3
  %9957 = getelementptr inbounds float, ptr %f7.host, i64 %9956
  %9958 = load float, ptr %9957, align 4, !tbaa !53
  %9959 = insertelement <4 x float> %9955, float %9958, i64 3
  %9960 = fmul <4 x float> %9959, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9961 = insertelement <4 x i32> undef, i32 %t2916.us, i64 0
  %9962 = shufflevector <4 x i32> %9961, <4 x i32> undef, <4 x i32> zeroinitializer
  %9963 = add <4 x i32> %9962, <i32 -1, i32 0, i32 1, i32 2>
  %9964 = add <4 x i32> %9963, %t2923.us
  %9965 = sext <4 x i32> %9964 to <4 x i64>
  %9966 = extractelement <4 x i64> %9965, i64 0
  %9967 = getelementptr inbounds float, ptr %f7.host, i64 %9966
  %9968 = load float, ptr %9967, align 4, !tbaa !53
  %9969 = insertelement <4 x float> undef, float %9968, i64 0
  %9970 = extractelement <4 x i64> %9965, i64 1
  %9971 = getelementptr inbounds float, ptr %f7.host, i64 %9970
  %9972 = load float, ptr %9971, align 4, !tbaa !53
  %9973 = insertelement <4 x float> %9969, float %9972, i64 1
  %9974 = extractelement <4 x i64> %9965, i64 2
  %9975 = getelementptr inbounds float, ptr %f7.host, i64 %9974
  %9976 = load float, ptr %9975, align 4, !tbaa !53
  %9977 = insertelement <4 x float> %9973, float %9976, i64 2
  %9978 = extractelement <4 x i64> %9965, i64 3
  %9979 = getelementptr inbounds float, ptr %f7.host, i64 %9978
  %9980 = load float, ptr %9979, align 4, !tbaa !53
  %9981 = insertelement <4 x float> %9977, float %9980, i64 3
  %9982 = fmul <4 x float> %9981, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9983 = fadd <4 x float> %9960, %9982
  %9984 = fmul <4 x float> %9983, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9985 = fadd <4 x float> %9938, %9984
  %9986 = mul nsw <4 x i32> %9882, %9180
  %9987 = insertelement <4 x i32> undef, i32 %t2911.us, i64 0
  %9988 = shufflevector <4 x i32> %9987, <4 x i32> undef, <4 x i32> zeroinitializer
  %9989 = add nsw <4 x i32> %9988, <i32 0, i32 2, i32 4, i32 6>
  %9990 = add nsw <4 x i32> %9986, %9989
  %9991 = sext <4 x i32> %9990 to <4 x i64>
  %9992 = extractelement <4 x i64> %9991, i64 0
  %9993 = getelementptr inbounds float, ptr %f6.host, i64 %9992
  %9994 = load float, ptr %9993, align 4, !tbaa !49
  %9995 = insertelement <4 x float> undef, float %9994, i64 0
  %9996 = extractelement <4 x i64> %9991, i64 1
  %9997 = getelementptr inbounds float, ptr %f6.host, i64 %9996
  %9998 = load float, ptr %9997, align 4, !tbaa !49
  %9999 = insertelement <4 x float> %9995, float %9998, i64 1
  %10000 = extractelement <4 x i64> %9991, i64 2
  %10001 = getelementptr inbounds float, ptr %f6.host, i64 %10000
  %10002 = load float, ptr %10001, align 4, !tbaa !49
  %10003 = insertelement <4 x float> %9999, float %10002, i64 2
  %10004 = extractelement <4 x i64> %9991, i64 3
  %10005 = getelementptr inbounds float, ptr %f6.host, i64 %10004
  %10006 = load float, ptr %10005, align 4, !tbaa !49
  %10007 = insertelement <4 x float> %10003, float %10006, i64 3
  %10008 = fsub <4 x float> %10007, %9985
  %10009 = fmul <4 x float> %t2906.us, %10008
  %10010 = add nsw <4 x i32> %t2917.us, %9895
  %10011 = sext <4 x i32> %10010 to <4 x i64>
  %10012 = extractelement <4 x i64> %10011, i64 0
  %10013 = getelementptr inbounds float, ptr %f7.host, i64 %10012
  %10014 = load float, ptr %10013, align 4, !tbaa !53
  %10015 = insertelement <4 x float> undef, float %10014, i64 0
  %10016 = extractelement <4 x i64> %10011, i64 1
  %10017 = getelementptr inbounds float, ptr %f7.host, i64 %10016
  %10018 = load float, ptr %10017, align 4, !tbaa !53
  %10019 = insertelement <4 x float> %10015, float %10018, i64 1
  %10020 = extractelement <4 x i64> %10011, i64 2
  %10021 = getelementptr inbounds float, ptr %f7.host, i64 %10020
  %10022 = load float, ptr %10021, align 4, !tbaa !53
  %10023 = insertelement <4 x float> %10019, float %10022, i64 2
  %10024 = extractelement <4 x i64> %10011, i64 3
  %10025 = getelementptr inbounds float, ptr %f7.host, i64 %10024
  %10026 = load float, ptr %10025, align 4, !tbaa !53
  %10027 = insertelement <4 x float> %10023, float %10026, i64 3
  %10028 = fmul <4 x float> %10027, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10029 = add <4 x i32> %t2917.us, %9916
  %10030 = add <4 x i32> %10029, <i32 -1, i32 0, i32 1, i32 2>
  %10031 = sext <4 x i32> %10030 to <4 x i64>
  %10032 = extractelement <4 x i64> %10031, i64 0
  %10033 = getelementptr inbounds float, ptr %f7.host, i64 %10032
  %10034 = load float, ptr %10033, align 4, !tbaa !53
  %10035 = insertelement <4 x float> undef, float %10034, i64 0
  %10036 = extractelement <4 x i64> %10031, i64 1
  %10037 = getelementptr inbounds float, ptr %f7.host, i64 %10036
  %10038 = load float, ptr %10037, align 4, !tbaa !53
  %10039 = insertelement <4 x float> %10035, float %10038, i64 1
  %10040 = extractelement <4 x i64> %10031, i64 2
  %10041 = getelementptr inbounds float, ptr %f7.host, i64 %10040
  %10042 = load float, ptr %10041, align 4, !tbaa !53
  %10043 = insertelement <4 x float> %10039, float %10042, i64 2
  %10044 = extractelement <4 x i64> %10031, i64 3
  %10045 = getelementptr inbounds float, ptr %f7.host, i64 %10044
  %10046 = load float, ptr %10045, align 4, !tbaa !53
  %10047 = insertelement <4 x float> %10043, float %10046, i64 3
  %10048 = fmul <4 x float> %10047, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10049 = fadd <4 x float> %10028, %10048
  %10050 = fmul <4 x float> %10049, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10051 = add nsw <4 x i32> %t2917.us, %9941
  %10052 = sext <4 x i32> %10051 to <4 x i64>
  %10053 = extractelement <4 x i64> %10052, i64 0
  %10054 = getelementptr inbounds float, ptr %f7.host, i64 %10053
  %10055 = load float, ptr %10054, align 4, !tbaa !53
  %10056 = insertelement <4 x float> undef, float %10055, i64 0
  %10057 = extractelement <4 x i64> %10052, i64 1
  %10058 = getelementptr inbounds float, ptr %f7.host, i64 %10057
  %10059 = load float, ptr %10058, align 4, !tbaa !53
  %10060 = insertelement <4 x float> %10056, float %10059, i64 1
  %10061 = extractelement <4 x i64> %10052, i64 2
  %10062 = getelementptr inbounds float, ptr %f7.host, i64 %10061
  %10063 = load float, ptr %10062, align 4, !tbaa !53
  %10064 = insertelement <4 x float> %10060, float %10063, i64 2
  %10065 = extractelement <4 x i64> %10052, i64 3
  %10066 = getelementptr inbounds float, ptr %f7.host, i64 %10065
  %10067 = load float, ptr %10066, align 4, !tbaa !53
  %10068 = insertelement <4 x float> %10064, float %10067, i64 3
  %10069 = fmul <4 x float> %10068, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10070 = add <4 x i32> %t2917.us, %9962
  %10071 = add <4 x i32> %10070, <i32 -1, i32 0, i32 1, i32 2>
  %10072 = sext <4 x i32> %10071 to <4 x i64>
  %10073 = extractelement <4 x i64> %10072, i64 0
  %10074 = getelementptr inbounds float, ptr %f7.host, i64 %10073
  %10075 = load float, ptr %10074, align 4, !tbaa !53
  %10076 = insertelement <4 x float> undef, float %10075, i64 0
  %10077 = extractelement <4 x i64> %10072, i64 1
  %10078 = getelementptr inbounds float, ptr %f7.host, i64 %10077
  %10079 = load float, ptr %10078, align 4, !tbaa !53
  %10080 = insertelement <4 x float> %10076, float %10079, i64 1
  %10081 = extractelement <4 x i64> %10072, i64 2
  %10082 = getelementptr inbounds float, ptr %f7.host, i64 %10081
  %10083 = load float, ptr %10082, align 4, !tbaa !53
  %10084 = insertelement <4 x float> %10080, float %10083, i64 2
  %10085 = extractelement <4 x i64> %10072, i64 3
  %10086 = getelementptr inbounds float, ptr %f7.host, i64 %10085
  %10087 = load float, ptr %10086, align 4, !tbaa !53
  %10088 = insertelement <4 x float> %10084, float %10087, i64 3
  %10089 = fmul <4 x float> %10088, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10090 = fadd <4 x float> %10069, %10089
  %10091 = fmul <4 x float> %10090, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10092 = fadd <4 x float> %10050, %10091
  %10093 = mul nsw <4 x i32> %t2913.us, %9180
  %10094 = add nsw <4 x i32> %10093, %9989
  %10095 = sext <4 x i32> %10094 to <4 x i64>
  %10096 = extractelement <4 x i64> %10095, i64 0
  %10097 = getelementptr inbounds float, ptr %f6.host, i64 %10096
  %10098 = load float, ptr %10097, align 4, !tbaa !49
  %10099 = insertelement <4 x float> undef, float %10098, i64 0
  %10100 = extractelement <4 x i64> %10095, i64 1
  %10101 = getelementptr inbounds float, ptr %f6.host, i64 %10100
  %10102 = load float, ptr %10101, align 4, !tbaa !49
  %10103 = insertelement <4 x float> %10099, float %10102, i64 1
  %10104 = extractelement <4 x i64> %10095, i64 2
  %10105 = getelementptr inbounds float, ptr %f6.host, i64 %10104
  %10106 = load float, ptr %10105, align 4, !tbaa !49
  %10107 = insertelement <4 x float> %10103, float %10106, i64 2
  %10108 = extractelement <4 x i64> %10095, i64 3
  %10109 = getelementptr inbounds float, ptr %f6.host, i64 %10108
  %10110 = load float, ptr %10109, align 4, !tbaa !49
  %10111 = insertelement <4 x float> %10107, float %10110, i64 3
  %10112 = fsub <4 x float> %10111, %10092
  %10113 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2906.us
  %10114 = fmul <4 x float> %10113, %10112
  %10115 = fadd <4 x float> %10009, %10114
  %narrow92.us = sub nsw i32 %9869, %f129.v3.min_realized
  %10116 = sext i32 %narrow92.us to i64
  %10117 = add nsw i64 %10116, %9856
  %10118 = getelementptr inbounds float, ptr %9046, i64 %10117
  %10119 = load <4 x float>, ptr %10118, align 4, !tbaa !63
  %10120 = fmul <4 x float> %10119, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10121 = sext i32 %t2902.us to i64
  %10122 = sub nsw i64 %10121, %9181
  %10123 = add nsw i64 %9857, %10122
  %10124 = getelementptr inbounds float, ptr %9046, i64 %10123
  %10125 = load <4 x float>, ptr %10124, align 4, !tbaa !63
  %10126 = fmul <4 x float> %10125, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10127 = fadd <4 x float> %10120, %10126
  %10128 = fmul <4 x float> %10127, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10129 = add nsw i64 %10116, %9858
  %10130 = getelementptr inbounds float, ptr %9046, i64 %10129
  %10131 = load <4 x float>, ptr %10130, align 4, !tbaa !63
  %10132 = fmul <4 x float> %10131, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10133 = add nsw i64 %9859, %10122
  %10134 = getelementptr inbounds float, ptr %9046, i64 %10133
  %10135 = load <4 x float>, ptr %10134, align 4, !tbaa !63
  %10136 = fmul <4 x float> %10135, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10137 = fadd <4 x float> %10132, %10136
  %10138 = fmul <4 x float> %10137, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10139 = fadd <4 x float> %10128, %10138
  %10140 = fadd <4 x float> %10115, %10139
  %10141 = insertelement <4 x i32> undef, i32 %t2937.us, i64 0
  %10142 = shufflevector <4 x i32> %10141, <4 x i32> undef, <4 x i32> zeroinitializer
  %10143 = add nsw <4 x i32> %10142, <i32 0, i32 1, i32 2, i32 3>
  %10144 = add nsw <4 x i32> %t2938.us, %10143
  %10145 = sext <4 x i32> %10144 to <4 x i64>
  %10146 = extractelement <4 x i64> %10145, i64 0
  %10147 = getelementptr inbounds float, ptr %f7.host, i64 %10146
  %10148 = load float, ptr %10147, align 4, !tbaa !53
  %10149 = insertelement <4 x float> undef, float %10148, i64 0
  %10150 = extractelement <4 x i64> %10145, i64 1
  %10151 = getelementptr inbounds float, ptr %f7.host, i64 %10150
  %10152 = load float, ptr %10151, align 4, !tbaa !53
  %10153 = insertelement <4 x float> %10149, float %10152, i64 1
  %10154 = extractelement <4 x i64> %10145, i64 2
  %10155 = getelementptr inbounds float, ptr %f7.host, i64 %10154
  %10156 = load float, ptr %10155, align 4, !tbaa !53
  %10157 = insertelement <4 x float> %10153, float %10156, i64 2
  %10158 = extractelement <4 x i64> %10145, i64 3
  %10159 = getelementptr inbounds float, ptr %f7.host, i64 %10158
  %10160 = load float, ptr %10159, align 4, !tbaa !53
  %10161 = insertelement <4 x float> %10157, float %10160, i64 3
  %10162 = fmul <4 x float> %10161, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10163 = insertelement <4 x i32> undef, i32 %t2936.us, i64 0
  %10164 = shufflevector <4 x i32> %10163, <4 x i32> undef, <4 x i32> zeroinitializer
  %10165 = add nsw <4 x i32> %10164, <i32 0, i32 1, i32 2, i32 3>
  %10166 = add <4 x i32> %t2938.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10167 = add <4 x i32> %10166, %10165
  %10168 = sext <4 x i32> %10167 to <4 x i64>
  %10169 = extractelement <4 x i64> %10168, i64 0
  %10170 = getelementptr inbounds float, ptr %f7.host, i64 %10169
  %10171 = load float, ptr %10170, align 4, !tbaa !53
  %10172 = insertelement <4 x float> undef, float %10171, i64 0
  %10173 = extractelement <4 x i64> %10168, i64 1
  %10174 = getelementptr inbounds float, ptr %f7.host, i64 %10173
  %10175 = load float, ptr %10174, align 4, !tbaa !53
  %10176 = insertelement <4 x float> %10172, float %10175, i64 1
  %10177 = extractelement <4 x i64> %10168, i64 2
  %10178 = getelementptr inbounds float, ptr %f7.host, i64 %10177
  %10179 = load float, ptr %10178, align 4, !tbaa !53
  %10180 = insertelement <4 x float> %10176, float %10179, i64 2
  %10181 = extractelement <4 x i64> %10168, i64 3
  %10182 = getelementptr inbounds float, ptr %f7.host, i64 %10181
  %10183 = load float, ptr %10182, align 4, !tbaa !53
  %10184 = insertelement <4 x float> %10180, float %10183, i64 3
  %10185 = fmul <4 x float> %10184, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10186 = fadd <4 x float> %10162, %10185
  %10187 = fmul <4 x float> %10186, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10188 = insertelement <4 x i32> undef, i32 %t2935.us, i64 0
  %10189 = shufflevector <4 x i32> %10188, <4 x i32> undef, <4 x i32> zeroinitializer
  %10190 = add nsw <4 x i32> %10189, <i32 0, i32 1, i32 2, i32 3>
  %10191 = add nsw <4 x i32> %t2938.us, %10190
  %10192 = sext <4 x i32> %10191 to <4 x i64>
  %10193 = extractelement <4 x i64> %10192, i64 0
  %10194 = getelementptr inbounds float, ptr %f7.host, i64 %10193
  %10195 = load float, ptr %10194, align 4, !tbaa !53
  %10196 = insertelement <4 x float> undef, float %10195, i64 0
  %10197 = extractelement <4 x i64> %10192, i64 1
  %10198 = getelementptr inbounds float, ptr %f7.host, i64 %10197
  %10199 = load float, ptr %10198, align 4, !tbaa !53
  %10200 = insertelement <4 x float> %10196, float %10199, i64 1
  %10201 = extractelement <4 x i64> %10192, i64 2
  %10202 = getelementptr inbounds float, ptr %f7.host, i64 %10201
  %10203 = load float, ptr %10202, align 4, !tbaa !53
  %10204 = insertelement <4 x float> %10200, float %10203, i64 2
  %10205 = extractelement <4 x i64> %10192, i64 3
  %10206 = getelementptr inbounds float, ptr %f7.host, i64 %10205
  %10207 = load float, ptr %10206, align 4, !tbaa !53
  %10208 = insertelement <4 x float> %10204, float %10207, i64 3
  %10209 = fmul <4 x float> %10208, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10210 = insertelement <4 x i32> undef, i32 %t2932.us, i64 0
  %10211 = shufflevector <4 x i32> %10210, <4 x i32> undef, <4 x i32> zeroinitializer
  %10212 = add nsw <4 x i32> %10211, <i32 0, i32 1, i32 2, i32 3>
  %10213 = add <4 x i32> %10166, %10212
  %10214 = sext <4 x i32> %10213 to <4 x i64>
  %10215 = extractelement <4 x i64> %10214, i64 0
  %10216 = getelementptr inbounds float, ptr %f7.host, i64 %10215
  %10217 = load float, ptr %10216, align 4, !tbaa !53
  %10218 = insertelement <4 x float> undef, float %10217, i64 0
  %10219 = extractelement <4 x i64> %10214, i64 1
  %10220 = getelementptr inbounds float, ptr %f7.host, i64 %10219
  %10221 = load float, ptr %10220, align 4, !tbaa !53
  %10222 = insertelement <4 x float> %10218, float %10221, i64 1
  %10223 = extractelement <4 x i64> %10214, i64 2
  %10224 = getelementptr inbounds float, ptr %f7.host, i64 %10223
  %10225 = load float, ptr %10224, align 4, !tbaa !53
  %10226 = insertelement <4 x float> %10222, float %10225, i64 2
  %10227 = extractelement <4 x i64> %10214, i64 3
  %10228 = getelementptr inbounds float, ptr %f7.host, i64 %10227
  %10229 = load float, ptr %10228, align 4, !tbaa !53
  %10230 = insertelement <4 x float> %10226, float %10229, i64 3
  %10231 = fmul <4 x float> %10230, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10232 = fadd <4 x float> %10209, %10231
  %10233 = fmul <4 x float> %10232, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10234 = fadd <4 x float> %10187, %10233
  %10235 = mul nsw <4 x i32> %9892, %9180
  %10236 = add nsw i32 %t2911.us, 1
  %10237 = insertelement <4 x i32> undef, i32 %10236, i64 0
  %10238 = shufflevector <4 x i32> %10237, <4 x i32> undef, <4 x i32> zeroinitializer
  %10239 = add nsw <4 x i32> %10238, <i32 0, i32 2, i32 4, i32 6>
  %10240 = add nsw <4 x i32> %10235, %10239
  %10241 = sext <4 x i32> %10240 to <4 x i64>
  %10242 = extractelement <4 x i64> %10241, i64 0
  %10243 = getelementptr inbounds float, ptr %f6.host, i64 %10242
  %10244 = load float, ptr %10243, align 4, !tbaa !49
  %10245 = insertelement <4 x float> undef, float %10244, i64 0
  %10246 = extractelement <4 x i64> %10241, i64 1
  %10247 = getelementptr inbounds float, ptr %f6.host, i64 %10246
  %10248 = load float, ptr %10247, align 4, !tbaa !49
  %10249 = insertelement <4 x float> %10245, float %10248, i64 1
  %10250 = extractelement <4 x i64> %10241, i64 2
  %10251 = getelementptr inbounds float, ptr %f6.host, i64 %10250
  %10252 = load float, ptr %10251, align 4, !tbaa !49
  %10253 = insertelement <4 x float> %10249, float %10252, i64 2
  %10254 = extractelement <4 x i64> %10241, i64 3
  %10255 = getelementptr inbounds float, ptr %f6.host, i64 %10254
  %10256 = load float, ptr %10255, align 4, !tbaa !49
  %10257 = insertelement <4 x float> %10253, float %10256, i64 3
  %10258 = fsub <4 x float> %10257, %10234
  %10259 = fmul <4 x float> %t2927.us, %10258
  %10260 = add nsw <4 x i32> %t2933.us, %10143
  %10261 = sext <4 x i32> %10260 to <4 x i64>
  %10262 = extractelement <4 x i64> %10261, i64 0
  %10263 = getelementptr inbounds float, ptr %f7.host, i64 %10262
  %10264 = load float, ptr %10263, align 4, !tbaa !53
  %10265 = insertelement <4 x float> undef, float %10264, i64 0
  %10266 = extractelement <4 x i64> %10261, i64 1
  %10267 = getelementptr inbounds float, ptr %f7.host, i64 %10266
  %10268 = load float, ptr %10267, align 4, !tbaa !53
  %10269 = insertelement <4 x float> %10265, float %10268, i64 1
  %10270 = extractelement <4 x i64> %10261, i64 2
  %10271 = getelementptr inbounds float, ptr %f7.host, i64 %10270
  %10272 = load float, ptr %10271, align 4, !tbaa !53
  %10273 = insertelement <4 x float> %10269, float %10272, i64 2
  %10274 = extractelement <4 x i64> %10261, i64 3
  %10275 = getelementptr inbounds float, ptr %f7.host, i64 %10274
  %10276 = load float, ptr %10275, align 4, !tbaa !53
  %10277 = insertelement <4 x float> %10273, float %10276, i64 3
  %10278 = fmul <4 x float> %10277, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10279 = add <4 x i32> %t2933.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10280 = add <4 x i32> %10279, %10165
  %10281 = sext <4 x i32> %10280 to <4 x i64>
  %10282 = extractelement <4 x i64> %10281, i64 0
  %10283 = getelementptr inbounds float, ptr %f7.host, i64 %10282
  %10284 = load float, ptr %10283, align 4, !tbaa !53
  %10285 = insertelement <4 x float> undef, float %10284, i64 0
  %10286 = extractelement <4 x i64> %10281, i64 1
  %10287 = getelementptr inbounds float, ptr %f7.host, i64 %10286
  %10288 = load float, ptr %10287, align 4, !tbaa !53
  %10289 = insertelement <4 x float> %10285, float %10288, i64 1
  %10290 = extractelement <4 x i64> %10281, i64 2
  %10291 = getelementptr inbounds float, ptr %f7.host, i64 %10290
  %10292 = load float, ptr %10291, align 4, !tbaa !53
  %10293 = insertelement <4 x float> %10289, float %10292, i64 2
  %10294 = extractelement <4 x i64> %10281, i64 3
  %10295 = getelementptr inbounds float, ptr %f7.host, i64 %10294
  %10296 = load float, ptr %10295, align 4, !tbaa !53
  %10297 = insertelement <4 x float> %10293, float %10296, i64 3
  %10298 = fmul <4 x float> %10297, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10299 = fadd <4 x float> %10278, %10298
  %10300 = fmul <4 x float> %10299, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10301 = add nsw <4 x i32> %t2933.us, %10190
  %10302 = sext <4 x i32> %10301 to <4 x i64>
  %10303 = extractelement <4 x i64> %10302, i64 0
  %10304 = getelementptr inbounds float, ptr %f7.host, i64 %10303
  %10305 = load float, ptr %10304, align 4, !tbaa !53
  %10306 = insertelement <4 x float> undef, float %10305, i64 0
  %10307 = extractelement <4 x i64> %10302, i64 1
  %10308 = getelementptr inbounds float, ptr %f7.host, i64 %10307
  %10309 = load float, ptr %10308, align 4, !tbaa !53
  %10310 = insertelement <4 x float> %10306, float %10309, i64 1
  %10311 = extractelement <4 x i64> %10302, i64 2
  %10312 = getelementptr inbounds float, ptr %f7.host, i64 %10311
  %10313 = load float, ptr %10312, align 4, !tbaa !53
  %10314 = insertelement <4 x float> %10310, float %10313, i64 2
  %10315 = extractelement <4 x i64> %10302, i64 3
  %10316 = getelementptr inbounds float, ptr %f7.host, i64 %10315
  %10317 = load float, ptr %10316, align 4, !tbaa !53
  %10318 = insertelement <4 x float> %10314, float %10317, i64 3
  %10319 = fmul <4 x float> %10318, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10320 = add <4 x i32> %10279, %10212
  %10321 = sext <4 x i32> %10320 to <4 x i64>
  %10322 = extractelement <4 x i64> %10321, i64 0
  %10323 = getelementptr inbounds float, ptr %f7.host, i64 %10322
  %10324 = load float, ptr %10323, align 4, !tbaa !53
  %10325 = insertelement <4 x float> undef, float %10324, i64 0
  %10326 = extractelement <4 x i64> %10321, i64 1
  %10327 = getelementptr inbounds float, ptr %f7.host, i64 %10326
  %10328 = load float, ptr %10327, align 4, !tbaa !53
  %10329 = insertelement <4 x float> %10325, float %10328, i64 1
  %10330 = extractelement <4 x i64> %10321, i64 2
  %10331 = getelementptr inbounds float, ptr %f7.host, i64 %10330
  %10332 = load float, ptr %10331, align 4, !tbaa !53
  %10333 = insertelement <4 x float> %10329, float %10332, i64 2
  %10334 = extractelement <4 x i64> %10321, i64 3
  %10335 = getelementptr inbounds float, ptr %f7.host, i64 %10334
  %10336 = load float, ptr %10335, align 4, !tbaa !53
  %10337 = insertelement <4 x float> %10333, float %10336, i64 3
  %10338 = fmul <4 x float> %10337, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10339 = fadd <4 x float> %10319, %10338
  %10340 = fmul <4 x float> %10339, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10341 = fadd <4 x float> %10300, %10340
  %10342 = mul nsw <4 x i32> %t2930.us, %9180
  %10343 = add nsw <4 x i32> %10342, %10239
  %10344 = sext <4 x i32> %10343 to <4 x i64>
  %10345 = extractelement <4 x i64> %10344, i64 0
  %10346 = getelementptr inbounds float, ptr %f6.host, i64 %10345
  %10347 = load float, ptr %10346, align 4, !tbaa !49
  %10348 = insertelement <4 x float> undef, float %10347, i64 0
  %10349 = extractelement <4 x i64> %10344, i64 1
  %10350 = getelementptr inbounds float, ptr %f6.host, i64 %10349
  %10351 = load float, ptr %10350, align 4, !tbaa !49
  %10352 = insertelement <4 x float> %10348, float %10351, i64 1
  %10353 = extractelement <4 x i64> %10344, i64 2
  %10354 = getelementptr inbounds float, ptr %f6.host, i64 %10353
  %10355 = load float, ptr %10354, align 4, !tbaa !49
  %10356 = insertelement <4 x float> %10352, float %10355, i64 2
  %10357 = extractelement <4 x i64> %10344, i64 3
  %10358 = getelementptr inbounds float, ptr %f6.host, i64 %10357
  %10359 = load float, ptr %10358, align 4, !tbaa !49
  %10360 = insertelement <4 x float> %10356, float %10359, i64 3
  %10361 = fsub <4 x float> %10360, %10341
  %10362 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2927.us
  %10363 = fmul <4 x float> %10362, %10361
  %10364 = fadd <4 x float> %10259, %10363
  %narrow93.us = sub nsw i32 %9886, %f129.v3.min_realized
  %10365 = sext i32 %narrow93.us to i64
  %10366 = add nsw i64 %10365, %9856
  %10367 = getelementptr inbounds float, ptr %9046, i64 %10366
  %10368 = load <4 x float>, ptr %10367, align 4, !tbaa !63
  %10369 = fmul <4 x float> %10368, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10370 = sext i32 %t2924.us to i64
  %10371 = sub nsw i64 %10370, %9181
  %10372 = add nsw i64 %9857, %10371
  %10373 = getelementptr inbounds float, ptr %9046, i64 %10372
  %10374 = load <4 x float>, ptr %10373, align 4, !tbaa !63
  %10375 = fmul <4 x float> %10374, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10376 = fadd <4 x float> %10369, %10375
  %10377 = fmul <4 x float> %10376, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10378 = add nsw i64 %10365, %9858
  %10379 = getelementptr inbounds float, ptr %9046, i64 %10378
  %10380 = load <4 x float>, ptr %10379, align 4, !tbaa !63
  %10381 = fmul <4 x float> %10380, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10382 = add nsw i64 %9859, %10371
  %10383 = getelementptr inbounds float, ptr %9046, i64 %10382
  %10384 = load <4 x float>, ptr %10383, align 4, !tbaa !63
  %10385 = fmul <4 x float> %10384, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10386 = fadd <4 x float> %10381, %10385
  %10387 = fmul <4 x float> %10386, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10388 = fadd <4 x float> %10377, %10387
  %10389 = fadd <4 x float> %10364, %10388
  %10390 = shufflevector <4 x float> %10140, <4 x float> %10389, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %10391 = sext i32 %f128.s0.v3.v343.base161.us to i64
  %10392 = add i64 %9862, %10391
  %10393 = getelementptr inbounds float, ptr %9069, i64 %10392
  store <8 x float> %10390, ptr %10393, align 4, !tbaa !65
  %lsr.iv.next429.us = add nsw i32 %lsr.iv428.us, -1
  %lsr.iv.next431.us = add i32 %lsr.iv430.us, 8
  %.not94.us = icmp eq i32 %lsr.iv.next429.us, 0
  br i1 %.not94.us, label %"end for f128.s0.v3.v3159.loopexit.us", label %"for f128.s0.v3.v3158.us"

"end for f128.s0.v3.v3159.loopexit.us":           ; preds = %"for f128.s0.v3.v3158.us"
  %indvars.iv.next295 = add nsw i64 %indvars.iv294, 1
  %10394 = icmp eq i64 %indvars.iv294, %sext296
  br i1 %10394, label %"produce f127163", label %"for f128.s0.v4155.us"

"produce f127163":                                ; preds = %"end for f128.s0.v3.v3159.loopexit.us", %"produce f128153"
  %10395 = add nsw i32 %9249, 6
  %10396 = ashr i32 %10395, 2
  %.not80 = icmp sgt i32 %f127.s0.v4.min_2, %10396
  %brmerge448 = select i1 %.not80, i1 true, i1 %9188
  br i1 %brmerge448, label %"produce f126173", label %"for f127.s0.v4165.us.preheader", !prof !75

"for f127.s0.v4165.us.preheader":                 ; preds = %"produce f127163"
  %10397 = sext i32 %f127.s0.v4.min_2 to i64
  %sext300 = sext i32 %10396 to i64
  br label %"for f127.s0.v4165.us"

"for f127.s0.v4165.us":                           ; preds = %"for f127.s0.v4165.us.preheader", %"end for f127.s0.v3.v3169.loopexit.us"
  %indvars.iv298 = phi i64 [ %10397, %"for f127.s0.v4165.us.preheader" ], [ %indvars.iv.next299, %"end for f127.s0.v3.v3169.loopexit.us" ]
  %10398 = trunc i64 %indvars.iv298 to i32
  %10399 = shl i32 %10398, 1
  %10400 = and i32 %10399, 2
  %10401 = ashr i32 %10398, 1
  %t2939.us = add nsw i32 %10400, %10401
  %10402 = trunc i64 %indvars.iv298 to i32
  %10403 = sub i32 %10402, %f73.v4.min_realized
  %10404 = mul i32 %10403, %9189
  %10405 = sub i32 %10404, %f73.v3.min_realized
  %10406 = add nsw i32 %t2939.us, %9190
  %t2946.us = mul nsw i32 %10406, %9062
  %10407 = sub nsw i32 %10401, %9185
  %t2948.us = mul nsw i32 %10407, %9062
  %10408 = add i32 %t2939.us, %9191
  %10409 = mul nsw i32 %10408, %f6.stride.1
  %10410 = sub nsw i32 %10401, %f6.v4.min_realized
  %10411 = mul nsw i32 %10410, %f6.stride.1
  %10412 = sext i32 %t2948.us to i64
  %10413 = add nsw i64 %10412, -1
  %10414 = sext i32 %t2946.us to i64
  %10415 = add nsw i64 %10414, -1
  %10416 = sub nsw i64 %indvars.iv298, %9198
  %10417 = mul nsw i64 %10416, %9197
  %10418 = sub i64 %10417, %9199
  %10419 = trunc i64 %indvars.iv298 to i32
  %10420 = sub i32 %10419, %f5.v4.min_realized
  %10421 = mul i32 %10420, %f5.stride.1
  br label %"for f127.s0.v3.v3168.us"

"for f127.s0.v3.v3168.us":                        ; preds = %"for f127.s0.v4165.us", %"for f127.s0.v3.v3168.us"
  %lsr.iv434.us = phi i32 [ %lsr.iv.next435.us, %"for f127.s0.v3.v3168.us" ], [ 0, %"for f127.s0.v4165.us" ]
  %lsr.iv432.us = phi i32 [ %lsr.iv.next433.us, %"for f127.s0.v3.v3168.us" ], [ %9187, %"for f127.s0.v4165.us" ]
  %10422 = add i32 %lsr.iv434.us, %9050
  %f127.s0.v3.v323.base171.us = tail call i32 @llvm.smin.i32(i32 %b1063, i32 %10422)
  %10423 = shl i32 %f127.s0.v3.v323.base171.us, 1
  %10424 = and i32 %10423, 2
  %10425 = ashr i32 %f127.s0.v3.v323.base171.us, 1
  %t2940.us = add nsw i32 %10424, %10425
  %t2941.us = add i32 %10405, %f127.s0.v3.v323.base171.us
  %10426 = sext i32 %t2941.us to i64
  %10427 = getelementptr inbounds float, ptr %f73.host, i64 %10426
  %10428 = load <4 x float>, ptr %10427, align 4, !tbaa !51
  %10429 = add nsw i64 %10426, 4
  %10430 = getelementptr inbounds float, ptr %f73.host, i64 %10429
  %10431 = load <4 x float>, ptr %10430, align 4, !tbaa !51
  %10432 = shufflevector <4 x float> %10428, <4 x float> %10431, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2942.us = fmul <4 x float> %9151, %10432
  %a1103.us = fptosi <4 x float> %t2942.us to <4 x i32>
  %a1106.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1103.us)
  %10433 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1106.us, <4 x i32> zeroinitializer)
  %10434 = sitofp <4 x i32> %10433 to <4 x float>
  %t2944.us = fsub <4 x float> %t2942.us, %10434
  %10435 = sub nsw i32 %f127.s0.v3.v323.base171.us, %f5.v3.min_realized
  %t2949.us = add nsw i32 %10435, %10421
  %t2951.us = sub nsw <4 x i32> %10433, %9160
  %10436 = sub nsw i32 %t2940.us, %f6.v3.min_realized
  %t2954.us = add nsw i32 %10436, %10409
  %t2955.us = mul nsw <4 x i32> %t2951.us, %9180
  %10437 = sub nsw i32 %10425, %f6.v3.min_realized
  %t2957.us = add nsw i32 %10437, %10409
  %t2959.us = add nsw i32 %10436, %10411
  %t2960.us = add nsw i32 %10437, %10411
  %10438 = add nsw <4 x i32> %t2951.us, <i32 1, i32 1, i32 1, i32 1>
  %t2961.us = mul nsw <4 x i32> %10438, %9180
  %10439 = add nsw i32 %f127.s0.v3.v323.base171.us, 1
  %10440 = shl i32 %10439, 1
  %10441 = and i32 %10440, 2
  %10442 = ashr i32 %10439, 1
  %t2962.us = add nsw i32 %10441, %10442
  %10443 = shufflevector <4 x float> %10428, <4 x float> %10431, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2963.us = fmul <4 x float> %9151, %10443
  %a1107.us = fptosi <4 x float> %t2963.us to <4 x i32>
  %a1110.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1107.us)
  %10444 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1110.us, <4 x i32> zeroinitializer)
  %10445 = sitofp <4 x i32> %10444 to <4 x float>
  %t2965.us = fsub <4 x float> %t2963.us, %10445
  %t2968.us = sub nsw <4 x i32> %10444, %9160
  %10446 = sub nsw i32 %t2962.us, %f6.v3.min_realized
  %t2970.us = add nsw i32 %10446, %10409
  %t2971.us = mul nsw <4 x i32> %t2968.us, %9180
  %10447 = sub nsw i32 %10442, %f6.v3.min_realized
  %t2973.us = add nsw i32 %10447, %10409
  %t2974.us = add nsw i32 %10446, %10411
  %t2975.us = add nsw i32 %10447, %10411
  %10448 = add nsw <4 x i32> %t2968.us, <i32 1, i32 1, i32 1, i32 1>
  %t2976.us = mul nsw <4 x i32> %10448, %9180
  %10449 = insertelement <4 x i32> undef, i32 %t2960.us, i64 0
  %10450 = shufflevector <4 x i32> %10449, <4 x i32> undef, <4 x i32> zeroinitializer
  %10451 = add nsw <4 x i32> %10450, <i32 0, i32 1, i32 2, i32 3>
  %10452 = add nsw <4 x i32> %t2961.us, %10451
  %10453 = sext <4 x i32> %10452 to <4 x i64>
  %10454 = extractelement <4 x i64> %10453, i64 0
  %10455 = getelementptr inbounds float, ptr %f6.host, i64 %10454
  %10456 = load float, ptr %10455, align 4, !tbaa !49
  %10457 = insertelement <4 x float> undef, float %10456, i64 0
  %10458 = extractelement <4 x i64> %10453, i64 1
  %10459 = getelementptr inbounds float, ptr %f6.host, i64 %10458
  %10460 = load float, ptr %10459, align 4, !tbaa !49
  %10461 = insertelement <4 x float> %10457, float %10460, i64 1
  %10462 = extractelement <4 x i64> %10453, i64 2
  %10463 = getelementptr inbounds float, ptr %f6.host, i64 %10462
  %10464 = load float, ptr %10463, align 4, !tbaa !49
  %10465 = insertelement <4 x float> %10461, float %10464, i64 2
  %10466 = extractelement <4 x i64> %10453, i64 3
  %10467 = getelementptr inbounds float, ptr %f6.host, i64 %10466
  %10468 = load float, ptr %10467, align 4, !tbaa !49
  %10469 = insertelement <4 x float> %10465, float %10468, i64 3
  %10470 = fmul <4 x float> %10469, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10471 = insertelement <4 x i32> undef, i32 %t2959.us, i64 0
  %10472 = shufflevector <4 x i32> %10471, <4 x i32> undef, <4 x i32> zeroinitializer
  %10473 = add <4 x i32> %10472, <i32 -1, i32 0, i32 1, i32 2>
  %10474 = add <4 x i32> %10473, %t2961.us
  %10475 = sext <4 x i32> %10474 to <4 x i64>
  %10476 = extractelement <4 x i64> %10475, i64 0
  %10477 = getelementptr inbounds float, ptr %f6.host, i64 %10476
  %10478 = load float, ptr %10477, align 4, !tbaa !49
  %10479 = insertelement <4 x float> undef, float %10478, i64 0
  %10480 = extractelement <4 x i64> %10475, i64 1
  %10481 = getelementptr inbounds float, ptr %f6.host, i64 %10480
  %10482 = load float, ptr %10481, align 4, !tbaa !49
  %10483 = insertelement <4 x float> %10479, float %10482, i64 1
  %10484 = extractelement <4 x i64> %10475, i64 2
  %10485 = getelementptr inbounds float, ptr %f6.host, i64 %10484
  %10486 = load float, ptr %10485, align 4, !tbaa !49
  %10487 = insertelement <4 x float> %10483, float %10486, i64 2
  %10488 = extractelement <4 x i64> %10475, i64 3
  %10489 = getelementptr inbounds float, ptr %f6.host, i64 %10488
  %10490 = load float, ptr %10489, align 4, !tbaa !49
  %10491 = insertelement <4 x float> %10487, float %10490, i64 3
  %10492 = fmul <4 x float> %10491, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10493 = fadd <4 x float> %10470, %10492
  %10494 = fmul <4 x float> %10493, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10495 = insertelement <4 x i32> undef, i32 %t2957.us, i64 0
  %10496 = shufflevector <4 x i32> %10495, <4 x i32> undef, <4 x i32> zeroinitializer
  %10497 = add nsw <4 x i32> %10496, <i32 0, i32 1, i32 2, i32 3>
  %10498 = add nsw <4 x i32> %t2961.us, %10497
  %10499 = sext <4 x i32> %10498 to <4 x i64>
  %10500 = extractelement <4 x i64> %10499, i64 0
  %10501 = getelementptr inbounds float, ptr %f6.host, i64 %10500
  %10502 = load float, ptr %10501, align 4, !tbaa !49
  %10503 = insertelement <4 x float> undef, float %10502, i64 0
  %10504 = extractelement <4 x i64> %10499, i64 1
  %10505 = getelementptr inbounds float, ptr %f6.host, i64 %10504
  %10506 = load float, ptr %10505, align 4, !tbaa !49
  %10507 = insertelement <4 x float> %10503, float %10506, i64 1
  %10508 = extractelement <4 x i64> %10499, i64 2
  %10509 = getelementptr inbounds float, ptr %f6.host, i64 %10508
  %10510 = load float, ptr %10509, align 4, !tbaa !49
  %10511 = insertelement <4 x float> %10507, float %10510, i64 2
  %10512 = extractelement <4 x i64> %10499, i64 3
  %10513 = getelementptr inbounds float, ptr %f6.host, i64 %10512
  %10514 = load float, ptr %10513, align 4, !tbaa !49
  %10515 = insertelement <4 x float> %10511, float %10514, i64 3
  %10516 = fmul <4 x float> %10515, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10517 = insertelement <4 x i32> undef, i32 %t2954.us, i64 0
  %10518 = shufflevector <4 x i32> %10517, <4 x i32> undef, <4 x i32> zeroinitializer
  %10519 = add <4 x i32> %10518, <i32 -1, i32 0, i32 1, i32 2>
  %10520 = add <4 x i32> %10519, %t2961.us
  %10521 = sext <4 x i32> %10520 to <4 x i64>
  %10522 = extractelement <4 x i64> %10521, i64 0
  %10523 = getelementptr inbounds float, ptr %f6.host, i64 %10522
  %10524 = load float, ptr %10523, align 4, !tbaa !49
  %10525 = insertelement <4 x float> undef, float %10524, i64 0
  %10526 = extractelement <4 x i64> %10521, i64 1
  %10527 = getelementptr inbounds float, ptr %f6.host, i64 %10526
  %10528 = load float, ptr %10527, align 4, !tbaa !49
  %10529 = insertelement <4 x float> %10525, float %10528, i64 1
  %10530 = extractelement <4 x i64> %10521, i64 2
  %10531 = getelementptr inbounds float, ptr %f6.host, i64 %10530
  %10532 = load float, ptr %10531, align 4, !tbaa !49
  %10533 = insertelement <4 x float> %10529, float %10532, i64 2
  %10534 = extractelement <4 x i64> %10521, i64 3
  %10535 = getelementptr inbounds float, ptr %f6.host, i64 %10534
  %10536 = load float, ptr %10535, align 4, !tbaa !49
  %10537 = insertelement <4 x float> %10533, float %10536, i64 3
  %10538 = fmul <4 x float> %10537, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10539 = fadd <4 x float> %10516, %10538
  %10540 = fmul <4 x float> %10539, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10541 = fadd <4 x float> %10494, %10540
  %10542 = mul nsw <4 x i32> %10438, %9194
  %10543 = insertelement <4 x i32> undef, i32 %t2949.us, i64 0
  %10544 = shufflevector <4 x i32> %10543, <4 x i32> undef, <4 x i32> zeroinitializer
  %10545 = add nsw <4 x i32> %10544, <i32 0, i32 2, i32 4, i32 6>
  %10546 = add nsw <4 x i32> %10542, %10545
  %10547 = sext <4 x i32> %10546 to <4 x i64>
  %10548 = extractelement <4 x i64> %10547, i64 0
  %10549 = getelementptr inbounds float, ptr %f5.host, i64 %10548
  %10550 = load float, ptr %10549, align 4, !tbaa !45
  %10551 = insertelement <4 x float> undef, float %10550, i64 0
  %10552 = extractelement <4 x i64> %10547, i64 1
  %10553 = getelementptr inbounds float, ptr %f5.host, i64 %10552
  %10554 = load float, ptr %10553, align 4, !tbaa !45
  %10555 = insertelement <4 x float> %10551, float %10554, i64 1
  %10556 = extractelement <4 x i64> %10547, i64 2
  %10557 = getelementptr inbounds float, ptr %f5.host, i64 %10556
  %10558 = load float, ptr %10557, align 4, !tbaa !45
  %10559 = insertelement <4 x float> %10555, float %10558, i64 2
  %10560 = extractelement <4 x i64> %10547, i64 3
  %10561 = getelementptr inbounds float, ptr %f5.host, i64 %10560
  %10562 = load float, ptr %10561, align 4, !tbaa !45
  %10563 = insertelement <4 x float> %10559, float %10562, i64 3
  %10564 = fsub <4 x float> %10563, %10541
  %10565 = fmul <4 x float> %t2944.us, %10564
  %10566 = add nsw <4 x i32> %t2955.us, %10451
  %10567 = sext <4 x i32> %10566 to <4 x i64>
  %10568 = extractelement <4 x i64> %10567, i64 0
  %10569 = getelementptr inbounds float, ptr %f6.host, i64 %10568
  %10570 = load float, ptr %10569, align 4, !tbaa !49
  %10571 = insertelement <4 x float> undef, float %10570, i64 0
  %10572 = extractelement <4 x i64> %10567, i64 1
  %10573 = getelementptr inbounds float, ptr %f6.host, i64 %10572
  %10574 = load float, ptr %10573, align 4, !tbaa !49
  %10575 = insertelement <4 x float> %10571, float %10574, i64 1
  %10576 = extractelement <4 x i64> %10567, i64 2
  %10577 = getelementptr inbounds float, ptr %f6.host, i64 %10576
  %10578 = load float, ptr %10577, align 4, !tbaa !49
  %10579 = insertelement <4 x float> %10575, float %10578, i64 2
  %10580 = extractelement <4 x i64> %10567, i64 3
  %10581 = getelementptr inbounds float, ptr %f6.host, i64 %10580
  %10582 = load float, ptr %10581, align 4, !tbaa !49
  %10583 = insertelement <4 x float> %10579, float %10582, i64 3
  %10584 = fmul <4 x float> %10583, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10585 = add <4 x i32> %t2955.us, %10472
  %10586 = add <4 x i32> %10585, <i32 -1, i32 0, i32 1, i32 2>
  %10587 = sext <4 x i32> %10586 to <4 x i64>
  %10588 = extractelement <4 x i64> %10587, i64 0
  %10589 = getelementptr inbounds float, ptr %f6.host, i64 %10588
  %10590 = load float, ptr %10589, align 4, !tbaa !49
  %10591 = insertelement <4 x float> undef, float %10590, i64 0
  %10592 = extractelement <4 x i64> %10587, i64 1
  %10593 = getelementptr inbounds float, ptr %f6.host, i64 %10592
  %10594 = load float, ptr %10593, align 4, !tbaa !49
  %10595 = insertelement <4 x float> %10591, float %10594, i64 1
  %10596 = extractelement <4 x i64> %10587, i64 2
  %10597 = getelementptr inbounds float, ptr %f6.host, i64 %10596
  %10598 = load float, ptr %10597, align 4, !tbaa !49
  %10599 = insertelement <4 x float> %10595, float %10598, i64 2
  %10600 = extractelement <4 x i64> %10587, i64 3
  %10601 = getelementptr inbounds float, ptr %f6.host, i64 %10600
  %10602 = load float, ptr %10601, align 4, !tbaa !49
  %10603 = insertelement <4 x float> %10599, float %10602, i64 3
  %10604 = fmul <4 x float> %10603, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10605 = fadd <4 x float> %10584, %10604
  %10606 = fmul <4 x float> %10605, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10607 = add nsw <4 x i32> %t2955.us, %10497
  %10608 = sext <4 x i32> %10607 to <4 x i64>
  %10609 = extractelement <4 x i64> %10608, i64 0
  %10610 = getelementptr inbounds float, ptr %f6.host, i64 %10609
  %10611 = load float, ptr %10610, align 4, !tbaa !49
  %10612 = insertelement <4 x float> undef, float %10611, i64 0
  %10613 = extractelement <4 x i64> %10608, i64 1
  %10614 = getelementptr inbounds float, ptr %f6.host, i64 %10613
  %10615 = load float, ptr %10614, align 4, !tbaa !49
  %10616 = insertelement <4 x float> %10612, float %10615, i64 1
  %10617 = extractelement <4 x i64> %10608, i64 2
  %10618 = getelementptr inbounds float, ptr %f6.host, i64 %10617
  %10619 = load float, ptr %10618, align 4, !tbaa !49
  %10620 = insertelement <4 x float> %10616, float %10619, i64 2
  %10621 = extractelement <4 x i64> %10608, i64 3
  %10622 = getelementptr inbounds float, ptr %f6.host, i64 %10621
  %10623 = load float, ptr %10622, align 4, !tbaa !49
  %10624 = insertelement <4 x float> %10620, float %10623, i64 3
  %10625 = fmul <4 x float> %10624, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10626 = add <4 x i32> %t2955.us, %10518
  %10627 = add <4 x i32> %10626, <i32 -1, i32 0, i32 1, i32 2>
  %10628 = sext <4 x i32> %10627 to <4 x i64>
  %10629 = extractelement <4 x i64> %10628, i64 0
  %10630 = getelementptr inbounds float, ptr %f6.host, i64 %10629
  %10631 = load float, ptr %10630, align 4, !tbaa !49
  %10632 = insertelement <4 x float> undef, float %10631, i64 0
  %10633 = extractelement <4 x i64> %10628, i64 1
  %10634 = getelementptr inbounds float, ptr %f6.host, i64 %10633
  %10635 = load float, ptr %10634, align 4, !tbaa !49
  %10636 = insertelement <4 x float> %10632, float %10635, i64 1
  %10637 = extractelement <4 x i64> %10628, i64 2
  %10638 = getelementptr inbounds float, ptr %f6.host, i64 %10637
  %10639 = load float, ptr %10638, align 4, !tbaa !49
  %10640 = insertelement <4 x float> %10636, float %10639, i64 2
  %10641 = extractelement <4 x i64> %10628, i64 3
  %10642 = getelementptr inbounds float, ptr %f6.host, i64 %10641
  %10643 = load float, ptr %10642, align 4, !tbaa !49
  %10644 = insertelement <4 x float> %10640, float %10643, i64 3
  %10645 = fmul <4 x float> %10644, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10646 = fadd <4 x float> %10625, %10645
  %10647 = fmul <4 x float> %10646, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10648 = fadd <4 x float> %10606, %10647
  %10649 = mul nsw <4 x i32> %t2951.us, %9194
  %10650 = add nsw <4 x i32> %10649, %10545
  %10651 = sext <4 x i32> %10650 to <4 x i64>
  %10652 = extractelement <4 x i64> %10651, i64 0
  %10653 = getelementptr inbounds float, ptr %f5.host, i64 %10652
  %10654 = load float, ptr %10653, align 4, !tbaa !45
  %10655 = insertelement <4 x float> undef, float %10654, i64 0
  %10656 = extractelement <4 x i64> %10651, i64 1
  %10657 = getelementptr inbounds float, ptr %f5.host, i64 %10656
  %10658 = load float, ptr %10657, align 4, !tbaa !45
  %10659 = insertelement <4 x float> %10655, float %10658, i64 1
  %10660 = extractelement <4 x i64> %10651, i64 2
  %10661 = getelementptr inbounds float, ptr %f5.host, i64 %10660
  %10662 = load float, ptr %10661, align 4, !tbaa !45
  %10663 = insertelement <4 x float> %10659, float %10662, i64 2
  %10664 = extractelement <4 x i64> %10651, i64 3
  %10665 = getelementptr inbounds float, ptr %f5.host, i64 %10664
  %10666 = load float, ptr %10665, align 4, !tbaa !45
  %10667 = insertelement <4 x float> %10663, float %10666, i64 3
  %10668 = fsub <4 x float> %10667, %10648
  %10669 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2944.us
  %10670 = fmul <4 x float> %10669, %10668
  %10671 = fadd <4 x float> %10565, %10670
  %narrow.us = sub nsw i32 %10425, %f128.v3.min_realized117
  %10672 = sext i32 %narrow.us to i64
  %10673 = add nsw i64 %10672, %10412
  %10674 = getelementptr inbounds float, ptr %9069, i64 %10673
  %10675 = load <4 x float>, ptr %10674, align 4, !tbaa !65
  %10676 = fmul <4 x float> %10675, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10677 = sext i32 %t2940.us to i64
  %10678 = sub nsw i64 %10677, %9195
  %10679 = add nsw i64 %10413, %10678
  %10680 = getelementptr inbounds float, ptr %9069, i64 %10679
  %10681 = load <4 x float>, ptr %10680, align 4, !tbaa !65
  %10682 = fmul <4 x float> %10681, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10683 = fadd <4 x float> %10676, %10682
  %10684 = fmul <4 x float> %10683, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10685 = add nsw i64 %10672, %10414
  %10686 = getelementptr inbounds float, ptr %9069, i64 %10685
  %10687 = load <4 x float>, ptr %10686, align 4, !tbaa !65
  %10688 = fmul <4 x float> %10687, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10689 = add nsw i64 %10415, %10678
  %10690 = getelementptr inbounds float, ptr %9069, i64 %10689
  %10691 = load <4 x float>, ptr %10690, align 4, !tbaa !65
  %10692 = fmul <4 x float> %10691, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10693 = fadd <4 x float> %10688, %10692
  %10694 = fmul <4 x float> %10693, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10695 = fadd <4 x float> %10684, %10694
  %10696 = fadd <4 x float> %10671, %10695
  %10697 = insertelement <4 x i32> undef, i32 %t2975.us, i64 0
  %10698 = shufflevector <4 x i32> %10697, <4 x i32> undef, <4 x i32> zeroinitializer
  %10699 = add nsw <4 x i32> %10698, <i32 0, i32 1, i32 2, i32 3>
  %10700 = add nsw <4 x i32> %t2976.us, %10699
  %10701 = sext <4 x i32> %10700 to <4 x i64>
  %10702 = extractelement <4 x i64> %10701, i64 0
  %10703 = getelementptr inbounds float, ptr %f6.host, i64 %10702
  %10704 = load float, ptr %10703, align 4, !tbaa !49
  %10705 = insertelement <4 x float> undef, float %10704, i64 0
  %10706 = extractelement <4 x i64> %10701, i64 1
  %10707 = getelementptr inbounds float, ptr %f6.host, i64 %10706
  %10708 = load float, ptr %10707, align 4, !tbaa !49
  %10709 = insertelement <4 x float> %10705, float %10708, i64 1
  %10710 = extractelement <4 x i64> %10701, i64 2
  %10711 = getelementptr inbounds float, ptr %f6.host, i64 %10710
  %10712 = load float, ptr %10711, align 4, !tbaa !49
  %10713 = insertelement <4 x float> %10709, float %10712, i64 2
  %10714 = extractelement <4 x i64> %10701, i64 3
  %10715 = getelementptr inbounds float, ptr %f6.host, i64 %10714
  %10716 = load float, ptr %10715, align 4, !tbaa !49
  %10717 = insertelement <4 x float> %10713, float %10716, i64 3
  %10718 = fmul <4 x float> %10717, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10719 = insertelement <4 x i32> undef, i32 %t2974.us, i64 0
  %10720 = shufflevector <4 x i32> %10719, <4 x i32> undef, <4 x i32> zeroinitializer
  %10721 = add nsw <4 x i32> %10720, <i32 0, i32 1, i32 2, i32 3>
  %10722 = add <4 x i32> %t2976.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10723 = add <4 x i32> %10722, %10721
  %10724 = sext <4 x i32> %10723 to <4 x i64>
  %10725 = extractelement <4 x i64> %10724, i64 0
  %10726 = getelementptr inbounds float, ptr %f6.host, i64 %10725
  %10727 = load float, ptr %10726, align 4, !tbaa !49
  %10728 = insertelement <4 x float> undef, float %10727, i64 0
  %10729 = extractelement <4 x i64> %10724, i64 1
  %10730 = getelementptr inbounds float, ptr %f6.host, i64 %10729
  %10731 = load float, ptr %10730, align 4, !tbaa !49
  %10732 = insertelement <4 x float> %10728, float %10731, i64 1
  %10733 = extractelement <4 x i64> %10724, i64 2
  %10734 = getelementptr inbounds float, ptr %f6.host, i64 %10733
  %10735 = load float, ptr %10734, align 4, !tbaa !49
  %10736 = insertelement <4 x float> %10732, float %10735, i64 2
  %10737 = extractelement <4 x i64> %10724, i64 3
  %10738 = getelementptr inbounds float, ptr %f6.host, i64 %10737
  %10739 = load float, ptr %10738, align 4, !tbaa !49
  %10740 = insertelement <4 x float> %10736, float %10739, i64 3
  %10741 = fmul <4 x float> %10740, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10742 = fadd <4 x float> %10718, %10741
  %10743 = fmul <4 x float> %10742, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10744 = insertelement <4 x i32> undef, i32 %t2973.us, i64 0
  %10745 = shufflevector <4 x i32> %10744, <4 x i32> undef, <4 x i32> zeroinitializer
  %10746 = add nsw <4 x i32> %10745, <i32 0, i32 1, i32 2, i32 3>
  %10747 = add nsw <4 x i32> %t2976.us, %10746
  %10748 = sext <4 x i32> %10747 to <4 x i64>
  %10749 = extractelement <4 x i64> %10748, i64 0
  %10750 = getelementptr inbounds float, ptr %f6.host, i64 %10749
  %10751 = load float, ptr %10750, align 4, !tbaa !49
  %10752 = insertelement <4 x float> undef, float %10751, i64 0
  %10753 = extractelement <4 x i64> %10748, i64 1
  %10754 = getelementptr inbounds float, ptr %f6.host, i64 %10753
  %10755 = load float, ptr %10754, align 4, !tbaa !49
  %10756 = insertelement <4 x float> %10752, float %10755, i64 1
  %10757 = extractelement <4 x i64> %10748, i64 2
  %10758 = getelementptr inbounds float, ptr %f6.host, i64 %10757
  %10759 = load float, ptr %10758, align 4, !tbaa !49
  %10760 = insertelement <4 x float> %10756, float %10759, i64 2
  %10761 = extractelement <4 x i64> %10748, i64 3
  %10762 = getelementptr inbounds float, ptr %f6.host, i64 %10761
  %10763 = load float, ptr %10762, align 4, !tbaa !49
  %10764 = insertelement <4 x float> %10760, float %10763, i64 3
  %10765 = fmul <4 x float> %10764, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10766 = insertelement <4 x i32> undef, i32 %t2970.us, i64 0
  %10767 = shufflevector <4 x i32> %10766, <4 x i32> undef, <4 x i32> zeroinitializer
  %10768 = add nsw <4 x i32> %10767, <i32 0, i32 1, i32 2, i32 3>
  %10769 = add <4 x i32> %10722, %10768
  %10770 = sext <4 x i32> %10769 to <4 x i64>
  %10771 = extractelement <4 x i64> %10770, i64 0
  %10772 = getelementptr inbounds float, ptr %f6.host, i64 %10771
  %10773 = load float, ptr %10772, align 4, !tbaa !49
  %10774 = insertelement <4 x float> undef, float %10773, i64 0
  %10775 = extractelement <4 x i64> %10770, i64 1
  %10776 = getelementptr inbounds float, ptr %f6.host, i64 %10775
  %10777 = load float, ptr %10776, align 4, !tbaa !49
  %10778 = insertelement <4 x float> %10774, float %10777, i64 1
  %10779 = extractelement <4 x i64> %10770, i64 2
  %10780 = getelementptr inbounds float, ptr %f6.host, i64 %10779
  %10781 = load float, ptr %10780, align 4, !tbaa !49
  %10782 = insertelement <4 x float> %10778, float %10781, i64 2
  %10783 = extractelement <4 x i64> %10770, i64 3
  %10784 = getelementptr inbounds float, ptr %f6.host, i64 %10783
  %10785 = load float, ptr %10784, align 4, !tbaa !49
  %10786 = insertelement <4 x float> %10782, float %10785, i64 3
  %10787 = fmul <4 x float> %10786, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10788 = fadd <4 x float> %10765, %10787
  %10789 = fmul <4 x float> %10788, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10790 = fadd <4 x float> %10743, %10789
  %10791 = mul nsw <4 x i32> %10448, %9194
  %10792 = add nsw i32 %t2949.us, 1
  %10793 = insertelement <4 x i32> undef, i32 %10792, i64 0
  %10794 = shufflevector <4 x i32> %10793, <4 x i32> undef, <4 x i32> zeroinitializer
  %10795 = add nsw <4 x i32> %10794, <i32 0, i32 2, i32 4, i32 6>
  %10796 = add nsw <4 x i32> %10791, %10795
  %10797 = sext <4 x i32> %10796 to <4 x i64>
  %10798 = extractelement <4 x i64> %10797, i64 0
  %10799 = getelementptr inbounds float, ptr %f5.host, i64 %10798
  %10800 = load float, ptr %10799, align 4, !tbaa !45
  %10801 = insertelement <4 x float> undef, float %10800, i64 0
  %10802 = extractelement <4 x i64> %10797, i64 1
  %10803 = getelementptr inbounds float, ptr %f5.host, i64 %10802
  %10804 = load float, ptr %10803, align 4, !tbaa !45
  %10805 = insertelement <4 x float> %10801, float %10804, i64 1
  %10806 = extractelement <4 x i64> %10797, i64 2
  %10807 = getelementptr inbounds float, ptr %f5.host, i64 %10806
  %10808 = load float, ptr %10807, align 4, !tbaa !45
  %10809 = insertelement <4 x float> %10805, float %10808, i64 2
  %10810 = extractelement <4 x i64> %10797, i64 3
  %10811 = getelementptr inbounds float, ptr %f5.host, i64 %10810
  %10812 = load float, ptr %10811, align 4, !tbaa !45
  %10813 = insertelement <4 x float> %10809, float %10812, i64 3
  %10814 = fsub <4 x float> %10813, %10790
  %10815 = fmul <4 x float> %t2965.us, %10814
  %10816 = add nsw <4 x i32> %t2971.us, %10699
  %10817 = sext <4 x i32> %10816 to <4 x i64>
  %10818 = extractelement <4 x i64> %10817, i64 0
  %10819 = getelementptr inbounds float, ptr %f6.host, i64 %10818
  %10820 = load float, ptr %10819, align 4, !tbaa !49
  %10821 = insertelement <4 x float> undef, float %10820, i64 0
  %10822 = extractelement <4 x i64> %10817, i64 1
  %10823 = getelementptr inbounds float, ptr %f6.host, i64 %10822
  %10824 = load float, ptr %10823, align 4, !tbaa !49
  %10825 = insertelement <4 x float> %10821, float %10824, i64 1
  %10826 = extractelement <4 x i64> %10817, i64 2
  %10827 = getelementptr inbounds float, ptr %f6.host, i64 %10826
  %10828 = load float, ptr %10827, align 4, !tbaa !49
  %10829 = insertelement <4 x float> %10825, float %10828, i64 2
  %10830 = extractelement <4 x i64> %10817, i64 3
  %10831 = getelementptr inbounds float, ptr %f6.host, i64 %10830
  %10832 = load float, ptr %10831, align 4, !tbaa !49
  %10833 = insertelement <4 x float> %10829, float %10832, i64 3
  %10834 = fmul <4 x float> %10833, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10835 = add <4 x i32> %t2971.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10836 = add <4 x i32> %10835, %10721
  %10837 = sext <4 x i32> %10836 to <4 x i64>
  %10838 = extractelement <4 x i64> %10837, i64 0
  %10839 = getelementptr inbounds float, ptr %f6.host, i64 %10838
  %10840 = load float, ptr %10839, align 4, !tbaa !49
  %10841 = insertelement <4 x float> undef, float %10840, i64 0
  %10842 = extractelement <4 x i64> %10837, i64 1
  %10843 = getelementptr inbounds float, ptr %f6.host, i64 %10842
  %10844 = load float, ptr %10843, align 4, !tbaa !49
  %10845 = insertelement <4 x float> %10841, float %10844, i64 1
  %10846 = extractelement <4 x i64> %10837, i64 2
  %10847 = getelementptr inbounds float, ptr %f6.host, i64 %10846
  %10848 = load float, ptr %10847, align 4, !tbaa !49
  %10849 = insertelement <4 x float> %10845, float %10848, i64 2
  %10850 = extractelement <4 x i64> %10837, i64 3
  %10851 = getelementptr inbounds float, ptr %f6.host, i64 %10850
  %10852 = load float, ptr %10851, align 4, !tbaa !49
  %10853 = insertelement <4 x float> %10849, float %10852, i64 3
  %10854 = fmul <4 x float> %10853, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10855 = fadd <4 x float> %10834, %10854
  %10856 = fmul <4 x float> %10855, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10857 = add nsw <4 x i32> %t2971.us, %10746
  %10858 = sext <4 x i32> %10857 to <4 x i64>
  %10859 = extractelement <4 x i64> %10858, i64 0
  %10860 = getelementptr inbounds float, ptr %f6.host, i64 %10859
  %10861 = load float, ptr %10860, align 4, !tbaa !49
  %10862 = insertelement <4 x float> undef, float %10861, i64 0
  %10863 = extractelement <4 x i64> %10858, i64 1
  %10864 = getelementptr inbounds float, ptr %f6.host, i64 %10863
  %10865 = load float, ptr %10864, align 4, !tbaa !49
  %10866 = insertelement <4 x float> %10862, float %10865, i64 1
  %10867 = extractelement <4 x i64> %10858, i64 2
  %10868 = getelementptr inbounds float, ptr %f6.host, i64 %10867
  %10869 = load float, ptr %10868, align 4, !tbaa !49
  %10870 = insertelement <4 x float> %10866, float %10869, i64 2
  %10871 = extractelement <4 x i64> %10858, i64 3
  %10872 = getelementptr inbounds float, ptr %f6.host, i64 %10871
  %10873 = load float, ptr %10872, align 4, !tbaa !49
  %10874 = insertelement <4 x float> %10870, float %10873, i64 3
  %10875 = fmul <4 x float> %10874, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10876 = add <4 x i32> %10835, %10768
  %10877 = sext <4 x i32> %10876 to <4 x i64>
  %10878 = extractelement <4 x i64> %10877, i64 0
  %10879 = getelementptr inbounds float, ptr %f6.host, i64 %10878
  %10880 = load float, ptr %10879, align 4, !tbaa !49
  %10881 = insertelement <4 x float> undef, float %10880, i64 0
  %10882 = extractelement <4 x i64> %10877, i64 1
  %10883 = getelementptr inbounds float, ptr %f6.host, i64 %10882
  %10884 = load float, ptr %10883, align 4, !tbaa !49
  %10885 = insertelement <4 x float> %10881, float %10884, i64 1
  %10886 = extractelement <4 x i64> %10877, i64 2
  %10887 = getelementptr inbounds float, ptr %f6.host, i64 %10886
  %10888 = load float, ptr %10887, align 4, !tbaa !49
  %10889 = insertelement <4 x float> %10885, float %10888, i64 2
  %10890 = extractelement <4 x i64> %10877, i64 3
  %10891 = getelementptr inbounds float, ptr %f6.host, i64 %10890
  %10892 = load float, ptr %10891, align 4, !tbaa !49
  %10893 = insertelement <4 x float> %10889, float %10892, i64 3
  %10894 = fmul <4 x float> %10893, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10895 = fadd <4 x float> %10875, %10894
  %10896 = fmul <4 x float> %10895, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10897 = fadd <4 x float> %10856, %10896
  %10898 = mul nsw <4 x i32> %t2968.us, %9194
  %10899 = add nsw <4 x i32> %10898, %10795
  %10900 = sext <4 x i32> %10899 to <4 x i64>
  %10901 = extractelement <4 x i64> %10900, i64 0
  %10902 = getelementptr inbounds float, ptr %f5.host, i64 %10901
  %10903 = load float, ptr %10902, align 4, !tbaa !45
  %10904 = insertelement <4 x float> undef, float %10903, i64 0
  %10905 = extractelement <4 x i64> %10900, i64 1
  %10906 = getelementptr inbounds float, ptr %f5.host, i64 %10905
  %10907 = load float, ptr %10906, align 4, !tbaa !45
  %10908 = insertelement <4 x float> %10904, float %10907, i64 1
  %10909 = extractelement <4 x i64> %10900, i64 2
  %10910 = getelementptr inbounds float, ptr %f5.host, i64 %10909
  %10911 = load float, ptr %10910, align 4, !tbaa !45
  %10912 = insertelement <4 x float> %10908, float %10911, i64 2
  %10913 = extractelement <4 x i64> %10900, i64 3
  %10914 = getelementptr inbounds float, ptr %f5.host, i64 %10913
  %10915 = load float, ptr %10914, align 4, !tbaa !45
  %10916 = insertelement <4 x float> %10912, float %10915, i64 3
  %10917 = fsub <4 x float> %10916, %10897
  %10918 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2965.us
  %10919 = fmul <4 x float> %10918, %10917
  %10920 = fadd <4 x float> %10815, %10919
  %narrow89.us = sub nsw i32 %10442, %f128.v3.min_realized117
  %10921 = sext i32 %narrow89.us to i64
  %10922 = add nsw i64 %10921, %10412
  %10923 = getelementptr inbounds float, ptr %9069, i64 %10922
  %10924 = load <4 x float>, ptr %10923, align 4, !tbaa !65
  %10925 = fmul <4 x float> %10924, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10926 = sext i32 %t2962.us to i64
  %10927 = sub nsw i64 %10926, %9195
  %10928 = add nsw i64 %10413, %10927
  %10929 = getelementptr inbounds float, ptr %9069, i64 %10928
  %10930 = load <4 x float>, ptr %10929, align 4, !tbaa !65
  %10931 = fmul <4 x float> %10930, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10932 = fadd <4 x float> %10925, %10931
  %10933 = fmul <4 x float> %10932, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10934 = add nsw i64 %10921, %10414
  %10935 = getelementptr inbounds float, ptr %9069, i64 %10934
  %10936 = load <4 x float>, ptr %10935, align 4, !tbaa !65
  %10937 = fmul <4 x float> %10936, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10938 = add nsw i64 %10415, %10927
  %10939 = getelementptr inbounds float, ptr %9069, i64 %10938
  %10940 = load <4 x float>, ptr %10939, align 4, !tbaa !65
  %10941 = fmul <4 x float> %10940, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10942 = fadd <4 x float> %10937, %10941
  %10943 = fmul <4 x float> %10942, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10944 = fadd <4 x float> %10933, %10943
  %10945 = fadd <4 x float> %10920, %10944
  %10946 = shufflevector <4 x float> %10696, <4 x float> %10945, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %10947 = sext i32 %f127.s0.v3.v323.base171.us to i64
  %10948 = add i64 %10418, %10947
  %10949 = getelementptr inbounds float, ptr %9108, i64 %10948
  store <8 x float> %10946, ptr %10949, align 4, !tbaa !67
  %lsr.iv.next433.us = add nsw i32 %lsr.iv432.us, -1
  %lsr.iv.next435.us = add i32 %lsr.iv434.us, 8
  %.not90.us = icmp eq i32 %lsr.iv.next433.us, 0
  br i1 %.not90.us, label %"end for f127.s0.v3.v3169.loopexit.us", label %"for f127.s0.v3.v3168.us"

"end for f127.s0.v3.v3169.loopexit.us":           ; preds = %"for f127.s0.v3.v3168.us"
  %indvars.iv.next299 = add nsw i64 %indvars.iv298, 1
  %10950 = icmp eq i64 %indvars.iv298, %sext300
  br i1 %10950, label %"produce f126173", label %"for f127.s0.v4165.us"

"produce f126173":                                ; preds = %"end for f127.s0.v3.v3169.loopexit.us", %"produce f127163"
  %10951 = add nsw i32 %9252, 2
  %10952 = icmp sge i32 %f126.s0.v4.min_2, %10951
  %brmerge451 = select i1 %10952, i1 true, i1 %9202
  br i1 %brmerge451, label %"consume f126182", label %"for f126.s0.v4175.us.preheader", !prof !75

"for f126.s0.v4175.us.preheader":                 ; preds = %"produce f126173"
  %10953 = sext i32 %f126.s0.v4.min_2 to i64
  %sext304 = sext i32 %10951 to i64
  br label %"for f126.s0.v4175.us"

"for f126.s0.v4175.us":                           ; preds = %"for f126.s0.v4175.us.preheader", %"end for f126.s0.v3.v3179.loopexit.us"
  %indvars.iv302 = phi i64 [ %10953, %"for f126.s0.v4175.us.preheader" ], [ %indvars.iv.next303, %"end for f126.s0.v3.v3179.loopexit.us" ]
  %10954 = trunc i64 %indvars.iv302 to i32
  %10955 = shl i32 %10954, 1
  %10956 = and i32 %10955, 2
  %10957 = ashr i32 %10954, 1
  %t2977.us = add nsw i32 %10956, %10957
  %10958 = trunc i64 %indvars.iv302 to i32
  %10959 = sub i32 %10958, %f72.v4.min_realized
  %10960 = mul i32 %10959, %9203
  %10961 = sub i32 %10960, %f72.v3.min_realized
  %10962 = add nsw i32 %t2977.us, %9204
  %t2984.us = mul nsw i32 %10962, %9093
  %10963 = sub nsw i32 %10957, %f127.v4.min_realized124
  %t2986.us = mul nsw i32 %10963, %9093
  %10964 = add i32 %t2977.us, %9205
  %10965 = mul nsw i32 %10964, %f5.stride.1
  %10966 = sub nsw i32 %10957, %f5.v4.min_realized
  %10967 = mul nsw i32 %10966, %f5.stride.1
  %10968 = sext i32 %t2986.us to i64
  %10969 = add nsw i64 %10968, -1
  %10970 = sext i32 %t2984.us to i64
  %10971 = add nsw i64 %10970, -1
  %10972 = sub nsw i64 %indvars.iv302, %9211
  %10973 = mul nsw i64 %10972, %9210
  %10974 = sub i64 %10973, %9212
  %10975 = trunc i64 %indvars.iv302 to i32
  %10976 = sub i32 %10975, %f4.v4.min_realized
  %10977 = mul i32 %10976, %f4.stride.1
  br label %"for f126.s0.v3.v3178.us"

"for f126.s0.v3.v3178.us":                        ; preds = %"for f126.s0.v4175.us", %"for f126.s0.v3.v3178.us"
  %lsr.iv438.us = phi i32 [ %lsr.iv.next439.us, %"for f126.s0.v3.v3178.us" ], [ -1, %"for f126.s0.v4175.us" ]
  %lsr.iv436.us = phi i32 [ %lsr.iv.next437.us, %"for f126.s0.v3.v3178.us" ], [ %9201, %"for f126.s0.v4175.us" ]
  %10978 = add i32 %lsr.iv438.us, %9076
  %f126.s0.v3.v303.base181.us = tail call i32 @llvm.smin.i32(i32 %b1068, i32 %10978)
  %10979 = shl i32 %f126.s0.v3.v303.base181.us, 1
  %10980 = and i32 %10979, 2
  %10981 = ashr i32 %f126.s0.v3.v303.base181.us, 1
  %t2978.us = add nsw i32 %10980, %10981
  %t2979.us = add i32 %10961, %f126.s0.v3.v303.base181.us
  %10982 = sext i32 %t2979.us to i64
  %10983 = getelementptr inbounds float, ptr %f72.host, i64 %10982
  %10984 = load <4 x float>, ptr %10983, align 4, !tbaa !47
  %10985 = add nsw i64 %10982, 4
  %10986 = getelementptr inbounds float, ptr %f72.host, i64 %10985
  %10987 = load <4 x float>, ptr %10986, align 4, !tbaa !47
  %10988 = shufflevector <4 x float> %10984, <4 x float> %10987, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2980.us = fmul <4 x float> %9151, %10988
  %a1112.us = fptosi <4 x float> %t2980.us to <4 x i32>
  %a1115.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1112.us)
  %10989 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1115.us, <4 x i32> zeroinitializer)
  %10990 = sitofp <4 x i32> %10989 to <4 x float>
  %t2982.us = fsub <4 x float> %t2980.us, %10990
  %10991 = sub nsw i32 %f126.s0.v3.v303.base181.us, %f4.v3.min_realized
  %t2987.us = add nsw i32 %10991, %10977
  %t2989.us = sub nsw <4 x i32> %10989, %9160
  %10992 = sub nsw i32 %t2978.us, %f5.v3.min_realized
  %t2992.us = add nsw i32 %10992, %10965
  %t2993.us = mul nsw <4 x i32> %t2989.us, %9194
  %10993 = sub nsw i32 %10981, %f5.v3.min_realized
  %t2995.us = add nsw i32 %10993, %10965
  %t2997.us = add nsw i32 %10992, %10967
  %t2998.us = add nsw i32 %10993, %10967
  %10994 = add nsw <4 x i32> %t2989.us, <i32 1, i32 1, i32 1, i32 1>
  %t2999.us = mul nsw <4 x i32> %10994, %9194
  %10995 = add nsw i32 %f126.s0.v3.v303.base181.us, 1
  %10996 = shl i32 %10995, 1
  %10997 = and i32 %10996, 2
  %10998 = ashr i32 %10995, 1
  %t3000.us = add nsw i32 %10997, %10998
  %10999 = shufflevector <4 x float> %10984, <4 x float> %10987, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t3001.us = fmul <4 x float> %9151, %10999
  %a1116.us = fptosi <4 x float> %t3001.us to <4 x i32>
  %a1119.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1116.us)
  %11000 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1119.us, <4 x i32> zeroinitializer)
  %11001 = sitofp <4 x i32> %11000 to <4 x float>
  %t3003.us = fsub <4 x float> %t3001.us, %11001
  %t3006.us = sub nsw <4 x i32> %11000, %9160
  %11002 = sub nsw i32 %t3000.us, %f5.v3.min_realized
  %t3008.us = add nsw i32 %11002, %10965
  %t3009.us = mul nsw <4 x i32> %t3006.us, %9194
  %11003 = sub nsw i32 %10998, %f5.v3.min_realized
  %t3011.us = add nsw i32 %11003, %10965
  %t3012.us = add nsw i32 %11002, %10967
  %t3013.us = add nsw i32 %11003, %10967
  %11004 = add nsw <4 x i32> %t3006.us, <i32 1, i32 1, i32 1, i32 1>
  %t3014.us = mul nsw <4 x i32> %11004, %9194
  %11005 = insertelement <4 x i32> undef, i32 %t2998.us, i64 0
  %11006 = shufflevector <4 x i32> %11005, <4 x i32> undef, <4 x i32> zeroinitializer
  %11007 = add nsw <4 x i32> %11006, <i32 0, i32 1, i32 2, i32 3>
  %11008 = add nsw <4 x i32> %t2999.us, %11007
  %11009 = sext <4 x i32> %11008 to <4 x i64>
  %11010 = extractelement <4 x i64> %11009, i64 0
  %11011 = getelementptr inbounds float, ptr %f5.host, i64 %11010
  %11012 = load float, ptr %11011, align 4, !tbaa !45
  %11013 = insertelement <4 x float> undef, float %11012, i64 0
  %11014 = extractelement <4 x i64> %11009, i64 1
  %11015 = getelementptr inbounds float, ptr %f5.host, i64 %11014
  %11016 = load float, ptr %11015, align 4, !tbaa !45
  %11017 = insertelement <4 x float> %11013, float %11016, i64 1
  %11018 = extractelement <4 x i64> %11009, i64 2
  %11019 = getelementptr inbounds float, ptr %f5.host, i64 %11018
  %11020 = load float, ptr %11019, align 4, !tbaa !45
  %11021 = insertelement <4 x float> %11017, float %11020, i64 2
  %11022 = extractelement <4 x i64> %11009, i64 3
  %11023 = getelementptr inbounds float, ptr %f5.host, i64 %11022
  %11024 = load float, ptr %11023, align 4, !tbaa !45
  %11025 = insertelement <4 x float> %11021, float %11024, i64 3
  %11026 = fmul <4 x float> %11025, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11027 = insertelement <4 x i32> undef, i32 %t2997.us, i64 0
  %11028 = shufflevector <4 x i32> %11027, <4 x i32> undef, <4 x i32> zeroinitializer
  %11029 = add <4 x i32> %11028, <i32 -1, i32 0, i32 1, i32 2>
  %11030 = add <4 x i32> %11029, %t2999.us
  %11031 = sext <4 x i32> %11030 to <4 x i64>
  %11032 = extractelement <4 x i64> %11031, i64 0
  %11033 = getelementptr inbounds float, ptr %f5.host, i64 %11032
  %11034 = load float, ptr %11033, align 4, !tbaa !45
  %11035 = insertelement <4 x float> undef, float %11034, i64 0
  %11036 = extractelement <4 x i64> %11031, i64 1
  %11037 = getelementptr inbounds float, ptr %f5.host, i64 %11036
  %11038 = load float, ptr %11037, align 4, !tbaa !45
  %11039 = insertelement <4 x float> %11035, float %11038, i64 1
  %11040 = extractelement <4 x i64> %11031, i64 2
  %11041 = getelementptr inbounds float, ptr %f5.host, i64 %11040
  %11042 = load float, ptr %11041, align 4, !tbaa !45
  %11043 = insertelement <4 x float> %11039, float %11042, i64 2
  %11044 = extractelement <4 x i64> %11031, i64 3
  %11045 = getelementptr inbounds float, ptr %f5.host, i64 %11044
  %11046 = load float, ptr %11045, align 4, !tbaa !45
  %11047 = insertelement <4 x float> %11043, float %11046, i64 3
  %11048 = fmul <4 x float> %11047, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11049 = fadd <4 x float> %11026, %11048
  %11050 = fmul <4 x float> %11049, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11051 = insertelement <4 x i32> undef, i32 %t2995.us, i64 0
  %11052 = shufflevector <4 x i32> %11051, <4 x i32> undef, <4 x i32> zeroinitializer
  %11053 = add nsw <4 x i32> %11052, <i32 0, i32 1, i32 2, i32 3>
  %11054 = add nsw <4 x i32> %t2999.us, %11053
  %11055 = sext <4 x i32> %11054 to <4 x i64>
  %11056 = extractelement <4 x i64> %11055, i64 0
  %11057 = getelementptr inbounds float, ptr %f5.host, i64 %11056
  %11058 = load float, ptr %11057, align 4, !tbaa !45
  %11059 = insertelement <4 x float> undef, float %11058, i64 0
  %11060 = extractelement <4 x i64> %11055, i64 1
  %11061 = getelementptr inbounds float, ptr %f5.host, i64 %11060
  %11062 = load float, ptr %11061, align 4, !tbaa !45
  %11063 = insertelement <4 x float> %11059, float %11062, i64 1
  %11064 = extractelement <4 x i64> %11055, i64 2
  %11065 = getelementptr inbounds float, ptr %f5.host, i64 %11064
  %11066 = load float, ptr %11065, align 4, !tbaa !45
  %11067 = insertelement <4 x float> %11063, float %11066, i64 2
  %11068 = extractelement <4 x i64> %11055, i64 3
  %11069 = getelementptr inbounds float, ptr %f5.host, i64 %11068
  %11070 = load float, ptr %11069, align 4, !tbaa !45
  %11071 = insertelement <4 x float> %11067, float %11070, i64 3
  %11072 = fmul <4 x float> %11071, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11073 = insertelement <4 x i32> undef, i32 %t2992.us, i64 0
  %11074 = shufflevector <4 x i32> %11073, <4 x i32> undef, <4 x i32> zeroinitializer
  %11075 = add <4 x i32> %11074, <i32 -1, i32 0, i32 1, i32 2>
  %11076 = add <4 x i32> %11075, %t2999.us
  %11077 = sext <4 x i32> %11076 to <4 x i64>
  %11078 = extractelement <4 x i64> %11077, i64 0
  %11079 = getelementptr inbounds float, ptr %f5.host, i64 %11078
  %11080 = load float, ptr %11079, align 4, !tbaa !45
  %11081 = insertelement <4 x float> undef, float %11080, i64 0
  %11082 = extractelement <4 x i64> %11077, i64 1
  %11083 = getelementptr inbounds float, ptr %f5.host, i64 %11082
  %11084 = load float, ptr %11083, align 4, !tbaa !45
  %11085 = insertelement <4 x float> %11081, float %11084, i64 1
  %11086 = extractelement <4 x i64> %11077, i64 2
  %11087 = getelementptr inbounds float, ptr %f5.host, i64 %11086
  %11088 = load float, ptr %11087, align 4, !tbaa !45
  %11089 = insertelement <4 x float> %11085, float %11088, i64 2
  %11090 = extractelement <4 x i64> %11077, i64 3
  %11091 = getelementptr inbounds float, ptr %f5.host, i64 %11090
  %11092 = load float, ptr %11091, align 4, !tbaa !45
  %11093 = insertelement <4 x float> %11089, float %11092, i64 3
  %11094 = fmul <4 x float> %11093, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11095 = fadd <4 x float> %11072, %11094
  %11096 = fmul <4 x float> %11095, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11097 = fadd <4 x float> %11050, %11096
  %11098 = mul nsw <4 x i32> %10994, %9208
  %11099 = insertelement <4 x i32> undef, i32 %t2987.us, i64 0
  %11100 = shufflevector <4 x i32> %11099, <4 x i32> undef, <4 x i32> zeroinitializer
  %11101 = add nsw <4 x i32> %11100, <i32 0, i32 2, i32 4, i32 6>
  %11102 = add nsw <4 x i32> %11098, %11101
  %11103 = sext <4 x i32> %11102 to <4 x i64>
  %11104 = extractelement <4 x i64> %11103, i64 0
  %11105 = getelementptr inbounds float, ptr %f4.host, i64 %11104
  %11106 = load float, ptr %11105, align 4, !tbaa !43
  %11107 = insertelement <4 x float> undef, float %11106, i64 0
  %11108 = extractelement <4 x i64> %11103, i64 1
  %11109 = getelementptr inbounds float, ptr %f4.host, i64 %11108
  %11110 = load float, ptr %11109, align 4, !tbaa !43
  %11111 = insertelement <4 x float> %11107, float %11110, i64 1
  %11112 = extractelement <4 x i64> %11103, i64 2
  %11113 = getelementptr inbounds float, ptr %f4.host, i64 %11112
  %11114 = load float, ptr %11113, align 4, !tbaa !43
  %11115 = insertelement <4 x float> %11111, float %11114, i64 2
  %11116 = extractelement <4 x i64> %11103, i64 3
  %11117 = getelementptr inbounds float, ptr %f4.host, i64 %11116
  %11118 = load float, ptr %11117, align 4, !tbaa !43
  %11119 = insertelement <4 x float> %11115, float %11118, i64 3
  %11120 = fsub <4 x float> %11119, %11097
  %11121 = fmul <4 x float> %t2982.us, %11120
  %11122 = add nsw <4 x i32> %t2993.us, %11007
  %11123 = sext <4 x i32> %11122 to <4 x i64>
  %11124 = extractelement <4 x i64> %11123, i64 0
  %11125 = getelementptr inbounds float, ptr %f5.host, i64 %11124
  %11126 = load float, ptr %11125, align 4, !tbaa !45
  %11127 = insertelement <4 x float> undef, float %11126, i64 0
  %11128 = extractelement <4 x i64> %11123, i64 1
  %11129 = getelementptr inbounds float, ptr %f5.host, i64 %11128
  %11130 = load float, ptr %11129, align 4, !tbaa !45
  %11131 = insertelement <4 x float> %11127, float %11130, i64 1
  %11132 = extractelement <4 x i64> %11123, i64 2
  %11133 = getelementptr inbounds float, ptr %f5.host, i64 %11132
  %11134 = load float, ptr %11133, align 4, !tbaa !45
  %11135 = insertelement <4 x float> %11131, float %11134, i64 2
  %11136 = extractelement <4 x i64> %11123, i64 3
  %11137 = getelementptr inbounds float, ptr %f5.host, i64 %11136
  %11138 = load float, ptr %11137, align 4, !tbaa !45
  %11139 = insertelement <4 x float> %11135, float %11138, i64 3
  %11140 = fmul <4 x float> %11139, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11141 = add <4 x i32> %t2993.us, %11028
  %11142 = add <4 x i32> %11141, <i32 -1, i32 0, i32 1, i32 2>
  %11143 = sext <4 x i32> %11142 to <4 x i64>
  %11144 = extractelement <4 x i64> %11143, i64 0
  %11145 = getelementptr inbounds float, ptr %f5.host, i64 %11144
  %11146 = load float, ptr %11145, align 4, !tbaa !45
  %11147 = insertelement <4 x float> undef, float %11146, i64 0
  %11148 = extractelement <4 x i64> %11143, i64 1
  %11149 = getelementptr inbounds float, ptr %f5.host, i64 %11148
  %11150 = load float, ptr %11149, align 4, !tbaa !45
  %11151 = insertelement <4 x float> %11147, float %11150, i64 1
  %11152 = extractelement <4 x i64> %11143, i64 2
  %11153 = getelementptr inbounds float, ptr %f5.host, i64 %11152
  %11154 = load float, ptr %11153, align 4, !tbaa !45
  %11155 = insertelement <4 x float> %11151, float %11154, i64 2
  %11156 = extractelement <4 x i64> %11143, i64 3
  %11157 = getelementptr inbounds float, ptr %f5.host, i64 %11156
  %11158 = load float, ptr %11157, align 4, !tbaa !45
  %11159 = insertelement <4 x float> %11155, float %11158, i64 3
  %11160 = fmul <4 x float> %11159, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11161 = fadd <4 x float> %11140, %11160
  %11162 = fmul <4 x float> %11161, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11163 = add nsw <4 x i32> %t2993.us, %11053
  %11164 = sext <4 x i32> %11163 to <4 x i64>
  %11165 = extractelement <4 x i64> %11164, i64 0
  %11166 = getelementptr inbounds float, ptr %f5.host, i64 %11165
  %11167 = load float, ptr %11166, align 4, !tbaa !45
  %11168 = insertelement <4 x float> undef, float %11167, i64 0
  %11169 = extractelement <4 x i64> %11164, i64 1
  %11170 = getelementptr inbounds float, ptr %f5.host, i64 %11169
  %11171 = load float, ptr %11170, align 4, !tbaa !45
  %11172 = insertelement <4 x float> %11168, float %11171, i64 1
  %11173 = extractelement <4 x i64> %11164, i64 2
  %11174 = getelementptr inbounds float, ptr %f5.host, i64 %11173
  %11175 = load float, ptr %11174, align 4, !tbaa !45
  %11176 = insertelement <4 x float> %11172, float %11175, i64 2
  %11177 = extractelement <4 x i64> %11164, i64 3
  %11178 = getelementptr inbounds float, ptr %f5.host, i64 %11177
  %11179 = load float, ptr %11178, align 4, !tbaa !45
  %11180 = insertelement <4 x float> %11176, float %11179, i64 3
  %11181 = fmul <4 x float> %11180, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11182 = add <4 x i32> %t2993.us, %11074
  %11183 = add <4 x i32> %11182, <i32 -1, i32 0, i32 1, i32 2>
  %11184 = sext <4 x i32> %11183 to <4 x i64>
  %11185 = extractelement <4 x i64> %11184, i64 0
  %11186 = getelementptr inbounds float, ptr %f5.host, i64 %11185
  %11187 = load float, ptr %11186, align 4, !tbaa !45
  %11188 = insertelement <4 x float> undef, float %11187, i64 0
  %11189 = extractelement <4 x i64> %11184, i64 1
  %11190 = getelementptr inbounds float, ptr %f5.host, i64 %11189
  %11191 = load float, ptr %11190, align 4, !tbaa !45
  %11192 = insertelement <4 x float> %11188, float %11191, i64 1
  %11193 = extractelement <4 x i64> %11184, i64 2
  %11194 = getelementptr inbounds float, ptr %f5.host, i64 %11193
  %11195 = load float, ptr %11194, align 4, !tbaa !45
  %11196 = insertelement <4 x float> %11192, float %11195, i64 2
  %11197 = extractelement <4 x i64> %11184, i64 3
  %11198 = getelementptr inbounds float, ptr %f5.host, i64 %11197
  %11199 = load float, ptr %11198, align 4, !tbaa !45
  %11200 = insertelement <4 x float> %11196, float %11199, i64 3
  %11201 = fmul <4 x float> %11200, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11202 = fadd <4 x float> %11181, %11201
  %11203 = fmul <4 x float> %11202, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11204 = fadd <4 x float> %11162, %11203
  %11205 = mul nsw <4 x i32> %t2989.us, %9208
  %11206 = add nsw <4 x i32> %11205, %11101
  %11207 = sext <4 x i32> %11206 to <4 x i64>
  %11208 = extractelement <4 x i64> %11207, i64 0
  %11209 = getelementptr inbounds float, ptr %f4.host, i64 %11208
  %11210 = load float, ptr %11209, align 4, !tbaa !43
  %11211 = insertelement <4 x float> undef, float %11210, i64 0
  %11212 = extractelement <4 x i64> %11207, i64 1
  %11213 = getelementptr inbounds float, ptr %f4.host, i64 %11212
  %11214 = load float, ptr %11213, align 4, !tbaa !43
  %11215 = insertelement <4 x float> %11211, float %11214, i64 1
  %11216 = extractelement <4 x i64> %11207, i64 2
  %11217 = getelementptr inbounds float, ptr %f4.host, i64 %11216
  %11218 = load float, ptr %11217, align 4, !tbaa !43
  %11219 = insertelement <4 x float> %11215, float %11218, i64 2
  %11220 = extractelement <4 x i64> %11207, i64 3
  %11221 = getelementptr inbounds float, ptr %f4.host, i64 %11220
  %11222 = load float, ptr %11221, align 4, !tbaa !43
  %11223 = insertelement <4 x float> %11219, float %11222, i64 3
  %11224 = fsub <4 x float> %11223, %11204
  %11225 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2982.us
  %11226 = fmul <4 x float> %11225, %11224
  %11227 = fadd <4 x float> %11121, %11226
  %11228 = sext i32 %10981 to i64
  %11229 = sub nsw i64 %11228, %9199
  %11230 = add nsw i64 %11229, %10968
  %11231 = getelementptr inbounds float, ptr %9108, i64 %11230
  %11232 = load <4 x float>, ptr %11231, align 4, !tbaa !67
  %11233 = fmul <4 x float> %11232, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11234 = sext i32 %t2978.us to i64
  %11235 = sub nsw i64 %11234, %9199
  %11236 = add nsw i64 %10969, %11235
  %11237 = getelementptr inbounds float, ptr %9108, i64 %11236
  %11238 = load <4 x float>, ptr %11237, align 4, !tbaa !67
  %11239 = fmul <4 x float> %11238, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11240 = fadd <4 x float> %11233, %11239
  %11241 = fmul <4 x float> %11240, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11242 = add nsw i64 %11229, %10970
  %11243 = getelementptr inbounds float, ptr %9108, i64 %11242
  %11244 = load <4 x float>, ptr %11243, align 4, !tbaa !67
  %11245 = fmul <4 x float> %11244, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11246 = add nsw i64 %10971, %11235
  %11247 = getelementptr inbounds float, ptr %9108, i64 %11246
  %11248 = load <4 x float>, ptr %11247, align 4, !tbaa !67
  %11249 = fmul <4 x float> %11248, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11250 = fadd <4 x float> %11245, %11249
  %11251 = fmul <4 x float> %11250, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11252 = fadd <4 x float> %11241, %11251
  %11253 = fadd <4 x float> %11227, %11252
  %11254 = insertelement <4 x i32> undef, i32 %t3013.us, i64 0
  %11255 = shufflevector <4 x i32> %11254, <4 x i32> undef, <4 x i32> zeroinitializer
  %11256 = add nsw <4 x i32> %11255, <i32 0, i32 1, i32 2, i32 3>
  %11257 = add nsw <4 x i32> %t3014.us, %11256
  %11258 = sext <4 x i32> %11257 to <4 x i64>
  %11259 = extractelement <4 x i64> %11258, i64 0
  %11260 = getelementptr inbounds float, ptr %f5.host, i64 %11259
  %11261 = load float, ptr %11260, align 4, !tbaa !45
  %11262 = insertelement <4 x float> undef, float %11261, i64 0
  %11263 = extractelement <4 x i64> %11258, i64 1
  %11264 = getelementptr inbounds float, ptr %f5.host, i64 %11263
  %11265 = load float, ptr %11264, align 4, !tbaa !45
  %11266 = insertelement <4 x float> %11262, float %11265, i64 1
  %11267 = extractelement <4 x i64> %11258, i64 2
  %11268 = getelementptr inbounds float, ptr %f5.host, i64 %11267
  %11269 = load float, ptr %11268, align 4, !tbaa !45
  %11270 = insertelement <4 x float> %11266, float %11269, i64 2
  %11271 = extractelement <4 x i64> %11258, i64 3
  %11272 = getelementptr inbounds float, ptr %f5.host, i64 %11271
  %11273 = load float, ptr %11272, align 4, !tbaa !45
  %11274 = insertelement <4 x float> %11270, float %11273, i64 3
  %11275 = fmul <4 x float> %11274, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11276 = insertelement <4 x i32> undef, i32 %t3012.us, i64 0
  %11277 = shufflevector <4 x i32> %11276, <4 x i32> undef, <4 x i32> zeroinitializer
  %11278 = add nsw <4 x i32> %11277, <i32 0, i32 1, i32 2, i32 3>
  %11279 = add <4 x i32> %t3014.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %11280 = add <4 x i32> %11279, %11278
  %11281 = sext <4 x i32> %11280 to <4 x i64>
  %11282 = extractelement <4 x i64> %11281, i64 0
  %11283 = getelementptr inbounds float, ptr %f5.host, i64 %11282
  %11284 = load float, ptr %11283, align 4, !tbaa !45
  %11285 = insertelement <4 x float> undef, float %11284, i64 0
  %11286 = extractelement <4 x i64> %11281, i64 1
  %11287 = getelementptr inbounds float, ptr %f5.host, i64 %11286
  %11288 = load float, ptr %11287, align 4, !tbaa !45
  %11289 = insertelement <4 x float> %11285, float %11288, i64 1
  %11290 = extractelement <4 x i64> %11281, i64 2
  %11291 = getelementptr inbounds float, ptr %f5.host, i64 %11290
  %11292 = load float, ptr %11291, align 4, !tbaa !45
  %11293 = insertelement <4 x float> %11289, float %11292, i64 2
  %11294 = extractelement <4 x i64> %11281, i64 3
  %11295 = getelementptr inbounds float, ptr %f5.host, i64 %11294
  %11296 = load float, ptr %11295, align 4, !tbaa !45
  %11297 = insertelement <4 x float> %11293, float %11296, i64 3
  %11298 = fmul <4 x float> %11297, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11299 = fadd <4 x float> %11275, %11298
  %11300 = fmul <4 x float> %11299, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11301 = insertelement <4 x i32> undef, i32 %t3011.us, i64 0
  %11302 = shufflevector <4 x i32> %11301, <4 x i32> undef, <4 x i32> zeroinitializer
  %11303 = add nsw <4 x i32> %11302, <i32 0, i32 1, i32 2, i32 3>
  %11304 = add nsw <4 x i32> %t3014.us, %11303
  %11305 = sext <4 x i32> %11304 to <4 x i64>
  %11306 = extractelement <4 x i64> %11305, i64 0
  %11307 = getelementptr inbounds float, ptr %f5.host, i64 %11306
  %11308 = load float, ptr %11307, align 4, !tbaa !45
  %11309 = insertelement <4 x float> undef, float %11308, i64 0
  %11310 = extractelement <4 x i64> %11305, i64 1
  %11311 = getelementptr inbounds float, ptr %f5.host, i64 %11310
  %11312 = load float, ptr %11311, align 4, !tbaa !45
  %11313 = insertelement <4 x float> %11309, float %11312, i64 1
  %11314 = extractelement <4 x i64> %11305, i64 2
  %11315 = getelementptr inbounds float, ptr %f5.host, i64 %11314
  %11316 = load float, ptr %11315, align 4, !tbaa !45
  %11317 = insertelement <4 x float> %11313, float %11316, i64 2
  %11318 = extractelement <4 x i64> %11305, i64 3
  %11319 = getelementptr inbounds float, ptr %f5.host, i64 %11318
  %11320 = load float, ptr %11319, align 4, !tbaa !45
  %11321 = insertelement <4 x float> %11317, float %11320, i64 3
  %11322 = fmul <4 x float> %11321, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11323 = insertelement <4 x i32> undef, i32 %t3008.us, i64 0
  %11324 = shufflevector <4 x i32> %11323, <4 x i32> undef, <4 x i32> zeroinitializer
  %11325 = add nsw <4 x i32> %11324, <i32 0, i32 1, i32 2, i32 3>
  %11326 = add <4 x i32> %11279, %11325
  %11327 = sext <4 x i32> %11326 to <4 x i64>
  %11328 = extractelement <4 x i64> %11327, i64 0
  %11329 = getelementptr inbounds float, ptr %f5.host, i64 %11328
  %11330 = load float, ptr %11329, align 4, !tbaa !45
  %11331 = insertelement <4 x float> undef, float %11330, i64 0
  %11332 = extractelement <4 x i64> %11327, i64 1
  %11333 = getelementptr inbounds float, ptr %f5.host, i64 %11332
  %11334 = load float, ptr %11333, align 4, !tbaa !45
  %11335 = insertelement <4 x float> %11331, float %11334, i64 1
  %11336 = extractelement <4 x i64> %11327, i64 2
  %11337 = getelementptr inbounds float, ptr %f5.host, i64 %11336
  %11338 = load float, ptr %11337, align 4, !tbaa !45
  %11339 = insertelement <4 x float> %11335, float %11338, i64 2
  %11340 = extractelement <4 x i64> %11327, i64 3
  %11341 = getelementptr inbounds float, ptr %f5.host, i64 %11340
  %11342 = load float, ptr %11341, align 4, !tbaa !45
  %11343 = insertelement <4 x float> %11339, float %11342, i64 3
  %11344 = fmul <4 x float> %11343, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11345 = fadd <4 x float> %11322, %11344
  %11346 = fmul <4 x float> %11345, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11347 = fadd <4 x float> %11300, %11346
  %11348 = mul nsw <4 x i32> %11004, %9208
  %11349 = add nsw i32 %t2987.us, 1
  %11350 = insertelement <4 x i32> undef, i32 %11349, i64 0
  %11351 = shufflevector <4 x i32> %11350, <4 x i32> undef, <4 x i32> zeroinitializer
  %11352 = add nsw <4 x i32> %11351, <i32 0, i32 2, i32 4, i32 6>
  %11353 = add nsw <4 x i32> %11348, %11352
  %11354 = sext <4 x i32> %11353 to <4 x i64>
  %11355 = extractelement <4 x i64> %11354, i64 0
  %11356 = getelementptr inbounds float, ptr %f4.host, i64 %11355
  %11357 = load float, ptr %11356, align 4, !tbaa !43
  %11358 = insertelement <4 x float> undef, float %11357, i64 0
  %11359 = extractelement <4 x i64> %11354, i64 1
  %11360 = getelementptr inbounds float, ptr %f4.host, i64 %11359
  %11361 = load float, ptr %11360, align 4, !tbaa !43
  %11362 = insertelement <4 x float> %11358, float %11361, i64 1
  %11363 = extractelement <4 x i64> %11354, i64 2
  %11364 = getelementptr inbounds float, ptr %f4.host, i64 %11363
  %11365 = load float, ptr %11364, align 4, !tbaa !43
  %11366 = insertelement <4 x float> %11362, float %11365, i64 2
  %11367 = extractelement <4 x i64> %11354, i64 3
  %11368 = getelementptr inbounds float, ptr %f4.host, i64 %11367
  %11369 = load float, ptr %11368, align 4, !tbaa !43
  %11370 = insertelement <4 x float> %11366, float %11369, i64 3
  %11371 = fsub <4 x float> %11370, %11347
  %11372 = fmul <4 x float> %t3003.us, %11371
  %11373 = add nsw <4 x i32> %t3009.us, %11256
  %11374 = sext <4 x i32> %11373 to <4 x i64>
  %11375 = extractelement <4 x i64> %11374, i64 0
  %11376 = getelementptr inbounds float, ptr %f5.host, i64 %11375
  %11377 = load float, ptr %11376, align 4, !tbaa !45
  %11378 = insertelement <4 x float> undef, float %11377, i64 0
  %11379 = extractelement <4 x i64> %11374, i64 1
  %11380 = getelementptr inbounds float, ptr %f5.host, i64 %11379
  %11381 = load float, ptr %11380, align 4, !tbaa !45
  %11382 = insertelement <4 x float> %11378, float %11381, i64 1
  %11383 = extractelement <4 x i64> %11374, i64 2
  %11384 = getelementptr inbounds float, ptr %f5.host, i64 %11383
  %11385 = load float, ptr %11384, align 4, !tbaa !45
  %11386 = insertelement <4 x float> %11382, float %11385, i64 2
  %11387 = extractelement <4 x i64> %11374, i64 3
  %11388 = getelementptr inbounds float, ptr %f5.host, i64 %11387
  %11389 = load float, ptr %11388, align 4, !tbaa !45
  %11390 = insertelement <4 x float> %11386, float %11389, i64 3
  %11391 = fmul <4 x float> %11390, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11392 = add <4 x i32> %t3009.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %11393 = add <4 x i32> %11392, %11278
  %11394 = sext <4 x i32> %11393 to <4 x i64>
  %11395 = extractelement <4 x i64> %11394, i64 0
  %11396 = getelementptr inbounds float, ptr %f5.host, i64 %11395
  %11397 = load float, ptr %11396, align 4, !tbaa !45
  %11398 = insertelement <4 x float> undef, float %11397, i64 0
  %11399 = extractelement <4 x i64> %11394, i64 1
  %11400 = getelementptr inbounds float, ptr %f5.host, i64 %11399
  %11401 = load float, ptr %11400, align 4, !tbaa !45
  %11402 = insertelement <4 x float> %11398, float %11401, i64 1
  %11403 = extractelement <4 x i64> %11394, i64 2
  %11404 = getelementptr inbounds float, ptr %f5.host, i64 %11403
  %11405 = load float, ptr %11404, align 4, !tbaa !45
  %11406 = insertelement <4 x float> %11402, float %11405, i64 2
  %11407 = extractelement <4 x i64> %11394, i64 3
  %11408 = getelementptr inbounds float, ptr %f5.host, i64 %11407
  %11409 = load float, ptr %11408, align 4, !tbaa !45
  %11410 = insertelement <4 x float> %11406, float %11409, i64 3
  %11411 = fmul <4 x float> %11410, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11412 = fadd <4 x float> %11391, %11411
  %11413 = fmul <4 x float> %11412, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11414 = add nsw <4 x i32> %t3009.us, %11303
  %11415 = sext <4 x i32> %11414 to <4 x i64>
  %11416 = extractelement <4 x i64> %11415, i64 0
  %11417 = getelementptr inbounds float, ptr %f5.host, i64 %11416
  %11418 = load float, ptr %11417, align 4, !tbaa !45
  %11419 = insertelement <4 x float> undef, float %11418, i64 0
  %11420 = extractelement <4 x i64> %11415, i64 1
  %11421 = getelementptr inbounds float, ptr %f5.host, i64 %11420
  %11422 = load float, ptr %11421, align 4, !tbaa !45
  %11423 = insertelement <4 x float> %11419, float %11422, i64 1
  %11424 = extractelement <4 x i64> %11415, i64 2
  %11425 = getelementptr inbounds float, ptr %f5.host, i64 %11424
  %11426 = load float, ptr %11425, align 4, !tbaa !45
  %11427 = insertelement <4 x float> %11423, float %11426, i64 2
  %11428 = extractelement <4 x i64> %11415, i64 3
  %11429 = getelementptr inbounds float, ptr %f5.host, i64 %11428
  %11430 = load float, ptr %11429, align 4, !tbaa !45
  %11431 = insertelement <4 x float> %11427, float %11430, i64 3
  %11432 = fmul <4 x float> %11431, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11433 = add <4 x i32> %11392, %11325
  %11434 = sext <4 x i32> %11433 to <4 x i64>
  %11435 = extractelement <4 x i64> %11434, i64 0
  %11436 = getelementptr inbounds float, ptr %f5.host, i64 %11435
  %11437 = load float, ptr %11436, align 4, !tbaa !45
  %11438 = insertelement <4 x float> undef, float %11437, i64 0
  %11439 = extractelement <4 x i64> %11434, i64 1
  %11440 = getelementptr inbounds float, ptr %f5.host, i64 %11439
  %11441 = load float, ptr %11440, align 4, !tbaa !45
  %11442 = insertelement <4 x float> %11438, float %11441, i64 1
  %11443 = extractelement <4 x i64> %11434, i64 2
  %11444 = getelementptr inbounds float, ptr %f5.host, i64 %11443
  %11445 = load float, ptr %11444, align 4, !tbaa !45
  %11446 = insertelement <4 x float> %11442, float %11445, i64 2
  %11447 = extractelement <4 x i64> %11434, i64 3
  %11448 = getelementptr inbounds float, ptr %f5.host, i64 %11447
  %11449 = load float, ptr %11448, align 4, !tbaa !45
  %11450 = insertelement <4 x float> %11446, float %11449, i64 3
  %11451 = fmul <4 x float> %11450, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11452 = fadd <4 x float> %11432, %11451
  %11453 = fmul <4 x float> %11452, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11454 = fadd <4 x float> %11413, %11453
  %11455 = mul nsw <4 x i32> %t3006.us, %9208
  %11456 = add nsw <4 x i32> %11455, %11352
  %11457 = sext <4 x i32> %11456 to <4 x i64>
  %11458 = extractelement <4 x i64> %11457, i64 0
  %11459 = getelementptr inbounds float, ptr %f4.host, i64 %11458
  %11460 = load float, ptr %11459, align 4, !tbaa !43
  %11461 = insertelement <4 x float> undef, float %11460, i64 0
  %11462 = extractelement <4 x i64> %11457, i64 1
  %11463 = getelementptr inbounds float, ptr %f4.host, i64 %11462
  %11464 = load float, ptr %11463, align 4, !tbaa !43
  %11465 = insertelement <4 x float> %11461, float %11464, i64 1
  %11466 = extractelement <4 x i64> %11457, i64 2
  %11467 = getelementptr inbounds float, ptr %f4.host, i64 %11466
  %11468 = load float, ptr %11467, align 4, !tbaa !43
  %11469 = insertelement <4 x float> %11465, float %11468, i64 2
  %11470 = extractelement <4 x i64> %11457, i64 3
  %11471 = getelementptr inbounds float, ptr %f4.host, i64 %11470
  %11472 = load float, ptr %11471, align 4, !tbaa !43
  %11473 = insertelement <4 x float> %11469, float %11472, i64 3
  %11474 = fsub <4 x float> %11473, %11454
  %11475 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t3003.us
  %11476 = fmul <4 x float> %11475, %11474
  %11477 = fadd <4 x float> %11372, %11476
  %11478 = sext i32 %10998 to i64
  %11479 = sub nsw i64 %11478, %9199
  %11480 = add nsw i64 %11479, %10968
  %11481 = getelementptr inbounds float, ptr %9108, i64 %11480
  %11482 = load <4 x float>, ptr %11481, align 4, !tbaa !67
  %11483 = fmul <4 x float> %11482, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11484 = sext i32 %t3000.us to i64
  %11485 = sub nsw i64 %11484, %9199
  %11486 = add nsw i64 %10969, %11485
  %11487 = getelementptr inbounds float, ptr %9108, i64 %11486
  %11488 = load <4 x float>, ptr %11487, align 4, !tbaa !67
  %11489 = fmul <4 x float> %11488, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11490 = fadd <4 x float> %11483, %11489
  %11491 = fmul <4 x float> %11490, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11492 = add nsw i64 %11479, %10970
  %11493 = getelementptr inbounds float, ptr %9108, i64 %11492
  %11494 = load <4 x float>, ptr %11493, align 4, !tbaa !67
  %11495 = fmul <4 x float> %11494, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11496 = add nsw i64 %10971, %11485
  %11497 = getelementptr inbounds float, ptr %9108, i64 %11496
  %11498 = load <4 x float>, ptr %11497, align 4, !tbaa !67
  %11499 = fmul <4 x float> %11498, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11500 = fadd <4 x float> %11495, %11499
  %11501 = fmul <4 x float> %11500, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11502 = fadd <4 x float> %11491, %11501
  %11503 = fadd <4 x float> %11477, %11502
  %11504 = shufflevector <4 x float> %11253, <4 x float> %11503, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %11505 = sext i32 %f126.s0.v3.v303.base181.us to i64
  %11506 = add i64 %10974, %11505
  %11507 = getelementptr inbounds float, ptr %9137, i64 %11506
  store <8 x float> %11504, ptr %11507, align 4, !tbaa !69
  %lsr.iv.next437.us = add i32 %lsr.iv436.us, -1
  %lsr.iv.next439.us = add i32 %lsr.iv438.us, 8
  %.not87.us = icmp eq i32 %lsr.iv.next437.us, 0
  br i1 %.not87.us, label %"end for f126.s0.v3.v3179.loopexit.us", label %"for f126.s0.v3.v3178.us"

"end for f126.s0.v3.v3179.loopexit.us":           ; preds = %"for f126.s0.v3.v3178.us"
  %indvars.iv.next303 = add nsw i64 %indvars.iv302, 1
  %11508 = icmp eq i64 %indvars.iv.next303, %sext304
  br i1 %11508, label %"consume f126182", label %"for f126.s0.v4175.us"

"consume f126182":                                ; preds = %"end for f126.s0.v3.v3179.loopexit.us", %"produce f126173"
  br i1 %9144, label %"assert succeeded185", label %"assert failed184", !prof !5

"assert failed184":                               ; preds = %"consume f126182"
  %11509 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.32, i64 %9143, i64 2147483647) #4
  br label %destructor_block

"assert succeeded185":                            ; preds = %"consume f126182"
  %11510 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9213)
  %.not81 = icmp eq ptr %11510, null
  br i1 %.not81, label %"assert failed186", label %"produce f125189", !prof !4

"assert failed186":                               ; preds = %"assert succeeded185"
  %11511 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block

"produce f125189":                                ; preds = %"assert succeeded185"
  br i1 %9216, label %"for f125.s0.v3.v3190.preheader", label %"consume f125194", !prof !5

"for f125.s0.v3.v3190.preheader":                 ; preds = %"produce f125189"
  %11512 = shl i32 %9249, 1
  %11513 = and i32 %11512, 2
  %t3016 = add nsw i32 %11513, %9252
  %11514 = sub nsw i32 %9249, %f2.v4.min_realized
  %11515 = mul nsw i32 %11514, %9217
  %11516 = sub i32 %11515, %f2.v3.min_realized
  %11517 = add i32 %t3016, %9221
  %t3028 = mul nsw i32 %11517, %9122
  %11518 = sub nsw i32 %9252, %9073
  %t3030 = mul nsw i32 %11518, %9122
  %11519 = add i32 %t3016, %9227
  %11520 = mul nsw i32 %11519, %f4.stride.1
  %11521 = sub nsw i32 %9252, %f4.v4.min_realized
  %11522 = mul nsw i32 %11521, %f4.stride.1
  %11523 = sext i32 %t3030 to i64
  %11524 = add nsw i64 %11523, -1
  %11525 = sext i32 %t3028 to i64
  %11526 = add nsw i64 %11525, -1
  br label %"for f125.s0.v3.v3190"

"for f125.s0.v3.v3190":                           ; preds = %"for f125.s0.v3.v3190.preheader", %"for f125.s0.v3.v3190"
  %lsr.iv442 = phi i32 [ %lsr.iv.next443, %"for f125.s0.v3.v3190" ], [ %a1120, %"for f125.s0.v3.v3190.preheader" ]
  %lsr.iv440 = phi i32 [ %lsr.iv.next441, %"for f125.s0.v3.v3190" ], [ %9215, %"for f125.s0.v3.v3190.preheader" ]
  %f125.s0.v3.v366.base193 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %lsr.iv442)
  %11527 = shl i32 %f125.s0.v3.v366.base193, 1
  %11528 = and i32 %11527, 2
  %11529 = ashr i32 %f125.s0.v3.v366.base193, 1
  %t3017 = add nsw i32 %11528, %11529
  %t3018 = add i32 %11516, %f125.s0.v3.v366.base193
  %11530 = sext i32 %t3018 to i64
  %11531 = getelementptr inbounds float, ptr %f2.host, i64 %11530
  %11532 = load <4 x float>, ptr %11531, align 4, !tbaa !41
  %11533 = add nsw i64 %11530, 4
  %11534 = getelementptr inbounds float, ptr %f2.host, i64 %11533
  %11535 = load <4 x float>, ptr %11534, align 4, !tbaa !41
  %t3019 = shufflevector <4 x float> %11532, <4 x float> %11535, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t3020 = shufflevector <4 x float> %11532, <4 x float> %11535, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t3021 = fmul <4 x float> %9151, %t3019
  %t3022 = fmul <4 x float> %9151, %t3020
  %a1125 = fptosi <4 x float> %t3022 to <4 x i32>
  %a1132 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1125)
  %11536 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1132, <4 x i32> zeroinitializer)
  %t3024 = sitofp <4 x i32> %11536 to <4 x float>
  %t3025 = fmul <4 x float> %9220, %t3024
  %11537 = add nuw nsw <4 x i32> %11536, <i32 1, i32 1, i32 1, i32 1>
  %11538 = sitofp <4 x i32> %11537 to <4 x float>
  %t3026 = fmul <4 x float> %9220, %11538
  %11539 = fmul <4 x float> %t3022, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1130 = fptosi <4 x float> %11539 to <4 x i32>
  %a1129 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1132, <4 x i32> %a1130)
  %11540 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1129, <4 x i32> zeroinitializer)
  %11541 = shl <4 x i32> %11536, <i32 8, i32 8, i32 8, i32 8>
  %.neg211 = sub <4 x i32> %.neg209, %11541
  %t3031 = add <4 x i32> %.neg211, %11540
  %11542 = sub nsw i32 %t3017, %f4.v3.min_realized
  %t3034 = add nsw i32 %11542, %11520
  %t3036 = sub nsw <4 x i32> %11536, %9160
  %t3037 = mul nsw <4 x i32> %t3036, %9208
  %11543 = sub nsw i32 %11529, %f4.v3.min_realized
  %t3039 = add nsw i32 %11543, %11520
  %t3041 = add nsw i32 %11542, %11522
  %t3042 = add nsw i32 %11543, %11522
  %11544 = add nsw <4 x i32> %t3036, <i32 1, i32 1, i32 1, i32 1>
  %t3043 = mul nsw <4 x i32> %11544, %9208
  %11545 = add nsw i32 %f125.s0.v3.v366.base193, 1
  %11546 = shl i32 %11545, 1
  %11547 = and i32 %11546, 2
  %11548 = ashr i32 %11545, 1
  %t3044 = add nsw i32 %11547, %11548
  %a1133 = fptosi <4 x float> %t3021 to <4 x i32>
  %a1140 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1133)
  %11549 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1140, <4 x i32> zeroinitializer)
  %t3046 = sitofp <4 x i32> %11549 to <4 x float>
  %t3047 = fmul <4 x float> %9220, %t3046
  %11550 = add nuw nsw <4 x i32> %11549, <i32 1, i32 1, i32 1, i32 1>
  %11551 = sitofp <4 x i32> %11550 to <4 x float>
  %t3048 = fmul <4 x float> %9220, %11551
  %11552 = fmul <4 x float> %t3021, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1138 = fptosi <4 x float> %11552 to <4 x i32>
  %a1137 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1132, <4 x i32> %a1138)
  %11553 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1137, <4 x i32> zeroinitializer)
  %11554 = shl <4 x i32> %11549, <i32 8, i32 8, i32 8, i32 8>
  %.neg213 = sub <4 x i32> %.neg209, %11554
  %t3051 = add <4 x i32> %.neg213, %11553
  %11555 = sub nsw i32 %t3044, %f4.v3.min_realized
  %t3053 = add nsw i32 %11555, %11520
  %t3054 = sub nsw <4 x i32> %11549, %9160
  %t3055 = mul nsw <4 x i32> %t3054, %9208
  %11556 = sub nsw i32 %11548, %f4.v3.min_realized
  %t3057 = add nsw i32 %11556, %11520
  %t3058 = add nsw i32 %11555, %11522
  %t3059 = add nsw i32 %11556, %11522
  %11557 = add nsw <4 x i32> %t3054, <i32 1, i32 1, i32 1, i32 1>
  %t3060 = mul nsw <4 x i32> %11557, %9208
  %11558 = insertelement <4 x i32> undef, i32 %t3042, i64 0
  %11559 = shufflevector <4 x i32> %11558, <4 x i32> undef, <4 x i32> zeroinitializer
  %11560 = add nsw <4 x i32> %11559, <i32 0, i32 1, i32 2, i32 3>
  %11561 = add nsw <4 x i32> %t3043, %11560
  %11562 = sext <4 x i32> %11561 to <4 x i64>
  %11563 = extractelement <4 x i64> %11562, i64 0
  %11564 = getelementptr inbounds float, ptr %f4.host, i64 %11563
  %11565 = load float, ptr %11564, align 4, !tbaa !43
  %11566 = insertelement <4 x float> undef, float %11565, i64 0
  %11567 = extractelement <4 x i64> %11562, i64 1
  %11568 = getelementptr inbounds float, ptr %f4.host, i64 %11567
  %11569 = load float, ptr %11568, align 4, !tbaa !43
  %11570 = insertelement <4 x float> %11566, float %11569, i64 1
  %11571 = extractelement <4 x i64> %11562, i64 2
  %11572 = getelementptr inbounds float, ptr %f4.host, i64 %11571
  %11573 = load float, ptr %11572, align 4, !tbaa !43
  %11574 = insertelement <4 x float> %11570, float %11573, i64 2
  %11575 = extractelement <4 x i64> %11562, i64 3
  %11576 = getelementptr inbounds float, ptr %f4.host, i64 %11575
  %11577 = load float, ptr %11576, align 4, !tbaa !43
  %11578 = insertelement <4 x float> %11574, float %11577, i64 3
  %11579 = fmul <4 x float> %11578, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11580 = insertelement <4 x i32> undef, i32 %t3041, i64 0
  %11581 = shufflevector <4 x i32> %11580, <4 x i32> undef, <4 x i32> zeroinitializer
  %11582 = add <4 x i32> %11581, <i32 -1, i32 0, i32 1, i32 2>
  %11583 = add <4 x i32> %11582, %t3043
  %11584 = sext <4 x i32> %11583 to <4 x i64>
  %11585 = extractelement <4 x i64> %11584, i64 0
  %11586 = getelementptr inbounds float, ptr %f4.host, i64 %11585
  %11587 = load float, ptr %11586, align 4, !tbaa !43
  %11588 = insertelement <4 x float> undef, float %11587, i64 0
  %11589 = extractelement <4 x i64> %11584, i64 1
  %11590 = getelementptr inbounds float, ptr %f4.host, i64 %11589
  %11591 = load float, ptr %11590, align 4, !tbaa !43
  %11592 = insertelement <4 x float> %11588, float %11591, i64 1
  %11593 = extractelement <4 x i64> %11584, i64 2
  %11594 = getelementptr inbounds float, ptr %f4.host, i64 %11593
  %11595 = load float, ptr %11594, align 4, !tbaa !43
  %11596 = insertelement <4 x float> %11592, float %11595, i64 2
  %11597 = extractelement <4 x i64> %11584, i64 3
  %11598 = getelementptr inbounds float, ptr %f4.host, i64 %11597
  %11599 = load float, ptr %11598, align 4, !tbaa !43
  %11600 = insertelement <4 x float> %11596, float %11599, i64 3
  %11601 = fmul <4 x float> %11600, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11602 = fadd <4 x float> %11579, %11601
  %11603 = fmul <4 x float> %11602, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11604 = insertelement <4 x i32> undef, i32 %t3039, i64 0
  %11605 = shufflevector <4 x i32> %11604, <4 x i32> undef, <4 x i32> zeroinitializer
  %11606 = add nsw <4 x i32> %11605, <i32 0, i32 1, i32 2, i32 3>
  %11607 = add nsw <4 x i32> %t3043, %11606
  %11608 = sext <4 x i32> %11607 to <4 x i64>
  %11609 = extractelement <4 x i64> %11608, i64 0
  %11610 = getelementptr inbounds float, ptr %f4.host, i64 %11609
  %11611 = load float, ptr %11610, align 4, !tbaa !43
  %11612 = insertelement <4 x float> undef, float %11611, i64 0
  %11613 = extractelement <4 x i64> %11608, i64 1
  %11614 = getelementptr inbounds float, ptr %f4.host, i64 %11613
  %11615 = load float, ptr %11614, align 4, !tbaa !43
  %11616 = insertelement <4 x float> %11612, float %11615, i64 1
  %11617 = extractelement <4 x i64> %11608, i64 2
  %11618 = getelementptr inbounds float, ptr %f4.host, i64 %11617
  %11619 = load float, ptr %11618, align 4, !tbaa !43
  %11620 = insertelement <4 x float> %11616, float %11619, i64 2
  %11621 = extractelement <4 x i64> %11608, i64 3
  %11622 = getelementptr inbounds float, ptr %f4.host, i64 %11621
  %11623 = load float, ptr %11622, align 4, !tbaa !43
  %11624 = insertelement <4 x float> %11620, float %11623, i64 3
  %11625 = fmul <4 x float> %11624, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11626 = insertelement <4 x i32> undef, i32 %t3034, i64 0
  %11627 = shufflevector <4 x i32> %11626, <4 x i32> undef, <4 x i32> zeroinitializer
  %11628 = add <4 x i32> %11627, <i32 -1, i32 0, i32 1, i32 2>
  %11629 = add <4 x i32> %11628, %t3043
  %11630 = sext <4 x i32> %11629 to <4 x i64>
  %11631 = extractelement <4 x i64> %11630, i64 0
  %11632 = getelementptr inbounds float, ptr %f4.host, i64 %11631
  %11633 = load float, ptr %11632, align 4, !tbaa !43
  %11634 = insertelement <4 x float> undef, float %11633, i64 0
  %11635 = extractelement <4 x i64> %11630, i64 1
  %11636 = getelementptr inbounds float, ptr %f4.host, i64 %11635
  %11637 = load float, ptr %11636, align 4, !tbaa !43
  %11638 = insertelement <4 x float> %11634, float %11637, i64 1
  %11639 = extractelement <4 x i64> %11630, i64 2
  %11640 = getelementptr inbounds float, ptr %f4.host, i64 %11639
  %11641 = load float, ptr %11640, align 4, !tbaa !43
  %11642 = insertelement <4 x float> %11638, float %11641, i64 2
  %11643 = extractelement <4 x i64> %11630, i64 3
  %11644 = getelementptr inbounds float, ptr %f4.host, i64 %11643
  %11645 = load float, ptr %11644, align 4, !tbaa !43
  %11646 = insertelement <4 x float> %11642, float %11645, i64 3
  %11647 = fmul <4 x float> %11646, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11648 = fadd <4 x float> %11625, %11647
  %11649 = fmul <4 x float> %11648, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11650 = fadd <4 x float> %11603, %11649
  %11651 = sext <4 x i32> %t3031 to <4 x i64>
  %11652 = extractelement <4 x i64> %11651, i64 0
  %11653 = getelementptr inbounds float, ptr %f0.host, i64 %11652
  %11654 = load float, ptr %11653, align 4, !tbaa !6
  %11655 = insertelement <4 x float> undef, float %11654, i64 0
  %11656 = extractelement <4 x i64> %11651, i64 1
  %11657 = getelementptr inbounds float, ptr %f0.host, i64 %11656
  %11658 = load float, ptr %11657, align 4, !tbaa !6
  %11659 = insertelement <4 x float> %11655, float %11658, i64 1
  %11660 = extractelement <4 x i64> %11651, i64 2
  %11661 = getelementptr inbounds float, ptr %f0.host, i64 %11660
  %11662 = load float, ptr %11661, align 4, !tbaa !6
  %11663 = insertelement <4 x float> %11659, float %11662, i64 2
  %11664 = extractelement <4 x i64> %11651, i64 3
  %11665 = getelementptr inbounds float, ptr %f0.host, i64 %11664
  %11666 = load float, ptr %11665, align 4, !tbaa !6
  %11667 = insertelement <4 x float> %11663, float %11666, i64 3
  %11668 = fsub <4 x float> %t3020, %t3026
  %11669 = fmul <4 x float> %9229, %11668
  %11670 = fadd <4 x float> %t3026, %11669
  %11671 = fadd <4 x float> %11670, %11667
  %11672 = fsub <4 x float> %11671, %11650
  %11673 = fsub <4 x float> %t3022, %t3024
  %11674 = fmul <4 x float> %11673, %11672
  %11675 = add nsw <4 x i32> %t3037, %11560
  %11676 = sext <4 x i32> %11675 to <4 x i64>
  %11677 = extractelement <4 x i64> %11676, i64 0
  %11678 = getelementptr inbounds float, ptr %f4.host, i64 %11677
  %11679 = load float, ptr %11678, align 4, !tbaa !43
  %11680 = insertelement <4 x float> undef, float %11679, i64 0
  %11681 = extractelement <4 x i64> %11676, i64 1
  %11682 = getelementptr inbounds float, ptr %f4.host, i64 %11681
  %11683 = load float, ptr %11682, align 4, !tbaa !43
  %11684 = insertelement <4 x float> %11680, float %11683, i64 1
  %11685 = extractelement <4 x i64> %11676, i64 2
  %11686 = getelementptr inbounds float, ptr %f4.host, i64 %11685
  %11687 = load float, ptr %11686, align 4, !tbaa !43
  %11688 = insertelement <4 x float> %11684, float %11687, i64 2
  %11689 = extractelement <4 x i64> %11676, i64 3
  %11690 = getelementptr inbounds float, ptr %f4.host, i64 %11689
  %11691 = load float, ptr %11690, align 4, !tbaa !43
  %11692 = insertelement <4 x float> %11688, float %11691, i64 3
  %11693 = fmul <4 x float> %11692, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11694 = add <4 x i32> %11582, %t3037
  %11695 = sext <4 x i32> %11694 to <4 x i64>
  %11696 = extractelement <4 x i64> %11695, i64 0
  %11697 = getelementptr inbounds float, ptr %f4.host, i64 %11696
  %11698 = load float, ptr %11697, align 4, !tbaa !43
  %11699 = insertelement <4 x float> undef, float %11698, i64 0
  %11700 = extractelement <4 x i64> %11695, i64 1
  %11701 = getelementptr inbounds float, ptr %f4.host, i64 %11700
  %11702 = load float, ptr %11701, align 4, !tbaa !43
  %11703 = insertelement <4 x float> %11699, float %11702, i64 1
  %11704 = extractelement <4 x i64> %11695, i64 2
  %11705 = getelementptr inbounds float, ptr %f4.host, i64 %11704
  %11706 = load float, ptr %11705, align 4, !tbaa !43
  %11707 = insertelement <4 x float> %11703, float %11706, i64 2
  %11708 = extractelement <4 x i64> %11695, i64 3
  %11709 = getelementptr inbounds float, ptr %f4.host, i64 %11708
  %11710 = load float, ptr %11709, align 4, !tbaa !43
  %11711 = insertelement <4 x float> %11707, float %11710, i64 3
  %11712 = fmul <4 x float> %11711, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11713 = fadd <4 x float> %11693, %11712
  %11714 = fmul <4 x float> %11713, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11715 = add nsw <4 x i32> %t3037, %11606
  %11716 = sext <4 x i32> %11715 to <4 x i64>
  %11717 = extractelement <4 x i64> %11716, i64 0
  %11718 = getelementptr inbounds float, ptr %f4.host, i64 %11717
  %11719 = load float, ptr %11718, align 4, !tbaa !43
  %11720 = insertelement <4 x float> undef, float %11719, i64 0
  %11721 = extractelement <4 x i64> %11716, i64 1
  %11722 = getelementptr inbounds float, ptr %f4.host, i64 %11721
  %11723 = load float, ptr %11722, align 4, !tbaa !43
  %11724 = insertelement <4 x float> %11720, float %11723, i64 1
  %11725 = extractelement <4 x i64> %11716, i64 2
  %11726 = getelementptr inbounds float, ptr %f4.host, i64 %11725
  %11727 = load float, ptr %11726, align 4, !tbaa !43
  %11728 = insertelement <4 x float> %11724, float %11727, i64 2
  %11729 = extractelement <4 x i64> %11716, i64 3
  %11730 = getelementptr inbounds float, ptr %f4.host, i64 %11729
  %11731 = load float, ptr %11730, align 4, !tbaa !43
  %11732 = insertelement <4 x float> %11728, float %11731, i64 3
  %11733 = fmul <4 x float> %11732, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11734 = add <4 x i32> %11628, %t3037
  %11735 = sext <4 x i32> %11734 to <4 x i64>
  %11736 = extractelement <4 x i64> %11735, i64 0
  %11737 = getelementptr inbounds float, ptr %f4.host, i64 %11736
  %11738 = load float, ptr %11737, align 4, !tbaa !43
  %11739 = insertelement <4 x float> undef, float %11738, i64 0
  %11740 = extractelement <4 x i64> %11735, i64 1
  %11741 = getelementptr inbounds float, ptr %f4.host, i64 %11740
  %11742 = load float, ptr %11741, align 4, !tbaa !43
  %11743 = insertelement <4 x float> %11739, float %11742, i64 1
  %11744 = extractelement <4 x i64> %11735, i64 2
  %11745 = getelementptr inbounds float, ptr %f4.host, i64 %11744
  %11746 = load float, ptr %11745, align 4, !tbaa !43
  %11747 = insertelement <4 x float> %11743, float %11746, i64 2
  %11748 = extractelement <4 x i64> %11735, i64 3
  %11749 = getelementptr inbounds float, ptr %f4.host, i64 %11748
  %11750 = load float, ptr %11749, align 4, !tbaa !43
  %11751 = insertelement <4 x float> %11747, float %11750, i64 3
  %11752 = fmul <4 x float> %11751, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11753 = fadd <4 x float> %11733, %11752
  %11754 = fmul <4 x float> %11753, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11755 = fadd <4 x float> %11714, %11754
  %11756 = add nsw <4 x i32> %t3031, <i32 256, i32 256, i32 256, i32 256>
  %11757 = sext <4 x i32> %11756 to <4 x i64>
  %11758 = extractelement <4 x i64> %11757, i64 0
  %11759 = getelementptr inbounds float, ptr %f0.host, i64 %11758
  %11760 = load float, ptr %11759, align 4, !tbaa !6
  %11761 = insertelement <4 x float> undef, float %11760, i64 0
  %11762 = extractelement <4 x i64> %11757, i64 1
  %11763 = getelementptr inbounds float, ptr %f0.host, i64 %11762
  %11764 = load float, ptr %11763, align 4, !tbaa !6
  %11765 = insertelement <4 x float> %11761, float %11764, i64 1
  %11766 = extractelement <4 x i64> %11757, i64 2
  %11767 = getelementptr inbounds float, ptr %f0.host, i64 %11766
  %11768 = load float, ptr %11767, align 4, !tbaa !6
  %11769 = insertelement <4 x float> %11765, float %11768, i64 2
  %11770 = extractelement <4 x i64> %11757, i64 3
  %11771 = getelementptr inbounds float, ptr %f0.host, i64 %11770
  %11772 = load float, ptr %11771, align 4, !tbaa !6
  %11773 = insertelement <4 x float> %11769, float %11772, i64 3
  %11774 = fsub <4 x float> %t3020, %t3025
  %11775 = fmul <4 x float> %9229, %11774
  %11776 = fadd <4 x float> %t3025, %11775
  %11777 = fadd <4 x float> %11776, %11773
  %11778 = fsub <4 x float> %11777, %11755
  %11779 = fsub <4 x float> %t3024, %t3022
  %11780 = fadd <4 x float> %11779, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %11781 = fmul <4 x float> %11780, %11778
  %11782 = fadd <4 x float> %11674, %11781
  %11783 = sext i32 %11529 to i64
  %11784 = sub nsw i64 %11783, %9212
  %11785 = add nsw i64 %11784, %11523
  %11786 = getelementptr inbounds float, ptr %9137, i64 %11785
  %11787 = load <4 x float>, ptr %11786, align 4, !tbaa !69
  %11788 = fmul <4 x float> %11787, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11789 = sext i32 %t3017 to i64
  %11790 = sub nsw i64 %11789, %9212
  %11791 = add nsw i64 %11524, %11790
  %11792 = getelementptr inbounds float, ptr %9137, i64 %11791
  %11793 = load <4 x float>, ptr %11792, align 4, !tbaa !69
  %11794 = fmul <4 x float> %11793, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11795 = fadd <4 x float> %11788, %11794
  %11796 = fmul <4 x float> %11795, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11797 = add nsw i64 %11784, %11525
  %11798 = getelementptr inbounds float, ptr %9137, i64 %11797
  %11799 = load <4 x float>, ptr %11798, align 4, !tbaa !69
  %11800 = fmul <4 x float> %11799, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11801 = add nsw i64 %11526, %11790
  %11802 = getelementptr inbounds float, ptr %9137, i64 %11801
  %11803 = load <4 x float>, ptr %11802, align 4, !tbaa !69
  %11804 = fmul <4 x float> %11803, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11805 = fadd <4 x float> %11800, %11804
  %11806 = fmul <4 x float> %11805, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11807 = fadd <4 x float> %11796, %11806
  %11808 = fadd <4 x float> %11782, %11807
  %11809 = insertelement <4 x i32> undef, i32 %t3059, i64 0
  %11810 = shufflevector <4 x i32> %11809, <4 x i32> undef, <4 x i32> zeroinitializer
  %11811 = add nsw <4 x i32> %11810, <i32 0, i32 1, i32 2, i32 3>
  %11812 = add nsw <4 x i32> %t3060, %11811
  %11813 = sext <4 x i32> %11812 to <4 x i64>
  %11814 = extractelement <4 x i64> %11813, i64 0
  %11815 = getelementptr inbounds float, ptr %f4.host, i64 %11814
  %11816 = load float, ptr %11815, align 4, !tbaa !43
  %11817 = insertelement <4 x float> undef, float %11816, i64 0
  %11818 = extractelement <4 x i64> %11813, i64 1
  %11819 = getelementptr inbounds float, ptr %f4.host, i64 %11818
  %11820 = load float, ptr %11819, align 4, !tbaa !43
  %11821 = insertelement <4 x float> %11817, float %11820, i64 1
  %11822 = extractelement <4 x i64> %11813, i64 2
  %11823 = getelementptr inbounds float, ptr %f4.host, i64 %11822
  %11824 = load float, ptr %11823, align 4, !tbaa !43
  %11825 = insertelement <4 x float> %11821, float %11824, i64 2
  %11826 = extractelement <4 x i64> %11813, i64 3
  %11827 = getelementptr inbounds float, ptr %f4.host, i64 %11826
  %11828 = load float, ptr %11827, align 4, !tbaa !43
  %11829 = insertelement <4 x float> %11825, float %11828, i64 3
  %11830 = fmul <4 x float> %11829, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11831 = insertelement <4 x i32> undef, i32 %t3058, i64 0
  %11832 = shufflevector <4 x i32> %11831, <4 x i32> undef, <4 x i32> zeroinitializer
  %11833 = add <4 x i32> %11832, <i32 -1, i32 0, i32 1, i32 2>
  %11834 = add <4 x i32> %11833, %t3060
  %11835 = sext <4 x i32> %11834 to <4 x i64>
  %11836 = extractelement <4 x i64> %11835, i64 0
  %11837 = getelementptr inbounds float, ptr %f4.host, i64 %11836
  %11838 = load float, ptr %11837, align 4, !tbaa !43
  %11839 = insertelement <4 x float> undef, float %11838, i64 0
  %11840 = extractelement <4 x i64> %11835, i64 1
  %11841 = getelementptr inbounds float, ptr %f4.host, i64 %11840
  %11842 = load float, ptr %11841, align 4, !tbaa !43
  %11843 = insertelement <4 x float> %11839, float %11842, i64 1
  %11844 = extractelement <4 x i64> %11835, i64 2
  %11845 = getelementptr inbounds float, ptr %f4.host, i64 %11844
  %11846 = load float, ptr %11845, align 4, !tbaa !43
  %11847 = insertelement <4 x float> %11843, float %11846, i64 2
  %11848 = extractelement <4 x i64> %11835, i64 3
  %11849 = getelementptr inbounds float, ptr %f4.host, i64 %11848
  %11850 = load float, ptr %11849, align 4, !tbaa !43
  %11851 = insertelement <4 x float> %11847, float %11850, i64 3
  %11852 = fmul <4 x float> %11851, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11853 = fadd <4 x float> %11830, %11852
  %11854 = fmul <4 x float> %11853, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11855 = insertelement <4 x i32> undef, i32 %t3057, i64 0
  %11856 = shufflevector <4 x i32> %11855, <4 x i32> undef, <4 x i32> zeroinitializer
  %11857 = add nsw <4 x i32> %11856, <i32 0, i32 1, i32 2, i32 3>
  %11858 = add nsw <4 x i32> %t3060, %11857
  %11859 = sext <4 x i32> %11858 to <4 x i64>
  %11860 = extractelement <4 x i64> %11859, i64 0
  %11861 = getelementptr inbounds float, ptr %f4.host, i64 %11860
  %11862 = load float, ptr %11861, align 4, !tbaa !43
  %11863 = insertelement <4 x float> undef, float %11862, i64 0
  %11864 = extractelement <4 x i64> %11859, i64 1
  %11865 = getelementptr inbounds float, ptr %f4.host, i64 %11864
  %11866 = load float, ptr %11865, align 4, !tbaa !43
  %11867 = insertelement <4 x float> %11863, float %11866, i64 1
  %11868 = extractelement <4 x i64> %11859, i64 2
  %11869 = getelementptr inbounds float, ptr %f4.host, i64 %11868
  %11870 = load float, ptr %11869, align 4, !tbaa !43
  %11871 = insertelement <4 x float> %11867, float %11870, i64 2
  %11872 = extractelement <4 x i64> %11859, i64 3
  %11873 = getelementptr inbounds float, ptr %f4.host, i64 %11872
  %11874 = load float, ptr %11873, align 4, !tbaa !43
  %11875 = insertelement <4 x float> %11871, float %11874, i64 3
  %11876 = fmul <4 x float> %11875, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11877 = insertelement <4 x i32> undef, i32 %t3053, i64 0
  %11878 = shufflevector <4 x i32> %11877, <4 x i32> undef, <4 x i32> zeroinitializer
  %11879 = add <4 x i32> %11878, <i32 -1, i32 0, i32 1, i32 2>
  %11880 = add <4 x i32> %11879, %t3060
  %11881 = sext <4 x i32> %11880 to <4 x i64>
  %11882 = extractelement <4 x i64> %11881, i64 0
  %11883 = getelementptr inbounds float, ptr %f4.host, i64 %11882
  %11884 = load float, ptr %11883, align 4, !tbaa !43
  %11885 = insertelement <4 x float> undef, float %11884, i64 0
  %11886 = extractelement <4 x i64> %11881, i64 1
  %11887 = getelementptr inbounds float, ptr %f4.host, i64 %11886
  %11888 = load float, ptr %11887, align 4, !tbaa !43
  %11889 = insertelement <4 x float> %11885, float %11888, i64 1
  %11890 = extractelement <4 x i64> %11881, i64 2
  %11891 = getelementptr inbounds float, ptr %f4.host, i64 %11890
  %11892 = load float, ptr %11891, align 4, !tbaa !43
  %11893 = insertelement <4 x float> %11889, float %11892, i64 2
  %11894 = extractelement <4 x i64> %11881, i64 3
  %11895 = getelementptr inbounds float, ptr %f4.host, i64 %11894
  %11896 = load float, ptr %11895, align 4, !tbaa !43
  %11897 = insertelement <4 x float> %11893, float %11896, i64 3
  %11898 = fmul <4 x float> %11897, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11899 = fadd <4 x float> %11876, %11898
  %11900 = fmul <4 x float> %11899, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11901 = fadd <4 x float> %11854, %11900
  %11902 = sext <4 x i32> %t3051 to <4 x i64>
  %11903 = extractelement <4 x i64> %11902, i64 0
  %11904 = getelementptr inbounds float, ptr %f0.host, i64 %11903
  %11905 = load float, ptr %11904, align 4, !tbaa !6
  %11906 = insertelement <4 x float> undef, float %11905, i64 0
  %11907 = extractelement <4 x i64> %11902, i64 1
  %11908 = getelementptr inbounds float, ptr %f0.host, i64 %11907
  %11909 = load float, ptr %11908, align 4, !tbaa !6
  %11910 = insertelement <4 x float> %11906, float %11909, i64 1
  %11911 = extractelement <4 x i64> %11902, i64 2
  %11912 = getelementptr inbounds float, ptr %f0.host, i64 %11911
  %11913 = load float, ptr %11912, align 4, !tbaa !6
  %11914 = insertelement <4 x float> %11910, float %11913, i64 2
  %11915 = extractelement <4 x i64> %11902, i64 3
  %11916 = getelementptr inbounds float, ptr %f0.host, i64 %11915
  %11917 = load float, ptr %11916, align 4, !tbaa !6
  %11918 = insertelement <4 x float> %11914, float %11917, i64 3
  %11919 = fsub <4 x float> %t3019, %t3048
  %11920 = fmul <4 x float> %9229, %11919
  %11921 = fadd <4 x float> %t3048, %11920
  %11922 = fadd <4 x float> %11921, %11918
  %11923 = fsub <4 x float> %11922, %11901
  %11924 = fsub <4 x float> %t3021, %t3046
  %11925 = fmul <4 x float> %11924, %11923
  %11926 = add nsw <4 x i32> %t3055, %11811
  %11927 = sext <4 x i32> %11926 to <4 x i64>
  %11928 = extractelement <4 x i64> %11927, i64 0
  %11929 = getelementptr inbounds float, ptr %f4.host, i64 %11928
  %11930 = load float, ptr %11929, align 4, !tbaa !43
  %11931 = insertelement <4 x float> undef, float %11930, i64 0
  %11932 = extractelement <4 x i64> %11927, i64 1
  %11933 = getelementptr inbounds float, ptr %f4.host, i64 %11932
  %11934 = load float, ptr %11933, align 4, !tbaa !43
  %11935 = insertelement <4 x float> %11931, float %11934, i64 1
  %11936 = extractelement <4 x i64> %11927, i64 2
  %11937 = getelementptr inbounds float, ptr %f4.host, i64 %11936
  %11938 = load float, ptr %11937, align 4, !tbaa !43
  %11939 = insertelement <4 x float> %11935, float %11938, i64 2
  %11940 = extractelement <4 x i64> %11927, i64 3
  %11941 = getelementptr inbounds float, ptr %f4.host, i64 %11940
  %11942 = load float, ptr %11941, align 4, !tbaa !43
  %11943 = insertelement <4 x float> %11939, float %11942, i64 3
  %11944 = fmul <4 x float> %11943, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11945 = add <4 x i32> %t3055, %11832
  %11946 = add <4 x i32> %11945, <i32 -1, i32 0, i32 1, i32 2>
  %11947 = sext <4 x i32> %11946 to <4 x i64>
  %11948 = extractelement <4 x i64> %11947, i64 0
  %11949 = getelementptr inbounds float, ptr %f4.host, i64 %11948
  %11950 = load float, ptr %11949, align 4, !tbaa !43
  %11951 = insertelement <4 x float> undef, float %11950, i64 0
  %11952 = extractelement <4 x i64> %11947, i64 1
  %11953 = getelementptr inbounds float, ptr %f4.host, i64 %11952
  %11954 = load float, ptr %11953, align 4, !tbaa !43
  %11955 = insertelement <4 x float> %11951, float %11954, i64 1
  %11956 = extractelement <4 x i64> %11947, i64 2
  %11957 = getelementptr inbounds float, ptr %f4.host, i64 %11956
  %11958 = load float, ptr %11957, align 4, !tbaa !43
  %11959 = insertelement <4 x float> %11955, float %11958, i64 2
  %11960 = extractelement <4 x i64> %11947, i64 3
  %11961 = getelementptr inbounds float, ptr %f4.host, i64 %11960
  %11962 = load float, ptr %11961, align 4, !tbaa !43
  %11963 = insertelement <4 x float> %11959, float %11962, i64 3
  %11964 = fmul <4 x float> %11963, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11965 = fadd <4 x float> %11944, %11964
  %11966 = fmul <4 x float> %11965, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11967 = add nsw <4 x i32> %t3055, %11857
  %11968 = sext <4 x i32> %11967 to <4 x i64>
  %11969 = extractelement <4 x i64> %11968, i64 0
  %11970 = getelementptr inbounds float, ptr %f4.host, i64 %11969
  %11971 = load float, ptr %11970, align 4, !tbaa !43
  %11972 = insertelement <4 x float> undef, float %11971, i64 0
  %11973 = extractelement <4 x i64> %11968, i64 1
  %11974 = getelementptr inbounds float, ptr %f4.host, i64 %11973
  %11975 = load float, ptr %11974, align 4, !tbaa !43
  %11976 = insertelement <4 x float> %11972, float %11975, i64 1
  %11977 = extractelement <4 x i64> %11968, i64 2
  %11978 = getelementptr inbounds float, ptr %f4.host, i64 %11977
  %11979 = load float, ptr %11978, align 4, !tbaa !43
  %11980 = insertelement <4 x float> %11976, float %11979, i64 2
  %11981 = extractelement <4 x i64> %11968, i64 3
  %11982 = getelementptr inbounds float, ptr %f4.host, i64 %11981
  %11983 = load float, ptr %11982, align 4, !tbaa !43
  %11984 = insertelement <4 x float> %11980, float %11983, i64 3
  %11985 = fmul <4 x float> %11984, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11986 = add <4 x i32> %t3055, %11878
  %11987 = add <4 x i32> %11986, <i32 -1, i32 0, i32 1, i32 2>
  %11988 = sext <4 x i32> %11987 to <4 x i64>
  %11989 = extractelement <4 x i64> %11988, i64 0
  %11990 = getelementptr inbounds float, ptr %f4.host, i64 %11989
  %11991 = load float, ptr %11990, align 4, !tbaa !43
  %11992 = insertelement <4 x float> undef, float %11991, i64 0
  %11993 = extractelement <4 x i64> %11988, i64 1
  %11994 = getelementptr inbounds float, ptr %f4.host, i64 %11993
  %11995 = load float, ptr %11994, align 4, !tbaa !43
  %11996 = insertelement <4 x float> %11992, float %11995, i64 1
  %11997 = extractelement <4 x i64> %11988, i64 2
  %11998 = getelementptr inbounds float, ptr %f4.host, i64 %11997
  %11999 = load float, ptr %11998, align 4, !tbaa !43
  %12000 = insertelement <4 x float> %11996, float %11999, i64 2
  %12001 = extractelement <4 x i64> %11988, i64 3
  %12002 = getelementptr inbounds float, ptr %f4.host, i64 %12001
  %12003 = load float, ptr %12002, align 4, !tbaa !43
  %12004 = insertelement <4 x float> %12000, float %12003, i64 3
  %12005 = fmul <4 x float> %12004, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12006 = fadd <4 x float> %11985, %12005
  %12007 = fmul <4 x float> %12006, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12008 = fadd <4 x float> %11966, %12007
  %12009 = add nsw <4 x i32> %t3051, <i32 256, i32 256, i32 256, i32 256>
  %12010 = sext <4 x i32> %12009 to <4 x i64>
  %12011 = extractelement <4 x i64> %12010, i64 0
  %12012 = getelementptr inbounds float, ptr %f0.host, i64 %12011
  %12013 = load float, ptr %12012, align 4, !tbaa !6
  %12014 = insertelement <4 x float> undef, float %12013, i64 0
  %12015 = extractelement <4 x i64> %12010, i64 1
  %12016 = getelementptr inbounds float, ptr %f0.host, i64 %12015
  %12017 = load float, ptr %12016, align 4, !tbaa !6
  %12018 = insertelement <4 x float> %12014, float %12017, i64 1
  %12019 = extractelement <4 x i64> %12010, i64 2
  %12020 = getelementptr inbounds float, ptr %f0.host, i64 %12019
  %12021 = load float, ptr %12020, align 4, !tbaa !6
  %12022 = insertelement <4 x float> %12018, float %12021, i64 2
  %12023 = extractelement <4 x i64> %12010, i64 3
  %12024 = getelementptr inbounds float, ptr %f0.host, i64 %12023
  %12025 = load float, ptr %12024, align 4, !tbaa !6
  %12026 = insertelement <4 x float> %12022, float %12025, i64 3
  %12027 = fsub <4 x float> %t3019, %t3047
  %12028 = fmul <4 x float> %9229, %12027
  %12029 = fadd <4 x float> %t3047, %12028
  %12030 = fadd <4 x float> %12029, %12026
  %12031 = fsub <4 x float> %12030, %12008
  %12032 = fsub <4 x float> %t3046, %t3021
  %12033 = fadd <4 x float> %12032, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12034 = fmul <4 x float> %12033, %12031
  %12035 = fadd <4 x float> %11925, %12034
  %12036 = sext i32 %11548 to i64
  %12037 = sub nsw i64 %12036, %9212
  %12038 = add nsw i64 %12037, %11523
  %12039 = getelementptr inbounds float, ptr %9137, i64 %12038
  %12040 = load <4 x float>, ptr %12039, align 4, !tbaa !69
  %12041 = fmul <4 x float> %12040, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12042 = sext i32 %t3044 to i64
  %12043 = sub nsw i64 %12042, %9212
  %12044 = add nsw i64 %11524, %12043
  %12045 = getelementptr inbounds float, ptr %9137, i64 %12044
  %12046 = load <4 x float>, ptr %12045, align 4, !tbaa !69
  %12047 = fmul <4 x float> %12046, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12048 = fadd <4 x float> %12041, %12047
  %12049 = fmul <4 x float> %12048, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12050 = add nsw i64 %12037, %11525
  %12051 = getelementptr inbounds float, ptr %9137, i64 %12050
  %12052 = load <4 x float>, ptr %12051, align 4, !tbaa !69
  %12053 = fmul <4 x float> %12052, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12054 = add nsw i64 %11526, %12043
  %12055 = getelementptr inbounds float, ptr %9137, i64 %12054
  %12056 = load <4 x float>, ptr %12055, align 4, !tbaa !69
  %12057 = fmul <4 x float> %12056, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12058 = fadd <4 x float> %12053, %12057
  %12059 = fmul <4 x float> %12058, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12060 = fadd <4 x float> %12049, %12059
  %12061 = fadd <4 x float> %12035, %12060
  %12062 = shufflevector <4 x float> %11808, <4 x float> %12061, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %12063 = sext i32 %f125.s0.v3.v366.base193 to i64
  %12064 = sub nsw i64 %12063, %9230
  %12065 = getelementptr inbounds float, ptr %11510, i64 %12064
  store <8 x float> %12062, ptr %12065, align 4, !tbaa !71
  %lsr.iv.next441 = add i32 %lsr.iv440, -1
  %lsr.iv.next443 = add i32 %lsr.iv442, 8
  %.not85 = icmp eq i32 %lsr.iv.next441, 0
  br i1 %.not85, label %"consume f125194", label %"for f125.s0.v3.v3190"

"consume f125194":                                ; preds = %"for f125.s0.v3.v3190", %"produce f125189"
  br i1 %9233, label %"for local_laplacian.s0.v3.v3195.preheader", label %if.then.i283, !prof !5

"for local_laplacian.s0.v3.v3195.preheader":      ; preds = %"consume f125194"
  %12066 = add nsw i64 %9236, %indvars.iv306
  %12067 = mul nsw i64 %12066, %9235
  %12068 = sub i64 %12067, %8
  %a1146 = tail call i32 @llvm.smin.i32(i32 %b1149, i32 %9249)
  %12069 = tail call i32 @llvm.smax.i32(i32 %a1146, i32 %b1148)
  %12070 = mul nsw i32 %12069, %input.stride.1
  br label %"for local_laplacian.s0.v3.v3195"

"for local_laplacian.s0.v3.v3195":                ; preds = %"for local_laplacian.s0.v3.v3195.preheader", %"end for local_laplacian.s0.v5200"
  %local_laplacian.s0.v3.v3197 = phi i32 [ %12135, %"end for local_laplacian.s0.v5200" ], [ 0, %"for local_laplacian.s0.v3.v3195.preheader" ]
  br i1 %9234, label %"for local_laplacian.s0.v5199.preheader", label %"end for local_laplacian.s0.v5200", !prof !5

"for local_laplacian.s0.v5199.preheader":         ; preds = %"for local_laplacian.s0.v3.v3195"
  %12071 = shl nsw i32 %local_laplacian.s0.v3.v3197, 3
  %a1141 = add nsw i32 %12071, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base198 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1141)
  %12072 = sext i32 %local_laplacian.s0.v3.v277.base198 to i64
  %12073 = add i64 %lsr.iv446, %12072
  %scevgep448 = getelementptr i16, ptr %local_laplacian.host, i64 %12073
  %12074 = add i64 %12068, %12072
  %12075 = getelementptr inbounds float, ptr %f2.host, i64 %12074
  %12076 = load <8 x float>, ptr %12075, align 4, !tbaa !41
  %12077 = fadd <8 x float> %12076, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %12078 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base198, i64 0
  %12079 = shufflevector <8 x i32> %12078, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1149 = add nsw <8 x i32> %12079, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1148 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1151, <8 x i32> %a1149)
  %12080 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1148, <8 x i32> %b1150)
  %12081 = sub nsw i64 %12072, %9230
  %12082 = getelementptr inbounds float, ptr %11510, i64 %12081
  %12083 = load <8 x float>, ptr %12082, align 4, !tbaa !71
  br label %"for local_laplacian.s0.v5199"

if.then.i283:                                     ; preds = %"end for local_laplacian.s0.v5200", %"consume f125194"
  tail call void @halide_free(ptr %__user_context, ptr nonnull %11510) #7
  %indvars.iv.next307 = add nuw nsw i64 %indvars.iv306, 1
  %lsr.iv.next447 = add i64 %lsr.iv446, %73
  %.not82 = icmp eq i64 %indvars.iv.next307, 64
  br i1 %.not82, label %if.then.i271, label %"produce f129143"

"for local_laplacian.s0.v5199":                   ; preds = %"for local_laplacian.s0.v5199", %"for local_laplacian.s0.v5199.preheader"
  %lsr.iv449 = phi ptr [ %scevgep448, %"for local_laplacian.s0.v5199.preheader" ], [ %scevgep451, %"for local_laplacian.s0.v5199" ]
  %lsr.iv444 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5199.preheader" ], [ %lsr.iv.next445, %"for local_laplacian.s0.v5199" ]
  %a1145 = phi i32 [ %b1028, %"for local_laplacian.s0.v5199.preheader" ], [ %12134, %"for local_laplacian.s0.v5199" ]
  %a1144 = tail call i32 @llvm.smin.i32(i32 %b1147, i32 %a1145)
  %12084 = tail call i32 @llvm.smax.i32(i32 %a1144, i32 %b1146)
  %12085 = mul nsw i32 %12084, %input.stride.2
  %.scalar333 = add i32 %12085, %12070
  %.scalar334 = sub i32 %.scalar333, %9240
  %12086 = insertelement <8 x i32> undef, i32 %.scalar334, i64 0
  %12087 = shufflevector <8 x i32> %12086, <8 x i32> poison, <8 x i32> zeroinitializer
  %12088 = add <8 x i32> %12087, %12080
  %12089 = shufflevector <8 x i32> %12088, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12090 = sext <4 x i32> %12089 to <4 x i64>
  %12091 = extractelement <4 x i64> %12090, i64 0
  %12092 = getelementptr inbounds i16, ptr %input.host, i64 %12091
  %12093 = load i16, ptr %12092, align 2, !tbaa !39
  %12094 = insertelement <8 x i16> undef, i16 %12093, i64 0
  %12095 = extractelement <4 x i64> %12090, i64 1
  %12096 = getelementptr inbounds i16, ptr %input.host, i64 %12095
  %12097 = load i16, ptr %12096, align 2, !tbaa !39
  %12098 = insertelement <8 x i16> %12094, i16 %12097, i64 1
  %12099 = extractelement <4 x i64> %12090, i64 2
  %12100 = getelementptr inbounds i16, ptr %input.host, i64 %12099
  %12101 = load i16, ptr %12100, align 2, !tbaa !39
  %12102 = insertelement <8 x i16> %12098, i16 %12101, i64 2
  %12103 = extractelement <4 x i64> %12090, i64 3
  %12104 = getelementptr inbounds i16, ptr %input.host, i64 %12103
  %12105 = load i16, ptr %12104, align 2, !tbaa !39
  %12106 = insertelement <8 x i16> %12102, i16 %12105, i64 3
  %12107 = shufflevector <8 x i32> %12088, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12108 = sext <4 x i32> %12107 to <4 x i64>
  %12109 = extractelement <4 x i64> %12108, i64 0
  %12110 = getelementptr inbounds i16, ptr %input.host, i64 %12109
  %12111 = load i16, ptr %12110, align 2, !tbaa !39
  %12112 = insertelement <8 x i16> %12106, i16 %12111, i64 4
  %12113 = extractelement <4 x i64> %12108, i64 1
  %12114 = getelementptr inbounds i16, ptr %input.host, i64 %12113
  %12115 = load i16, ptr %12114, align 2, !tbaa !39
  %12116 = insertelement <8 x i16> %12112, i16 %12115, i64 5
  %12117 = extractelement <4 x i64> %12108, i64 2
  %12118 = getelementptr inbounds i16, ptr %input.host, i64 %12117
  %12119 = load i16, ptr %12118, align 2, !tbaa !39
  %12120 = insertelement <8 x i16> %12116, i16 %12119, i64 6
  %12121 = extractelement <4 x i64> %12108, i64 3
  %12122 = getelementptr inbounds i16, ptr %input.host, i64 %12121
  %12123 = load i16, ptr %12122, align 2, !tbaa !39
  %12124 = insertelement <8 x i16> %12120, i16 %12123, i64 7
  %12125 = uitofp <8 x i16> %12124 to <8 x float>
  %12126 = fmul <8 x float> %12125, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %12127 = fadd <8 x float> %12126, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %12128 = fmul <8 x float> %12083, %12127
  %a1143 = fdiv <8 x float> %12128, %12077
  %12129 = fcmp olt <8 x float> %a1143, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1142 = select <8 x i1> %12129, <8 x float> %a1143, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12130 = fcmp ogt <8 x float> %a1142, zeroinitializer
  %12131 = select <8 x i1> %12130, <8 x float> %a1142, <8 x float> zeroinitializer
  %12132 = fmul <8 x float> %12131, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %12133 = fptoui <8 x float> %12132 to <8 x i16>
  store <8 x i16> %12133, ptr %lsr.iv449, align 2, !tbaa !73
  %12134 = add nsw i32 %a1145, 1
  %lsr.iv.next445 = add i32 %lsr.iv444, -1
  %scevgep451 = getelementptr i1, ptr %lsr.iv449, i64 %9141
  %.not84 = icmp eq i32 %lsr.iv.next445, 0
  br i1 %.not84, label %"end for local_laplacian.s0.v5200", label %"for local_laplacian.s0.v5199"

"end for local_laplacian.s0.v5200":               ; preds = %"for local_laplacian.s0.v5199", %"for local_laplacian.s0.v3.v3195"
  %12135 = add nuw nsw i32 %local_laplacian.s0.v3.v3197, 1
  %.not83 = icmp eq i32 %12135, %9232
  br i1 %.not83, label %if.then.i283, label %"for local_laplacian.s0.v3.v3195"
}

; Function Attrs: nounwind
define i32 @local_laplacian(i32 %levels, float %alpha, float %beta, ptr noalias %input.buffer, ptr noalias %local_laplacian.buffer) local_unnamed_addr #4 {
entry:
  %.not = icmp eq ptr %input.buffer, null
  br i1 %.not, label %"assert failed", label %"assert succeeded", !prof !4

"assert failed":                                  ; preds = %entry
  %0 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str) #4
  br label %destructor_block

"assert succeeded":                               ; preds = %entry
  %.not1 = icmp eq ptr %local_laplacian.buffer, null
  br i1 %.not1, label %"assert failed10", label %"assert succeeded11", !prof !4

destructor_block:                                 ; preds = %"assert succeeded11", %"assert failed10", %"assert failed"
  %1 = phi i32 [ %0, %"assert failed" ], [ %2, %"assert failed10" ], [ %__local_laplacian_result, %"assert succeeded11" ]
  ret i32 %1

"assert failed10":                                ; preds = %"assert succeeded"
  %2 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str.2) #4
  br label %destructor_block

"assert succeeded11":                             ; preds = %"assert succeeded"
  %__local_laplacian_result = tail call i32 @__local_laplacian(i32 %levels, float %alpha, float %beta, ptr nonnull %input.buffer, ptr nonnull %local_laplacian.buffer) #4
  br label %destructor_block
}

; Function Attrs: nounwind
define i32 @local_laplacian_argv(ptr nocapture readonly %0) local_unnamed_addr #4 {
entry:
  %1 = load ptr, ptr %0, align 8
  %2 = load i32, ptr %1, align 4
  %3 = getelementptr ptr, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8
  %5 = load float, ptr %4, align 4
  %6 = getelementptr ptr, ptr %0, i64 2
  %7 = load ptr, ptr %6, align 8
  %8 = load float, ptr %7, align 4
  %9 = getelementptr ptr, ptr %0, i64 3
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %0, i64 4
  %12 = load ptr, ptr %11, align 8
  %13 = tail call i32 @local_laplacian(i32 %2, float %5, float %8, ptr %10, ptr %12) #9
  ret i32 %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define nonnull ptr @local_laplacian_metadata() local_unnamed_addr #5 {
entry:
  ret ptr @local_laplacian_metadata_storage
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.abs.i64(i64, i1 immarg) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i32> @llvm.smin.v8i32(<8 x i32>, <8 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i32> @llvm.smax.v8i32(<8 x i32>, <8 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.smin.v4i32(<4 x i32>, <4 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.smax.v4i32(<4 x i32>, <4 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.floor.v4f32(<4 x float>) #6

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #3 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #4 = { nounwind }
attributes #5 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
attributes #6 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #7 = { nobuiltin nounwind }
attributes #8 = { nounwind memory(none) }
attributes #9 = { noinline }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"clang version 3.9.1 "}
!1 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!2 = !{i32 2, !"halide_mcpu", !"haswell"}
!3 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!4 = !{!"branch_weights", i32 0, i32 1073741824}
!5 = !{!"branch_weights", i32 1073741824, i32 0}
!6 = !{!7, !7, i64 0}
!7 = !{!"f0", !8, i64 0}
!8 = !{!"Halide buffer"}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = distinct !{!12, !11, !10}
!13 = !{!14, !14, i64 0}
!14 = !{!"f75", !8, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"f76", !8, i64 0}
!17 = distinct !{!17, !10, !11}
!18 = distinct !{!18, !10}
!19 = !{!20, !20, i64 0}
!20 = !{!"f77", !8, i64 0}
!21 = distinct !{!21, !10, !11}
!22 = distinct !{!22, !10}
!23 = !{!24, !24, i64 0}
!24 = !{!"f78", !8, i64 0}
!25 = distinct !{!25, !10, !11}
!26 = distinct !{!26, !10}
!27 = !{!28, !28, i64 0}
!28 = !{!"f10", !8, i64 0}
!29 = !{!30, !30, i64 0}
!30 = !{!"f132", !8, i64 0}
!31 = !{!32, !32, i64 0}
!32 = !{!"f9", !8, i64 0}
!33 = !{!34, !34, i64 0}
!34 = !{!"f131", !8, i64 0}
!35 = !{!36, !36, i64 0}
!36 = !{!"f8", !8, i64 0}
!37 = !{!38, !38, i64 0}
!38 = !{!"f130", !8, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"input", !8, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"f2", !8, i64 0}
!43 = !{!44, !44, i64 0}
!44 = !{!"f4", !8, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"f5", !8, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"f72", !8, i64 0}
!49 = !{!50, !50, i64 0}
!50 = !{!"f6", !8, i64 0}
!51 = !{!52, !52, i64 0}
!52 = !{!"f73", !8, i64 0}
!53 = !{!54, !54, i64 0}
!54 = !{!"f7", !8, i64 0}
!55 = !{!56, !56, i64 0}
!56 = !{!"f74", !8, i64 0}
!57 = distinct !{!57, !10, !11}
!58 = distinct !{!58, !10}
!59 = distinct !{!59, !10, !11}
!60 = distinct !{!60, !10}
!61 = distinct !{!61, !10, !11}
!62 = distinct !{!62, !10}
!63 = !{!64, !64, i64 0}
!64 = !{!"f129", !8, i64 0}
!65 = !{!66, !66, i64 0}
!66 = !{!"f128", !8, i64 0}
!67 = !{!68, !68, i64 0}
!68 = !{!"f127", !8, i64 0}
!69 = !{!70, !70, i64 0}
!70 = !{!"f126", !8, i64 0}
!71 = !{!72, !72, i64 0}
!72 = !{!"f125", !8, i64 0}
!73 = !{!74, !74, i64 0}
!74 = !{!"local_laplacian", !8, i64 0}
!75 = !{!"branch_weights", i32 0, i32 -2147483648}
